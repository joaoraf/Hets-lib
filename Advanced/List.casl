spec Elem =
  sort Elem
end

spec List[Elem] = 
     free type List[Elem] ::= nil | cons(Elem; List[Elem])
     op __++__ : List[Elem] * List[Elem] -> List[Elem], assoc, unit nil
     op reverse : List[Elem] -> List[Elem]
     vars e:Elem; l,l':List[Elem]
     . %[concat_def]  cons(e,l) ++ l' = cons(e,l++l')
     . %[reverse_nl] reverse(nil) = nil
     . %[reverse_cons] reverse(cons(e,l)) = reverse(l) ++ cons(e,nil)
end


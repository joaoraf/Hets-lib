spec Map =
  sort Elem
  generated type Set ::= empty | { __ }(Elem) | __u__(Set;Set)
  op __u__ :Set*Set->Set, assoc,comm,unit empty,idem
  free type Map ::= empty | [__/__]__(Elem;Elem;Map)
  op apply : Map*Elem->?Elem
%%  preds surjection, injection, involution : Map
  var x,y,z:Elem; f:Map
  . %[apply_empty] not def apply(empty,x)
  . %[apply_x] apply([x/y]f,x) = y
  . %[apply_y] apply([x/y]f,z) = apply(f,z) if not x=z
%%  . %[invol_def] involution(f) <=> forall x:Elem 
%%      . def apply(f,apply(f,x))=> apply(f,apply(f,x))=x
%%  . %[surj_def] surjection(f) <=> true
%%  . %[inj_def] injection(f) <=> forall x,y:Elem . apply(f,x) =e= apply(f,y) => x=y  
end

library Advanced/PreNumbers
version 0.7
%% authors: M.Roggenbach, T.Mossakowski, L.Schröder
%% date: 16.3.01

%left_assoc __ + __, __ * __
%prec { __ + __ } < { __ * __, __/__ }

from Advanced/RelationsAndOrders version 0.7
get SigOrder, TotalOrder

spec SigPreNumbers[sort Elem] =
     SigOrder [sort Elem]
then
  ops 0,1:               Elem;
      __ + __, __ * __ : Elem * Elem -> Elem;
      abs:               Elem -> Elem;
end

spec GenerateNat =
  free type Nat ::= 0 | suc(pre:? Nat)
end

spec PreNat =
  GenerateNat 
then %def
{
  SigPreNumbers [sort Nat]
then
  forall  m,n: Nat

  . 1 = suc(0)                        %(PreNat_1_def)%

  . 0 <= n                            %(Nat_leq_def1)%
  . not (suc(m) <= 0)                 %(Nat_leq_def2)%
  . suc(m) <= suc(n) <=> m <= n       %(Nat_leq_def3)%

  . 0 + m = m                         %(Nat_add_0)%
  . suc(n) + m = suc(n + m)           %(Nat_add_suc)%

  . 0 * m = 0                         %(Nat_mult_0)%
  . suc(n) * m = (n * m) + m          %(Nat_mult_suc)%

  . abs(m)=m                          %(PreNat_abs)%
}
then %def
  sort Pos = { p: Nat . p > 0 }
  ops 1:Pos;
      __*__: Pos * Pos -> Pos;
      __+__: Pos * Nat -> Pos;
      __+__: Nat * Pos -> Pos;
      suc: Nat -> Pos
end

view TotalOrder_in_PreNat: TotalOrder to PreNat =
     sort Elem |-> Nat
end

spec GenerateInt =
  PreNat
then %def
  generated type Int ::= __ - __(Nat;Nat)
  forall a,b,c,d: Nat
  .  a - b = c - d <=> a + d = c + b    %(Int_equality)%
end

spec PreInt =
  GenerateInt
then %def
  sort Nat < Int
  forall a: Nat
  .  a = a - 0                          %(Int_Nat_embedding)%
then %def
{
  SigPreNumbers [sort Int]	     
then
     forall a,b,c,d: Nat
     . (a - b) + (c - d) = (a + c) - (b + d)   %(Int_add_def)%
     . (a - b) * (c - d) = 
       (a * c + b * d) - (b * c + a * d)       %(Int_mult_def)%
     . a-b <= c-d <=> a+d <= c+b               %(Int_leq_def)%
     . abs(a-b) = b-a  if b > a                %(Int_abs_def)%
}				
then %def
 op -__: Int -> Int
 forall a,b: Nat
 . - (a - b) = (b - a) 
end

view TotalOrder_in_PreInt: TotalOrder to PreInt =
  sort Elem |-> Int
end

spec GenerateRat =
  PreInt
then
 generated type Rat ::= __ / __ (Int;Pos)
 forall i,j: Int; p,q: Pos
 . i / p = j / q <=> i*q = j*p             %(Rat_equality)%
end

spec PreRat =
  GenerateRat
then %def
  sort Int < Rat
  forall i:Int
  . i / 1 = i             %(embeddingIntToRat)%
then %def
{
  SigPreNumbers [sort Rat]	     
then
  forall n,m: Int; p,q:Pos
  . (n / p <= m / q <=> n * q <= m * p )             %(Rat_leq_def)%
  .  n / p + m / q = (n * q + m * p) / (p * q)       %(Rat_add_def)%
  . (n / p) * (m / q) = (n * m) / (p * q)            %(Rat_mult_def)%
  . abs(n / p)=abs(n) / p                            %(Rat_abs_def)%
}				
end

view TotalOrder_in_PreRat : TotalOrder to PreRat =
  sort Elem |-> Rat
end

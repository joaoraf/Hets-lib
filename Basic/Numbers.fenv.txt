spec Int =
sorts
  Nat,Pos < Int;
  Pos < Nat;
  Pos
ops
  +__ : Nat->Nat;
  +__ : Int->Int;
  -__ : Nat->Int;
  -__ : Int->Int;
  0 : Nat;
  0 : Int;
  1 : Nat;
  1 : Pos;
  1 : Int;
  2 : Nat;
  3 : Nat;
  4 : Nat;
  5 : Nat;
  6 : Nat;
  7 : Nat;
  8 : Nat;
  9 : Nat;
  Nat : Int;
  __! : Nat->Nat;
  __*__ : Nat*Nat->Nat;
  __*__ : Pos*Pos->Pos;
  __*__ : Int*Int->Int;
  __+__ : Nat*Nat->Nat;
  __+__ : Nat*Pos->Pos;
  __+__ : Pos*Nat->Pos;
  __+__ : Int*Int->Int;
  __-?__ : Nat*Nat->?Nat;
  __-__ : Nat*Nat->Int;
  __-__ : Int*Int->Int;
  __/?__ : Nat*Nat->?Nat;
  __/?__ : Int*Int->?Int;
  __@@__ : Nat*Nat->Nat;
  __^__ : Nat*Nat->Nat;
  __^__ : Int*Nat->Int;
  __div__ : Nat*Nat->?Nat;
  __div__ : Int*Int->?Int;
  __mod__ : Nat*Nat->?Nat;
  __mod__ : Int*Int->?Nat;
  __quot__ : Nat*Nat->?Nat;
  __quot__ : Int*Int->?Int;
  __rem__ : Nat*Nat->?Nat;
  __rem__ : Int*Int->?Int;
  abs : Nat->Nat;
  abs : Int->Nat;
  max : Nat*Nat->Nat;
  max : Int*Int->Int;
  min : Nat*Nat->Nat;
  min : Int*Int->Int;
  pre : Nat->?Nat;
  sign : Int->Int;
  suc : Nat->Nat;
  suc : Nat->Pos
preds
  __<=__ : Nat*Nat;
  __<=__ : Int*Int;
  __<__ : Nat*Nat;
  __<__ : Int*Int;
  __>=__ : Nat*Nat;
  __>=__ : Int*Int;
  __>__ : Nat*Nat;
  __>__ : Int*Int;
  even : Nat;
  even : Int;
  odd : Nat;
  odd : Int
generated
  { sorts Nat  ops 0 : Nat; suc : Nat->Nat }
forall X0 : Nat
  . X0 = pre(suc(X0))   %(selector___pre)%
forall Y0 : Nat
  . not 0 = suc(Y0)   %(disjoint___0___suc)%
forall X0 : Nat;Y0 : Nat
  . suc(X0) = suc(Y0) => X0 = Y0   %(injective___suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( 0 <= n )   %(Nat_leq_def1)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . not ( suc(n) <= 0 )   %(Nat_leq_def2)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( suc(m) <= suc(n) ) <=> ( m <= n )   %(Nat_leq_def3)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m >= n ) <=> ( n <= m )   %(Nat_geq_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m < n ) <=> ( m <= n ) /\ not m = n   %(Nat_less_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m > n ) <=> ( m < n )   %(Nat_greater_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( 0 + m ) = m   %(Nat_add_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( suc(n) + m ) = suc(( n + m ))   %(Nat_add_suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( 0 * m ) = 0   %(Nat_mult_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( suc(n) * m ) = ( ( n * m ) + m )   %(Nat_mult_suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m ^ 0 ) = 1   %(Nat_power_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m ^ suc(n) ) = ( m * ( m ^ n ) )   %(Nat_power_suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . min(m,n) = m when ( m <= n ) else n   %(Nat_min_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . max(m,n) = n when ( m <= n ) else m   %(Nat_max_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . (+ m ) = m   %(plus_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . abs(n) = n   %(Nat_abs)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . odd(m) <=> not even(m)   %(Nat_odd_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . even(0)   %(Nat_even_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . even(suc(m)) <=> odd(m)   %(Nat_even_suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( 0 !) = 1   %(Nat_factorial_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( suc(n) !) = ( suc(n) * ( n !) )   %(Nat_factorial_suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m -? n ) = r <=> m = ( r + n )   %(Nat_sub_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . not def ( m /? 0 )   %(Nat_divide_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( n > 0 ) => (( m /? n ) = r <=> m = ( r * n ))   %(Nat_divide_Pos)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m div n ) = r <=> (exists s : Nat . (m = ( ( n * r ) + s ) /\ ( s < n )))   %(Nat_div)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m mod n ) = s <=> (exists r : Nat . (m = ( ( n * r ) + s ) /\ ( s < n )))   %(Nat_mod)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m quot n ) = ( m div n )   %(Nat_quot)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m rem n ) = ( m mod n )   %(Nat_rem)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 1 = suc(0)   %(Nat_1_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 2 = suc(1)   %(Nat_2_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 3 = suc(2)   %(Nat_3_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 4 = suc(3)   %(Nat_4_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 5 = suc(4)   %(Nat_5_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 6 = suc(5)   %(Nat_6_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 7 = suc(6)   %(Nat_7_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 8 = suc(7)   %(Nat_8_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 9 = suc(8)   %(Nat_9_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m @@ n ) = ( ( m * suc(9) ) + n )   %(Nat_decimal_def)%
forall p : Nat
  . p in Pos <=> ( p > 0 )  
  . suc(0) as Pos = 1  
forall x : Nat;y : Nat
  . min(x,y) = min(y,x)   %(comm_law___min)%
forall x : Nat;y : Nat
  . max(x,y) = max(y,x)   %(comm_law___max)%
forall x : Nat;y : Nat;z : Nat
  . min(x,min(y,z)) = min(min(x,y),z)   %(assoc_law___min)%
forall x : Nat;y : Nat;z : Nat
  . max(x,max(y,z)) = max(max(x,y),z)   %(assoc_law___max)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m -? n ) <=> ( m >= n )   %(Nat_sub_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m /? n ) <=> ( m mod n ) = 0   %(Nat_divide_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m div n ) <=> not n = 0   %(Nat_div_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m mod n ) <=> not n = 0   %(Nat_mod_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m quot n ) <=> not n = 0   %(Nat_quot_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m rem n ) <=> not n = 0   %(Nat_rem_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . ( ( r + s ) * t ) = ( ( r * t ) + ( s * t ) )   %(Nat_distr)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . max(m,0) = m   %(Nat_max_unit)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . min(m,0) = 0   %(Nat_min_0)%
generated
  { sorts Int  ops __-__ : Nat*Nat->Int }
forall a : Nat;b : Nat;c : Nat;d : Nat
  . ( a - b ) = ( c - d ) <=> ( a + d ) = ( c + b )   %(Int_equality)%
forall a : Nat
  . a = ( a - 0 )   %(Int_Nat_embedding)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( ( a - b ) + ( c - d ) ) = ( ( a + c ) - ( b + d ) )   %(Int_add_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( ( a - b ) * ( c - d ) ) = ( ( ( a * c ) + ( b * d ) ) - ( ( b * c ) + ( a * d ) ) )   %(Int_mult_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m - n ) = ( m + (- n ) )   %(Int_sub_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . (+ m ) = m   %(Int_pos_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . (- ( a - b ) ) = ( b - a )   %(Int_neg_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . sign(m) = 0 when m = 0 else 1 when ( m > 0 ) else (- 1 )   %(Int_sign_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m <= n ) <=> ( n - m ) in Nat   %(Int_leq_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m >= n ) <=> ( n <= m )   %(Int_geq_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m < n ) <=> ( m <= n ) /\ not m = n   %(Int_less_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m > n ) <=> ( m < n )   %(Int_greater_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . min(m,n) = m when ( m <= n ) else n   %(Int_min_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . max(m,n) = n when ( m <= n ) else m   %(Int_max_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m < 0 ) => abs(m) = (- m )   %(Int_abs_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( (- 1 ) ^ a ) = 1 when even(a) else (- 1 )   %(Int_neg1_power_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m ^ a ) = ( ( sign(m) ^ a ) * ( abs(m) ^ a ) )   %(Int_power_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . even(m) <=> even(abs(m))   %(Int_even_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . odd(m) <=> not even(m)   %(Int_odd_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m /? n ) = ( ( sign(m) * sign(n) ) * ( abs(m) /? abs(n) ) )   %(Int_divide)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . not n = 0 => ( ( m mod n ) < abs(n) )   %(Int_mod_range)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . not n = 0 => m = ( ( ( m div n ) * n ) + ( m mod n ) )   %(Int_mod__div_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . not def ( m mod 0 )   %(Int_mod_zero)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . not def ( m div 0 )   %(Int_div_zero)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m quot n ) = ( ( sign(m) * sign(n) ) * ( abs(m) quot abs(n) ) )   %(Int_quot_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m rem n ) = ( ( sign(m) * sign(n) ) * ( abs(m) rem abs(n) ) )   %(Int_rem_def)%
generated
  { sorts Int  ops -__ : Nat->Int; Nat : Int }
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . def ( a -? b ) => ( a -? b ) = ( a - b )   %(Int_Nat_sub_compat)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . m = ( sign(m) * abs(m) )   %(Int_abs_decomp)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . odd(m) <=> odd(abs(m))   %(Int_odd_alt)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . ( m /? n ) = r <=> not n = 0 /\ ( n * r ) = n   %(Int_divide_dom1)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . def ( m /? n ) <=> ( m mod n ) = 0   %(Int_divide_dom2)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . def ( m mod n ) <=> not n = 0   %(Int_mod_dom)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . ( m mod n ) = ( m mod abs(n) )   %(Int_mod_abs)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . def ( m div n ) <=> not n = 0   %(Int_div_dom)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . def ( m quot n ) <=> not n = 0   %(Int_quot_dom)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . def ( m rem n ) <=> not n = 0   %(Int_rem_dom)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . not n = 0 => m = ( ( ( m quot n ) * n ) + ( m rem n ) )   %(Int_quot_rem)%
end

spec Nat =
sorts
  Pos < Nat;
  Pos
ops
  +__ : Nat->Nat;
  0 : Nat;
  1 : Nat;
  1 : Pos;
  2 : Nat;
  3 : Nat;
  4 : Nat;
  5 : Nat;
  6 : Nat;
  7 : Nat;
  8 : Nat;
  9 : Nat;
  __! : Nat->Nat;
  __*__ : Nat*Nat->Nat;
  __*__ : Pos*Pos->Pos;
  __+__ : Nat*Nat->Nat;
  __+__ : Nat*Pos->Pos;
  __+__ : Pos*Nat->Pos;
  __-?__ : Nat*Nat->?Nat;
  __/?__ : Nat*Nat->?Nat;
  __@@__ : Nat*Nat->Nat;
  __^__ : Nat*Nat->Nat;
  __div__ : Nat*Nat->?Nat;
  __mod__ : Nat*Nat->?Nat;
  __quot__ : Nat*Nat->?Nat;
  __rem__ : Nat*Nat->?Nat;
  abs : Nat->Nat;
  max : Nat*Nat->Nat;
  min : Nat*Nat->Nat;
  pre : Nat->?Nat;
  suc : Nat->Nat;
  suc : Nat->Pos
preds
  __<=__ : Nat*Nat;
  __<__ : Nat*Nat;
  __>=__ : Nat*Nat;
  __>__ : Nat*Nat;
  even : Nat;
  odd : Nat
generated
  { sorts Nat  ops 0 : Nat; suc : Nat->Nat }
forall X0 : Nat
  . X0 = pre(suc(X0))   %(selector___pre)%
forall Y0 : Nat
  . not 0 = suc(Y0)   %(disjoint___0___suc)%
forall X0 : Nat;Y0 : Nat
  . suc(X0) = suc(Y0) => X0 = Y0   %(injective___suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( 0 <= n )   %(Nat_leq_def1)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . not ( suc(n) <= 0 )   %(Nat_leq_def2)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( suc(m) <= suc(n) ) <=> ( m <= n )   %(Nat_leq_def3)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m >= n ) <=> ( n <= m )   %(Nat_geq_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m < n ) <=> ( m <= n ) /\ not m = n   %(Nat_less_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m > n ) <=> ( m < n )   %(Nat_greater_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( 0 + m ) = m   %(Nat_add_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( suc(n) + m ) = suc(( n + m ))   %(Nat_add_suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( 0 * m ) = 0   %(Nat_mult_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( suc(n) * m ) = ( ( n * m ) + m )   %(Nat_mult_suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m ^ 0 ) = 1   %(Nat_power_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m ^ suc(n) ) = ( m * ( m ^ n ) )   %(Nat_power_suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . min(m,n) = m when ( m <= n ) else n   %(Nat_min_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . max(m,n) = n when ( m <= n ) else m   %(Nat_max_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . (+ m ) = m   %(plus_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . abs(n) = n   %(Nat_abs)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . odd(m) <=> not even(m)   %(Nat_odd_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . even(0)   %(Nat_even_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . even(suc(m)) <=> odd(m)   %(Nat_even_suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( 0 !) = 1   %(Nat_factorial_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( suc(n) !) = ( suc(n) * ( n !) )   %(Nat_factorial_suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m -? n ) = r <=> m = ( r + n )   %(Nat_sub_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . not def ( m /? 0 )   %(Nat_divide_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( n > 0 ) => (( m /? n ) = r <=> m = ( r * n ))   %(Nat_divide_Pos)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m div n ) = r <=> (exists s : Nat . (m = ( ( n * r ) + s ) /\ ( s < n )))   %(Nat_div)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m mod n ) = s <=> (exists r : Nat . (m = ( ( n * r ) + s ) /\ ( s < n )))   %(Nat_mod)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m quot n ) = ( m div n )   %(Nat_quot)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m rem n ) = ( m mod n )   %(Nat_rem)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 1 = suc(0)   %(Nat_1_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 2 = suc(1)   %(Nat_2_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 3 = suc(2)   %(Nat_3_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 4 = suc(3)   %(Nat_4_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 5 = suc(4)   %(Nat_5_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 6 = suc(5)   %(Nat_6_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 7 = suc(6)   %(Nat_7_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 8 = suc(7)   %(Nat_8_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 9 = suc(8)   %(Nat_9_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m @@ n ) = ( ( m * suc(9) ) + n )   %(Nat_decimal_def)%
forall p : Nat
  . p in Pos <=> ( p > 0 )  
  . suc(0) as Pos = 1  
forall x : Nat;y : Nat
  . min(x,y) = min(y,x)   %(comm_law___min)%
forall x : Nat;y : Nat
  . max(x,y) = max(y,x)   %(comm_law___max)%
forall x : Nat;y : Nat;z : Nat
  . min(x,min(y,z)) = min(min(x,y),z)   %(assoc_law___min)%
forall x : Nat;y : Nat;z : Nat
  . max(x,max(y,z)) = max(max(x,y),z)   %(assoc_law___max)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m -? n ) <=> ( m >= n )   %(Nat_sub_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m /? n ) <=> ( m mod n ) = 0   %(Nat_divide_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m div n ) <=> not n = 0   %(Nat_div_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m mod n ) <=> not n = 0   %(Nat_mod_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m quot n ) <=> not n = 0   %(Nat_quot_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m rem n ) <=> not n = 0   %(Nat_rem_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . ( ( r + s ) * t ) = ( ( r * t ) + ( s * t ) )   %(Nat_distr)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . max(m,0) = m   %(Nat_max_unit)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . min(m,0) = 0   %(Nat_min_0)%
end

spec Rat =
sorts
  Nat,Pos < Int;
  Pos < Nat;
  Pos;
  Int,Nat,Pos < Rat
ops
  +__ : Nat->Nat;
  +__ : Int->Int;
  +__ : Rat->Rat;
  -__ : Nat->Int;
  -__ : Int->Int;
  -__ : Rat->Rat;
  0 : Nat;
  0 : Int;
  0 : Rat;
  1 : Nat;
  1 : Pos;
  1 : Int;
  1 : Rat;
  2 : Nat;
  3 : Nat;
  4 : Nat;
  5 : Nat;
  6 : Nat;
  7 : Nat;
  8 : Nat;
  9 : Nat;
  Nat : Int;
  __! : Nat->Nat;
  __*__ : Nat*Nat->Nat;
  __*__ : Pos*Pos->Pos;
  __*__ : Int*Int->Int;
  __*__ : Rat*Rat->Rat;
  __+__ : Nat*Nat->Nat;
  __+__ : Nat*Pos->Pos;
  __+__ : Pos*Nat->Pos;
  __+__ : Int*Int->Int;
  __+__ : Rat*Rat->Rat;
  __-?__ : Nat*Nat->?Nat;
  __-__ : Nat*Nat->Int;
  __-__ : Int*Int->Int;
  __-__ : Rat*Rat->Rat;
  __/?__ : Nat*Nat->?Nat;
  __/?__ : Int*Int->?Int;
  __/__ : Int*Pos->Rat;
  __/__ : Rat*Rat->?Rat;
  __@@__ : Nat*Nat->Nat;
  __^__ : Nat*Nat->Nat;
  __^__ : Int*Nat->Int;
  __^__ : Rat*Int->Rat;
  __div__ : Nat*Nat->?Nat;
  __div__ : Int*Int->?Int;
  __mod__ : Nat*Nat->?Nat;
  __mod__ : Int*Int->?Nat;
  __quot__ : Nat*Nat->?Nat;
  __quot__ : Int*Int->?Int;
  __rem__ : Nat*Nat->?Nat;
  __rem__ : Int*Int->?Int;
  abs : Nat->Nat;
  abs : Int->Nat;
  abs : Rat->Rat;
  max : Nat*Nat->Nat;
  max : Int*Int->Int;
  max : Rat*Rat->Rat;
  min : Nat*Nat->Nat;
  min : Int*Int->Int;
  min : Rat*Rat->Rat;
  pre : Nat->?Nat;
  sign : Int->Int;
  suc : Nat->Nat;
  suc : Nat->Pos
preds
  __<=__ : Nat*Nat;
  __<=__ : Int*Int;
  __<=__ : Rat*Rat;
  __<__ : Nat*Nat;
  __<__ : Int*Int;
  __<__ : Rat*Rat;
  __>=__ : Nat*Nat;
  __>=__ : Int*Int;
  __>=__ : Rat*Rat;
  __>__ : Nat*Nat;
  __>__ : Int*Int;
  __>__ : Rat*Rat;
  even : Nat;
  even : Int;
  odd : Nat;
  odd : Int
generated
  { sorts Nat  ops 0 : Nat; suc : Nat->Nat }
forall X0 : Nat
  . X0 = pre(suc(X0))   %(selector___pre)%
forall Y0 : Nat
  . not 0 = suc(Y0)   %(disjoint___0___suc)%
forall X0 : Nat;Y0 : Nat
  . suc(X0) = suc(Y0) => X0 = Y0   %(injective___suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( 0 <= n )   %(Nat_leq_def1)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . not ( suc(n) <= 0 )   %(Nat_leq_def2)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( suc(m) <= suc(n) ) <=> ( m <= n )   %(Nat_leq_def3)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m >= n ) <=> ( n <= m )   %(Nat_geq_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m < n ) <=> ( m <= n ) /\ not m = n   %(Nat_less_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m > n ) <=> ( m < n )   %(Nat_greater_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( 0 + m ) = m   %(Nat_add_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( suc(n) + m ) = suc(( n + m ))   %(Nat_add_suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( 0 * m ) = 0   %(Nat_mult_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( suc(n) * m ) = ( ( n * m ) + m )   %(Nat_mult_suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m ^ 0 ) = 1   %(Nat_power_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m ^ suc(n) ) = ( m * ( m ^ n ) )   %(Nat_power_suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . min(m,n) = m when ( m <= n ) else n   %(Nat_min_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . max(m,n) = n when ( m <= n ) else m   %(Nat_max_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . (+ m ) = m   %(plus_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . abs(n) = n   %(Nat_abs)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . odd(m) <=> not even(m)   %(Nat_odd_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . even(0)   %(Nat_even_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . even(suc(m)) <=> odd(m)   %(Nat_even_suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( 0 !) = 1   %(Nat_factorial_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( suc(n) !) = ( suc(n) * ( n !) )   %(Nat_factorial_suc)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m -? n ) = r <=> m = ( r + n )   %(Nat_sub_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . not def ( m /? 0 )   %(Nat_divide_0)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( n > 0 ) => (( m /? n ) = r <=> m = ( r * n ))   %(Nat_divide_Pos)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m div n ) = r <=> (exists s : Nat . (m = ( ( n * r ) + s ) /\ ( s < n )))   %(Nat_div)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m mod n ) = s <=> (exists r : Nat . (m = ( ( n * r ) + s ) /\ ( s < n )))   %(Nat_mod)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m quot n ) = ( m div n )   %(Nat_quot)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m rem n ) = ( m mod n )   %(Nat_rem)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 1 = suc(0)   %(Nat_1_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 2 = suc(1)   %(Nat_2_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 3 = suc(2)   %(Nat_3_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 4 = suc(3)   %(Nat_4_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 5 = suc(4)   %(Nat_5_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 6 = suc(5)   %(Nat_6_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 7 = suc(6)   %(Nat_7_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 8 = suc(7)   %(Nat_8_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . 9 = suc(8)   %(Nat_9_def)%
forall m : Nat;n : Nat;r : Nat;s : Nat
  . ( m @@ n ) = ( ( m * suc(9) ) + n )   %(Nat_decimal_def)%
forall p : Nat
  . p in Pos <=> ( p > 0 )  
  . suc(0) as Pos = 1  
forall x : Nat;y : Nat
  . min(x,y) = min(y,x)   %(comm_law___min)%
forall x : Nat;y : Nat
  . max(x,y) = max(y,x)   %(comm_law___max)%
forall x : Nat;y : Nat;z : Nat
  . min(x,min(y,z)) = min(min(x,y),z)   %(assoc_law___min)%
forall x : Nat;y : Nat;z : Nat
  . max(x,max(y,z)) = max(max(x,y),z)   %(assoc_law___max)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m -? n ) <=> ( m >= n )   %(Nat_sub_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m /? n ) <=> ( m mod n ) = 0   %(Nat_divide_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m div n ) <=> not n = 0   %(Nat_div_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m mod n ) <=> not n = 0   %(Nat_mod_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m quot n ) <=> not n = 0   %(Nat_quot_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . def ( m rem n ) <=> not n = 0   %(Nat_rem_dom)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . ( ( r + s ) * t ) = ( ( r * t ) + ( s * t ) )   %(Nat_distr)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . max(m,0) = m   %(Nat_max_unit)%
forall x : Nat;m : Nat;n : Nat;r : Nat;s : Nat;t : Nat;p : Pos
  . min(m,0) = 0   %(Nat_min_0)%
generated
  { sorts Int  ops __-__ : Nat*Nat->Int }
forall a : Nat;b : Nat;c : Nat;d : Nat
  . ( a - b ) = ( c - d ) <=> ( a + d ) = ( c + b )   %(Int_equality)%
forall a : Nat
  . a = ( a - 0 )   %(Int_Nat_embedding)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( ( a - b ) + ( c - d ) ) = ( ( a + c ) - ( b + d ) )   %(Int_add_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( ( a - b ) * ( c - d ) ) = ( ( ( a * c ) + ( b * d ) ) - ( ( b * c ) + ( a * d ) ) )   %(Int_mult_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m - n ) = ( m + (- n ) )   %(Int_sub_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . (+ m ) = m   %(Int_pos_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . (- ( a - b ) ) = ( b - a )   %(Int_neg_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . sign(m) = 0 when m = 0 else 1 when ( m > 0 ) else (- 1 )   %(Int_sign_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m <= n ) <=> ( n - m ) in Nat   %(Int_leq_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m >= n ) <=> ( n <= m )   %(Int_geq_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m < n ) <=> ( m <= n ) /\ not m = n   %(Int_less_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m > n ) <=> ( m < n )   %(Int_greater_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . min(m,n) = m when ( m <= n ) else n   %(Int_min_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . max(m,n) = n when ( m <= n ) else m   %(Int_max_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m < 0 ) => abs(m) = (- m )   %(Int_abs_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( (- 1 ) ^ a ) = 1 when even(a) else (- 1 )   %(Int_neg1_power_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m ^ a ) = ( ( sign(m) ^ a ) * ( abs(m) ^ a ) )   %(Int_power_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . even(m) <=> even(abs(m))   %(Int_even_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . odd(m) <=> not even(m)   %(Int_odd_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m /? n ) = ( ( sign(m) * sign(n) ) * ( abs(m) /? abs(n) ) )   %(Int_divide)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . not n = 0 => ( ( m mod n ) < abs(n) )   %(Int_mod_range)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . not n = 0 => m = ( ( ( m div n ) * n ) + ( m mod n ) )   %(Int_mod__div_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . not def ( m mod 0 )   %(Int_mod_zero)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . not def ( m div 0 )   %(Int_div_zero)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m quot n ) = ( ( sign(m) * sign(n) ) * ( abs(m) quot abs(n) ) )   %(Int_quot_def)%
forall m : Int;n : Int;r : Int;s : Int;a : Nat;b : Nat;c : Nat;d : Nat
  . ( m rem n ) = ( ( sign(m) * sign(n) ) * ( abs(m) rem abs(n) ) )   %(Int_rem_def)%
generated
  { sorts Int  ops -__ : Nat->Int; Nat : Int }
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . def ( a -? b ) => ( a -? b ) = ( a - b )   %(Int_Nat_sub_compat)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . m = ( sign(m) * abs(m) )   %(Int_abs_decomp)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . odd(m) <=> odd(abs(m))   %(Int_odd_alt)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . ( m /? n ) = r <=> not n = 0 /\ ( n * r ) = n   %(Int_divide_dom1)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . def ( m /? n ) <=> ( m mod n ) = 0   %(Int_divide_dom2)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . def ( m mod n ) <=> not n = 0   %(Int_mod_dom)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . ( m mod n ) = ( m mod abs(n) )   %(Int_mod_abs)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . def ( m div n ) <=> not n = 0   %(Int_div_dom)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . def ( m quot n ) <=> not n = 0   %(Int_quot_dom)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . def ( m rem n ) <=> not n = 0   %(Int_rem_dom)%
forall m : Int;n : Int;r : Int;a : Nat;b : Nat
  . not n = 0 => m = ( ( ( m quot n ) * n ) + ( m rem n ) )   %(Int_quot_rem)%
generated
  { sorts Rat  ops __/__ : Int*Pos->Rat }
forall i : Int;j : Int;p : Pos;q : Pos
  . ( i / p ) = ( j / q ) <=> ( i * q ) = ( j * p )   %(Rat_equality)%
forall i : Int
  . ( i / 1 ) = i   %(embeddingIntToRat)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . ( ( i / p ) <= ( j / q ) ) <=> ( ( i * q ) <= ( j * p ) )   %(Rat_leq_def)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . ( x >= y ) <=> ( y <= x )   %(Rat_geq_def)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . ( x < y ) <=> ( x <= y ) /\ not x = y   %(Rat_less_def)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . ( x > y ) <=> ( y < x )   %(Rat_greater_def)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . ( ( i / p ) + ( j / q ) ) = ( ( ( i * q ) + ( j * p ) ) / ( p * q ) )   %(Rat_add_def)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . ( x - y ) = ( x + (- y ) )   %(Rat_sub_def)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . ( ( i / p ) * ( j / q ) ) = ( ( i * j ) / ( p * q ) )   %(Rat_mult_def)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . not def ( x / 0 )   %(Rat_divide_def1)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . not y = 0 => (( x / y ) = z <=> z = ( x * y ))   %(Rat_divide_def2)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . (+ x ) = x   %(Rat_plus_def)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . (- ( i / p ) ) = ( (- i ) / p )   %(Rat_minus_def)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . abs(( i / p )) = ( abs(i) / p )   %(Rat_abs_def)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . ( x ^ 0 ) = 1   %(Rat_power_0)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . ( x ^ suc(n) ) = ( x * ( x ^ n ) )   %(Rat_power_suc)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . ( x ^ (- p ) ) = ( 1 / ( x ^ p ) )   %(Rat_power_neg)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . min(x,y) = x when ( x <= y ) else y   %(Rat_min_def)%
forall p : Pos;q : Pos;n : Nat;i : Int;j : Int;x : Rat;y : Rat;z : Rat
  . max(x,y) = y when ( x <= y ) else x   %(Rat_max_def)%
forall i : Int;j : Int;p : Pos;q : Pos
  . ( ( i / p ) - ( j / q ) ) = ( ( ( i * q ) - ( j * p ) ) / ( p * q ) )   %(Rat_sub_rule)%
forall i : Int;j : Int;p : Pos;q : Pos
  . not j = 0 => ( ( i / p ) / ( j / q ) ) = ( ( i / p ) * ( q / j ) )   %(Rat_divide_rule)%
end

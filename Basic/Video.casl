spec
     VideoTapesAndMovies = 
     ExactFixedPointNumber [op L=[24,60,60]] 
     with sort Efpn |-> Time 
and
     String with op show: Nat -> String 
     %% assuming that there is a converting function show to display numbers 
then
     sorts
          VideoTape; 
          Movie 

     pred
          __hasSufficientSpaceFor__: VideoTape × Movie 

     op
          time: 
                        Nat × Nat × Nat × Nat ->? Time; 
          t180, 
          t240, 
          t300: 
                        Time; 
          lengthOfTape: 
                        VideoTape -> Time; 
          recordedTime: 
                        VideoTape -> Time; 
          lenghtOfMovie: 
                        Movie -> Time; 
          show: 
                        Time -> String; 

     forall
         v: VideoTape; m: Movie; d,h,m,s: Nat 
     .         time(d,h,m,s) = make(4,d) + make(3,h) + make(2,m) + make(1,s) 
     .         t180=time(0,3,0,0) 
     .         t240=time(0,4,0,0) 
     .         t300=time(0,5,0,0) 
     .          lenghtOfTape(v)= t180 \/ lenghtOfTape(v)= t240 \/ 
          lenghtOfTape(v)= t300 

     .         recordedTime(v) <= lenghtOfTape(v) 
     .          v hasSufficientSpaceFor m <=> 
          lenghtOfMovie(m) <= lenghtOfTape(v)-recordedTime(v) 

     .          show(time(d,h,m,s)) = 
                              show(d) + + ':' + + show(h) + + ':' + + 
                              show(m) + + ':' + + show(s) 

then
     %%implies 
     forall
         d,h,m,s: Nat 
     .         def time(d,h,m,s) <=> h <= 24 /\ m <= 60 /\ s <= 60 
end

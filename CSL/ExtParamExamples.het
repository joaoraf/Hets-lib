library CSL/ExtParamExamples

logic CSL

%% newton method with 2 functions
spec E2 =
     . y[I=0] := x^2 - o %(A1)%
     . z[I=0] := -2*x %(B1)%
     . y[I=1] := cos(x) %(A2)%
     . z[I=1] := sin(x) %(B2)%
     . x[I=1] := 10 %(C2)%
     . x := 100 %(C1)%
     . o := 3 %(offset)%  %% consider also o[I=0] := 3
     . repeat
       . x := x + y/z %(D)%
     until abs(y) < 0.001

    %% query for x alone is ambiguous, it makes only sense if we ask x[I=0] or x[I=1]
end

%% default value example
spec E3 =
     . y := x^2 - o %(A1)%
     . y[I=1] := cos(x) %(A2)%
     . x[I=1] := 10 %(B2)%
     . x := 100 %(B1)%

     %% Propagation stop symbol: "-|"
     . z[I-|] := y + y[I=1] %(C)%

     . t := x + z %(C)%

    %% query for t alone means default value selection, t[I=0] is undefined and t[I=1] depends on values for I=1

end

%% simplest repeat
spec E4 =
     . y := x/2 %(A)%
     . x := 10 %(B)%
     . x[I=0] := 12 %(C)%
     . repeat
       . x := y %(D)%
     until abs(y) < 0.001
end

%% Example for Range Computation
spec E5 =
     . r[I>1] := 2 %(A)%
     . r := 1 %(B)%
     . p[I>0] := r %(C)%
     . p := 20 %(D)%

     . t := p+1 %(E)%

     %% Q: How many ranges does exist for t? A: 3; t[I=1]=1+1, t[I>1]=2+1, t=20+1
end

%% * EXAMPLES FOR OVERWRITING PARAMETER VALUES FOR TESTING ITS CONSEQUENCES

spec E6 =
     . z := 1 %(A)%
     . z[I=2] := 30 %(B)%
     . z[I=1] := 10 %(C)%
     . x := z[I=1] + z[I=2] + z %(D)%
end

%% Good Example (Split on J=0)
spec E7 =
     . y[I=1,J=0] := 20 %(A)%
     . y[I=0] := 30 %(B)%
     . y[I=1] := 10 %(C)%
     . x := y[I=1] + y[I=0] %(D)%
end

%% Good Example 2 (Double Split, J=0, J=2)
spec E8 =
     . y[I=1,J=0] := 20 %(A)%
     . y[I=0,J=2] := 35 %(B.1)%
     . y[I=0] := 30 %(B)%
     . y[I=1] := 10 %(C)%
     . x := y[I=1] + y[I=0] %(D)%
end

%% Good Example 3 (Symmetric Double Split, J=0)
spec E80 =
     . y[I=1,J=0] := 20 %(A)%
     . y[I=0,J=0] := 35 %(B.1)%
     . y[I=0] := 30 %(B)%
     . y[I=1] := 10 %(C)%
     . x := y[I=1] + y[I=0] %(D)%
end

%% partitioning example
spec E81 =
     . c[I>0] := a[I=0] + b %(A)%
     . b[I=1,J=0] := 20 %(B)%
     . b[I>1,J=1] := 23 %(C)%
     . b := 231 %(D)%
     . a[I>=0,J>0] := 201 %(E)%
     . a := 1 %(F)%
end



%% Good Example (fixing both dimensions)
spec E9 =
     . y[I=1,J=0] := 20 %(A)%
     . y[I=0] := 30 %(B)%
     . y[I=1] := 10 %(C)%
     . x := y[I=1] + y[J=0] %(D)%
end

%% allowed overlapping illustration
spec E10 =
     . y[I=1,J=0] := 20 %(A)%
     . y[I>0] := 30 %(B)%
     . y[I>2] := 30 %(C)%
     . y[I=1] := 10 %(D)%
end

%% forbidden overlapping illustration (A,B,C intersect nonempty without being inclusions)
spec E11 =
     . y[I=1,J=0] := 20 %(A)%
     . y[I>0,J>2] := 30 %(B)%
     . y[I>2] := 30 %(C)%
     . y[I=1] := 10 %(D)%
end

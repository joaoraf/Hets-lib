library Calculi/Algebra/BooleanAlgebra

version 0.1
%author: S. Wölfl
%date: 03-06-2005

%( 
    This library defines some basic concepts from the  theory of 
	Boolean algebras. Some specs are just here to remove some 
	"junk" from other libraries 
)%


%left_assoc __cup__,__cap__,__cmps__
%prec {__cup__} < {__cmps__} 



from Basic/RelationsAndOrders version 0.7 get  
	BooleanAlgebra |-> WeakBooleanAlgebra,
	ExtBooleanAlgebra, 
	RichBooleanAlgebra
from Basic/RelationsAndOrders version 0.7 get  
	StrictOrder |-> StrictPartialOrder


spec BooleanAlgebra =
     WeakBooleanAlgebra
then
     . not 0 = 1
end


spec ExtBooleanAlgebraByCompl[BooleanAlgebra] = %def
     { ExtBooleanAlgebra[BooleanAlgebra]
	hide preds __<=__, __<__, __>=__, __>__} 
then %implies
     forall x,y: Elem
     . compl(0) = 1
     . compl(1) = 0
end


spec BooleanAlgebraWithCompl = ExtBooleanAlgebraByCompl[BooleanAlgebra]


spec ExtBooleanAlgebraByOrderRelations[BooleanAlgebra] = %def
     { ExtBooleanAlgebra[BooleanAlgebra] 
	hide op compl } 
then %def
     pred Atom: Elem

     forall x,y:Elem
     . Atom(x) <=> not x = 0 /\ (forall y:Elem . y < x => y = 0) %(def_Atom)%
end


spec BooleanAlgebraWithOrderRelations = 
	ExtBooleanAlgebraByOrderRelations[BooleanAlgebra]
end


view BooleanAlgebraWithOrderRelations_as_StrictPartialOrder : 
     StrictPartialOrder to BooleanAlgebraWithOrderRelations
end



spec AtomicBooleanAlgebra =
     { BooleanAlgebraWithOrderRelations hide pred Atom }
then
     sort AtomElem = {x: Elem . not x = 0 /\ (forall y:Elem . y < x => y = 0)}
     forall x:Elem
     . not x = 0 => (exists y:AtomElem . y <= x) 	
end


%[
spec ExtBooleanAlgebraByCompl[BooleanAlgebra] = %def
 
     op compl: Elem -> Elem

     forall x,y:Elem
     . compl(x)=y <=> x cup y = 1 /\ x cap y = 0    
                                            %(compl_def_ExtBooleanAlgebra)%
then %implies
     forall x,y: Elem
     . compl(0) = 1
     . compl(1) = 0
     . compl(x cap y) = compl(x) cup compl(y)             %(de_Morgan1)%
     . compl(x cup y) = compl(x) cap compl(y)             %(de_Morgan2)%
     . compl(compl(x)) = x        %(involution_compl_ExtBooleanAlgebra)%
end


spec ExtBooleanAlgebraByPartialOrder[BooleanAlgebra] = %def

     preds 
	   __<=__, __<__, __>=__, __>__: Elem * Elem;
	   Atom: Elem

     forall x,y:Elem
     . x <= y <=> x cap y = x           %(leq_def_ExtBooleanAlgebra)%
     . x >= y <=> y <= x                %(geq_def_ExtBooleanAlgebra)%
     . x < y <=> (x <= y /\ not (x=y))  %(less_def_ExtBooleanAlgebra)%
     . x > y <=> y < x                  %(greater_def_ExtBooleanAlgebra)%
     . Atom(x) <=> not x = 0 /\ (forall y:Elem . y < x => y = 0) %(def_Atom)%
end
]%
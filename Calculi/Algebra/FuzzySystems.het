library Calculi/Algebra/FuzzySystems
version 0.1
%authors: Regivan Hugo Nunes Santiago, Christian Maeder
%date: 2008-06-24
%email: Christian.Maeder@dfki.de

%{
    This library defines some basic concepts for fuzzy systems
}%

%display  __intersection__ %LATEX __\cap__
%display  __union__        %LATEX __\cup__

from Basic/RelationsAndOrders get TotalOrder

spec UnitInterval = TotalOrder with Elem |-> UnitInterval
then
     ops 0 : UnitInterval; 1 : UnitInterval
     var x : UnitInterval
     . 0 <= x %(ge_0)%
     . x <= 1 %(le_1)%

spec MonotoneJunctor[UnitInterval] =
     op J : UnitInterval * UnitInterval -> UnitInterval, comm, assoc
     vars x, y, z, w : UnitInterval
     . x <= y /\ w <= z => J(x, w) <= J(y, z) %(monotonicity)%

spec TNorm[UnitInterval] = MonotoneJunctor[UnitInterval] with J |-> T
then
     forall x : UnitInterval . T(x, 1) = x %(boundary_1)%

spec TConorm[UnitInterval] = MonotoneJunctor[UnitInterval] with J |-> C
then
     forall x : UnitInterval . C(x, 0) = x %(boundary_0)%

spec Complement[UnitInterval] =
     op compl __ : UnitInterval -> UnitInterval
     . compl 0 = 1
     . compl 1 = 0

spec Junctors[UnitInterval] = TNorm[UnitInterval]
and TConorm[UnitInterval]
and Complement[UnitInterval]
then vars x, y : UnitInterval
     %% de Morgan ??
     . compl T(x, y) = C(compl x, compl y)
     . compl C(x, y) = T(compl x, compl y)

spec FuzzySet[Junctors[UnitInterval]][sort Universe] =
     sort FuzzySet
     %% application
     op __@__ : FuzzySet * Universe -> UnitInterval
     ops __intersection__, __union__ : FuzzySet * FuzzySet -> FuzzySet,
         comm, assoc %implied
     op complement __ : FuzzySet -> FuzzySet
     vars x : Universe; A, B: FuzzySet
     . A = B <=> forall x : Universe . A @ x = B @ x %(extensionality)%
     . (A intersection B) @ x = T(A @ x, B @ x)
     . (A union B) @ x = C(A @ x, B @ x)
     . complement A @ x = compl (A @ x)

from Basic/Numbers get Rat

spec ConcretUnitInterval = Rat
then sort UnitInterval = { x : Rat . 0 <= x /\ x <= 1 }

spec ConcretFuzzySet [sort Universe] given ConcretUnitInterval =
     FuzzySet[Junctors[UnitInterval]][sort Universe]

spec FuzzyNumber = ConcretFuzzySet[sort Rat] with FuzzySet |-> PreFuzzyNumber
then sort QuasiFuzzyNumber =
     { x : PreFuzzyNumber
       . true %(convex)%
       /\ true %(piecewise_continuous)% }
     sort FuzzyNumber = 
     { x : QuasiFuzzyNumber
       . true %(normalized)% }

spec Value [sort Universe] given ConcretUnitInterval =
     free type Value ::=
          ConfValue (rawValue : Universe; cf : UnitInterval)

spec Trapez = FuzzyNumber
then op trapez : Rat * Rat * Rat * Rat ->? FuzzyNumber
     vars x, a, b, c, d : Rat; t : FuzzyNumber
     . a <= b /\ b <= c /\ c <= d => def trapez(a, b, c, d)
     . x <= a /\ t = trapez(a, b, c, d)
       => t @ x = 0
     . a < x /\ x <= b /\ t = trapez(a, b, c, d)
       => t @ x = (x - a) / (b - a)
     . b <= x /\ x <= c /\ t = trapez(a, b, c, d)
       => t @ x = 1
     . c < x /\ x <= d /\ t = trapez(a, b, c, d)
       => t @ x = (d - x) / (d - c)
     . d <= x /\ t = trapez(a, b, c, d)
       => t @ x = 0

spec Triange = Trapez
then op triangle : Rat * Rat * Rat ->? FuzzyNumber
     vars a, b, c : Rat
     . triangle (a, b, c) = trapez(a, b, b, c)

from Basic/StructuredDatatypes get String, Set, Map

spec FiniteFuzzySet = String
then Value[sort String] %% a linguistic term
then Set[sort Value] %% a finite set of linguistic terms

spec ConfidenceMap = String and FuzzyNumber
then Map[sort String][sort QuasiFuzzyNumber]

spec LinguisticVariable[sort Range] = FiniteFuzzySet and ConfidenceMap
then sort Range < Rat
     generated type LVar ::= LVar(
       String;
       Set[Value];
       Map[String, QuasiFuzzyNumber])?

spec Sing = FuzzyNumber
then op Sing __ : Rat -> PreFuzzyNumber
     var r, s : Rat
     . Sing r @ s = 1 when r = s else 0
     sort Sing =
     { x : PreFuzzyNumber
       . exists r: Rat . Sing r = x }
     
spec Fuzzify[sort Range] = Sing and LinguisticVariable[sort Range]
then op fuzzify : PreFuzzyNumber * LVar -> LVar
     vars name: String;
          A : PreFuzzyNumber;
          CM : Map[String, QuasiFuzzyNumber];
          S, Ta : Set[Value];
          v, va : UnitInterval
     . (forall t : String . (forall x : Range . exists y : Range .
         va = min(A @ y, lookup(t, CM) @ y)
         /\ va >= min(A @ x, lookup(t, CM) @ x)) /\
       ConfValue(t, v) eps S <=> ConfValue(t, va) eps Ta)
       => fuzzify(A, LVar(name, S, CM)) = LVar(name, Ta, CM)        

library Calculi/Algebra/RelationAlgebra
version 0.4
%author: T. Mossakowski, K. Lüttich, S. Wölfl
%date: 29-05-2005

%( 
    This library defines some basic concepts from the 
    theory of relation algebras 
)%


%left_assoc __cup__,__cap__,__cmps__
%prec {__cup__} < {__cmps__} 
%prec {__cmps__} < {__cmpl__} 


from Basic/Numbers get Nat
from Basic/RelationsAndOrders version 0.7 get BooleanAlgebra
%% from Basic/StructuredDatatypes get Set
from Calculi/Algebra/Auxiliary get Set
from Calculi/Algebra/Auxiliary get BooleanAlgebraWithCompl,
	ExtBooleanAlgebraByPartialOrder,
	AtomicBooleanAlgebra,
	InvolutedSemiGroup,
	InvolutedMonoid	 


%( 
    First we define the concept of a relation algebra,
    according to I. Hodkinson, Atom structures of relation algebras, 1995.  
)%




spec RelationAlgebra  =
     BooleanAlgebraWithCompl with sort Elem |-> Rel 
and
     InvolutedMonoid with sort Elem |-> Rel, 
			   ops __*__ |-> __cmps__, 
				 inv |-> inv, 
                                   e |-> id
then 
     forall x,y,z:Rel
     . (x cup y) cmps z = (x cmps z) cup (y cmps z)		%(cmps_cup_rdistrib)%
     . inv(x cup y) = inv(x) cup inv(y)				%(inv_cup)%
     . inv(0) = 0						%(inv_0)%
     . 0 cmps x = 0						%(rcmps_0)%
     . inv(compl(x)) = compl(inv(x))				%(inv_compl)%
     . x cup (1 cmps x) = 1 cmps x				%(compl_cl_1)%
     . compl(1 cmps x) = 1 cmps compl(1 cmps x)		        %(compl_cl_2)%
     
then %implies 
     forall x,y,z:Rel
     . x cmps 0 = 0						%(lcmps_0)%
     . z cmps (x cup y) = (z cmps x) cup (z cmps y)	  	%(cmps_cup_ldistrib)%
%% Das folgende muesste schon als Axiom vorhanden sein:
     . inv(x cmps y) = inv(y) cmps inv(x)			%(inv_cmps)%
     . (x cmps y) cap inv(z) = 0 => (y cmps z) cap inv(x) = 0 	%(triangle)% 
     . (inv(x) cmps compl(x cmps y)) cap y = 0                 	%(RelAlg)%
     . (x cmps y) cap z = 0 => (inv(x) cmps z) cap y = 0 	%(lPeircean)%
     . (x cmps y) cap z = 0 => (z cmps inv(y)) cap x = 0 	%(rPeircean)%
%% Das folgende gilt vermutlich nicht:
    . not x = 0 => 1 cmps x cmps 1 = 1				%(tarski)%
%% Sicher  aber:
    . x cmps 1 = 1 /\ not x = 0 => 1 cmps x cmps 1 = 1 		%(tarski1)%
%% sowie ????
    . 1 cmps compl(x) = 1 /\ not x = 0 => 1 cmps x cmps 1 = 1	%(tarski2)%
    . x = 0 <=> inv(x) cmps x = 0				%(nnull)%
     
end



spec ExtRelationAlgebraByPartialOrder[RelationAlgebra] = %def
     ExtBooleanAlgebraByPartialOrder[BooleanAlgebra] with sort Elem |-> Rel

then %implies
    forall x,y,z,x',y': Rel
    . x <= x' /\ y <= y' => x cmps y <= x' cmps y'	%(cmps_monotonic)%
    . x <= id => inv(x) = x					%(inv_below_id)%
%% Das folgende muesste schon als Axiom vorhanden sein:
    . inv(id) = id						%(inv_id)%
    . x cmps y <= z => inv(x) cmps compl(z) <= compl(y)	%(schreoeder_1)%
    . inv(x) cmps compl(z) <= compl(y)  =>  
	compl(z) cmps inv(y) <= compl(x) 			%(schreoeder_2)%
    . compl(z) cmps inv(y) <= compl(x)  => x cmps y <= z  	%(schreoeder_3)%
    . (x cmps y) cap z <= 
	(x cap (z cmps inv(y))) cmps (y cap (inv(x) cmps z))    %(dedekind)%
    . x cmps (y cap z) <= (x cmps y) cap (x cmps z)		%(cmps_cap_lsuistrib)%
    . (y cap z) cmps x <= (y cmps x) cap (z cmps x)		%(cmps_cap_rsubdistrib)%

end


spec RelationAlgebraWithPartialOrder = 
     ExtRelationAlgebraByPartialOrder[RelationAlgebra]


spec IntegralRelationAlgebra =
     RelationAlgebraWithPartialOrder
then 
     . Atom(id)
then %implies
     forall x,y:Rel
     . x cmps y = 0 => x=0 \/ y = 0
end


spec SymmetricRelationAlgebra =
     RelationAlgebra
then 
     forall x:Rel
     . inv(x) = x
end


spec CommutativeRelationAlgebra =
     RelationAlgebra
then 
     op
	  __cmps__: Rel * Rel -> Rel, assoc, comm, unit id
end

	

spec AtomicRelationAlgebra = 
     { RelationAlgebraWithPartialOrder hide pred Atom }
and
     AtomicBooleanAlgebra with sort Elem |-> Rel, AtomElem |-> AtomRel
end



%( New relation algebras from others )%

spec RelationAlgebraF = %def
      RelationAlgebra with 
	sort Rel |-> RelF,
	ops __cap__  |-> __capF__,
	    __cup__  |-> __cupF__,
	    __cmps__ |-> __cmpsF__,
	       compl |-> complF,
		inv  |-> invF,
	           0 |-> zF,
		   1 |-> oF,
		  id |-> idF
end   		     

spec RelationAlgebraS = %def
      RelationAlgebra with 
	sort Rel |-> RelS,
	ops __cap__  |-> __capS__,
	    __cup__  |-> __cupS__,
	    __cmps__ |-> __cmpsS__,
	       compl |-> complS,
		inv  |-> invS,
	           0 |-> zS,
		   1 |-> oS,
		  id |-> idS
end   		     


spec CartProdRelationAlgebras [RelationAlgebraF][RelationAlgebraS] =
     generated type Rel ::= __-__ (first:RelF;second:RelS) 
     forall xF,yF:RelF; uS,vS:RelS
     . xF-uS = yF-vS <=> xF = yF /\ uS = vS	
     forall x,y:Rel
     . x = y <=> first(x) = first(y) /\ second(x) = second(y)
     
then %def
     ops __cup__,__cap__,__cmps__: Rel * Rel -> Rel;
	 compl,inv: Rel -> Rel;
         0,1,id:Rel
     forall x,y:Rel
     . x cup y = (first(x) cupF first(y))-(second(x) cupS second(y))    
     . x cap y = (first(x) capF first(y))-(second(x) capS second(y))    
     . x cmps y = (first(x) cmpsF first(y))-(second(x) cmpsS second(y))    
     . compl(x) = complF(first(x))-complS(second(x))
     . inv(x) = invF(first(x))-invS(second(x))
     . 0 = zF-zS
     . 1 = oF-oS
     . id = idF-idS
end


view CartProdRelationAlgebras_as_RelationAlgebra:
     RelationAlgebra to 
     CartProdRelationAlgebras[RelationAlgebraF][RelationAlgebraS] 
end











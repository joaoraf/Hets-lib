library Calculi/Algebra/RelationAlgebra
version 0.2
%author: T. Mossakowski, K. Lüttich, S. Wölfl
%date: 07-02-2005

%( 
    This library defines some basic concepts from the 
    theory of relation algebras 
)%


%left_assoc __cup__,__cap__
%prec {__cup__} < {__cmps__} 
%prec {__cmps__} < {__cmpl__} 


from Basic/Numbers get Nat
from Basic/RelationsAndOrders version 0.7 get BooleanAlgebra
%% from Basic/StructuredDatatypes get Set
from Calculi/Algebra/Auxiliary get Set
from Calculi/Algebra/Auxiliary get BooleanAlgebraWithCompl,
		ExtBooleanAlgebraByPartialOrder,AtomicBooleanAlgebra 



%( 
    First we define the concept of a relation algebra,
    according to I. Hodkinson, Atom structures of relation algebras, 1995.  
)%




spec RelationAlgebra  =
     BooleanAlgebraWithCompl with sort Elem |-> Rel 
then
     ops
	        id: Rel;
	      conv: Rel -> Rel;
	  __cmps__: Rel * Rel -> Rel, assoc, unit id;
	
     forall x,y,z: Rel
     . conv(conv(x)) = x					%(conv_idempot)%
     . conv(x cup y) = conv(x) cup conv(y)			%(conv_cup)%
     . conv(compl(x)) = compl(conv(x))				%(conv_compl)%
     . conv(x cmps y) = conv(y) cmps conv(x)			%(conv_cmps)%
     . (x cmps y) cap conv(z) = 0 => (y cmps z) cap conv(x) = 0 %(triangle)% 

then %implies
     forall x,y,z: Rel
     . (x cup y) cmps z = (x cmps z) cup (y cmps z)		%(cmps_cup_rdistrib)%
     . z cmps (x cup y) = (z cmps x) cup (z cmps y)	  	%(cmps_cup_ldistrib)%
     . (conv(x) cmps compl(x cmps y)) cap y = 0                 %(RelAlg)%
     . (x cmps y) cap z = 0 => (conv(x) cmps z) cap y = 0 	%(lPeircean)%
     . (x cmps y) cap z = 0 => (z cmps conv(y)) cap x = 0 	%(rPeircean)%
end


spec ExtRelationAlgebraByPartialOrder[RelationAlgebra] = %def
     ExtBooleanAlgebraByPartialOrder[BooleanAlgebra] with sort Elem |-> Rel

then %implies
    forall x,y,z,x',y': Rel
    . x <= x' /\ y <= y' => x cmps y <= x' cmps y'    		%(cmps_monotonic)%
    . x <= id => conv(x) = x					%(conv_below_id)%
    . conv(id) = id						%(conv_id)%
end


spec RelationAlgebraWithPartialOrder = 
     ExtRelationAlgebraByPartialOrder[RelationAlgebra]


spec IntegralRelationAlgebra =
     RelationAlgebraWithPartialOrder
then 
     . Atom(id)
then %implies
     forall x,y:Rel
     . x cmps y = 0 => x=0 \/ y = 0
end


spec SymmetricRelationAlgebra =
     RelationAlgebra
then 
     forall x:Rel
     . conv(x) = x
end


spec CommutativeRelationAlgebra =
     RelationAlgebra
then 
     op
	  __cmps__: Rel * Rel -> Rel, assoc, comm, unit id
end

	

spec AtomicRelationAlgebra = 
     { RelationAlgebraWithPartialOrder hide pred Atom }
and
     AtomicBooleanAlgebra with sort Elem |-> Rel, Atom |-> AtomRel
end











library Calculi/Algebra/RelationAlgebraModel

version 0.2
%author: S. Wölfl
%date: 03-06-2005

%( 
    This library defines some basic higher order concepts from the 
    theory of relation algebras (cf., for example, I. Hodkinson, Atom
    structures of relation algebras, 1995).
)%

from HasCASL/Set get Set
from Calculi/Algebra/RelationAlgebra get RelationAlgebra,
	ExtPseudoRelationAlgebraByOrderRelations, RelationAlgebraWithOrderRelations,
	AtomicRelationAlgebra
from Calculi/Algebra/RelationAlgebraSymbolic get CompositionTable
from Calculi/Algebra/BooleanAlgebra get BooleanAlgebraWithCompl


logic HasCASL


%( Part I: Set Algebras of Binary Relations and Algebras of Binary Relations
)% 




spec BinaryRelations[sort Elem] = 
     Set	
then 
     type Relation ::= abs(rep:Set(Elem*Elem))
end


spec FullAlgebraOfBinaryRelations[sort Elem] =
	BinaryRelations[sort Elem] with sort Relation |-> Relation
then %def
     ops
	 0,1,id:Relation;
         __cup__,__cap__,__cmps__: Relation * Relation -> Relation;
         compl__,inv__: Relation -> Relation

     forall r,s:Relation; x,y:Elem
     . rep(0) = emptySet
     . rep(1) = allSet
     . rep(r cup s) = rep(r) union rep(s)
     . rep(r cap s) = rep(r) intersection rep(s)
     . rep(compl(r)) = rep(1) \\ rep(r)
     . (x,y) isIn rep(id) <=> x = y
     . (x,y) isIn rep(r cmps s) <=> exists z:Elem . (x,z) isIn rep(r) /\ (z,y) isIn rep(s) 
     . (x,y) isIn rep(inv(r)) <=> (y,x) isIn rep(r)

then %implies 
     ops
         __cup__:  Relation * Relation -> Relation, assoc, comm, idem, unit 0;
	 __cap__:  Relation * Relation -> Relation, assoc, comm, idem, unit 1;
         __cmps__: Relation * Relation -> Relation, assoc, unit id;

     forall x:Relation
     . compl(compl(x)) = x 
     . inv(inv(x)) = x 
     . inv(id) = id
end



spec SetAlgebraOfBinaryRelations[sort Elem] =
     FullAlgebraOfBinaryRelations[sort Elem] 
then 
     sort Rel < Relation
     ops
	 0,1:Rel;
         __cup__,__cap__: Rel * Rel -> Rel;
         compl__: Rel -> Rel
	%% hide sort Relation 
then %implies 
     ops
         __cup__:  Rel * Rel -> Rel, assoc, comm, idem, unit 0;
	 __cap__:  Rel * Rel -> Rel, assoc, comm, idem, unit 1;
     forall x:Rel
     . compl(compl(x)) = x 
end



spec AlgebraOfBinaryRelations[sort Elem] =
     SetAlgebraOfBinaryRelations[sort Elem] 
then  
     ops
	 id:Rel;
         __cmps__:  Rel * Rel -> Rel;
         inv__: Rel -> Rel
end


view SetAlgebraOfBinaryRelations_as_BooleanAlgebraWithCompl:
     BooleanAlgebraWithCompl to SetAlgebraOfBinaryRelations[sort Elem]
=
     sort Elem |-> Rel 
end


view AlgebraOfBinaryRelations_as_RelationAlgebra:
     RelationAlgebra to AlgebraOfBinaryRelations[sort Elem]
=
     sort Rel |-> Rel
end


%( Part II: Models of Syntatic (Abstract) Relation Algebras 
)%


spec BaseRelationModel =
     BinaryRelations[sort Elem] with sort Relation |-> Relation      
then 
     type BaseRel < Relation   
%%    forall r:BaseRel . not rep(r) = emptySet
end


spec JEPDBaseRelationModel =
     BaseRelationModel
then
     forall x,y:Elem; r,s:BaseRel
     . exists r:BaseRel . (x,y) isIn rep(r)			%(JointlyExhaustive)%
     . not r = s => rep(r) intersection rep(s) = emptySet	%(PairwiseDisjoint)%
end



spec GenerateBooleanAlgebraModel[JEPDBaseRelationModel] = %def
     type Rel = {x:Relation . exists X:Set(BaseRel) .  
			(forall y,z:Elem . (y,z) isIn rep(x) <=> 
		(exists r:BaseRel . r isIn X /\ (y,z) isIn rep(r)))}
and
     SetAlgebraOfBinaryRelations[sort Elem]

then %implies
     type BaseRel < Rel
end


spec GenerateModelFromBaseRelationModel[JEPDBaseRelationModel] = %def
     GenerateBooleanAlgebraModel[JEPDBaseRelationModel] 
then %def
     ops
         id:Rel;
	 inv__: Rel -> Rel;
	 __cmps__: Rel * Rel -> Rel

     forall r,s:Rel; x,y:Elem
     . (x,y) isIn rep(id)  <=> x = y
     . (x,y) isIn rep(inv(r)) <=> (y,x) isIn rep(r)
     . (x,y) isIn rep(r cmps s) <=> exists z:Elem . (x,z) isIn rep(r) /\ (z,y) isIn rep(s)
end


spec GenerateWeakRelationAlgebraModel[JEPDBaseRelationModel] = 
     GenerateBooleanAlgebraModel[JEPDBaseRelationModel] 
then
     ops
         id:Rel;
	 inv__: Rel -> Rel;
	 __wcmps__: Rel * Rel -> Rel

     forall r,s:Rel; x,y:Elem
     . (x,y) isIn rep(id)  <=> x = y
     . (x,y) isIn rep(inv(r)) <=> (y,x) isIn rep(r)
     . exists z:Elem . (x,z) isIn rep(r) /\ (z,y) isIn rep(s) => (x,y) isIn rep(r cmps s)  
end







%( Part III: Representation Concepts for Relation Algebras
)% 


spec RepresentationOfRelationAlgebra [RelationAlgebra] =
     Set 
then
     sort Dom
     op int: Rel -> Set (Dom * Dom)

     forall r,s:Rel;x,y:Dom	
     . not (x,y) isIn int(0)
     . (x,y) isIn int(r cup s) <=> (x,y) isIn int(r) \/ (x,y) isIn int(s)
     . (x,y) isIn int(r cap s) <=> (x,y) isIn int(r) /\ (x,y) isIn int(s)
     . (x,y) isIn int(1) => ((x,y) isIn int(compl(r)) <=> not (x,y) isIn int(r))
     . (x,y) isIn int(id:Rel)  <=> x = y
     . (x,y) isIn int(inv(r)) <=> (y,x) isIn int(r)
     . (x,y) isIn int(r cmps s) <=> (exists z:Dom . (x,z) isIn int(r) /\ (z,y) isIn int(s))
end


spec CompleteRepresentationOfRelationAlgebra [RelationAlgebraWithOrderRelations] =
     RepresentationOfRelationAlgebra [RelationAlgebra] 
then
     forall x,y:Dom
     . (x,y) isIn int(1:Rel) => (exists r:Rel . Atom(r) /\ (x,y) isIn int(r))
end


view CompleteRepresentationOfRelationAlgebra_as_AtomicRelationAlgebra :
     AtomicRelationAlgebra to 
    { CompleteRepresentationOfRelationAlgebra[RelationAlgebraWithOrderRelations] 
	then %def
	sort AtomRel = {r:Rel . Atom(r)}
    }
end





%[
spec GenerateWeakRelationAlgebraModel[JEPDBaseRelationModel] = 
     GenerateBooleanAlgebraModel[JEPDBaseRelationModel] 
then %def
     ops
         id:Relation;
	 inv: Rel -> Relation;
	 __cmps__: Rel * Rel -> Relation

     forall r,s:Rel; x,y:Elem
     . 0 = emptySet:Set(Elem*Elem)
     . 1 = allSet:Set(Elem*Elem)
     . r cup s = r union s
     . r cap s = r intersection s
     . compl(r) = 1 \\ r
     . (x,y) isIn r cmps s <=> exists z:Elem . (x,z) isIn r /\ (z,y) isIn s 
     . (x,y) isIn inv(r) <=> (y,x) isIn r
     . (x,y) isIn id <=> x = y

then %implies 
     ops
         __cup__:  Rel * Rel -> Rel, assoc, comm, idem, unit 0;
	 __cap__:  Rel * Rel -> Rel, assoc, comm, idem, unit 1;  
         __cmps__: Rel * Rel -> Rel, assoc, unit id;
     forall x:Rel
     . compl(compl(x)) = x 
     . inv(inv(x)) = x 

     . (x,y) isIn rep(id)  <=> x = y
     . (x,y) isIn rep(inv(r)) <=> (y,x) isIn rep(r)
     . (x,y) isIn rep(r cmps s) <=> exists z:Elem . (x,z) isIn rep(r) /\ (z,y) isIn rep(s)
then %implies
     type BaseRel < Rel
end
]%



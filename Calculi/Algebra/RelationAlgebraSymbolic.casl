library Calculi/Algebra/RelationAlgebraSymbolic
version 0.2
%author: T. Mossakowski, K. Lüttich, S. Wölfl
%date: 12-05-2005

%( 
    This library contains specifications that describe how a relation
    algebra can be built from a finite set of base relations and a composition 
    table.
)%


%left_assoc __cup__,__cap__
%prec {__cup__} < {__cmps__} 
%prec {__cmps__} < {__cmpl__} 


from Basic/Numbers get Nat
%% from Basic/StructuredDatatypes get Set
from Calculi/Algebra/Auxiliary get Set
from Calculi/Algebra/Auxiliary get BooleanAlgebra,
	AtomicBooleanAlgebra, 	
	ExtBooleanAlgebraByPartialOrder
from Calculi/Algebra/RelationAlgebra get AtomicRelationAlgebra



%(
    If the set of base relations is JEPD, i.e., is the base relations are 
    pairwise disjoint and jointly exhaustive, unions of base relations can be
    represented as sets of base relations.
)%



spec SetRepresentationOfRelations[sort BaseRel] = %mono
     { Set[sort BaseRel fit Elem |-> BaseRel] 
	    with Set[BaseRel] |-> Rel,
	            __union__ |-> __cup__, 
             __intersection__ |-> __cap__ }
then %mono
     sort BaseRel < Rel
     ops 
	    0,1 : Rel;
	  compl : Rel -> Rel; 

     forall x:BaseRel; r:Rel
     . x = {x}
     . x eps 1
     . not x eps 0
     . compl(r) = 1 - r

then %implies
     ops
	  __cup__: Rel * Rel -> Rel, assoc, idem, comm, unit 1;
          __cap__: Rel * Rel -> Rel, assoc, idem, comm, unit 0;
 
     forall x,y:BaseRel; r:Rel
     . not x = y => x cap y = 0		
     . exists z:BaseRel . z eps r
     . r isSubsetOf 1
end



spec BaseRelations =
     sort BaseRel
end


spec GenerateRelations[BaseRelations] = %mono
     SetRepresentationOfRelations[sort BaseRel]
end


spec BooleanAlgebraOfRelations =  
     GenerateRelations[BaseRelations]
end


view BooleanAlgebraOfRelations_as_AtomicBooleanAlgebra :
     AtomicBooleanAlgebra to BooleanAlgebraOfRelations
= 
     Elem |-> Rel, AtomElem |-> BaseRel
end



spec CompositionTable =
     sorts BaseRel < Rel
     ops 
         id	 : BaseRel;	 	 
          1      : Rel;
	  __cup__: Rel * Rel -> Rel, assoc, idem, comm, unit 1;
         __cmps__: BaseRel * BaseRel -> Rel
     forall x:BaseRel
     . x cmps id = x
     . id cmps x = x
end


spec ConversesTable =
     sorts BaseRel < Rel
     ops 
          id     : BaseRel;
	  conv   : BaseRel -> BaseRel
     forall x:BaseRel
     . conv(id) = id
     . conv(conv(x)) = x
end



spec GenerateRelationAlgebra[BooleanAlgebraOfRelations][CompositionTable][ConversesTable] = %mono
     ops 
	  id	  : Rel;
          conv    : Rel -> Rel;
	  __cmps__: Rel * Rel -> Rel       

     forall x,y:BaseRel; u,v:Rel
     . conv(0) = 0
     . conv(u cup x) = conv(u) cup conv(x)
     . x cmps 0 = 0 /\ 0 cmps x = 0
     . (u cup x) cmps (v cup y) =
	  (u cmps v) cup (u cmps y) cup (x cmps v) cup (x cmps y)      

then %implies
     op __cmps__: Rel * Rel -> Rel, assoc, unit id;       
end



spec GeneratedRelationAlgebra = 
     GenerateRelationAlgebra[BooleanAlgebraOfRelations][CompositionTable][ConversesTable]
end


spec ExtGeneratedRelationAlgebra[GeneratedRelationAlgebra] = %def
     ExtBooleanAlgebraByPartialOrder[BooleanAlgebra with sort Elem |-> Rel]
%%     preds 
%%	__<__,__<=__,__>__,__>=__:Rel*Rel
%%     forall x,y:Rel
%%     . x < y  <=> x isSubsetOf y /\ not x = y
%%     . x <= y <=> x isSubsetOf y
%%     . x > y  <=> y isSubsetOf x /\ not x = y
%%     . x >= y <=> y isSubsetOf x		
end


spec RichGeneratedRelationAlgebra = 
     ExtGeneratedRelationAlgebra[GeneratedRelationAlgebra]
end


view GeneratedRelationAlgebra_as_AtomicRelationAlgebra:
     AtomicRelationAlgebra 
to
     RichGeneratedRelationAlgebra  
=
     Rel |-> Rel, AtomRel |-> BaseRel
end 









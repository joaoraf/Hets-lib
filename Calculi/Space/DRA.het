library Calculi/Space/DRA
version 0.1
%author: T. Soller
%date: 22-05-05
%% Dipol Calculi DRAx(y)

%{ Hier werden die Schnittstellen der Spezifikationen von Till Mossakowski und
Stefan Wörfl verwendet - siehe deren Paper: CASL Specifications of Qualitative
Calculi}% 

%left_assoc __cup__
%prec {__cup__} < {__cmps__}

from Calculi/Algebra/RelationAlgebraSymbolic get
	CompositionTable,
     	GenerateRelationAlgebra,
	RelationBase,
	SetRepresentationOfRelations
from Calculi/Algebra/RelationAlgebraModel get
	AlgebraOfBinaryRelations,
	GeneratePreModelFromBaseRelationModel,
	JEPDBaseRelationModel,
	Relation
from Calculi/Algebra/RelationAlgebra get RelationAlgebra,
        AtomicRelationAlgebra


spec BaseRelationsOfDRAc = %mono 
     free type BaseRel ::= rrrr | rrrl | rrlr | rrll | rlrr | rllr | rlll |
			   lrrr | lrrl | lrll | llrr | llrl | lllr | llll | 
			   ells | errs | lere | rele | slsr | srsl | lsel |
			   rser | sese | eses
end

spec CompositionTableOfDRAc = 
     sort BaseRel
     ops rrrr,rrrl,rrlr,rrll,rlrr,rllr,rlll,lrrr,lrrl,lrll,llrr,llrl,lllr,
	 llll,ells,errs,lere,rele,slsr,srsl,lsel,rser,sese,eses : BaseRel
and 
    CompositionTable

end

spec RelationBaseOfDRAc =
     SetRepresentationOfRelations[BaseRelationsOfDRAc]
and
     CompositionTableOfDRAc
end


view RelationBaseOfDRAc_as_RelationBase[BaseRelationsOfDRAc] :
     RelationBase[sort BaseRel] to RelationBaseOfDRAc
= 
     op id: BaseRel |-> sese
end 


spec DRAc =
     GenerateRelationAlgebra[RelationBaseOfDRAc fit op id:BaseRel |->
     sese:BaseRel]
end


spec BaseRelationsOfDRAf = %mono 
     free type BaseRel ::= rrrr | rrrl | rrlr | rrll | rlrr | rllr | rlll |
			   lrrr | lrrl | lrll | llrr | llrl | lllr | llll | 
			   ells | errs | lere | rele | slsr | srsl | lsel |
			   rser | sese | eses | 
			   ffbb | efbs | ifbi | bfii | sfsi | beie | bbff |
			   bsef | biif | iibf | sisf | iebe | ffff | fefe |
			   fifi | fbii | fsei | ebis | iifb | eifs | iseb |
			   bbbb | sbsb | ibib | lllb | llfl | llbr | llrf |
			   lirl | lfrr | lril | lrri | blrr | irrl | frrr |
			   rbrr | lbll | flll | brll | rfll | rlli | rrlf |
			   illr | rilr | rrbl | rlir | rrfr | rrrb 
end

spec CompositionTableOfDRAf = 
     sort BaseRel
     ops rrrr,rrrl,rrlr,rrll,rlrr,rllr,rlll,lrrr,lrrl,lrll,llrr,llrl,lllr,
	 llll,ells,errs,lere,rele,slsr,srsl,lsel,rser,sese,eses,ffbb,efbs,
	 ifbi,bfii,sfsi,beie,bbff,bsef,biif,iibf,sisf,iebe,ffff,fefe,fifi,
	 fbii,fsei,ebis,iifb,eifs,iseb,bbbb,sbsb,ibib,lllb,llfl,llbr,llrf,
	 lirl,lfrr,lril,lrri,blrr,irrl,frrr,rbrr,lbll,flll,brll,rfll,rlli,
	 rrlf,illr,rilr,rrbl,rlir,rrfr,rrrb : BaseRel
and 
    CompositionTable
then

%% the converses
  %% the reverse case could be got by idempotency

. conv(rrll) = llrr
. conv(llrr) = rrll

. conv(rrrl) = rlrr
. conv(rrlr) = lrrr 
. conv(rlrr) = rrrl
. conv(rllr) = lrrl
. conv(rlll) = llrl
. conv(lrrr) = rrlr
. conv(lrrl) = rllr
. conv(lrll) = lllr
. conv(llrl) = rlll
. conv(lllr) = lrll

. conv(ells) = lsel
. conv(errs) = rser
. conv(lere) = rele
. conv(rele) = lere
. conv(slsr) = srsl
. conv(srsl) = slsr
. conv(lsel) = ells
. conv(rser) = errs

. conv(ffbb) = bbff
. conv(efbs) = bsef
. conv(ifbi) = biif
. conv(bfii) = iibf
. conv(sfsi) = sisf
. conv(beie) = iebe 
. conv(bbff) = ffbb
. conv(bsef) = efbs
. conv(biif) = ifbi
. conv(iibf) = bfii
. conv(sisf) = sfsi
. conv(iebe) = beie

. conv(fbii) = iifb
. conv(fsei) = eifs
. conv(ebis) = iseb
. conv(iifb) = fbii
. conv(eifs) = fsei
. conv(iseb) = ebis

. conv(lllb) = lbll
. conv(llfl) = flll
. conv(llbr) = brll
. conv(llrf) = rfll
. conv(lirl) = rlli
. conv(lfrr) = rrlf
. conv(lril) = illr
. conv(lrri) = rilr
. conv(blrr) = rrbl
. conv(irrl) = rlir
. conv(frrr) = rrfr
. conv(rbrr) = rrrb

. conv(lbll) = lllb 
. conv(flll) = llfl
. conv(brll) = llbr
. conv(rfll) = llrf
. conv(rlli) = lirl
. conv(rrlf) = lfrr
. conv(illr) = lril
. conv(rilr) = lrri
. conv(rrbl) = blrr
. conv(rlir) = irrl
. conv(rrfr) = frrr
. conv(rrrb) = rbrr

  %% symmetric relations
. conv(rrrr) = rrrr
. conv(llll) = llll

. conv(eses) = eses

. conv(ffff) = ffff
. conv(fefe) = fefe
. conv(fifi) = fifi
. conv(bbbb) = bbbb
. conv(sbsb) = sbsb
. conv(ibib) = ibib 


%% compostion table - external from semantics!

%% komplette kompositionstabelle wird später hier noch eingefügt

end


spec RelationBaseOfDRAf =
     SetRepresentationOfRelations[BaseRelationsOfDRAf]
and
     CompositionTableOfDRAf
end


view RelationBaseOfDRAf_as_RelationBase[BaseRelationsOfDRAf] :
     RelationBase[sort BaseRel] to RelationBaseOfDRAf
= 
     op id: BaseRel |-> sese
end 


spec DRAf =
     GenerateRelationAlgebra[RelationBaseOfDRAf fit op id:BaseRel |->
     sese:BaseRel]
end


spec BaseRelationsOfDRAfp = %mono 
     free type BaseRel ::= rrrrp | rrrrA | rrrrn | rrllp | rrllP | rrlln |
			   llrrp | llrrP | llrrn | llllp | llllA | lllln |
			   rrrln | rrlrp | rlrrp | rllrp | rlllp | lrrrn |
			   lrrln | lrlln | llrln | lllrp | ellsp | errsn |
			   leren | relep | slsrp | srsln | lseln | rserp |
			   seseP | esesA | 
			   ffbbP | efbsP | ifbiP | bfiiP | sfsiP | beieP |
			   bbffP | bsefP | biifP | iibfP | sisfP | iebeP |
			   ffffA | fefeA | fifiA | fbiiA | fseiA | ebisA |
			   iifbA | eifsA | isebA | bbbbA | sbsbA | ibibA |
			   lllbp | llfln | llbrp | llrfn | lirln | lfrrn |
			   lriln | lrrin | blrrp | irrln | frrrn | rbrrp |
			   lblln | flllp | brlln | rfllp | rllip | rrlfp |
			   illrp | rilrp | rrbln | rlirp | rrfrp | rrrbn 
end


spec CompositionTableOfDRAfp = 
     sort BaseRel
     ops rrrrp,rrrrA,rrrrn,rrllp,rrllP,rrlln,llrrp,llrrP,llrrn,llllp,llllA,
	 lllln,rrrln,rrlrp,rlrrp,rllrp,rlllp,lrrrn,lrrln,lrlln,llrln,lllrp,
	 ellsp,errsn,leren,relep,slsrp,srsln,lseln,rserp,seseP,esesA, 
	 ffbbP,efbsP,ifbiP,bfiiP,sfsiP,beieP,bbffP,bsefP,biifP,iibfP,sisfP,
	 iebeP,ffffA,fefeA,fifiA,fbiiA,fseiA,ebisA,iifbA,eifsA,isebA,bbbbA,
	 sbsbA,ibibA,lllbp,llfln,llbrp,llrfn,lirln,lfrrn,lriln,lrrin,blrrp,
	 irrln,frrrn,rbrrp,lblln,flllp,brlln,rfllp,rllip,rrlfp,illrp,rilrp,
	 rrbln,rlirp,rrfrp,rrrbn : BaseRel

and 
    CompositionTable
then

%% the converses
  %% the reverse case could be got by idempotency

. conv(rrrrp) = rrrrn
. conv(rrrrn) = rrrrp

. conv(rrllp) = llrrn
. conv(rrllP) = llrrP
. conv(rrlln) = llrrp

. conv(llrrp) = rrlln
. conv(llrrP) = rrllP
. conv(llrrn) = rrllp

. conv(llllp) = lllln
. conv(lllln) = llllp

. conv(rrrln) = rlrrp
. conv(rrlrp) = lrrrn 
. conv(rlrrp) = rrrln
. conv(rllrp) = lrrln
. conv(rlllp) = llrln
. conv(lrrrn) = rrlrp
. conv(lrrln) = rllrp
. conv(lrlln) = lllrp
. conv(llrln) = rlllp
. conv(lllrp) = lrlln

. conv(ellsp) = lseln
. conv(errsn) = rserp
. conv(leren) = relep
. conv(relep) = leren
. conv(slsrp) = srsln
. conv(srsln) = slsrp
. conv(lseln) = ellsp
. conv(rserp) = errsn

. conv(ffbbP) = bbffP
. conv(efbsP) = bsefP
. conv(ifbiP) = biifP
. conv(bfiiP) = iibfP
. conv(sfsiP) = sisfP
. conv(beieP) = iebeP 
. conv(bbffP) = ffbbP
. conv(bsefP) = efbsP
. conv(biifP) = ifbiP
. conv(iibfP) = bfiiP
. conv(sisfP) = sfsiP
. conv(iebeP) = beieP

. conv(fbiiA) = iifbA
. conv(fseiA) = eifsA
. conv(ebisA) = isebA
. conv(iifbA) = fbiiA
. conv(eifsA) = fseiA
. conv(isebA) = ebisA

. conv(lllbp) = lblln
. conv(llfln) = flllp
. conv(llbrp) = brlln
. conv(llrfn) = rfllp
. conv(lirln) = rllip
. conv(lfrrn) = rrlfp
. conv(lriln) = illrp
. conv(lrrin) = rilrp
. conv(blrrp) = rrbln
. conv(irrln) = rlirp
. conv(frrrn) = rrfrp
. conv(rbrrp) = rrrbn

. conv(lblln) = lllbp 
. conv(flllp) = llfln
. conv(brlln) = llbrp
. conv(rfllp) = llrfn
. conv(rllip) = lirln
. conv(rrlfp) = lfrrn
. conv(illrp) = lriln
. conv(rilrp) = lrrin
. conv(rrbln) = blrrp
. conv(rlirp) = irrln
. conv(rrfrp) = frrrn
. conv(rrrbn) = rbrrp

  %% symmetric relations
. conv(rrrrA) = rrrrA
. conv(llllA) = llllA

. conv(esesA) = esesA

. conv(ffffA) = ffffA
. conv(fefeA) = fefeA
. conv(fifiA) = fifiA
. conv(bbbbA) = bbbbA
. conv(sbsbA) = sbsbA
. conv(ibibA) = ibibA 


%% some stuff from compostion table - external from semantics!

  %% transitive relations
. (ffbbP cmps ffbbP) = ffbbP
. (bbffP cmps bbffP) = bbffP
. (rrllP cmps rrllP) = rrllP
. (llrrP cmps llrrP) = llrrP

end

spec RelationBaseOfDRAfp =
     SetRepresentationOfRelations[BaseRelationsOfDRAfp]
and
     CompositionTableOfDRAfp
end


view RelationBaseOfDRAfp_as_RelationBase[BaseRelationsOfDRAfp] :
     RelationBase[sort BaseRel] to RelationBaseOfDRAfp
= 
     op id: BaseRel |-> seseP
end


spec DRAfp =
     GenerateRelationAlgebra[RelationBaseOfDRAfp fit op id:BaseRel |->
     seseP:BaseRel]
end


view DRAf2fp_Refinement: 
     {DRAf with rrrl|->rrrln, rrlr|->rrlrp,
		rlrr|->rlrrp, rllr|->rllrp,
		rlll|->rlllp, lrrr|->lrrrn,
		lrrl|->lrrln, lrll|->lrlln,
		llrl|->llrln, lllr|->lllrp,
		ells|->ellsp, errs|->errsn,
		lere|->leren, rele|->relep,
		slsr|->slsrp, srsl|->srsln,
		lsel|->lseln, rser|->rserp,
		sese|->seseP, eses|->esesA,
		ffbb|->ffbbP, efbs|->efbsP,
		ifbi|->ifbiP, bfii|->bfiiP,
		sfsi|->sfsiP, beie|->beieP,
		bbff|->bbffP, bsef|->bsefP,
		biif|->biifP, iibf|->iibfP,
		sisf|->sisfP, iebe|->iebeP,
		ffff|->ffffA, fefe|->fefeA,
		fifi|->fifiA, fbii|->fbiiA,
		fsei|->fseiA, ebis|->ebisA,
		iifb|->iifbA, eifs|->eifsA,
		iseb|->isebA, bbbb|->bbbbA,
		sbsb|->sbsbA, ibib|->ibibA,
		lllb|->lllbp, llfl|->llfln,
		llbr|->llbrp, llrf|->llrfn,
		lirl|->lirln, lfrr|->lfrrn,
		lril|->lriln, lrri|->lrrin,
		blrr|->blrrp, irrl|->irrln,
		frrr|->frrrn, rbrr|->rbrrp,
		lbll|->lblln, flll|->flllp,
		brll|->brlln, rfll|->rfllp,
		rlli|->rllip, rrlf|->rrlfp,
		illr|->illrp, rilr|->rilrp,
		rrbl|->rrbln, rlir|->rlirp,
		rrfr|->rrfrp, rrrb|->rrrbn }
 
to   { DRAfp then %def

     ops rrrr, rrll, llrr, llll  : Rel

     . rrrr = rrrrA cup rrrrp cup rrrrn 
     . rrll = rrllP cup rrllp cup rrlln
     . llrr = llrrP cup llrrp cup llrrn
     . llll = llllA cup llllp cup lllln
     }

=    sort BaseRel |-> Rel
 
end


view DRAf2c_Embedding: 
     { DRAf then %def
     . ffbb = 0
     . efbs = 0
     . ifbi = 0
     . bfii = 0
     . sfsi = 0
     . beie = 0
     . bbff = 0
     . bsef = 0
     . biif = 0
     . iibf = 0
     . sisf = 0
     . iebe = 0
     . ffff = 0
     . fefe = 0
     . fifi = 0
     . fbii = 0
     . fsei = 0
     . ebis = 0
     . iifb = 0
     . eifs = 0
     . iseb = 0
     . bbbb = 0
     . sbsb = 0
     . ibib = 0
     . lllb = 0
     . llfl = 0
     . llbr = 0
     . llrf = 0
     . lirl = 0
     . lfrr = 0
     . lril = 0
     . lrri = 0
     . blrr = 0
     . irrl = 0
     . frrr = 0
     . rbrr = 0
     . lbll = 0
     . flll = 0
     . brll = 0
     . rfll = 0
     . rlli = 0
     . rrlf = 0
     . illr = 0
     . rilr = 0
     . rrbl = 0
     . rlir = 0
     . rrfr = 0
     . rrrb = 0 }

to   DRAc 

end


%{ Die relationale Algebra der DRA-Kalküle wird im folgenden als eine
Mengenalgebra binärer Relationen von Dipolen und JEPD-System der
Basisrelationen vor-interpretiert, das über eine Identitätsrelation verfügt
und abgeschlossen unter Komposition und Konversion ist -- also auch eine
relationale Algebra}%


logic HasCASL

spec DRAfBaseRelationPreModel =
     sort Point
     type Dipol ::= [__ __](s : Point; e : Point)

then 
     JEPDBaseRelationModel[sort Dipol]

then
     ops rrrr,rrrl,rrlr,rrll,rlrr,rllr,rlll,lrrr,lrrl,lrll,llrr,llrl,lllr,
	 llll,ells,errs,lere,rele,slsr,srsl,lsel,rser,sese,eses,ffbb,efbs,
	 ifbi,bfii,sfsi,beie,bbff,bsef,biif,iibf,sisf,iebe,ffff,fefe,fifi,
	 fbii,fsei,ebis,iifb,eifs,iseb,bbbb,sbsb,ibib,lllb,llfl,llbr,llrf,
	 lirl,lfrr,lril,lrri,blrr,irrl,frrr,rbrr,lbll,flll,brll,rfll,rlli,
	 rrlf,illr,rilr,rrbl,rlir,rrfr,rrrb : Relation 

     type BaseRel ::= rrrr | rrrl | rrlr | rrll | rlrr | rllr | rlll |
			   lrrr | lrrl | lrll | llrr | llrl | lllr | llll | 
			   ells | errs | lere | rele | slsr | srsl | lsel |
			   rser | sese | eses | 
			   ffbb | efbs | ifbi | bfii | sfsi | beie | bbff |
			   bsef | biif | iibf | sisf | iebe | ffff | fefe |
			   fifi | fbii | fsei | ebis | iifb | eifs | iseb |
			   bbbb | sbsb | ibib | lllb | llfl | llbr | llrf |
			   lirl | lfrr | lril | lrri | blrr | irrl | frrr |
			   rbrr | lbll | flll | brll | rfll | rlli | rrlf |
			   illr | rilr | rrbl | rlir | rrfr | rrrb 

end


spec DRAfPreModel  = 
     GeneratePreModelFromBaseRelationModel[DRAfBaseRelationPreModel 
					fit sort Elem |-> Dipol]
then
     ops sese: Rel;
	 conv: Rel -> Rel;
	 conv: BaseRel -> BaseRel
then 
     ops __cmps__ : Rel * Rel -> Rel;
	 __cmps__ : BaseRel * BaseRel -> Rel
end


view DRAfPreModel_induces_DRAfRelationAlgebra :
     { DRAf hide ops __+__,__-__,{},{__}
            hide preds __eps__,__isSubsetOf__,isNonEmpty }
to
     DRAfPreModel
=
     op id |-> sese

end


%{ Der nächste Schritt wäre die geometrische Interpretation der
Basisrelationen, um ein konkretes Modell zu erhalten:
forall A,B : Dipol
. (A,B) isIn rep(rrrr) <=> ...  
... }%


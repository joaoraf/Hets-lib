library Calculi/Space/Intersection

%left_assoc __!__

from Basic/Algebra_I get Field, Field_in_ResidueClassField
from Basic/LinearAlgebra_I get Matrix

spec FourIntersection =
  Matrix[view Field_in_ResidueClassField[op 2: Int fit n |-> 2]]
        [op 2:Pos fit n |-> 2]
then
  sort IntersectionRelations < Matrix[Z[2],2]
  ops 1,2:Index[2];
      1:Z[2]
  generated type IntersectionRelations ::=
      disjoint | contains | inside | equal | meet | covers | covered_by | overlap
  . disjoint!1!1 = 0
  . disjoint!1!2 = 0
  . disjoint!2!1 = 0
  . disjoint!2!2 = 0

  . contains!1!1 = 1
  . contains!1!2 = 1
  . contains!2!1 = 0
  . contains!2!2 = 0

  . inside!1!1 = 1
  . inside!1!2 = 0
  . inside!2!1 = 1
  . inside!2!2 = 0

  . equal!1!1 = 1
  . equal!1!2 = 0
  . equal!2!1 = 0
  . equal!2!2 = 1

  . meet!1!1 = 0
  . meet!1!2 = 0
  . meet!2!1 = 0
  . meet!2!2 = 1

  . covers!1!1 = 1
  . covers!1!2 = 1
  . covers!2!1 = 0
  . covers!2!2 = 1

  . covered_by!1!1 = 1
  . covered_by!1!2 = 0
  . covered_by!2!1 = 1
  . covered_by!2!2 = 1

  . overlap!1!1 = 1
  . overlap!1!2 = 1
  . overlap!2!1 = 1
  . overlap!2!2 = 1

%% composition via matrix multiplication?
end

from HasCASL/TopologicalSpaces get RichTopologicalSpace

logic HasCASL

view FourIntersection_in_TopologicalSpace :
      { FourIntersection reveal disjoint , contains , inside , equal ,
                                meet , covers , covered_by , overlap }
 to
     { RichTopologicalSpace then
       type Relations := Pred(RegularClosed * RegularClosed)
       preds disjoint(X,Y:RegularClosed) <=> X disjoint Y;
             contains(X,Y:RegularClosed) <=> Y subset X /\ not X=Y;
             inside(X,Y:RegularClosed) <=> X subset Y /\ not X=Y;
             equal(X,Y:RegularClosed) <=> X=Y;
             meet(X,Y:RegularClosed) <=>
                (not boundary(X) intersection boundary(Y)=emptySet
                 /\ int(X) intersection int(Y) = emptySet);
             covers(X,Y:RegularClosed) <=>
                Y subset X /\ not X=Y
                /\not boundary(X) intersection boundary(Y)=emptySet;
             covered_by(X,Y:RegularClosed) <=>
                X subset Y /\ not X=Y
                /\not boundary(X) intersection boundary(Y)=emptySet;
             overlap(X,Y:RegularClosed) <=>
                (not boundary(X) intersection boundary(Y)=emptySet
                 /\ not int(X) intersection int(Y) = emptySet);
     } =
     IntersectionRelations |-> Relations
end








library Calculi/Space/RCC5
version 0.1
%% author: S. Wölfl
%% date: 18-02-2005
%% 

%left_assoc __cup__,__cap__
%prec {__cup__} < {__cmps__}

%( 
	The RCC5 Calculus (resp. Containment Algebra) 
  
Literature: TODO   
)%


from Calculi/Algebra/RelationAlgebra get 
	AtomicRelationAlgebra
from Calculi/Algebra/RelationAlgebraSymbolic get 
	CompositionTable,
     	GenerateRelationAlgebra,
	RelationBase,
	SetRepresentationOfRelations
from Calculi/Algebra/RelationAlgebraModel get 
	AlgebraOfBinaryRelations,
	GenerateModelFromBaseRelationModel,
	JEPDBaseRelationModel,
	Relation
from Calculi/Time/LinearFlowOfTime get 
	DnsLinFlowOfTimeSEnd,
	LinFlowOfTime
from HasCASL/TopologicalSpaces get 
	RichTopologicalSpace
from HasCASL/MetricSpaces get 
	MetricSpace
from HasCASL/Set get 
	Set




%(  Part I: Symbolic Level

    We start by describing the symbolic level of the region connection 
    calculus RCC5, i.e., the set of base relations 
    and the composition table. Arbitrary relations of RCC5 are 
    represented as sets of base relations. In turn base relations are 
    represented by their respective singleton sets. The spec
    RelationBaseOfRCC5 builds this set of all relations, 
    which obviously forms an atomic boolean algebra. Via the composition 
    table we then define a relation algebra on the set of all relations. 
    This provides us with a specification of RCC5, namely spec 
    RCC5.
)%




%(   RCC5 has 5 base relations,
     namely, dc ("disconnected"), po ("partially overlaps"), pp ("proper part"),
     ppi ("proper part inverse"), and  eq ("equals").
)%



spec BaseRelationsOfRCC5 = %mono
     free type BaseRel ::= dc | po | pp | ppi | eq
end



%(   The following spec not only contains the raw composition table of RCC5, but also
     information that the 1 is the union of all base relations, and that the set of base relations is
     closed with respect to converses.
)%


spec CompositionTableOfRCC5 =
     sort BaseRel
     ops dc,po,pp,ppi,eq: BaseRel
and 
     CompositionTable 
then
     . conv(dc) = dc					%(sym_dc)%
     . conv(po) = po					%(sym_po)%
     . conv(pp) = ppi					%(conv_pp)%
     . conv(ppi) = pp					%(conv_ppi)%
     . conv(eq) = eq					%(sym_eq)%

     . pp cmps pp  = pp					%(cmps_pppp)%	
     . pp cmps ppi = 1					%(cmps_ppppi)%
     . pp cmps po  = pp cup po cup dc			%(cmps_pppo)%
     . pp cmps dc  = dc					%(cmps_ppdc)%
     . pp cmps eq  = pp					%(cmps_ppeq)%

     . ppi cmps pp  = compl(dc)				%(cmps_ppipp)%	
     . ppi cmps ppi = 1					%(cmps_ppippi)%
     . ppi cmps po  = ppi cup po 			%(cmps_ppipo)%
     . ppi cmps dc  = ppi cup po cup dc			%(cmps_ppidc)%
     . ppi cmps eq  = ppi				%(cmps_ppieq)%

     . po cmps pp  = pp cup po				%(cmps_popp)%	
     . po cmps ppi = ppi cup po cup dc			%(cmps_poppi)%
     . po cmps po  = 1      				%(cmps_popo)%
     . po cmps dc  = ppi cup po cup dc			%(cmps_podc)%
     . po cmps eq  = po					%(cmps_poeq)%

     . dc cmps pp  = pp cup po cup dc			%(cmps_dcpp)%	
     . dc cmps ppi = dc					%(cmps_dcppi)%
     . dc cmps po  = pp cup po cup dc			%(cmps_dcpo)%
     . dc cmps dc  = 1					%(cmps_dcdc)%
     . dc cmps eq  = dc					%(cmps_dceq)%

     . eq cmps pp  = pp   				%(cmps_eqpp)%	
     . eq cmps ppi = ppi				%(cmps_eqppi)%
     . eq cmps po  = po					%(cmps_eqpo)%
     . eq cmps dc  = dc					%(cmps_eqdc)%
     . eq cmps eq  = eq					%(cmps_eqeq)%

end



spec RelationBaseOfRCC5 =  
     SetRepresentationOfRelations[BaseRelationsOfRCC5]
and
     CompositionTableOfRCC5 
end 


view RelationBaseOfRCC5_as_RelationBase[BaseRelationsOfRCC5] :
     RelationBase[sort BaseRel] to RelationBaseOfRCC5
=
     op id:BaseRel |-> eq
end


spec RCC5 = 
     GenerateRelationAlgebra[RelationBaseOfRCC5 fit op id:BaseRel |-> eq:BaseRel] 
end


view RCC5_as_AtomicRelationAlgebra :
     AtomicRelationAlgebra to 
     { RCC5	then %def
	preds 
		__<__,__<=__,__>__,__>=__:Rel*Rel
	forall x,y:Rel
	. x < y  <=> x isSubsetOf y /\ not x = y
	. x <= y <=> x isSubsetOf y
	. x > y  <=> y isSubsetOf x /\ not x = y
	. x >= y <=> y isSubsetOf x
     }
=
     Rel |-> Rel , AtomRel |-> BaseRel
end




%(  Part II: Semantic Level

    Following we describe how models of RCC5 can be constructed from 
    metrical spaces. We describe only one such method, namely interpreting 
    regions as open discs of a metrical space.
)%


logic HasCASL


spec BaseRelationOpenDiscModelOfRCC5[MetricSpace] = 
     Set
then
     op openDisc(r:Real;x:S) : Set S = \y:S . d(x,y)<r
     type OpenDisc = {X:Set S . exists r:Real;x:S . X=openDisc(r,x)}
then 
     Relation[sort OpenDisc] 

then %def
     ops ppRel,ppiRel,poRel,dcRel,eqRel:Relation 
     type BaseRel ::= ppRel | ppiRel | poRel | dcRel | eqRel 
     forall x,y:OpenDisc
     . (x,y) isIn rep(ppRel) <=> x subset y /\ not x = y
     . (x,y) isIn rep(ppiRel) <=> y subset x /\ not x = y
     . (x,y) isIn rep(poRel) <=> not x subset y /\ not y subset x /\ 
 				not  x intersection y = emptySet
     . (x,y) isIn rep(dcRel) <=> x intersection y = emptySet
     . (x,y) isIn rep(eqRel) <=> x = y
end

spec GeneratePreOpenDiscModelOfRCC5[MetricSpace] = %def
      GenerateModelFromBaseRelationModel[BaseRelationOpenDiscModelOfRCC5[MetricSpace]
	fit sort Elem |-> OpenDisc]
then %cons
     ops  eqRel: Rel;
          conv: BaseRel -> BaseRel;
          conv: Rel -> Rel
end


spec GenerateOpenDiscModelOfRCC5[MetricSpace] = %def
     GeneratePreOpenDiscModelOfRCC5[MetricSpace]
then %cons
     op  __cmps__:  Rel * Rel -> Rel;
	 __cmps__: BaseRel * BaseRel -> Rel;  %% <- Das sollte eigentlich klar sein?
end




%(  Part III: Views
)%




view BaseRelationOpenDiscModelOfRCC5_as_JEPDBaseRelationModel:
     JEPDBaseRelationModel[sort OpenDisc] 
to 
     BaseRelationOpenDiscModelOfRCC5[MetricSpace]
end


view MetricSpace_induces_AlgebraOfBinaryRelations :
    AlgebraOfBinaryRelations[sort Elem] 
to 
    GenerateOpenDiscModelOfRCC5[MetricSpace]
=
    sort Elem |-> OpenDisc , op id |-> eqRel 
end



view MetricSpace_induces_OpenDiscModelOfRCC5 :
     { RCC5 hide ops __+__,__-__,{},{__}    
	hide preds __eps__,__isSubsetOf__,isNonEmpty } %% <- Das muss man verbessern, weil wir dann zu viel Theorie verlieren
to 
    GenerateOpenDiscModelOfRCC5[MetricSpace]
=   
    ops pp|->ppRel, ppi|->ppiRel, po|->poRel, dc|->dcRel, eq|->eqRel, 
        id |-> eqRel
end




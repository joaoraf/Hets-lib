library Calculi/SpatialCalculi/RCC8
version 0.1 
%% author: S. Wölfl
%% date: 06-08-2004
%% 

%left_assoc __cup__
%prec {__cup__} < {__cmps__}

from Basic/StructuredDatatypes get Set
from Basic/Numbers get Nat

spec SigGeneratedRCC8

     = 
	
     free 
     {
         types 
		BaseRel ::= dc | ec | po | eq | tpp | tppi | ntpp | ntppi;
		 GenRel ::= sort BaseRel
		            | __ cup __ (GenRel;BaseRel);
          op			    
          __ cup __: GenRel * GenRel -> GenRel,       %% union of relations
                             assoc, comm, idem;       %%, unit 0 

      }			     

end



spec GeneratedRCC8

     =%mono
       Set[free type BaseRel ::= dc | ec | po | eq | tpp | tppi | ntpp | ntppi
           fit Elem |-> BaseRel]  
       with Set[BaseRel] |-> GenRel, __union__ |-> __cup__
then %def
       sort BaseRel < GenRel
       op 0:GenRel = {}
       forall x:BaseRel
       . x = {x}

     then %def 

          ops			    
		1  : GenRel;		    
          __ cap __: GenRel * GenRel -> GenRel,       %% intersection
                             assoc, comm, idem, unit 1; 
	         id: GenRel;                          %% identity relation
	       conv: GenRel -> GenRel;                %% converse of relation
	 __ cmps __: GenRel * GenRel -> GenRel,       %% composition of relations
                             assoc, unit eq; 
		     

         forall x,y:BaseRel
	 . not x = y => x cap y = 0
	 . (((((((dc cup ec) cup po) cup eq) cup tpp) cup tppi) cup ntpp) cup ntppi) = 1

	 forall x,y:GenRel; u,v:BaseRel

	 . (x cup u) cap (y cup v) = 
		  ((((x cap y) cup (x cap v)) cup (u cap y)) cup (u cap v))

         . (dc cmps dc)    = 1
	 . (dc cmps ec)    = ((((dc cup ec) cup po) cup tpp) cup ntpp)
	 . (dc cmps po)    = ((((dc cup ec) cup po) cup tpp) cup ntpp)
	 . (dc cmps tpp)   = ((((dc cup ec) cup po) cup tpp) cup ntpp)
	 . (dc cmps ntpp)  = ((((dc cup ec) cup po) cup tpp) cup ntpp)
	 . (dc cmps tppi)  = dc
	 . (dc cmps ntppi) = dc
	 . (dc cmps eq)    = dc 
	 
	 . (ec cmps dc)    = ((((dc cup ec) cup po) cup tppi) cup ntppi) 
	 . (ec cmps ec)    = (((((dc cup ec) cup po) cup tpp) cup tppi) cup eq)
	 . (ec cmps po)    = ((((dc cup ec) cup po) cup tpp) cup ntpp)
	 . (ec cmps tpp)   = (((ec cup po) cup tpp) cup ntpp)
	 . (ec cmps tppi)  = po cup tpp cup ntpp
	 . (ec cmps ntpp)  = (dc cup ec)	 
	 . (ec cmps ntppi) = dc
	 . (ec cmps eq)    = ec
     
         . (po cmps dc)    = ((((dc cup ec) cup po) cup tppi) cup ntppi)   
         . (po cmps ec)	   = ((((dc cup ec) cup po) cup tppi) cup ntppi)   
         . (po cmps po)	   = 1  
         . (po cmps tpp)   = ((po cup tpp) cup ntpp)  
         . (po cmps tppi)  = ((po cup tpp) cup ntpp)  
         . (po cmps ntpp)  = ((((dc cup ec) cup po) cup tppi) cup ntppi)   
         . (po cmps ntppi) = ((((dc cup ec) cup po) cup tppi) cup ntppi)   
         . (po cmps eq)	   = po   

         . (tpp cmps dc)    = dc
         . (tpp cmps ec)    = (dc cup ec)
         . (tpp cmps po)    = (((dc cup ec) cup tpp) cup ntpp)
         . (tpp cmps tpp)   = (tpp cup ntpp) 
         . (tpp cmps tppi)  = ntpp
         . (tpp cmps ntpp)  = ((((dc cup ec) cup po) cup tpp) cup ntpp)         
	 . (tpp cmps ntppi) = ((((dc cup ec) cup po) cup tppi) cup ntppi)   
         . (tpp cmps eq)    = tpp 

	 . (ntpp cmps dc)    = dc  
	 . (ntpp cmps ec)    = dc 	 
	 . (ntpp cmps po)    = ((((dc cup ec) cup po) cup tpp) cup ntpp)  
	 . (ntpp cmps tpp)   = ntpp 
	 . (ntpp cmps tppi)  = ntpp 
	 . (ntpp cmps ntpp)  = ((((dc cup ec) cup po) cup tpp) cup ntpp)   	 
	 . (ntpp cmps ntppi) = 1 
	 . (ntpp cmps eq)    = ntpp  

	 . (tppi cmps dc)    = ((((dc cup ec) cup po) cup tppi) cup ntppi) 
	 . (tppi cmps ec)    = (((ec cup po) cup tppi) cup ntppi) 
	 . (tppi cmps po)    = ((po cup tppi) cup ntppi) 
	 . (tppi cmps tpp)   = (((po cup eq) cup tpp) cup tppi)
	 . (tppi cmps tppi)  = ((po cup tpp) cup ntpp)
	 . (tppi cmps ntpp)  = (tppi cup ntppi)
	 . (tppi cmps ntppi) = ntppi
	 . (tppi cmps eq)    = tppi 

	 . (ntppi cmps dc)    = ((((dc cup ec) cup po) cup tppi) cup ntppi)
	 . (ntppi cmps ec)    = ((po cup tppi) cup ntppi)
	 . (ntppi cmps po)    = ((po cup tppi) cup ntppi)
	 . (ntppi cmps tpp)   = ((po cup tppi) cup ntppi)
	 . (ntppi cmps tppi)  = 
	 		  (((((po cup eq) cup tpp) cup tppi) cup ntpp) cup ntppi) 
	 . (ntppi cmps ntpp)  = ntppi
	 . (ntppi cmps ntppi) = ntppi
	 . (ntppi cmps eq)    = ntppi 

         . (eq cmps dc)     = dc 
         . (eq cmps ec)     = ec 
         . (eq cmps po)     = po 
         . (eq cmps tpp)    = tpp          
	 . (eq cmps tppi)   = tppi 
         . (eq cmps ntpp)   = ntpp 
         . (eq cmps ntppi)  = ntppi 
         . (eq cmps dc)	    = dc 


	 . (x cup u) cmps (y cup v) =
		  (((x cmps y cup (x cmps v)) cup (u cmps y)) cup (u cmps v)) 			     

	 . conv(dc) = dc
	 . conv(ec) = ec	
	 . conv(po) = po
	 . conv(eq) = eq
	 . conv(tpp) = tppi
	 . conv(tppi) = tpp
	 . conv(ntpp) = ntppi 
	 . conv(ntppi) = ntpp 
 
	 . conv(x cup u) = conv(x) cup conv(u)	
	
end


from Basic/RelationsAndOrders version 0.7 get BooleanAlgebra, RichBooleanAlgebra



spec RelationAlgebra

     =

     {
	RichBooleanAlgebra with sort Elem |-> Rel,
			    ops 0,1, __ cup __, __ cap __, compl __ 
	}   			      

     then
			      
	{
	  ops
	           id: Rel;
	         conv: Rel -> Rel;
	   __ cmps __: Rel * Rel -> Rel
	}
	
      then

	forall x,y,z: Rel
	. (x cmps y) cmps z = x cmps (y cmps z)         %(cmps_assoc)%
	. (x cup y) cmps z = (x cmps z) cup (y cmps z)  %(cmps_cup_rdistrib)%
	. x cmps id = x 				%(cmps_unit_id)%
	. conv(conv(x)) = x                    		%(conv_idempot)%
	. conv(x cup y) = conv(x) cup conv(y) 		%(conv_cup)%
	. conv(x cmps y) = conv(y) cmps conv(x)		%(conv_cmps)%
	. conv(x) cmps (compl(x cmps y) cup compl(y)) 
			= compl(y)      		%(RelAlg)%


end


spec Set1[sort BaseRel] given Nat =
  Set[sort BaseRel fit Elem |-> BaseRel] with Set[BaseRel] |-> GenRel,
      __union__ |-> __cup__, __intersection__ |-> __cap__
then
  sort BaseRel < GenRel
   ops id : BaseRel;
       1  : GenRel;		   %% how to specify this ???
       conv: BaseRel -> GenRel;                %% converse of relation
       __cmps__ : BaseRel * BaseRel -> GenRel
  forall x:BaseRel
  . x = {x}
end


spec GenerateRelationAlgebra
     [Set1[sort BaseRel]] = %mono
  op 0:GenRel = {}
then %def 

       ops conv : GenRel -> GenRel;
	   __ cmps __: GenRel * GenRel -> GenRel,       %% composition of relations
                                  assoc, unit id; 

	 forall x,y:GenRel; u,v:BaseRel

	 . not x = y => x cap y = 0  %% nicht korrekt
	 . (x cup u) cap (y cup v) = 
		  ((((x cap y) cup (x cap v)) cup (u cap y)) cup (u cap v))

	 . (x cup u) cmps (y cup v) =
		  (((x cmps y cup (x cmps v)) cup (u cmps y)) cup (u cmps v)) 			      
	 . conv(x cup u) = conv(x) cup conv(u)	

end		     



spec RCC8Base = %mono
   Set1[free type BaseRel ::= dc | ec | po | eq | tpp | tppi | ntpp | ntppi] 
then %def

	 forall x,y:GenRel; u,v:BaseRel

	 . (((((((dc cup ec) cup po) cup eq) cup tpp) cup tppi) cup ntpp) cup ntppi) = 1
         . (dc cmps dc)    = 1
	 . (dc cmps ec)    = ((((dc cup ec) cup po) cup tpp) cup ntpp)
	 . (dc cmps po)    = ((((dc cup ec) cup po) cup tpp) cup ntpp)
	 . (dc cmps tpp)   = ((((dc cup ec) cup po) cup tpp) cup ntpp)
	 . (dc cmps ntpp)  = ((((dc cup ec) cup po) cup tpp) cup ntpp)
	 . (dc cmps tppi)  = dc
	 . (dc cmps ntppi) = dc
	 . (dc cmps eq)    = dc 
	 
	 . (ec cmps dc)    = ((((dc cup ec) cup po) cup tppi) cup ntppi) 
	 . (ec cmps ec)    = (((((dc cup ec) cup po) cup tpp) cup tppi) cup eq)
	 . (ec cmps po)    = ((((dc cup ec) cup po) cup tpp) cup ntpp)
	 . (ec cmps tpp)   = (((ec cup po) cup tpp) cup ntpp)
	 . (ec cmps tppi)  = po cup tpp cup ntpp
	 . (ec cmps ntpp)  = (dc cup ec)	 
	 . (ec cmps ntppi) = dc
	 . (ec cmps eq)    = ec
     
         . (po cmps dc)    = ((((dc cup ec) cup po) cup tppi) cup ntppi)   
         . (po cmps ec)	   = ((((dc cup ec) cup po) cup tppi) cup ntppi)   
         . (po cmps po)	   = 1  
         . (po cmps tpp)   = ((po cup tpp) cup ntpp)  
         . (po cmps tppi)  = ((po cup tpp) cup ntpp)  
         . (po cmps ntpp)  = ((((dc cup ec) cup po) cup tppi) cup ntppi)   
         . (po cmps ntppi) = ((((dc cup ec) cup po) cup tppi) cup ntppi)   
         . (po cmps eq)	   = po   

         . (tpp cmps dc)    = dc
         . (tpp cmps ec)    = (dc cup ec)
         . (tpp cmps po)    = (((dc cup ec) cup tpp) cup ntpp)
         . (tpp cmps tpp)   = (tpp cup ntpp) 
         . (tpp cmps tppi)  = ntpp
         . (tpp cmps ntpp)  = ((((dc cup ec) cup po) cup tpp) cup ntpp)         
	 . (tpp cmps ntppi) = ((((dc cup ec) cup po) cup tppi) cup ntppi)   
         . (tpp cmps eq)    = tpp 

	 . (ntpp cmps dc)    = dc  
	 . (ntpp cmps ec)    = dc 	 
	 . (ntpp cmps po)    = ((((dc cup ec) cup po) cup tpp) cup ntpp)  
	 . (ntpp cmps tpp)   = ntpp 
	 . (ntpp cmps tppi)  = ntpp 
	 . (ntpp cmps ntpp)  = ((((dc cup ec) cup po) cup tpp) cup ntpp)   	 
	 . (ntpp cmps ntppi) = 1 
	 . (ntpp cmps eq)    = ntpp  

	 . (tppi cmps dc)    = ((((dc cup ec) cup po) cup tppi) cup ntppi) 
	 . (tppi cmps ec)    = (((ec cup po) cup tppi) cup ntppi) 
	 . (tppi cmps po)    = ((po cup tppi) cup ntppi) 
	 . (tppi cmps tpp)   = (((po cup eq) cup tpp) cup tppi)
	 . (tppi cmps tppi)  = ((po cup tpp) cup ntpp)
	 . (tppi cmps ntpp)  = (tppi cup ntppi)
	 . (tppi cmps ntppi) = ntppi
	 . (tppi cmps eq)    = tppi 

	 . (ntppi cmps dc)    = ((((dc cup ec) cup po) cup tppi) cup ntppi)
	 . (ntppi cmps ec)    = ((po cup tppi) cup ntppi)
	 . (ntppi cmps po)    = ((po cup tppi) cup ntppi)
	 . (ntppi cmps tpp)   = ((po cup tppi) cup ntppi)
	 . (ntppi cmps tppi)  = 
	 		  (((((po cup eq) cup tpp) cup tppi) cup ntpp) cup ntppi) 
	 . (ntppi cmps ntpp)  = ntppi
	 . (ntppi cmps ntppi) = ntppi
	 . (ntppi cmps eq)    = ntppi 

         . (eq cmps dc)     = dc 
         . (eq cmps ec)     = ec 
         . (eq cmps po)     = po 
         . (eq cmps tpp)    = tpp          
	 . (eq cmps tppi)   = tppi 
         . (eq cmps ntpp)   = ntpp 
         . (eq cmps ntppi)  = ntppi 
         . (eq cmps dc)	    = dc 

	 . conv(dc) = dc
	 . conv(ec) = ec	
	 . conv(po) = po
	 . conv(eq) = eq
	 . conv(tpp) = tppi
	 . conv(tppi) = tpp
	 . conv(ntpp) = ntppi 
	 . conv(ntppi) = ntpp 	
end

spec RCC8 = GenerateRelationAlgebra [RCC8Base]
end

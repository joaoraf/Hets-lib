library Calculi/Time/IntervalAlgebraLin
version 0.1
%% author: S. Wölfl
%% date: 18-02-2005
%% 

%left_assoc __cup__,__cap__
%prec {__cup__} < {__cmps__}

%( 
	The Interval Algebra for Linear Flows of Time 
  
Literature: TODO   
)%


from Calculi/Algebra/RelationAlgebra get 
	AtomicRelationAlgebra
from Calculi/Algebra/RelationAlgebraSymbolic get 
	CompositionTable,
     	GeneratePseudoRelationAlgebra,
	RelationBase,
	SetRepresentationOfRelations
from Calculi/Algebra/RelationAlgebraModel get 
	AlgebraOfBinaryRelations,
	GeneratePreModelFromBaseRelationModel,
	JEPDBaseRelationModel,
	Relation
from Calculi/Time/LinearFlowOfTime get 
	DnsLinFlowOfTimeSEnd,
	LinFlowOfTime
from Calculi/Time/FlowOfTime get 
	ExtFlowOfTimeByConvexity,
	ExtFlowOfTimeBySetRelations




%(  Part I: Symbolic Level

    We start by describing the symbolic level of the interval algebra
    of linear time (abbrev. by IAlin), i.e., the set of base relations 
    and the composition table. Arbitrary relations of IAlin are 
    represented as sets of base relations. In turn base relations are 
    represented by their respective singleton sets. The spec
    RelationBaseOfIntervalAlgebraLin builds this set of all relations, 
    which obviously forms an atomic boolean algebra. Via the composition 
    table we then define a relation algebra on the set of all relations. 
    This provides us with a specification of IAlin, namely spec 
    IntervalAlgebraLin.
)%




%(   The Interval Algebra for linear flows of time has 13 base relations,
     namely, b ("before"), m ("meets"), o ("overlaps"),
     d ("during"), s ("starts"), f ("finishes"), e ("equals"),
     and the inverses of b, m, o, d, s, and f (denoted by bi, mi, oi, di, 
     si, and fi).
)%



spec BaseRelationsOfIntervalAlgebraLin = %mono
     free type BaseRel ::= b | m | o | d | s | f | e | 
			bi | mi | oi | di | si | fi
end



%(   The following spec not only contains the raw composition table of IAlin, but also
     information that the 1 is the union of all base relations, and that the set of base relations is
     closed with respect to converses.
)%


spec CompositionTableOfIntervalAlgebraLin =
     sort BaseRel
     ops b,m,o,d,s,f,e,bi,mi,oi,di,si,fi: BaseRel
and 
     CompositionTable 
then
%%     . 1 = b cup m cup o cup d cup s cup f cup e cup 	
%%		bi cup mi cup oi cup di cup si cup fi   %(def_1)%

     . conv(b) = bi					%(conv_b)%
     . conv(bi) = b					%(conv_bi)%
     . conv(m) = mi					%(conv_m)%
     . conv(mi) = m					%(conv_mi)%
     . conv(o) = oi					%(conv_o)%
     . conv(oi) = o					%(conv_oi)%
     . conv(d) = di					%(conv_d)%
     . conv(di) = d					%(conv_di)%
     . conv(s) = si					%(conv_s)%
     . conv(si) = s					%(conv_si)%
     . conv(f) = fi					%(conv_f)%
     . conv(fi) = f					%(conv_fi)%
     . conv(e) = e					%(sym_e)%

     . b cmps b  = b 					%(cmps_bb)%	
     . b cmps bi = 1					%(cmps_bbi)%
     . b cmps d  = b cup o cup m cup d cup s		%(cmps_bd)%
     . b cmps di = b					%(cmps_bdi)%
     . b cmps o  = b					%(cmps_bo)%
     . b cmps oi = b cup o cup m cup d cup s		%(cmps_boi)%
     . b cmps m  = b					%(cmps_bm)%
     . b cmps mi = b cup o cup m cup d cup s		%(cmps_bmi)%
     . b cmps s  = b					%(cmps_bs)%
     . b cmps si = b 					%(cmps_bsi)%
     . b cmps f  = b cup o cup m cup d cup s		%(cmps_bf)%
     . b cmps fi = b					%(cmps_bfi)%	
     . b cmps e  = b 				 	%(cmps_be)%	

     . bi cmps b  = 1 					%(cmps_bib)%	
     . bi cmps bi = bi					%(cmps_bibi)%
     . bi cmps d  = bi cup oi cup mi cup d cup f	%(cmps_bid)%
     . bi cmps di = bi 					%(cmps_bidi)%
     . bi cmps o  = bi cup oi cup mi cup d cup f       	%(cmps_bio)%
     . bi cmps oi = bi 					%(cmps_bioi)%
     . bi cmps m  = bi cup oi cup mi cup d cup f  	%(cmps_bim)%
     . bi cmps mi = bi 					%(cmps_bimi)%
     . bi cmps s  = bi cup oi cup mi cup d cup f	%(cmps_bis)%
     . bi cmps si = bi 					%(cmps_bisi)%
     . bi cmps f  = bi					%(cmps_bif)%
     . bi cmps fi = bi					%(cmps_bifi)%	
     . bi cmps e = bi 					%(cmps_bie)%

     . d cmps b  = b 					%(cmps_db)%	
     . d cmps bi = bi					%(cmps_dbi)%
     . d cmps d  = d					%(cmps_dd)%
     . d cmps di = 1 					%(cmps_ddi)%
     . d cmps o  = b cup o cup m cup d cup s       	%(cmps_do)%
     . d cmps oi = bi cup oi cup mi cup d cup f		%(cmps_doi)%
     . d cmps m  = b				  	%(cmps_dm)%
     . d cmps mi = bi 					%(cmps_dmi)%
     . d cmps s  = d					%(cmps_ds)%
     . d cmps si = bi cup oi cup mi cup d cup f 	%(cmps_dsi)%
     . d cmps f  = d					%(cmps_df)%
     . d cmps fi = b cup o cup m cup d cup s 		%(cmps_dfi)%	
     . d cmps e  = d					%(cmps_de)%

     . di cmps b  = b cup o cup m cup di cup fi 	%(cmps_dib)%	
     . di cmps bi = bi cup oi cup mi cup di cup si	%(cmps_dibi)%
     . di cmps d  = compl(b cup bi cup m cup mi)	%(cmps_did)%
     . di cmps di = di					%(cmps_didi)%
     . di cmps o  = o cup di cup fi 		       	%(cmps_dio)%
     . di cmps oi = oi cup di cup si			%(cmps_dioi)%
     . di cmps m  = o cup di cup fi 		  	%(cmps_dim)%
     . di cmps mi = oi cup di cup si			%(cmps_dimi)%
     . di cmps s  = o cup di cup fi			%(cmps_dis)%
     . di cmps si = di				 	%(cmps_disi)%
     . di cmps f  = oi cup di cup si			%(cmps_dif)%
     . di cmps fi = di			 		%(cmps_difi)%	
     . di cmps e = di 					%(cmps_die)%

     . o cmps b  = b 					%(cmps_ob)%	
     . o cmps bi = bi cup oi cup mi cup di cup si	%(cmps_obi)%
     . o cmps d  = o cup d cup s			%(cmps_od)%
     . o cmps di = b cup o cup m cup di cup fi		%(cmps_odi)%
     . o cmps o  = b cup o cup m  		     	%(cmps_oo)%
     . o cmps oi = compl(b cup bi cup m cup mi)		%(cmps_ooi)%
     . o cmps m  = b				  	%(cmps_om)%
     . o cmps mi = oi cup di cup si			%(cmps_omi)%
     . o cmps s  = o					%(cmps_os)%
     . o cmps si = di cup fi cup o		 	%(cmps_osi)%
     . o cmps f  = d cup s cup o			%(cmps_of)%
     . o cmps fi = b cup o cup m	 		%(cmps_ofi)%	
     . o cmps e  = o 				      	%(cmps_oe)%

     . oi cmps b  = b cup o cup m cup di cup fi 	%(cmps_oib)%	
     . oi cmps bi = bi					%(cmps_oibi)%
     . oi cmps d  = oi cup d cup f			%(cmps_oid)%
     . oi cmps di = bi cup oi cup mi cup di cup si	%(cmps_oidi)%
     . oi cmps o  = compl(b cup bi cup m cup mi)      	%(cmps_oio)%
     . oi cmps oi = bi cup oi cup mi			%(cmps_oioi)%
     . oi cmps m  = o cup di cup fi 		  	%(cmps_oim)%
     . oi cmps mi = bi					%(cmps_oimi)%
     . oi cmps s  = oi cup d cup f			%(cmps_ois)%
     . oi cmps si = bi cup oi cup mi		 	%(cmps_oisi)%
     . oi cmps f  = oi 					%(cmps_oif)%
     . oi cmps fi = oi cup di cup si	 		%(cmps_oifi)%	
     . oi cmps e = oi 					%(cmps_oie)%

     . m cmps b  = b 					%(cmps_mb)%	
     . m cmps bi = bi cup oi cup mi cup di cup si	%(cmps_mbi)%
     . m cmps d  = o cup d cup s			%(cmps_md)%
     . m cmps di = b 					%(cmps_mdi)%
     . m cmps o  = b 		  		     	%(cmps_mo)%
     . m cmps oi = o cup d cup s			%(cmps_moi)%
     . m cmps m  = b				  	%(cmps_mm)%
     . m cmps mi = f cup fi cup e			%(cmps_mmi)%
     . m cmps s  = m					%(cmps_ms)%
     . m cmps si = m				 	%(cmps_msi)%
     . m cmps f  = d cup s cup o			%(cmps_mf)%
     . m cmps fi = b			 		%(cmps_mfi)%	
     . m cmps e  = m		 		  	%(cmps_me)%

     . mi cmps b  = b cup o cup m cup di cup fi 	%(cmps_mib)%	
     . mi cmps bi = bi					%(cmps_mibi)%
     . mi cmps d  = oi cup d cup f			%(cmps_mid)%
     . mi cmps di = bi 					%(cmps_midi)%
     . mi cmps o  = oi cup d cup f		      	%(cmps_mio)%
     . mi cmps oi = bi 					%(cmps_mioi)%
     . mi cmps m  = s cup si cup e 		  	%(cmps_mim)%
     . mi cmps mi = bi					%(cmps_mimi)%
     . mi cmps s  = d cup f cup oi			%(cmps_mis)%
     . mi cmps si = bi				 	%(cmps_misi)%
     . mi cmps f  = mi 					%(cmps_mif)%
     . mi cmps fi = mi 			 		%(cmps_mifi)%	
     . mi cmps e = mi					%(cmps_mie)%

     . s cmps b  = b 					%(cmps_sb)%	
     . s cmps bi = bi 					%(cmps_sbi)%
     . s cmps d  = d					%(cmps_sd)%
     . s cmps di = b cup o cup m cup di cup fi		%(cmps_sdi)%
     . s cmps o  = b cup o cup m  		     	%(cmps_so)%
     . s cmps oi = oi cup d cup f			%(cmps_soi)%
     . s cmps m  = b				  	%(cmps_sm)%
     . s cmps mi = mi					%(cmps_smi)%
     . s cmps s  = s					%(cmps_ss)%
     . s cmps si = s cup si cup e		 	%(cmps_ssi)%
     . s cmps f  = d 					%(cmps_sf)%
     . s cmps fi = b cup m cup o	 		%(cmps_sfi)%	
     . s cmps e  = s					%(cmps_se)%

     . si cmps b  = b cup o cup m cup di cup fi 	%(cmps_sib)%	
     . si cmps bi = bi					%(cmps_sibi)%
     . si cmps d  = oi cup d cup f			%(cmps_sid)%
     . si cmps di = di 					%(cmps_sidi)%
     . si cmps o  = o cup di cup fi		      	%(cmps_sio)%
     . si cmps oi = oi 					%(cmps_sioi)%
     . si cmps m  = o cup di cup fi 		  	%(cmps_sim)%
     . si cmps mi = mi					%(cmps_simi)%
     . si cmps s  = s cup si cup e			%(cmps_sis)%
     . si cmps si = si				 	%(cmps_sisi)%
     . si cmps f  = oi 					%(cmps_sif)%
     . si cmps fi = di 			 		%(cmps_sifi)%	
     . si cmps e = si				 	%(cmps_sie)%

     . f cmps b  = b 					%(cmps_fb)%	
     . f cmps bi = bi 					%(cmps_fbi)%
     . f cmps d  = d					%(cmps_fd)%
     . f cmps di = bi cup oi cup mi cup di cup si	%(cmps_fdi)%
     . f cmps o  = o cup d cup s  		     	%(cmps_fo)%
     . f cmps oi = bi cup oi cup mi			%(cmps_foi)%
     . f cmps m  = m				  	%(cmps_fm)%
     . f cmps mi = bi					%(cmps_fmi)%
     . f cmps s  = d					%(cmps_fs)%
     . f cmps si = bi cup oi cup mi		 	%(cmps_fsi)%
     . f cmps f  = f 					%(cmps_ff)%
     . f cmps fi = f cup fi cup e	 		%(cmps_ffi)%	
     . f cmps e  = f				 	%(cmps_fe)%

     . fi cmps b  = b 				 	%(cmps_fib)%	
     . fi cmps bi = bi cup oi cup mi cup di cup si	%(cmps_fibi)%
     . fi cmps d  = o cup d cup s			%(cmps_fid)%
     . fi cmps di = di 					%(cmps_fidi)%
     . fi cmps o  = o 				      	%(cmps_fio)%
     . fi cmps oi = oi cup di cup si			%(cmps_fioi)%
     . fi cmps m  = m		 		  	%(cmps_fim)%
     . fi cmps mi = si cup oi cup di			%(cmps_fimi)%
     . fi cmps s  = o					%(cmps_fis)%
     . fi cmps si = di				 	%(cmps_fisi)%
     . fi cmps f  = f cup fi cup e			%(cmps_fif)%
     . fi cmps fi = fi 			 		%(cmps_fifi)%	
     . fi cmps e  = fi 					%(cmps_fie)%

     . e cmps b  = b 				 	%(cmps_eb)%	
     . e cmps bi = bi 					%(cmps_ebi)%
     . e cmps d  = d					%(cmps_ed)%
     . e cmps di = di 					%(cmps_edi)%
     . e cmps o  = o 				      	%(cmps_eo)%
     . e cmps oi = oi 					%(cmps_eoi)%
     . e cmps m  = m		 		  	%(cmps_em)%
     . e cmps mi = mi					%(cmps_emi)%
     . e cmps s  = s					%(cmps_es)%
     . e cmps si = si				 	%(cmps_esi)%
     . e cmps f  = f 					%(cmps_ef)%
     . e cmps fi = fi 			 		%(cmps_efi)%	
     . e cmps e  = e 			 		%(cmps_ee)%	
end



spec RelationBaseOfIntervalAlgebraLin =  
     SetRepresentationOfRelations[BaseRelationsOfIntervalAlgebraLin]
and
     CompositionTableOfIntervalAlgebraLin 
end 


view RelationBaseOfIntervalAlgebraLin_as_RelationBase[BaseRelationsOfIntervalAlgebraLin] :
     RelationBase[sort BaseRel] to RelationBaseOfIntervalAlgebraLin
=
     op id:BaseRel |-> e
end


spec IntervalAlgebraLin = 
     GenerateRelationAlgebra[RelationBaseOfIntervalAlgebraLin fit op id:BaseRel |-> e:BaseRel] 
end


view IntervalAlgebraLin_as_AtomicRelationAlgebra :
     AtomicRelationAlgebra to 
     { IntervalAlgebraLin	then %def
	preds 
		__<__,__<=__,__>__,__>=__:Rel*Rel
	forall x,y:Rel
	. x < y  <=> x isSubsetOf y /\ not x = y
	. x <= y <=> x isSubsetOf y
	. x > y  <=> y isSubsetOf x /\ not x = y
	. x >= y <=> y isSubsetOf x
     }
=
     Rel |-> Rel , AtomRel |-> BaseRel
end


%[ Das folgende ist dasselbe wie in ../Algebra/RelataionAlgebraSymboli, liefert jedoch eine andere (kleinere) Theorie?
]%
spec BaseRelationsOfCalculus = %mono
     free type BaseRel ::= relation1 | relation2
end


spec CompositionTableOfCalculus =
     sort BaseRel
     ops relation1,relation2: BaseRel    
and
     CompositionTable 
then
     . conv(relation1) = relation1
     . conv(relation2) = relation2
     . relation1 cmps relation1 = relation1
     . relation1 cmps relation2 = relation2
     . relation2 cmps relation1 = relation2
     . relation2 cmps relation2 = relation2
end


spec RelationBaseOfCalculus = 
     SetRepresentationOfRelations[BaseRelationsOfCalculus] 
and
     CompositionTableOfCalculus
end



view RelationBaseOfCalculus_as_RelationBase[BaseRelationsOfCalculus] :
     RelationBase[sort BaseRel] to RelationBaseOfCalculus
=
     op id:BaseRel |-> relation1
end


spec Calculus = 
     GenerateRelationAlgebra [RelationBaseOfCalculus fit op id:BaseRel |-> relation1]
end


view Calculus_as_AtomicRelationAlgebra :
     AtomicRelationAlgebra to 
     { Calculus	then %def
	preds 
		__<__,__<=__,__>__,__>=__:Rel*Rel
	forall x,y:Rel
	. x < y  <=> x isSubsetOf y /\ not x = y
	. x <= y <=> x isSubsetOf y
	. x > y  <=> y isSubsetOf x /\ not x = y
	. x >= y <=> y isSubsetOf x
     }
=
     Rel |-> Rel , AtomRel |-> BaseRel
end







%(  Part II: Semantic Level

    Following we describe how models of IAlin can be constructed from 
    Dedekind complete, dense linear flows of time without
    endpoints. We describe two distinct methods: (1) via Allen intervals
    and (2) via arbitrary convex subsets.
)%


logic HasCASL


spec BaseRelationAllenModelOfIntervalAlgebraLin[LinFlowOfTime] = %def 

     type AllenInterval = {(t,t'):Instant*Instant . t pre t'}
     ops start,fin : AllenInterval -> Instant

     forall x:AllenInterval; t,t':Instant 
     . x = (t,t') => start(x) = t /\ fin(x) = t' 

then 
     Relation[sort AllenInterval] 

then %def
     ops bRel,mRel,oRel,dRel,sRel,fRel,eRel,biRel,miRel,oiRel,diRel,siRel,fiRel:Relation 
     type BaseRel ::= bRel | mRel | oRel | dRel | sRel | fRel | eRel | 
			biRel | miRel | oiRel | diRel | siRel | fiRel
     forall x,y:AllenInterval
     . (x,y) isIn rep(bRel) <=> fin(x) pre start(y)
     . (x,y) isIn rep(mRel) <=> fin(x) = start(y)
     . (x,y) isIn rep(oRel) <=> start(x) pre start(y) /\ start(y) pre fin(x) /\ fin(x) pre fin(y)
     . (x,y) isIn rep(dRel) <=> start(y) pre start(x) /\ fin(x) pre fin(y)
     . (x,y) isIn rep(sRel) <=> start(x) = start(y) /\ fin(x) pre fin(y)
     . (x,y) isIn rep(fRel) <=> start(y) pre start(x) /\ fin(x) = fin(y)
     . (x,y) isIn rep(eRel) <=> start(x) = start(y) /\ fin(x) = fin(y)
     . (x,y) isIn rep(biRel) <=> fin(y) pre start(x)
     . (x,y) isIn rep(miRel) <=> start(x) = fin(y) 
     . (x,y) isIn rep(oiRel) <=> start(y) pre start(x) /\ start(x) pre fin(y) /\ fin(y) pre fin(x)
     . (x,y) isIn rep(diRel) <=> start(x) pre start(y) /\ fin(y) pre fin(x)
     . (x,y) isIn rep(siRel) <=> start(y) = start(x) /\ fin(y) pre fin(x)
     . (x,y) isIn rep(fiRel) <=> start(x) pre start(y) /\ fin(x) = fin(y)
end


spec GeneratePreAllenModelOfIntervalAlgebraLin[LinFlowOfTime] = %def
      GeneratePreModelFromBaseRelationModel[BaseRelationAllenModelOfIntervalAlgebraLin[LinFlowOfTime]
	fit sort Elem |-> AllenInterval]
then %cons
     ops  eRel: Rel;
          conv: BaseRel -> BaseRel;
          conv: Rel -> Rel
end


spec GenerateAllenModelOfIntervalAlgebraLin[DnsLinFlowOfTimeSEnd] = %def
     GeneratePreAllenModelOfIntervalAlgebraLin[LinFlowOfTime]
then %cons     
     op  __cmps__:  Rel * Rel -> Rel;
	 __cmps__: BaseRel * BaseRel -> Rel;  %% <- Das sollte eigentlich klar sein?
end


spec BaseRelationConvexSetModelOfIntervalAlgebraLin[LinFlowOfTime] =  
     ExtFlowOfTimeByConvexity[LinFlowOfTime]
and
     ExtFlowOfTimeBySetRelations[LinFlowOfTime]
then %def
     type ConvexSetInterval = 
	{X:Set(Instant) . Convex(X) /\ not X = emptySet
		/\ (exists t,t':Instant . not t = t'/\ t isIn X /\ t' isIn X)}

then %def
     Relation[sort ConvexSetInterval] 

then %def
     ops bRel,mRel,oRel,dRel,sRel,fRel,eRel,biRel,miRel,oiRel,diRel,siRel,fiRel:Relation 
     type BaseRel ::= bRel | mRel | oRel | dRel | sRel | fRel | eRel | 
			biRel | miRel | oiRel | diRel | siRel | fiRel
     forall x,y:ConvexSetInterval
     . (x,y) isIn rep(bRel) <=> exists z:ConvexSetInterval . x preE z /\ z preE y
     . (x,y) isIn rep(mRel) <=> x preE y /\ not(exists z:ConvexSetInterval . x preE z /\ z preE y)
     . (x,y) isIn rep(oRel) <=> exists z,z':ConvexSetInterval . z preE y /\ x preE z' 
					/\ x union z' = x union y /\ y union z = x union y  
     . (x,y) isIn rep(dRel) <=> exists z,z':ConvexSetInterval . z preE x /\ x pre z' 
					/\ x union z union z' = y
     . (x,y) isIn rep(sRel) <=> exists z:ConvexSetInterval . x preE z /\ 
					x union z = y
     . (x,y) isIn rep(fRel) <=> exists z:ConvexSetInterval . z preE x /\ 
					x union z = y
     . (x,y) isIn rep(eRel) <=> x = y
     . (x,y) isIn rep(biRel) <=> exists z:ConvexSetInterval . y preE z /\ z preE x
     . (x,y) isIn rep(miRel) <=> y preE x /\ not(exists z:ConvexSetInterval . y preE z /\ z preE x)
     . (x,y) isIn rep(oiRel) <=> exists z,z':ConvexSetInterval . z preE x /\ y preE z' 
					/\ y union z' = x union y /\ x union z = x union y  
     . (x,y) isIn rep(diRel) <=> exists z,z':ConvexSetInterval . z preE y /\ y pre z'
					/\ y union z union z' = z
     . (x,y) isIn rep(siRel) <=> exists z:ConvexSetInterval . y preE z /\ 
					y union z = x
     . (x,y) isIn rep(fiRel) <=> exists z:ConvexSetInterval . z preE y /\ 
					y union z = x
end



spec GeneratePreConvexSetModelOfIntervalAlgebraLin[LinFlowOfTime] = %def
      GeneratePreModelFromBaseRelationModel[BaseRelationConvexSetModelOfIntervalAlgebraLin[LinFlowOfTime]
	fit sort Elem |-> ConvexSetInterval]
then %cons
     ops  eRel: Rel;
          conv: BaseRel -> BaseRel;
          conv: Rel -> Rel
end


spec GenerateConvexSetModelOfIntervalAlgebraLin[DnsLinFlowOfTimeSEnd] = %def
     GeneratePreConvexSetModelOfIntervalAlgebraLin[LinFlowOfTime]
then %cons     
     op  __cmps__:  Rel * Rel -> Rel;
	 __cmps__: BaseRel * BaseRel -> Rel;  %% <- Das sollte eigentlich klar sein?
end




%(  Part III: Views
)%




view BaseRelationAllenModelOfIntervalAlgebraLin_as_JEPDBaseRelationModel:
     JEPDBaseRelationModel[sort AllenInterval] 
to 
     BaseRelationAllenModelOfIntervalAlgebraLin[LinFlowOfTime]
end


view DnsLinFlowOfTimeSEnd_induces_AlgebraOfBinaryRelations :
    AlgebraOfBinaryRelations[sort Elem] 
to 
    GenerateAllenModelOfIntervalAlgebraLin[DnsLinFlowOfTimeSEnd]
=
    sort Elem |-> AllenInterval , op id |-> eRel 
end



view DnsLinFlowOfTimeSEnd_induces_AllenModelOfIntervalAlgebraLin :
     { IntervalAlgebraLin hide ops __+__,__-__,{},{__}    
	hide preds __eps__,__isSubsetOf__,isNonEmpty } %% <- Das muss man verbessern, weil wir dann zu viel Theorie verlieren
to 
    GenerateAllenModelOfIntervalAlgebraLin[DnsLinFlowOfTimeSEnd]
=   
    ops b|->bRel, m|->mRel, o|->oRel, d|->dRel, s|->sRel, f|->fRel, e|->eRel, 
	bi|->biRel, mi|->miRel, oi|->oiRel, di|-> diRel, si |-> siRel, fi|->fiRel,
        id |-> eRel
end




view BaseRelationConvexSetModelOfIntervalAlgebraLin_as_JEPDBaseRelationModel:
     JEPDBaseRelationModel[sort ConvexSetInterval] 
to 
     BaseRelationConvexSetModelOfIntervalAlgebraLin[LinFlowOfTime]
end


view DnsLinFlowOfTimeSEnd_induces_ConvexSetAlgebraOfBinaryRelations :
    AlgebraOfBinaryRelations[sort Elem] 
to 
    GenerateConvexSetModelOfIntervalAlgebraLin[DnsLinFlowOfTimeSEnd]
=
    sort Elem |-> ConvexSetInterval , op id |-> eRel 
end



view DnsLinFlowOfTimeSEnd_induces_ConvexSetModelOfIntervalAlgebraLin :
     { IntervalAlgebraLin hide ops __+__,__-__,{},{__}    
	hide preds __eps__,__isSubsetOf__,isNonEmpty } %% <- Das muss man verbessern,  weil wir dann zu viel Theorie verlieren
to 
    GenerateConvexSetModelOfIntervalAlgebraLin[DnsLinFlowOfTimeSEnd]
=   
    ops b|->bRel, m|->mRel, o|->oRel, d|->dRel, s|->sRel, f|->fRel, e|->eRel, 
	bi|->biRel, mi|->miRel, oi|->oiRel, di|-> diRel, si |-> siRel, fi|->fiRel,
        id|-> eRel
end



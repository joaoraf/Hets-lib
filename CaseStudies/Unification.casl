library Unification

from Basic/StructuredDatatypes version 1.0 get Set,List
from Basic/CharactersAndStrings get Char, String
from Basic/Numbers version 1.0 get  Nat

spec Function =
  Nat
and
  String
then
  sort function;
  ops declare : String * Nat -> function;
      arity : function -> Nat
  vars n : String; i : Nat
      . arity(declare(n,i)) = i
end

spec Var = Char with sorts Char |-> variable end

spec Const = Char with sorts Char |-> constant end

spec Exp =  sort expression end

spec Expression =
  Function and
  Const and
  List [Exp fit sort Elem |-> expression] and
  Set [Var fit sort Elem |-> variable]
then
  ops mk_c : constant -> expression;
      mk_v  : variable -> expression;
      mk_f : function * List[expression] -> expression;
      variables : expression -> Set[variable];
      variablesl : List[expression] -> Set[variable]
pred is_valid : expression;
     is_validl : List[expression];
vars  c : constant;
      v : variable;
      f:function;
      e : expression;
      l : List[expression]
. is_valid(mk_c(c))
. is_valid(mk_v(v))
. is_valid(mk_f(f,l)) <=> (#(l) = arity(f)) /\ is_validl(l)
. is_validl([])
. is_validl(e::l) <=> is_valid(e) /\ is_validl(l)
. variables(mk_c(c)) = {}
. variables(mk_v(v)) = {v}
. variables(mk_f(f,l)) = variablesl(l)
. variablesl([]) = {}
. variablesl(e::l) = (variables(e) union variablesl(l))
hide variablesl,is_validl
end

spec Substitution =
  Expression
then
  sorts substitution
  ops empty : substitution;
      dom : substitution -> Set[variable];
      rng : substitution -> Set[variable];
      add_s : variable * expression * substitution -> substitution;
      apply : expression * substitution -> expression;
      applyl : List[expression] * substitution -> List[expression];
      compose : substitution * substitution -> substitution;
  vars x : variable; e : expression; s : substitution
  . dom(empty) = {} /\ rng(empty) = {}
  . ((not (x eps dom(s))) /\ (not e = mk_v(x))) =>
       ( (dom(add_s(x,e,s)) = {x} union dom(s)) /\
         (rng(add_s(x,e,s)) = variables(e) union rng(s)) )
  vars  c : constant; x,y : variable; f : function;
        e : expression; s,s' : substitution; l : List[expression]
  . apply(e,empty) = e
  . apply(mk_c(c),s) = mk_c(c)
  . apply(mk_v(x),add_s(x,e,s)) = e
  . (not x = y) => (apply(mk_v(y),add_s(x,e,s)) = apply(mk_v(y),s))
  .  apply(mk_f(f,l),s) = mk_f(f,applyl(l,s))
  .  applyl([],s) = []
  . applyl((e::l),s) = apply(e,s)::applyl(l,s)
  . apply(e,compose(s,s')) = apply(apply(e,s),s')
  vars s,s',s'' : substitution
  . (compose(s,empty) = s) /\ (compose(empty,s) = s)
  . compose(compose(s,s'),s'') = compose(s,compose(s',s''))
  hide applyl
end


spec Unification =
 Substitution
then
  op unify : expression * expression -> substitution;
  pred is_moregeneral : substitution * substitution;
       is_idempotent : substitution;
  axiom
    forall e,e' : expression .
     (exists s: substitution . apply(e,s) = apply(e',s)) =>
      ( (apply(e,unify(e,e')) = apply(e',unify(e,e')))  /\
        (forall s':substitution .  apply(e,s') = apply(e',s') =>
                                   is_moregeneral(unify(e,e'),s'))  /\
        (is_idempotent(unify(e,e'))) )
  axiom
    forall s,s' : substitution .
     is_moregeneral(s,s') <=> (exists r: substitution . s' = compose(s,r))
  axiom forall s : substitution .
   is_idempotent(s) <=> ((dom(s) intersection rng(s)) = {})
  hide is_moregeneral,is_idempotent
end

library Examples/List

spec Elem =
  sort Elem
end

spec List[Elem] = 
     free type List[Elem] ::= nil | cons(Elem; List[Elem])
     op __++__ : List[Elem] * List[Elem] -> List[Elem], assoc, unit nil
     op reverse : List[Elem] -> List[Elem]
     vars e:Elem; l,l':List[Elem]
     . cons(e,l) ++ l' = cons(e,l++l') %(concat_def)%
     . reverse(nil) = nil              %(reverse_nl)%
     . reverse(cons(e,l)) = reverse(l) ++ cons(e,nil)  %(reverse_cons)%
end


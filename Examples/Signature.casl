library Examples/Signature

from Basic/StructuredDatatypes get Set, List
from Basic/CharactersAndStrings get String

spec Signature_Macro =

    Set[String fit sort Elem |-> String]
    with sort Set[String] |-> Signature_Sorts

  and

  {   String and List[String fit sort Elem |-> String]
    then
      free type
      Operation ::= operation( name: String;
                               argument_sorts: List[String];
                               result_sort: String)
    then
      Set[sort Operation fit sort Elem |-> Operation]
      with sort Set[Operation] |-> Signature_Operations
  }

then
   free type Signature ::= signature( sig_sorts: Signature_Sorts;
                                      sig_ops  : Signature_Operations)

end


spec Signature_Theory =
 Signature_Macro
then
  local{
    pred __eps__ : List[String] * Signature_Sorts

    forall S: Signature_Sorts; x: String; L: List[String]
    .  []:List[String]  eps S
    .  (x::L) eps S <=> x eps S /\ L eps S
  }
  within

  forall S:Signature
  . forall o: Operation .
     o eps sig_ops(S) =>
       argument_sorts(o) eps sig_sorts(S) /\
       result_sort(o)    eps sig_sorts(S)
end


%[
spec Example =
  Signature_Theory
then
  op S:Signature =
     signature( { 's'::[] },
                { operation( 'o'::[],
                             ('s'::[])::(('s'::[])::[]),
                             's'::[] )
                }
              )
end
]%

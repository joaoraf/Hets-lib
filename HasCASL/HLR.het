library HasCASL/HLR

from HasCASL/Categories get Category, Pushout

logic HasCASL


spec Transformation[Category] =
  Pushout[Category]
then
  type Rules = { (l,r): Mor * Mor . dom l = dom r }

  ops transform: Rules * Mor ->? Ob;
  
  forall r1 : Rules; g1 : Mor
  . let (l,r) = r1 
    in
    def transform(r1,g1) <=>
    exists g2,g3,c1,c2 : Mor . ((g1,c1) as POCocone) isCoconeFor ((l,g2) as PODiagram)
    /\ ((g3,c2) as POCocone) isCoconeFor ((r,g2) as PODiagram)
  . let (l,r) = r1 
    in
    exists g2,g3,c1,c2 : Mor . ((g1,c1) as POCocone) isCoconeFor ((l,g2) as PODiagram)
    /\ ((g3,c2) as POCocone) isCoconeFor ((r,g2) as PODiagram)
     => transform(r1,g1) = r objPushout g2
end


library HasCASL/LinearAlgebra
version 0.1

%author: E. Schulz
%date: 18-09-2008

logic HasCASL

from HasCASL/Reals get Reals, FieldWithValuation
from HasCASL/Algebra get
     ExtInverse, AbelianGroup, Field

spec AdditiveAbelianGroup_aux =
ExtInverse[AbelianGroup] with
  Elem |-> Space, __ * __ |-> __ + __, e |-> 0, __ / __ |-> __ - __, inv |-> -__
end

spec VectorSpace[Field] = AdditiveAbelianGroup_aux
then
     op  __ * __: Elem * Space -> Space

     forall s,r:Elem; x,y:Space

     . (r * s) * x = r * (s * x)              %(mix_assoc)%
     . (r + s) * x = (r * x) + (s * x)        %(distr_Field)%
     . r * (x + y) = (r * x) + (r * y)        %(distr_Space)%
end

spec NormedSpace[FieldWithValuation] =
VectorSpace[FieldWithValuation]
then
     op ||__|| : Space -> Real 
     forall a:Elem ; v,w: Space   
     . ||a * v|| = val(a) * ||v||	%(homogen)%
     . ||v + w|| <= ||v|| + ||w||      	%(triangle)%
     . ||v|| = 0 <=> v = 0  	 	%(definit)%
end

spec EuclideanVectorSpace = 
     VectorSpace[Reals fit Elem |-> Real]
then
     op __*__ : Space * Space -> Real   %% (bilinear form)

     forall a:Real ; v,v',w: Space
     . (v+v') * w = (v * w) + (v' * w)  %(distributiv)%
     . (a*v) * w = a * (v * w) 		%(homogen)%
     . v * w  = w * v   		%(commutativ)%
     . v * v = 0 =>  v = 0		%(pos_definit)%

then %implies
     forall a:Real ; v,v',w: Space
     . w * (v+v') = (w * v) + (w * v')  %(right_distributiv)%
     . v * (a*w) = a * (v * w) 		%(right_homogen)%
end


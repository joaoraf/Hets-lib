spec Petri Net = Monoid+ Map then
var P,T : Type
type Net P T = {(p,pre,post) : Set P  *  (T ->? Mon P) * (T ->? Mon P)  
                    	.dom pre=dom post 
                     	pre :: dom  pre  -> mon p 
                     	post :: dom post  -> mon p }

spec Petri System = PetriNet then
var P,T : Type
type Sys P T = {(n,m) : Net P T  *  Mon P  
                       .m isIn mon p}

ops  marking  :  Sys  P T  ->  Mon P 
        __[__>  : Sys  P T  *  T - > Sys  P T }

forall (n,m):Sys P T; m: Mon P; t:T
  .marking(n,m)=m
  .def (n,m)[t>  <=> t  isIn dom pre  /\ pre(t) <  m
  .def (n,m)[t> => (n,m)[t> = m - pre(t) + post(t)
 
spec PetriNet = 
  Monoid and Map 
then
  sorts P,T 
  type Net = {(p,pre,post) : Set P  *  (T ->? Mon P) * (T ->? Mon P)  
                      	. dom pre=dom post /\
                     	pre :: dom  pre  -> mon p /\
                     	post :: dom post  -> mon p }
end

spec PetriSystem = 
  PetriNet 
then
  type Sys = {((p,pre,post),m) : Net P T  *  Mon P  
                          . m isIn mon p}

  ops  marking  : Sys  P T  ->  Mon P;
        __[__>  : Sys  P T  *  T - > Sys  P T

  forall sys:Sys P T; n:Net P T; m:Mon P; t:T
  . marking ((n,m) as Sys P T) = m
  . def sys[t> <=> t isIn dom pre  /\ pre(t) < marking(sys)
  . def sys[t> => sys[t> = (net(sys), marking(sys) - pre(t) + post(t))
end 
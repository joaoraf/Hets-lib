library HasCASL/Real3D/Geometry
version 0.1

%author: E. Schulz
%date: 13-11-2008

logic HasCASL

from HasCASL/Real3D/Basics get AffineRealSpace3DWithSets


%[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                                                  %%
%%                          Pure Geometry                           %%
%%                                                                  %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%]%


spec BaseObjects = AffineRealSpace3DWithSets
then

     ops Cylinder(offset:Point;r:Real;axis:Vector):PointSet
	  = { \x:Point . exists l:Real. exists y:Vector.
	      l isIn [0...1] /\ orth(y,axis) /\ |y| <= r /\
	      x=offset + l*axis + y };


	 %{ The following part provides a basis for the
	 semantics of the solid works objects }%

	 %{ The plane orthogonal to the normal vector }%
	 VLine(p1:Vector;p2:Vector):VectorSet
	  = image(\y:Real .! p1 + (y*(p2-p1)), [0...1]);

	 %{ Normalize the given Vector and scale it by the scalar }%
	 VWithLength(v:Vector;s:Real):Vector
	  = v when (v=0) else (s / (|v| as NonZero))*v;

	 %{ The plane orthogonal to the normal vector }%
	 VPlane(normal:Vector):VectorSet
	  = { \y:Vector . orth(y,normal) };

	 %{ The plane spanned by the given to axes }%
	 VPlane2(axis1:Vector;axis2:Vector):VectorSet
          = VPlane(axis1 # axis2);

	 %{ The connected set containing the given point and separated 
	 by the given frontier }%
	 VConnected(frontier:VectorSet;point:Vector):VectorSet
	  = frontier when (frontier point) else 
	       { \y:Vector .  VLine(point,y) intersection frontier = emptySet };

	 %{ The halfspace separated by the plane defined
	 by the given normal vector, where the normal vector points to. }%
	 VHalfSpace(normal:Vector):VectorSet
	  = VConnected(VPlane normal, normal);

	 %{ As VHalfSpace but including the resulting VPlane. }%
	 VHalfSpace2(normal:Vector):VectorSet
	  = VConnected(VPlane normal, normal) union (VPlane normal);

	 %{ The ball with radius r }%
	 VBall(r:Real):VectorSet
	  = { \y:Vector .  |y| <= r };

	 %{ The circle as intersection of a plane with a ball }%
	 VCircle(r:Real;axis:Vector):VectorSet
	  = VPlane(axis) intersection VBall(r);


	 %{ This action attaches the given vectors to the given point
	 and thus creates a PointSet }%
	 ActAttach(point:Point;vectors:VectorSet):PointSet
	  = point + vectors;

	 %{ This action adds points to the given points by moving along
	 the axis }%
	 ActExtrude(axis:Vector;points:PointSet):PointSet
	  = { \x:Point . exists l:Real. exists y:Point.
	      l isIn [0...1] /\ y isIn points /\ x= y + l * axis };

end

logic HasCASL

%%from HasCASL/Real3D/SolidWorks/SW get SWDefault

from HasCASL/Real3D/SolidWorks/SWExt get SWExt

spec Prelim = SWExt
then
     pred OnPlane(plane:SWPlane; pt:Point) <=> NormalVector(plane) * vec(SpacePoint(plane),pt) = 0;
     op   d(p1,p2:Point):Real = ||vec(p1,p2)||;
end

spec Component = Prelim
%%spec Component = SWDefault
then
     ops

     Bottom:SWPlane;

     Offset:Point;
     BoundaryRing:Point;
     BoundaryTube:Point;
     ScrewOffset:Point;
     ScrewBoundary:Point;

     RingHeight:Real;
     TubeHeight:Real;
     ScrewHeight:Real;

     RingCircle:SWCircle = SWCircle(Offset, BoundaryRing);
     RingSketch:SWSketch = SWSketch([RingCircle], Bottom);

     Ring:SWExtrusion = SWExtrusion(RingSketch, RingHeight);

     ScrewCircle:SWCircle = SWCircle(ScrewOffset, ScrewBoundary);
     ScrewSketch:SWSketch = SWSketch([ScrewCircle], Bottom);

     ScrewHole:SWExtrusion = SWExtrusion(ScrewSketch, ScrewHeight);

     TubeCircle:SWCircle = SWCircle(Offset, BoundaryTube);
     TubeSketch:SWSketch = SWSketch([TubeCircle],Bottom);

     Hole:SWExtrusion = SWExtrusion(TubeSketch, TubeHeight);

     %% Constraints:

     . not Offset = BoundaryRing %(constr1)%
     . not RingHeight = 0 %(constr2)%
     . OnPlane(Bottom, Offset) %(constr3a)%
     . OnPlane(Bottom, BoundaryRing) %(constr3b)%

     . not ScrewOffset = ScrewBoundary %(constr4)%
     . not ScrewHeight = 0 %(constr5)%
     . OnPlane(Bottom, ScrewOffset) %(constr6a)%
     . OnPlane(Bottom, ScrewBoundary) %(constr6b)%

     . not Offset = BoundaryTube %(constr7)%
     . not RingHeight = 0 %(constr8)%
     %% . OnPlane(Bottom, Offset) %(constr9a)%
     . OnPlane(Bottom, BoundaryTube) %(constr9b)%

     . let d1 = d(Offset, ScrewBoundary);
           d2 = d(Offset, BoundaryRing);
           d3 = d(ScrewOffset, ScrewBoundary)
       in d1 + d3 < d2 %(constr10)%


%[ Geometric constraints

1. Offset != BoundaryRing
2. RingHeight != 0
3. Offset, BoundaryRing are on Bottom

Same for Screw (4-6)

Same for Tube (7-9)


Let d1 = d(Offset, ScrewBoundary)
    d2 = d(Offset, BoundaryRing)
    d3 = d(ScrewOffset, ScrewBoundary)

10. d1 + d3 < d2


The Matching Algorithm:

a. Find a match (substitution)
b. For all constraints check whether they are satisfiable
c. in case of unsat backtrack (find next match)


]%



end

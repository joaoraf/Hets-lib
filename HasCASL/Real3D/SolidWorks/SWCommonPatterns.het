library HasCASL/Real3D/SolidWorks/SWCommonPatterns
version 0.1

%author: E. Schulz
%date: 12-12-2008

logic HasCASL

from HasCASL/Real3D/Geometry get BaseObjects
from HasCASL/Real3D/SolidWorks/SolidWorks get SolidWorksWithSemantics

%[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                                                  %%
%%                       The SolidWorks common patterns             %%
%%                                                                  %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%]%


spec SolidWorksSemantics = SolidWorksWithSemantics then %implies

     vars pl1:SWPlane; v1:SWVector;
	  po1,po2:Point; alpha,beta,gamma:Type; A:alpha; Q:alpha->beta->gamma

     %% a simple fact about the plane and its semantics
     . let pl = i(pl1)
       in ((po1 isIn pl) /\ (po2 isIn pl)) =>
	  orth(iv(NormalVector(pl1)),vec(po1,po2)); %(help4)%

     %% let-env and lambda commute
     . (let a = A in \b.! (Q a b)) = \b.! (let a = A in (Q a b)); %(help5)%

     %% unique structure of all planes
     . i(pl1) = i(SWPlane(SpacePoint(pl1), NormalVector(pl1), v1)); %(help6)%


     %% another simple fact about the plane and its semantics
     . let pl = i(pl1)
       in orth(vec(ip(SpacePoint(pl1)), po1), iv(NormalVector(pl1))) =>
	  po1 isIn pl; %(help7)%

     
%[
]%

end


%%%%%%%%%%%%% semantical equality by theorem %%%%%%%%%%%%%

spec SolidWorksCylByArcExtrusion_is_AbstractCylinder = 
     BaseObjects and SolidWorksSemantics then

     ops height:Real;
	 center,boundarypoint:SWPoint;
	 plane:SWPlane; %(real plane)%
         arc:SWArc=SWArc(center,boundarypoint,boundarypoint); %(def of given arc)%
	 x1,x2,x3:Real; %(nonused reals for extrusion)%
	 b1,b2,b3,b4,b5:Logical; %(nonused booleans for extrusion)%

	 offset:Point = ip(center); %(cylinder offset)%
	 radius:Real = ||vec(ip(center),ip(boundarypoint))||; %(cylinder radius)%
	 axis:Vector = VWithLength(iv(NormalVector(plane)),height); %(cylinder axis)%

     . i(SWExtrusion(SWSketch([arc],plane),height,x1,b1,b2,x2,x3,b3,b4,b5))
	  = Cylinder(offset, radius, axis) %(extrusion is cylinder)% %implied
end


%%%%%%%%%%%%% semantical equality by view %%%%%%%%%%%%%

spec AbstractCylinder = BaseObjects then
     ops radius, height: Real;
	 offset:Point;
	 axis:Vector;
	 C: PointSet = Cylinder(offset,radius,axis);

     . ||axis|| = height;          %(the length of the axis is the height)%
     . radius > 0 /\ height > 0; %(non-collapsed cylinder)%
end


spec SolidWorksCylByArcExtrusion = SolidWorksSemantics then
     ops height:Real;
	 center,boundarypoint:SWPoint;
	 plane:SWPlane; %(real plane)%
         arc:SWArc=SWArc(center,boundarypoint,boundarypoint); %(def of given arc)%
	 x1,x2,x3:Real; %(nonused reals for extrusion)%
	 b1,b2,b3,b4,b5:Logical; %(nonused booleans for extrusion)%
	 cylinder:SWFeature=
              %% we ignore all parameters after the height
	      SWExtrusion(SWSketch([arc],plane),height,x1,b1,b2,x2,x3,b3,b4,b5);
	      %(def of given cylinder)%


     %{constraints for the given parameters}%
     . height > 0; %(real extrusion)%
     . not (center = boundarypoint); %(real arc)%
     . not (NormalVector(plane) = SWVector(0,0,0)); %(real plane)%

     . let c = ip(center);
           bp = ip(boundarypoint);
           p = i(plane)
       in
       (c isIn p) /\ (bp isIn p) %(the arc is wellformed)%
end


view SWCylByAE_IsCylinder: { AbstractCylinder hide Circle, Cylinder, Cylinder1 }
to
{ SolidWorksCylByArcExtrusion then
  ops
  offset:Point = ip(center); %(viewdef of offset)%
  axis:Vector = VWithLength(iv(NormalVector(plane)),height); %(viewdef of axis)%
  C: PointSet = i(cylinder); %(viewdef of C)% %(def of C1)%
  radius:Real = ||vec(ip(center),ip(boundarypoint))|| %(viewdef of radius)%
}
end

library HasCASL/Real3D/SolidWorks/SWCommonPatterns
version 0.1

%author: E. Schulz
%date: 12-12-2008

logic HasCASL

from HasCASL/Real3D/Geometry get PlaneProps, Cylinder
from HasCASL/Real3D/SolidWorks/SolidWorks
     get SolidWorksWithSemantics

%[%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                                                                  %%
%%                       The SolidWorks common patterns             %%
%%                                                                  %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%]%

spec SolidWorksPlane_is_AffinePlane = 
     PlaneProps and SolidWorksWithSemantics then
     var plane:SWPlane
     . i(plane) = Plane(ip(SpacePoint(plane)),iv(NormalVector(plane)) as VectorStar); %(plane is plane)% %implied

end


%%%%%%%%%%%%% semantical equality by theorem %%%%%%%%%%%%%

%% this version has the advantage over the view-version not to have
%% to give a mapping for all visible signature elements in AffineObjects!!

spec SolidWorksCylByArcExtrusion_is_AffineCylinder = 
     SolidWorksPlane_is_AffinePlane and Cylinder then

     ops height:RealPos;
	 center,boundarypoint:SWPoint;
	 plane:SWPlane; %(real plane)%
         arc:SWArc=SWArc(center,boundarypoint,boundarypoint); %(def of given arc)%
	 x1,x2,x3:Real; %(nonused reals for extrusion)%
	 b1,b2,b3,b4,b5:Logical; %(nonused booleans for extrusion)%

	 offset:Point = ip(center); %(cylinder offset)%
	 radius:RealPos = ||vec(ip(center),ip(boundarypoint))||; %(cylinder radius)%
	 axis:VectorStar = VWithLength(iv(NormalVector(plane)),height); %(cylinder axis)%


     %{constraints for the given parameters}%
     . height > 0; %(real extrusion)% %% follows from type RealPos
     . not (center = boundarypoint); %(real arc)%
     . not (NormalVector(plane) = SWVector(0,0,0)); %(real plane)%
     %% follows from type of axis and axis_def!

     . let c = ip(center);
           bp = ip(boundarypoint);
           p = i(plane)
       in
       (c isIn p) /\ (bp isIn p) %(the arc is wellformed)%


     %{The main theorem}%
     . i(SWExtrusion(SWSketch([arc],plane),height,x1,b1,b2,x2,x3,b3,b4,b5))
	  = Cylinder(offset, radius, axis) %(extrusion is cylinder)% %implied
%{
}%
end


%%%%%%%%%%%%% semantical equality by view %%%%%%%%%%%%%

spec SolidWorksCylByArcExtrusion = SolidWorksPlane_is_AffinePlane then
     op SWCylinder(offset:Point;r:RealPos;axis:VectorStar):SWFeature
	  = let bpCond = \p:Point .! let v = vec(offset, p) in orth(v,axis) /\ ||v|| = r;
	        boundarypoint = ip_i(choose(bpCond));
		center = ip_i(offset);
	        plane = SWPlane(center, iv_i(axis), SWVector(0,0,0));
		arc = SWArc(center,boundarypoint,boundarypoint);
		height = ||axis||;
		x1 = 0:Real;
		b = false
	    in
	    SWExtrusion(SWSketch([arc],plane),height,x1,b,b,x1,x1,b,b,b); %(affine cylinder by SW)%
	    %% every affine cylinder can be produced in SolidWorks
end

view SWCylByAE_IsCylinder: Cylinder to 
     {SolidWorksCylByArcExtrusion
        then
      op Cylinder(offset:Point;r:RealPos;axis:VectorStar):Pointset = 
           i(SWCylinder(offset;r;axis)

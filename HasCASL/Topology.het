library HasCASL/Topology

from HasCASL/Set get Set

logic HasCASL

spec TopologicalSpace_Ngh =
  Set then
  sort S
  op Ngh: S -> Set (Set S) 
  forall x:S; U,V:Set S
  . allSet isIn Ngh(x)
  . U subset V /\ U isIn Ngh(x) => V isIn Ngh(x)
  . U isIn Ngh(x) => x isIn U
  . U isIn Ngh(x) /\ V isIn Ngh(x) => U intersection V isIn Ngh(x)
  . U isIn Ngh(x) =>
               exists V:Set S . V isIn Ngh(x) 
               /\ forall y:S . y isIn V => U isIn Ngh(y)
then %def
  ops int(X:Set S):Set S = \ x:S . X isIn Ngh(x);
      cls(X:Set S):Set S = 
           \ x:S . forall Y:Set S . Y isIn Ngh(x) => not Y disjoint X;
      tau : Set(Set S) = \ X:Set S . X = int(X)
end


spec TopologicalSpace_Kuratowski =
  Set then
  sort S
  op cls : Set S -> Set S
  forall X,Y:Set S
  . cls(emptySet) = emptySet
  . X subset cls(X)
  . cls(cls(X)) = cls(X)
  . cls(X union Y) = cls(X) union cls(Y)
then %def
  ops int(X:Set S):Set S = allSet \\ cls(allSet \\ X);
      Ngh(x:S) : Set (Set S) = \ X:Set S . x isIn int(X);
      tau : Set(Set S) = \ X:Set S . X = int(X)
then %implies
  forall X,Y:Set S
  . cls(X intersection Y) subset cls(X) intersection cls(Y)
  . X subset Y => cls(X) subset cls(Y)
end

spec TopologicalSpace_OpenSet =
  Set then
  sort S
  op tau : Set(Set S)
  forall X,Y:Set S; XX:Set(Set S)
  . emptySet isIn tau
  . allSet isIn tau
  . X isIn tau /\ Y isIn tau => X intersection Y isIn tau
  . XX subset tau => bigunion XX isIn tau
then %def
  ops int(X:Set S):Set S = bigunion (\ Y:Set S . Y isIn tau /\ Y subset X);
      cls(X:Set S):Set S = allSet \\ int(allSet \\ X);
      Ngh(x:S) : Set (Set S) = \ X:Set S . x isIn int(X) 
end

view KN : TopologicalSpace_Kuratowski to TopologicalSpace_Ngh
end

view NO : TopologicalSpace_Ngh to TopologicalSpace_OpenSet
end

view OK : TopologicalSpace_OpenSet to TopologicalSpace_Kuratowski
end

library Ontology/Dolce/DolceCons/DolceConsParts

from Ontology/Dolce/DolceSimpl_Esort get Time_Mereology

%%One Point Model Found
spec TM_Cons=
     Time_Mereology
then
     . exists t:T . true  %% we need at least one time point
end

%%%%%%%%%%%%%%%% 1 and 2 point models for temp parthood no existence %%%%%%%%%%%%%%%%

spec OnePointTempParthoodNoModel =
  TM_Cons
then
  free type s ::= ThePoint
  pred PRE (x:s;t:T) <=> true
%%  pred tDif (x,y,z:s) <=> false
  pred tOv (x,y:s;t:T) <=> true
  pred tP (x,y:s;t:T) <=> true
  pred tPP (x,y:s;t:T) <=> false
%%  pred tSum  (x,y,z:s) <=> true
end


%%%%%%%%%%%%%%%%%

spec TwoPointTempParthoodNoModel =
  TM_Cons
then
   free type s ::= PointOne | PointTwo
   pred PRE (x:s;t:T) <=> true
   pred tOv (x,y:s;t:T) <=> x=y
   pred tP (x,y:s;t:T) <=> x=y
   pred tPP (x,y:s;t:T) <=> false
 end

spec ZeroPointTempParthoodExtNoModel =
  TM_Cons
then
  sort sub
  free type super ::= sort sub
   pred PRE:super*T;
   pred tOv:super*super*T;
   pred tP:super*super*T;
   pred tPP:super*super*T;
end

spec OnePointTempParthoodModel =
  sort T
  free type s ::= ThePoint
  pred PRE (x:s;t:T) <=> true
  pred tDif (x,y,z:s) <=> false
  pred tOv (x,y:s;t:T) <=> true
  pred tP (x,y:s;t:T) <=> true
  pred tPP (x,y:s;t:T) <=> false
  pred tSum  (x,y,z:s) <=> true
end
		
spec TempParthoodBinarySum [sorts left,right,sum] =
  sort T
  free type sum ::= sort left | sort right
  pred PRE: sum*T
  pred tOv (x,y:sum;t:T) <=> ( x in left /\ y in left /\ tOv(x,y,t) ) \/ ( x in right /\ y in right /\ tOv(x,y,t) ) 
  pred tP (x,y:sum;t:T)  <=> ( x in left /\ y in left /\ tP(x,y,t) )  \/ ( x in right /\ y in right /\ tP(x,y,t) )  
  pred tPP (x,y:sum;t:T) <=> ( x in left /\ y in left /\ tPP(x,y,t) ) \/ ( x in right /\ y in right /\ tPP(x,y,t) ) 		
end

spec TempParthoodTernarySum [sorts part1,part2,part3,sum] =
  sort T
  free type sum ::= sort part1 | sort part2 | sort part3
  pred PRE: sum*T
  pred tOv (x,y:sum;t:T) <=> ( x in part1 /\ y in part1 /\ tOv(x,y,t) ) \/ ( x in part2 /\ y in part2 /\ tOv(x,y,t) )  \/ ( x in part3 /\ y in part3 /\ tOv(x,y,t) )
  pred tP (x,y:sum;t:T)  <=> ( x in part1 /\ y in part1 /\ tP(x,y,t) )  \/ ( x in part2 /\ y in part2 /\ tP(x,y,t) )  \/ ( x in part3 /\ y in part3 /\ tP(x,y,t) )  
  pred tPP (x,y:sum;t:T) <=> ( x in part1 /\ y in part1 /\ tPP(x,y,t) ) \/ ( x in part2 /\ y in part2 /\ tPP(x,y,t) ) 	\/ ( x in part3 /\ y in part3 /\ tPP(x,y,t) )	
end

%% here as needs to ge generated in some useful way
%% probably we need to employ some powerset construction here...
spec TempParthoodTernaryFullSum [sorts left,right,as,sum] =
  sort T
  free type sum ::= sort left | sort right | sort as
  pred PRE: sum*T
  pred tOv (x,y:sum;t:T) <=> ( x in left /\ y in left /\ tOv(x,y,t) ) \/ ( x in right /\ y in right /\ tOv(x,y,t) )  \/ ( x in as /\ y in as /\ tOv(x,y,t) )
  pred tP (x,y:sum;t:T)  <=> ( x in left /\ y in left /\ tP(x,y,t) )  \/ ( x in right /\ y in right /\ tP(x,y,t) )  \/ ( x in as /\ y in as /\ tP(x,y,t) )  
  pred tPP (x,y:sum;t:T) <=> ( x in left /\ y in left /\ tPP(x,y,t) ) \/ ( x in right /\ y in right /\ tPP(x,y,t) ) 	\/ ( x in as /\ y in as /\ tPP(x,y,t) )	
  pred tDif (x,y,z:sum) <=> false
  pred tSum  (x,y,z:sum) <=> true
end

%%%%%%%%%%%%%%%%%% 1 point model for CEP %%%%%%%%%%%%%%%%%%%%%%%%%%%%%


spec OnePointCEPModel =
free type s ::= ThePoint
 pred P:s*s
 . P(ThePoint,ThePoint)
  preds
  %% Proper Part
  PP(x:s; y:s) <=> P(x, y) /\  not  P(y, x); %(Dd14)%

  %% Overlap
  Ov(x:s; y:s) <=> exists z:s.(P(z, x) /\  P(z, y)); %(Dd15)%

  %% Atom
  At(x:s) <=> not exists y:s.(PP(y, x)); %(Dd16)%

  %%  Atomic Part
  AtP(x:s; y:s) <=> P(x, y) /\  At(x); %(Dd17)%

  %%  Binary Sum
  Sum(z:s; x:s; y:s) <=> forall w:s.(Ov(w,z) <=> (Ov(w, x) \/  Ov(w, y)));

  %%  Binary Difference
  Dif(z:s; x:s; y:s) <=> forall w:s.(P(w,z) <=> (P(w, x) /\ not Ov(w, y)));
end

library Ontology/Examples/Biblio

logic DL

spec Biblio_DL =
  Class: Researcher
  SubclassOf: name some string 

  ObjectProperty: hasArticle
  InverseOf: hasJournal

  Class: Article
  SubclassOf: author some Thing, title some string, hasJournal some Journal
  
  Class: Journal
  SubclassOf: name some string, hasArticle some Thing, impactFactor some integer

then %implies
  Class: Journal
  SubclassOf: hasArticle some Article

end

logic RelScheme

spec Biblio_RS =
  Tables
    person(key id:pointer, name:string)
    author_of(person, paper:pointer)
    paper(key id:pointer,title:string,published_in:pointer)
    journal(key id:pointer,name:string,impact_factor:integer)
  
  Relationships
    author_of[person]      -> person[id]  one_to_many
    author_of[paper]       -> paper[id]   one_to_many
    paper[published_in]    -> journal[id] one_to_many
end

logic CASL

view Biblio_RS_in_DL : Biblio_RS to
  { Biblio_DL with DL |-> CASL
    then %def
      preds 
        journal(j:pointer;n:string;f:float) <=> 
          Journal(j) /\ name(j,n) /\ impactFactor(j,f);
        paper(a:pointer;t:string;j:pointer) <=> 
          Article(a) /\ Journal(j) /\ hasArticle(j,a) /\ title(a,t);
        author_of(p,a:pointer) <=> 
          Researcher(p) /\ Article(a) /\ author(p,a);
        person(p:integer;n:string) <=> Researcher(p) /\ name(p,n)
  } 
end

 view Biblio_DL_in_RS : Biblio_DL to
  { Biblio_RS with logic RelScheme -> CASL
    then %def
      preds Researcher(x:pointer)      <=> (exists n:string; a:pointer . person(x,n) /\ author_of(x,a));
            Article(x:pointer)         <=> (exists t:string; j:integer . paper(x,t,j));
            Journal(x:pointer)         <=> (exists n:string; i:float   . journal(x,n,i));
            name(x:pointer;n:string)   <=> person(x,n);
            hasArticle(x,j:pointer)    <=> (exists n,t:string; i:integer . journal(x,n,i) /\ paper(j,t,x));
            hasJorunal(j,x:pointer)    <=> (exists n,t:string; i:integer . journal(x,n,i) /\ paper(j,t,x));
            author(a,p:pointer)        <=> (exists t,n:string p_pointer . paper(a,t,p) /\ person(p,n));
            title(a:pointer; t:string) <=> (exists p:pointer . paper(a,t,p));
            impact_factor(j,f)         <=> (exists n:string . journal(j,n,f));
  }
end

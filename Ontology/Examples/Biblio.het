library Ontology/Examples/Biblio

logic DL

spec Biblio_DL =
  Class: Researcher
  SubclassOf: name some Thing  

  ObjectProperty: hasArticle
  InverseOf: hasJournal

  Class: Article
  SubclassOf: author some Thing, title some Thing, hasJournal some Journal
  
  Class: Journal
  SubclassOf: name some Thing, hasArticle some Thing, impactFactor some Thing

then %implies
  Class: Journal
  SubclassOf: hasArticle some Article

end

logic RelScheme

spec Biblio_RS =
  Tables
    person(key id:integer, name:string)
    author_of(person, paper:integer)
    paper(key id:integer,title:string,published_in:integer)
    journal(key id:integer,name:string,impact_factor:float)
  
  Relationships
    author_of[person]      -> person[id]  one_to_many
    author_of[paper]       -> paper[id]   one_to_many
    paper[published_in]    -> journal[id] one_to_many
end

logic CASL

view Biblio_RS_in_DL : Biblio_RS to
  { Biblio_DL with logic DL -> CASL
    then %def
      preds 
        journal(j:integer;n:string;f:float) <=> 
          Journal(j) /\ name(j,n) /\ impactFactor(j,f);
        paper(a:integer;t:string;j:integer) <=> 
          Article(a) /\ Journal(j) /\ hasArticle(j,a) /\ title(a,t);
        author_of(p,a:integer) <=> 
          Researcher(p) /\ Article(a) /\ author(p,a);
        person(p:integer;n:String) <=> Researcher(p) /\ name(p,n)
  } = logic RelScheme -> CASL
end

%[ view Biblio_DL_in_RS : Biblio_DL to]%
%[  { Biblio_RS with logic RelScheme -> CASL]%
%[    then %def]%
%[      preds Researcher(x:Thing) <=> exists n, p : Thing . person(x,n) /\ author(x,p)]%
%[            Article(x:Thing) <=> exists t,j:Thing . paper(x,t,j)]%
%[            Journal(x:Thing) <=> exists n,i:Thing . journal(x,n,i)]%
%[end]%

logic OWL

spec Node =
 Class: Node SubclassOf: hasValue some Thing
end
spec Tree =
Node
then free {
 ObjectProperty: child Inverses: childInv
 Class: EmptyTree
 Class: Tree EquivalentTo: EmptyTree or 
     (Node and childInv max 1 Thing and child some Thing and child only Tree)
  }
end

spec Stream =
Node
then cofree {
  Class: Stream EquivalentTo: Node and succ max 1 Thing and succ some Stream
}
end

spec Ancestor =
  ObjectProperty: hasChild
then
free {
  ObjectProperty: ancestor Transitive
  ObjectProperty: ancestorInv Inverses: ancestor
  ObjectProperty: hasChild SubpropertyOf: ancestorInv
  }
end
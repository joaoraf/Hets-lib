sort U
ops AdvancedDevelopingCountry, AdvancedEconomy, AfghanAfghani,
    Afghanistan, Agent, AgriculturalProduct, AgriculturalSector,
    Agriculture, AgricultureBasedEconomy, AgricultureFn,
    AgricultureForestryFishingAndHunting,
    AirConditioningAndWarmAirHeatingEquipmentAndCommercialAndIndustrialRefrigerationEquipmentManufacturing,
    Aircraft, AircraftManufacturing, Albania, Alfalfa, Algeria,
    AlmondNut, Aloes, Alumina, AluminaRefining, Aluminum,
    AluminumMetal, AmusementGamblingAndRecreationIndustries,
    AnatomicalStructure, Andorra, Angola, Animal,
    AnimalAgriculturalProduct, AnimalProduction, AnimalSkin,
    AntiguaAndBarbuda, Apple, Argentina, Armenia, Artifact,
    ArtsEntertainmentAndRecreation, Aruba, Asphalt,
    AsphaltPavingRoofingAndSaturatedMaterialsManufacturing, Attribute,
    Australia, Austria, Automobile, AutomobileManufacturing, Avocado,
    Azerbaijan, Bahrain, BalsaWood, Banana, Bangladesh, Barbados,
    BarleyFarming, BarleyGrain, Bauxite, Bean, Beef, Belarus, Belgium,
    Belize, Bermuda, Berry, Beverage, BeverageProduct, BinaryFunction,
    BinaryPredicate, BiologicallyActiveSubstance, Bird, BlackPepper,
    BodyCovering, BosniaAndHerzegovina, Breadfruit, BritishPound,
    Bulgaria, Burundi, Cabbage, Cambodia, Camel, Cameroon, Canada,
    CanadianDollar, Cannabis, CapeVerde, CapitalGood,
    CapitalistEconomy, Carbon, Cardamom, Carrot, CashewNut, Cassava,
    Cattle, CattleRanchingAndFarming, Cauliflower, Caviar, Cement,
    CementManufacturing, CentralAfricanRepublic,
    CentrallyPlannedEconomy, CerealGrain, CerealGrainFarming,
    CerealGrass, Chad, ChangeOfPossession, Cheese,
    ChemicalManufacturing, ChemicalProduct, Chicken, ChickenMeat,
    Chile, China, Chrysanthemum, Cinnamon, CitrusFruit, Clay,
    ClothesDrier, ClothesWashingMachine, Clothing, Clove, Clover, Coal,
    CoalIndustry, CoalMining, CoalProductsManufacturing, Coca, Cocaine,
    Cocoa, CocoaBean, Coconut, CoffeeBean, Colombia,
    CommercialAndIndustrialRefrigerationAndEquipmentManufacturing,
    CommunalLandOwnershipEconomy, CommunistState, Comoros,
    CompoundSubstance, Concrete,
    ConcretePipeBrickAndBlockManufacturing, ConsumerGood,
    ConsumerGoodsIndustry, ControlledLaborMarketEconomy,
    ControlledSubstance, CookingOven, CookingRange, Copper,
    CopperFoundriesExceptDieCasting, CopperIndustry, CopperOre,
    CopperOreAndNickelOreMining, CopperOreMining,
    CopperRollingDrawingExtrudingAndAlloying, Copra, Corn, CornFarming,
    CostaRica, CoteDIvoire, CottonFarming, CottonFiber,
    CountryInTransition, CowPea, Crayfish, Croatia, CropProduction,
    CrudePetroleumAndNaturalGasExtraction, CrudePetroleumExtraction,
    Cucumber, CurrencyMeasure, CutFlower, Cyprus, CzechRepublic,
    DairyCattleAndMilkProduction, DairyProduct, DateFruit, Day, Deer,
    Democracy, DemocraticRepublicOfTheCongo, DemocraticSocialism,
    Denmark, Detergent, DevelopedCountry, DevelopingCountry, Device,
    DieselFuel, Dishwasher, Distilling, DiversifiedEconomy, Djibouti,
    DomesticAnimal, Dominica, DominicanRepublic, Donkey,
    DrillingOilAndGasWells, Duck, DurableGood, EconomicAttribute,
    EconomicDevelopmentLevel, EconomicSystemAttribute, Ecuador,
    EdibleNut, EdibleTuber, Eggplant, Egypt, ElSalvador,
    ElectricalPowerGeneration, Electricity, EquatorialGuinea, Estonia,
    Ethiopia, Exporting, Fabric, FabricMills, Farming, FaroeIslands,
    Fertilizer, FertilizerIndustry, FertilizerManufacturing,
    FertilizerMineralMining, Fiji, FinancialSectorAttribute,
    FinancialTransaction, Finland, FiscalYearFn, FiscalYearStartingFn,
    Fish, FishProduct, FishRoe, FlaxFiber, FloweringPlant, Fodder,
    Food, FoodEgg, FoodFish, FoodManufacturing, FoodProduct, Footwear,
    FootwearManufacturing, ForageCrop, ForestProduct,
    ForestryAndLogging, FormerSovietOrEasternEuropeanCountry,
    FossilFuel, FossilFuelPowerGeneration, FourDragonsEconomy, France,
    Freezer, FrenchFranc, Fruit, FruitAndTreeNutFarming, FruitFarming,
    FruitOrVegetable, FunctionQuantity, Furniture,
    FurnitureAndHomeFurnishingWholesalers,
    FurnitureAndHomeFurnishingsStores,
    FurnitureAndRelatedProductManufacturing, FurnitureIndustry,
    FurnitureManufacturing, Gabon, Gambia, Gasoline, Gem, Gemstone,
    GeopoliticalArea, GermanMark, Germany, Ghana, Ginger, Goat,
    GoatFarming, Goose, GovernmentRegulatedEconomy,
    GovernmentSubsidizedEconomy, GrainAndOilseedMilling, Grape,
    GrapeVineyards, Grass, Greece, GreenPepper, Grenada,
    GroceryProduce, Groundnut, GroupOf7, Guatemala, GuernseyCattle,
    Guinea, GuineaBissau, GumArabic, Guyana, Haiti, HandicraftIndustry,
    HandicraftProduct, HandwovenCarpet, HandwovenCarpetManufacturing,
    Hardwood, HempFiber, HighIncomeCountry, HighTechIndustrialEconomy,
    HogAndPigFarming, HolySee, Honduras, Honey, HongKong, HoofedMammal,
    Horse, HotWaterHeater,
    HouseholdRefrigeratorAndHomeFreezerManufacturing, Hungary,
    HydroElectricPowerGeneration, IMFDevelopmentLevel, Iceland, India,
    Indonesia, IndustrialMachineryAndEquipmentWholesalers,
    IndustrialMachineryManufacturing, IndustrialRawMaterial,
    IndustrialSandMining, IndustrialSector, IndustrialSupply,
    IndustryAttribute, IntentionalProcess, Iran, Iraq, Ireland, Iron,
    IronAndSteelForging, IronAndSteelMills, IronForging, IronMetal,
    IronMills, IronOre, IronOreMining, IrreflexiveRelation, Israel,
    ItalianLire, Italy, Jamaica, Japan, JapaneseYen, Jewelry, Jordan,
    Joule, JuteFiber, KaolinAndBallClayMining, Kazakhstan,
    KentiaPalmSeed, Kenya, Khat, KilowattHour, Kiribati, Kuwait,
    Kyrgyzstan, LambMeat, Lambskin, Laos, Latvia, Lead, LeadIndustry,
    LeadManufacturing, LeadMetal, LeadOre, LeadOreAndZincOreMining,
    LeadOreMining, LeadProduct, Leaf, LeafyGreenVegetable,
    LeastDevelopedCountry, Lebanon, Legume, Lemon, Lentil, Lesotho,
    LessDevelopedCountry, Liberia, Libya, Liechtenstein, Lime, Liquid,
    Lithuania, Livestock, LowIncomeCountry, LowerMiddleIncomeCountry,
    Lumber, LumberIndustry,
    LumberPlywoodMillworkAndWoodPanelWholesalers, Luxembourg,
    MacademiaNut, Mace, Macedonia, Machine, MachineTool, Machinery,
    MachineryEquipmentAndSuppliesWholesalers, MachineryManufacturing,
    Madagascar, MaizeGrain, MajorAppliance, MajorIndustrialEconomy,
    Making, Malawi, Malaysia, Maldives, Mali, Malta, Mammal, Mango,
    ManufacturedProduct, ManufacturingBasedEconomy, MarketEconomy,
    MarketSocialism, MarshallIslands, Mauritania, Mauritius, Meat,
    MeatOfLandAnimal, Melon, Metal, MetalProduct, MetallurgicalPlant,
    MetallurgyIndustry, MetalworkingMachineryManufacturing, Mexico,
    Micronesia, Milk, MilletFarming, MilletGrain, Millwork, Mineral,
    MiningExceptOilAndGas, MiningIndustry, MiningProduct, MixedEconomy,
    Mixture, Moldova, Monaco, Mongolia, Morocco, MotorOil,
    MotorVehicleAndMotorVehiclePartsAndSuppliesWholesalers,
    MotorVehicleAndPartsDealers,
    MotorVehicleBodyAndTrailerManufacturing, MotorVehicleIndustry,
    MotorVehicleManufacturing, MotorVehiclePartsManufacturing,
    Mozambique, MulberryLeaf,
    MuseumsHistoricalSitesAndSimilarInstitutions, Mutton, Namibia,
    Narcotic, Nation, NationalizedIndustryEconomy, NaturalGas,
    NaturalGasDistribution, NaturalGasIndustry,
    NaturalGasLiquidExtraction, NaturalRubber, Nepal, Netherlands,
    NetherlandsAntilles, NewZealand, NewlyIndustrializingEconomy,
    Nicaragua, Nickel, NickelOre, NickelOreMining, Niger, Nigeria,
    Nitrogen, NonnegativeRealNumber, NorfolkIslandPineSeed, Norway,
    NuclearPowerGeneration, Nut, Nutmeg, OatFarming, OatGrain, Object,
    OffshoreBankingSectorEconomy, OffshoreFinancialSectorEconomy,
    Oilseed, OilseedAndGrainFarming, Okoume, OldTajikSomoni, Olive,
    OliveOil, Oman, Opium, OpiumPoppy, OpiumPoppyFarming, Orchid,
    OrganicObject, Organization,
    OrganizationOfPetroleumExportingCountries, OrnamentalFish,
    OtherChemicalAndFertilizerMineralMining,
    OtherConcreteProductManufacturing, OtherGrainFarming,
    OtherSourcePowerGeneration, PPPBasedEconomicValuation,
    PackagedBeverageProduct, PackagedFoodProduct, PaddyRice, Pakistan,
    PalmKernel, PalmOil, PalmOilNut, Panama, Papaw, Papaya,
    PapuaNewGuinea, Paraguay, PartialMarketEconomy, PassionFruit, Pea,
    Peanut, PeanutFarming, Pearl, PecanNut, Pelt, PerfumeEssence,
    PersonalAdornment, Peru, Petroleum,
    PetroleumAndCoalProductsManufacturing, PetroleumBasedEconomy,
    PetroleumIndustry, PetroleumLubricant,
    PetroleumLubricatingOilAndGreaseManufacturing, PetroleumProduct,
    PetroleumProductsManufacturing, PetroleumRefineries,
    PharmaceuticalPreparationManufacturing, PharmaceuticalProduct,
    Philippines, PhosphoricAcid, Phosphorus, PhysicalQuantity, Pig,
    Pineapple, PipelineTransportationOfNaturalGas, Plant,
    PlantAgriculturalProduct, Plantain, Plastic,
    PlasticsProductManufacturing, Poland, Pork, Portugal,
    PositiveInteger, PositiveRealNumber, Potash, PotatoFarming,
    PotatoTuber, Poultry, PoultryAndEggProduction, PowerGeneration,
    PreciousGemstone, PrimaryAluminumProduction,
    PrimarySmeltingAndRefiningOfCopper, PrivateEnterpriseEconomy,
    PrivatizingEconomy, Process, Product, ProductPackage, Pulse,
    PureCapitalistEconomy, PureSocialistEconomy, Pyrethrum, Qatar,
    QuaternaryPredicate, Quinine, ReadyMixConcrete,
    ReadyMixConcreteManufacturing, RealNumber, RefinedPetroleumProduct,
    RefrigeratedWarehousingAndStorage,
    RefrigerationEquipmentAndSuppliesWholesalers,
    RefrigerationEquipmentManufacturing, Refrigerator,
    RefrigeratorAndFreezerIndustry, Reindeer, Relation,
    RelationalAttribute, ReproductiveBody, Reptile, RepublicOfGeorgia,
    RiceFarming, RiceGrain, RoadVehicle, Rock, Romania, RootStarch,
    RootVegetable, Russia, Rwanda, RyeFarming, RyeGrain,
    SaintKittsAndNevis, SaintLucia, SaintVincentAndTheGrenadines,
    Salmon, Samoa, SanMarino, Sand, SaoTomeAndPrincipe, SaudiArabia,
    Seafood, Seed, SemipreciousGemstone, Senegal, SenepolCattle,
    Separating, ServiceBasedEconomy, ServiceSector, Sesame, Seychelles,
    SheaNut, Sheep, SheepFarming, Sheepskin, Shellfish, Shrimp,
    SierraLeone, Singapore, SisalFiber, Slovakia, Slovenia, Soap,
    SoapAndOtherDetergentManufacturing, SocialistEconomy,
    SolomonIslands, Somalia, Sorghum, SorghumFarming, SorghumGrain,
    SouthAfrica, SouthKorea, Soya, Soybean, Spain, Spice, SpicePepper,
    Squash, SriLanka, Steel, SteelForging,
    SteelFoundriesExceptInvestment, SteelIndustry,
    SteelInvestmentFoundries, SteelMills,
    SteelProductManufacturingFromPurchasedSteel,
    StoneMiningAndQuarrying, SubsistenceAgricultureEconomy, Substance,
    Sudan, Sugar, SugarBeet, SugarBeetFarming, SugarCane, Sunflower,
    SunflowerSeed, SupportActivitiesForMetalMining,
    SupportActivitiesForNonmetallicMineralsExceptFuels,
    SupportActivitiesForOilAndGasOperations,
    SupportActivitiesForOilOperations, Surfactant, Suriname, Swaziland,
    Sweden, SweetPepper, SweetPotatoTuber, Switzerland, SymbolicString,
    Syria, Taiwan, TajikSomoni, Tajikistan, Tanzania, TaroTuber,
    TaxHavenEconomy, TeaLeaf, TeaPlantAerialPart, TernaryPredicate,
    TextileIndustry, TextileMills, TextileProduct, TextileProductMills,
    Thailand, TheBahamas, Timber, TimeInterval, Tobacco, Togo, Tomato,
    TourismBasedEconomy, TourismIndustry, TradeBasedEconomy, Trailer,
    TravelArrangementAndReservationServices, TravelerAccommodation,
    TreeNutFarming, TrinidadAndTobago, TropicalFruit,
    TruckTrailerManufacturing, Tunisia, Turkey, TurkeyMeat,
    Turkmenistan, Turnip, Turtle, TwoTierLaborMarketEconomy,
    UNEconomicDevelopmentLevel, Uganda, Ukraine, UnaryFunction,
    UnderdevelopedCountry, UnitOfMeasure, UnitedArabEmirates,
    UnitedKingdom, UnitedStates, UnitedStatesDollar,
    UpperMiddleIncomeCountry, Uruguay, Uzbekistan, Vanilla, Vanuatu,
    Veal, Vegetable, VegetableAndMelonFarming, VegetableFarming,
    VegetableOil, VegetableOilIndustry, Venezuela, Vietnam, Walnut,
    WaterBuffalo, WaterBuffaloMeat, Watermelon, Watt, WearableItem,
    WelfareCapitalism, WheatFarming, WheatGrain, Wine, WineGrape,
    WineGrapeVineyards, WoodProduct, WoodProductManufacturing,
    WoolFiber, WorldBankGNIPerCapitaLevel, YamTuber, Year,
    YearDuration, Yemen, YlangYlang, Yugoslavia, Zambia, Zimbabwe,
    Zinc, ZincIndustry, ZincManufacturing, ZincOre, ZincOreMining,
    ZincProduct, a_0_Period_0_0_0_2_7_7_8, a_1, a_1_0_0, a_1_2_6,
    a_1_7_2, a_1_Period_0, a_2, a_2_9_9_6, a_3, a_3_5, a_3_6_0_0_0_0_0,
    a_3_Period_6, a_4, a_4_2, a_7_5_6, a_9_2_6_7,
    a_Quot_A_d_v_a_n_c_e_d_Space_D_e_v_e_l_o_p_i_n_g_Space_C_o_u_n_t_r_y_Quot,
    a_Quot_D_e_v_e_l_o_p_e_d_Space_C_o_u_n_t_r_y_Quot,
    a_Quot_F_i_r_s_t_Space_W_o_r_l_d_Quot,
    a_Quot_F_o_r_m_e_r_Space_E_a_s_t_e_r_n_Space_E_u_r_o_p_e_a_n_Quot,
    a_Quot_F_o_r_m_e_r_Space_S_o_v_i_e_t_Quot,
    a_Quot_F_o_r_m_e_r_Space_S_o_v_i_e_t_Space_o_r_Space_E_a_s_t_e_r_n_Space_E_u_r_o_p_e_a_n_Space_C_o_u_n_t_r_y_Quot,
    a_Quot_F_o_u_r_Space_D_r_a_g_o_n_s_Quot,
    a_Quot_F_o_u_r_Space_T_i_g_e_r_s_Quot,
    a_Quot_G_N_I_Space_p_e_r_Space_c_a_p_i_t_a_Quot, a_Quot_L_D_C_Quot,
    a_Quot_L_L_D_C_Quot,
    a_Quot_L_e_a_s_t_Space_D_e_v_e_l_o_p_e_d_Space_C_o_u_n_t_r_i_e_s_Quot,
    a_Quot_L_e_s_s_Space_D_e_v_e_l_o_p_e_d_Space_C_o_u_n_t_r_y_Quot,
    a_Quot_N_I_C_Quot, a_Quot_N_I_E_Quot,
    a_Quot_N_e_w_l_y_Space_I_n_d_u_s_t_r_i_a_l_i_z_i_n_g_Space_C_o_u_n_t_r_i_e_s_Quot,
    a_Quot_N_e_w_l_y_Space_I_n_d_u_s_t_r_i_a_l_i_z_i_n_g_Space_E_c_o_n_o_m_i_e_s_Quot,
    a_Quot_S_e_c_o_n_d_Space_W_o_r_l_d_Quot,
    a_Quot_T_h_i_r_d_Space_W_o_r_l_d_Quot,
    a_Quot_U_n_d_e_v_e_l_o_p_e_d_Space_C_o_u_n_t_r_y_Quot,
    a_Quot_U_n_d_e_v_e_l_o_p_e_d_Space_E_c_o_n_o_m_y_Quot,
    a_Quot_a_l_u_m_i_n_a_Quot,
    a_Quot_a_l_u_m_i_n_u_m_Space_o_x_i_d_e_Quot,
    a_Quot_c_a_s_s_a_v_a_Quot, a_Quot_c_o_q_u_i_l_l_a_Space_n_u_t_Quot,
    a_Quot_c_o_r_n_Quot, a_Quot_c_r_u_d_e_Space_o_i_l_Quot,
    a_Quot_d_a_i_r_y_Space_p_r_o_d_u_c_t_Quot,
    a_Quot_g_r_o_s_s_Space_n_a_t_i_o_n_a_l_Space_i_n_c_o_m_e_Space_p_e_r_Space_c_a_p_i_t_a_Quot,
    a_Quot_h_i_d_e_Quot,
    a_Quot_i_n_d_u_s_t_r_i_a_l_Space_c_o_u_n_t_r_y_Quot,
    a_Quot_k_W_h_Quot, a_Quot_k_h_a_t_Quot, a_Quot_m_a_i_z_e_Quot,
    a_Quot_m_a_n_i_o_c_Quot, a_Quot_m_i_l_k_Space_p_r_o_d_u_c_t_Quot,
    a_Quot_p_a_l_m_Space_o_i_l_Space_n_u_t_Quot, a_Quot_p_a_p_a_w_Quot,
    a_Quot_p_a_w_p_a_w_Quot, a_Quot_p_e_l_t_Quot,
    a_Quot_p_e_t_r_o_l_e_u_m_Quot, a_Quot_q_a_t_Quot,
    a_Quot_r_o_o_t_Space_c_r_o_p_Quot,
    a_Quot_r_o_o_t_Space_v_e_g_e_t_a_b_l_e_Quot,
    a_Quot_t_a_p_i_o_c_a_Quot, a_Quot_t_h_e_Space_N_o_r_t_h_Quot,
    a_Quot_t_h_e_Space_S_o_u_t_h_Quot, abbreviation,
    agriculturalProductType, agriculturalProductTypeByRank,
    annualElectricityConsumption, annualElectricityExport,
    annualElectricityImport, annualElectricityProduction,
    annualExpendituresOfArea, annualExpendituresOfAreaInPeriod,
    annualExportTotal, annualImportTotal, annualRevenuesOfArea,
    annualRevenuesOfAreaInPeriod, attribute, capitalExpendituresOfArea,
    capitalExpendituresOfAreaInPeriod, currencyCode,
    currencyExchangePerUSDollar, currencyExchangeRate,
    currencyExchangeRateInPeriod, currencyType, economicAidDonated,
    economicAidDonatedInPeriod, economicAidReceivedNet,
    economicAidReceivedNetInPeriod, economyType,
    electricityConsumptionInPeriod, electricityExportInPeriod,
    electricityFractionFromSource,
    electricityFractionFromSourceInPeriod, electricityImportInPeriod,
    electricityProductionInPeriod, exportCommodityType,
    exportCommodityTypeByRank, exportPartner, exportPartnerByFraction,
    exportPartnerByFractionInPeriod, exportPartnerByRank,
    exportPartnerByRankInPeriod, exportPartnerInPeriod,
    exportTotalInPeriod, externalDebt, externalDebtInPeriod,
    fiscalYearPeriod, highestDecileShareOfHouseholdIncome,
    highestDecileShareOfHouseholdIncomeInPeriod, importCommodityType,
    importCommodityTypeByRank, importPartner, importPartnerByFraction,
    importPartnerByFractionInPeriod, importPartnerByRank,
    importPartnerByRankInPeriod, importPartnerInPeriod,
    importTotalInPeriod, incomeDistributionByGiniIndex,
    incomeDistributionByGiniIndexInPeriod,
    industrialProductionGrowthRate,
    industrialProductionGrowthRateInPeriod, industryOfArea,
    industryProductType, industryRankByOutput, industryServiceType,
    inflationRateOfConsumerPrices,
    inflationRateOfConsumerPricesInPeriod,
    laborForceFractionByOccupation,
    laborForceFractionByOccupationInPeriod, laborForceTotal,
    laborForceTotalInPeriod, lowestDecileShareOfHouseholdIncome,
    lowestDecileShareOfHouseholdIncomeInPeriod,
    organizationProductType, organizationServiceType, perCapitaGDP,
    perCapitaGDPInPeriod, populationFractionBelowPovertyLine,
    populationFractionBelowPovertyLineInPeriod, realGrowthRateOfGDP,
    realGrowthRateOfGDPInPeriod, resultType, sectorCompositionOfGDP,
    sectorCompositionOfGDPInPeriod, sectorValueOfGDP,
    sectorValueOfGDPInPeriod, totalGDP, totalGDPInPeriod,
    unemploymentRateOfArea, unemploymentRateOfAreaInPeriod
        : U;
    AgricultureFn, BeginFn, EndFn, ExtensionFn, FiscalYearFn, MegaFn,
    WhenFn, a_n_o_t
        : U -> U;
    FiscalYearStartingFn, MeasureFn, MultiplicationFn,
    annualElectricityConsumption, annualElectricityExport,
    annualElectricityImport, annualElectricityProduction,
    annualExpendituresOfArea, annualExportTotal, annualImportTotal,
    annualRevenuesOfArea, capitalExpendituresOfArea,
    currencyExchangeRate, economicAidDonated, economicAidReceivedNet,
    economyType, exportPartner, externalDebt,
    highestDecileShareOfHouseholdIncome, importPartner,
    incomeDistributionByGiniIndex, industrialProductionGrowthRate,
    inflationRateOfConsumerPrices, laborForceTotal, located,
    lowestDecileShareOfHouseholdIncome, perCapitaGDP,
    populationFractionBelowPovertyLine, realGrowthRateOfGDP,
    sectorCompositionOfGDP, totalGDP, unemploymentRateOfArea
        : U * U -> U;
    electricityFractionFromSource, exportPartnerByFraction,
    exportPartnerByRank, importPartnerByFraction, importPartnerByRank,
    laborForceFractionByOccupation, sectorValueOfGDP
        : U * U * U -> U
preds a_r_e_s_u_l_t, abbreviation, agent, attribute, cardinality,
      component, contains, contraryAttribute, conventionalLongName,
      conventionalShortName, currencyExchangePerUSDollar, destination,
      disjoint, duration, economyType, exportCommodityType,
      exportPartner, fiscalYearPeriod, formerName,
      geopoliticalSubdivision, governmentType, greaterThan,
      greaterThanOrEqualTo, highestDecileShareOfHouseholdIncome,
      holdsDuring, importCommodityType, importPartner,
      incomeDistributionByGiniIndex, industryOfArea, industryProductType,
      industryServiceType, inflationRateOfConsumerPrices, instance,
      lessThan, lessThanOrEqualTo, located,
      lowestDecileShareOfHouseholdIncome, member, names,
      organizationProductType, organizationServiceType, origin,
      overlapsTemporally, part, patient,
      populationFractionBelowPovertyLine, range, rangeSubclass,
      relatedInternalConcept, resultType, starts, subAttribute, subclass,
      subrelation, successorAttribute, temporalPart,
      unemploymentRateOfArea : U * U;
      annualExpendituresOfAreaInPeriod, annualRevenuesOfAreaInPeriod,
      capitalExpendituresOfAreaInPeriod, currencyExchangeRateInPeriod,
      domain, domainSubclass, economicAidDonatedInPeriod,
      economicAidReceivedNetInPeriod, electricityConsumptionInPeriod,
      electricityExportInPeriod, electricityFractionFromSource,
      electricityImportInPeriod, electricityProductionInPeriod,
      exportCommodityTypeByRank, exportPartnerByFraction,
      exportPartnerInPeriod, exportTotalInPeriod, externalDebt,
      highestDecileShareOfHouseholdIncomeInPeriod,
      importCommodityTypeByRank, importPartnerByFraction,
      importPartnerInPeriod, importTotalInPeriod,
      incomeDistributionByGiniIndexInPeriod,
      industrialProductionGrowthRateInPeriod, industryRankByOutput,
      inflationRateOfConsumerPricesInPeriod,
      laborForceFractionByOccupation, laborForceTotalInPeriod,
      lowestDecileShareOfHouseholdIncomeInPeriod, perCapitaGDPInPeriod,
      populationFractionBelowPovertyLineInPeriod,
      realGrowthRateOfGDPInPeriod, sectorCompositionOfGDP,
      sectorCompositionOfGDPInPeriod, totalGDPInPeriod,
      unemploymentRateOfAreaInPeriod : U * U * U;
      electricityFractionFromSourceInPeriod,
      exportPartnerByFractionInPeriod, exportPartnerByRankInPeriod,
      importPartnerByFractionInPeriod, importPartnerByRankInPeriod,
      laborForceFractionByOccupationInPeriod,
      sectorCompositionOfGDPInPeriod, sectorValueOfGDPInPeriod : U * U *
                                                                 U * U;
      disjointDecomposition : U * U * U * U * U
vars vAG, vAGENT, vAGENT1, vAGENT2, vAMOUNT, vANIMAL, vAREA,
     vAREA1, vAREA2, vATTRIBUTE, vBUSINESS, vCAPAMOUNT, vCONCRETE,
     vCOUNTRY, vDAY, vDRINK, vEVENT, vEXPORT, vFOOD, vFRACTION, vFY,
     vGDPAMOUNT, vGENUS, vINDEX, vINDUSTRY, vITEM, vMETAL, vNTH,
     vOBJECT, vORE, vORG, vPACKAGE, vPART, vPERIOD, vPLACE, vPROCESS,
     vRANK, vRATE, vSECTOR, vSOURCE, vSTATE, vTIME, vTOTALAMOUNT,
     vTRANSFER, vTYPE, vUNIT, vX, vYEAR: U
. instance(economyType, BinaryPredicate)
. domain(economyType, a_1, Agent)
. domain(economyType, a_2, EconomicAttribute)
. subrelation(economyType, attribute)
%{economyType
"(&%economyType ?POLITY ?TYPE) means that the 
&%GeopoliticalArea ?POLITY has an economic system of &%TYPE."}%
. economyType(vAGENT, vATTRIBUTE) =>
      instance(vAGENT, GeopoliticalArea)
      \/ instance(vAGENT, Organization)
. subclass(EconomicAttribute, RelationalAttribute)
%{EconomicAttribute
"&%EconomicAttribute is the class 
of terms including all &%Attributes used to characterize the 
economic systems or development levels of &%Nations or dependent 
&%GeopoliticalAreas."}%
. subclass(EconomicDevelopmentLevel, EconomicAttribute)
%{EconomicDevelopmentLevel
"&%EconomicDevelopmentLevel is a subclass of &%EconomicAttribute  
containing terms used to describe the economic development level of a 
&%Nation or &%GeopoliticalArea.  This class is further subdivided into 
different scales devised or used by different agencies."}%
. subclass(UNEconomicDevelopmentLevel, EconomicDevelopmentLevel)
%{UNEconomicDevelopmentLevel
"&%UNEconomicDevelopmentLevel 
is a subclass of &%EconomicDevelopmentLevel containing terms used to 
represent economic development classifications used by &%UnitedNations 
agencies.  The top level of this classification scheme includes the 
concepts of &%DevelopedCountry, &%FormerSovietOrEasternEuropeanCountry, 
and &%LessDevelopedCountry."}%
. instance(DevelopedCountry, UNEconomicDevelopmentLevel)
. formerName(a_Quot_F_i_r_s_t_Space_W_o_r_l_d_Quot,
             DevelopedCountry)
. conventionalLongName(a_Quot_D_e_v_e_l_o_p_e_d_Space_C_o_u_n_t_r_y_Quot,
                       DevelopedCountry)
. names(a_Quot_i_n_d_u_s_t_r_i_a_l_Space_c_o_u_n_t_r_y_Quot,
        DevelopedCountry)
. conventionalShortName(a_Quot_t_h_e_Space_N_o_r_t_h_Quot,
                        DevelopedCountry)
%{DevelopedCountry
"&%DevelopedCountry (DC) is a term used to describe members of the top 
group in the &%UNEconomicDevelopmentLevels.  &%DevelopedCountry includes 
market-oriented economies of mainly democratic nations, including members 
of the &%OrganizationForEconomicCooperationAndDevelopment (OECD).  DCs 
are also known as First World countries, 'the North', and industrial 
countries.  Developed countries generally have high incomes (high per 
capita GDP or GNI), but there are exceptions to DC membership both above 
and below that standard.  There is significant overlap, but not perfect 
congruence, between the UN category &%DevelopedCountry and the IMF 
category &%AdvancedEconomy."}%
. cardinality(ExtensionFn(DevelopedCountry), a_3_5)
. economyType(Andorra, DevelopedCountry)
. economyType(Australia, DevelopedCountry)
. economyType(Austria, DevelopedCountry)
. economyType(Belgium, DevelopedCountry)
. economyType(Bermuda, DevelopedCountry)
. economyType(Canada, DevelopedCountry)
. economyType(Denmark, DevelopedCountry)
. economyType(FaroeIslands, DevelopedCountry)
. economyType(Finland, DevelopedCountry)
. economyType(France, DevelopedCountry)
. economyType(Germany, DevelopedCountry)
. economyType(Greece, DevelopedCountry)
. economyType(HolySee, DevelopedCountry)
. economyType(Iceland, DevelopedCountry)
. economyType(Ireland, DevelopedCountry)
. economyType(Israel, DevelopedCountry)
. economyType(Italy, DevelopedCountry)
. economyType(Japan, DevelopedCountry)
. economyType(Liechtenstein, DevelopedCountry)
. economyType(Luxembourg, DevelopedCountry)
. economyType(Malta, DevelopedCountry)
. economyType(Mexico, DevelopedCountry)
. economyType(Monaco, DevelopedCountry)
. economyType(Netherlands, DevelopedCountry)
. economyType(NewZealand, DevelopedCountry)
. economyType(Norway, DevelopedCountry)
. economyType(Portugal, DevelopedCountry)
. economyType(SanMarino, DevelopedCountry)
. economyType(SouthAfrica, DevelopedCountry)
. economyType(Spain, DevelopedCountry)
. economyType(Sweden, DevelopedCountry)
. economyType(Switzerland, DevelopedCountry)
. economyType(Turkey, DevelopedCountry)
. economyType(UnitedKingdom, DevelopedCountry)
. economyType(UnitedStates, DevelopedCountry)
. instance(FormerSovietOrEasternEuropeanCountry,
           UNEconomicDevelopmentLevel)
. names(a_Quot_F_o_r_m_e_r_Space_S_o_v_i_e_t_Space_o_r_Space_E_a_s_t_e_r_n_Space_E_u_r_o_p_e_a_n_Space_C_o_u_n_t_r_y_Quot,
        FormerSovietOrEasternEuropeanCountry)
. names(a_Quot_F_o_r_m_e_r_Space_S_o_v_i_e_t_Quot,
        FormerSovietOrEasternEuropeanCountry)
. names(a_Quot_F_o_r_m_e_r_Space_E_a_s_t_e_r_n_Space_E_u_r_o_p_e_a_n_Quot,
        FormerSovietOrEasternEuropeanCountry)
. formerName(a_Quot_S_e_c_o_n_d_Space_W_o_r_l_d_Quot,
             FormerSovietOrEasternEuropeanCountry)
. successorAttribute(FormerSovietOrEasternEuropeanCountry,
                     DevelopedCountry)
. attribute(vAREA, FormerSovietOrEasternEuropeanCountry) =>
      economyType(vAREA, CountryInTransition)
%{FormerSovietOrEasternEuropeanCountry
"&%FormerSovietOrEasternEuropeanCountry (former USSR-EE) is an  
&%Attribute that characterizes countries that were part of the former 
Soviet Union or its sphere of influence in Eastern Europe.  This level 
occupies a middle position between &%DevelopedCountry (DC) and 
&%LessDevelopedCountry (LDC) in &%UNEconomicDevelopmentLevels. 
Previously, former USSR-EE countries had a &%CentrallyPlannedEconomy and 
were Marxist-Leninist states.  Many are now evolving away from command 
economies to market economic systems.  During the 1980's, the group 
included Albania, Bulgaria, Cambodia, China, Cuba, Czechoslovakia, the 
German Democratic Republic (East Germany), Hungary, North Korea, Laos, 
Mongolia, Poland, Romania, the USSR, Vietnam and Yugoslavia."}%
. instance(LessDevelopedCountry, UNEconomicDevelopmentLevel)
. conventionalLongName(a_Quot_L_e_s_s_Space_D_e_v_e_l_o_p_e_d_Space_C_o_u_n_t_r_y_Quot,
                       LessDevelopedCountry)
. formerName(a_Quot_T_h_i_r_d_Space_W_o_r_l_d_Quot,
             LessDevelopedCountry)
. successorAttribute(LessDevelopedCountry,
                     FormerSovietOrEasternEuropeanCountry)
%{LessDevelopedCountry
"&%LessDevelopedCountry (LDC) is 
the &%Attribute used to describe the bottom group in the hierarchy 
of &%UNEconomicDevelopmentLevels. Less developed countries are countries 
or dependent areas with low levels of production, living standards, 
and technology.  Per capita GDP (&%perCapitaGDPInPeriod), or GDI 
(Gross Domestic Income), is generally less than $5,000 and often 
below $1,500.  Subgroups of LDC, however, include countries that have 
higher per capita incomes, as well as advanced technology, and rapid rates 
of growth.  Subgroups of LDC include: advanced developing countries, 
the Four Dragons (also known as Four Tigers), &%LeastDevelopedCountry 
(LLDCs), low-income countries, middle-income countries, newly 
industrializing economies (NIEs), the South (from the location of 
most LDC countries, relative to Northern developed countries), Third 
World (obsolete), &%UnderdevelopedCountry, &%UndevelopedCountry."}%
. conventionalShortName(a_Quot_t_h_e_Space_S_o_u_t_h_Quot,
                        LessDevelopedCountry)
. abbreviation(a_Quot_L_D_C_Quot, LessDevelopedCountry)
. cardinality(ExtensionFn(LessDevelopedCountry), a_1_7_2)
. economyType(Afghanistan, LessDevelopedCountry)
. economyType(Algeria, LessDevelopedCountry)
. economyType(Angola, LessDevelopedCountry)
. economyType(AntiguaAndBarbuda, LessDevelopedCountry)
. economyType(Argentina, LessDevelopedCountry)
. economyType(Aruba, LessDevelopedCountry)
. economyType(TheBahamas, LessDevelopedCountry)
. economyType(Bahrain, LessDevelopedCountry)
. economyType(Bangladesh, LessDevelopedCountry)
. economyType(Barbados, LessDevelopedCountry)
. economyType(Belize, LessDevelopedCountry)
. economyType(Burundi, LessDevelopedCountry)
. economyType(Cambodia, LessDevelopedCountry)
. economyType(Cameroon, LessDevelopedCountry)
. economyType(CapeVerde, LessDevelopedCountry)
. economyType(CentralAfricanRepublic, LessDevelopedCountry)
. economyType(Chad, LessDevelopedCountry)
. economyType(Chile, LessDevelopedCountry)
. economyType(China, LessDevelopedCountry)
. economyType(Colombia, LessDevelopedCountry)
. economyType(Comoros, LessDevelopedCountry)
. economyType(DemocraticRepublicOfTheCongo, LessDevelopedCountry)
. economyType(CostaRica, LessDevelopedCountry)
. economyType(CoteDIvoire, LessDevelopedCountry)
. economyType(Cyprus, LessDevelopedCountry)
. economyType(Djibouti, LessDevelopedCountry)
. economyType(Dominica, LessDevelopedCountry)
. economyType(DominicanRepublic, LessDevelopedCountry)
. economyType(Ecuador, LessDevelopedCountry)
. economyType(Egypt, LessDevelopedCountry)
. economyType(ElSalvador, LessDevelopedCountry)
. economyType(EquatorialGuinea, LessDevelopedCountry)
. economyType(Ethiopia, LessDevelopedCountry)
. economyType(Fiji, LessDevelopedCountry)
. economyType(Gabon, LessDevelopedCountry)
. economyType(Gambia, LessDevelopedCountry)
. economyType(Ghana, LessDevelopedCountry)
. economyType(Grenada, LessDevelopedCountry)
. economyType(Guatemala, LessDevelopedCountry)
. economyType(Guinea, LessDevelopedCountry)
. economyType(GuineaBissau, LessDevelopedCountry)
. economyType(Guyana, LessDevelopedCountry)
. economyType(Haiti, LessDevelopedCountry)
. economyType(Honduras, LessDevelopedCountry)
. economyType(India, LessDevelopedCountry)
. economyType(Indonesia, LessDevelopedCountry)
. economyType(Iran, LessDevelopedCountry)
. economyType(Iraq, LessDevelopedCountry)
. economyType(Jamaica, LessDevelopedCountry)
. economyType(Jordan, LessDevelopedCountry)
. economyType(Kenya, LessDevelopedCountry)
. economyType(Kiribati, LessDevelopedCountry)
. economyType(Kuwait, LessDevelopedCountry)
. economyType(Laos, LessDevelopedCountry)
. economyType(Lebanon, LessDevelopedCountry)
. economyType(Lesotho, LessDevelopedCountry)
. economyType(Liberia, LessDevelopedCountry)
. economyType(Libya, LessDevelopedCountry)
. economyType(Madagascar, LessDevelopedCountry)
. economyType(Malawi, LessDevelopedCountry)
. economyType(Malaysia, LessDevelopedCountry)
. economyType(Maldives, LessDevelopedCountry)
. economyType(Mali, LessDevelopedCountry)
. economyType(Malta, LessDevelopedCountry)
. economyType(MarshallIslands, LessDevelopedCountry)
. economyType(Mauritania, LessDevelopedCountry)
. economyType(Mauritius, LessDevelopedCountry)
. economyType(Mexico, LessDevelopedCountry)
. economyType(Micronesia, LessDevelopedCountry)
. economyType(Morocco, LessDevelopedCountry)
. economyType(Mozambique, LessDevelopedCountry)
. economyType(Namibia, LessDevelopedCountry)
. economyType(Nepal, LessDevelopedCountry)
. economyType(NetherlandsAntilles, LessDevelopedCountry)
. economyType(Nicaragua, LessDevelopedCountry)
. economyType(Niger, LessDevelopedCountry)
. economyType(Nigeria, LessDevelopedCountry)
. economyType(Oman, LessDevelopedCountry)
. economyType(Pakistan, LessDevelopedCountry)
. economyType(Panama, LessDevelopedCountry)
. economyType(PapuaNewGuinea, LessDevelopedCountry)
. economyType(Paraguay, LessDevelopedCountry)
. economyType(Peru, LessDevelopedCountry)
. economyType(Philippines, LessDevelopedCountry)
. economyType(Qatar, LessDevelopedCountry)
. economyType(Rwanda, LessDevelopedCountry)
. economyType(SaintKittsAndNevis, LessDevelopedCountry)
. economyType(SaintLucia, LessDevelopedCountry)
. economyType(SaintVincentAndTheGrenadines, LessDevelopedCountry)
. economyType(Samoa, LessDevelopedCountry)
. economyType(SaoTomeAndPrincipe, LessDevelopedCountry)
. economyType(SaudiArabia, LessDevelopedCountry)
. economyType(Senegal, LessDevelopedCountry)
. economyType(Seychelles, LessDevelopedCountry)
. economyType(SierraLeone, LessDevelopedCountry)
. economyType(SolomonIslands, LessDevelopedCountry)
. economyType(Somalia, LessDevelopedCountry)
. economyType(SouthAfrica, LessDevelopedCountry)
. economyType(SriLanka, LessDevelopedCountry)
. economyType(Sudan, LessDevelopedCountry)
. economyType(Suriname, LessDevelopedCountry)
. economyType(Swaziland, LessDevelopedCountry)
. economyType(Syria, LessDevelopedCountry)
. economyType(Tanzania, LessDevelopedCountry)
. economyType(Thailand, LessDevelopedCountry)
. economyType(Togo, LessDevelopedCountry)
. economyType(TrinidadAndTobago, LessDevelopedCountry)
. economyType(Tunisia, LessDevelopedCountry)
. economyType(Turkey, LessDevelopedCountry)
. economyType(UnitedArabEmirates, LessDevelopedCountry)
. economyType(Uganda, LessDevelopedCountry)
. economyType(Uruguay, LessDevelopedCountry)
. economyType(Vanuatu, LessDevelopedCountry)
. economyType(Venezuela, LessDevelopedCountry)
. economyType(Vietnam, LessDevelopedCountry)
. economyType(Yemen, LessDevelopedCountry)
. economyType(Zambia, LessDevelopedCountry)
. economyType(Zimbabwe, LessDevelopedCountry)
. instance(AdvancedDevelopingCountry, EconomicDevelopmentLevel)
. subAttribute(AdvancedDevelopingCountry, LessDevelopedCountry)
. names(a_Quot_A_d_v_a_n_c_e_d_Space_D_e_v_e_l_o_p_i_n_g_Space_C_o_u_n_t_r_y_Quot,
        AdvancedDevelopingCountry)
%{AdvancedDevelopingCountry
"&%AdvancedDevelopingCountry 
is an &%Attribute used to describe a &%LessDevelopedCountry (LDC) 
that is undergoing rapid industrial development.  Also called 'newly 
industrializing economy' (or 'country')."}%
. instance(NewlyIndustrializingEconomy, EconomicDevelopmentLevel)
. names(a_Quot_N_e_w_l_y_Space_I_n_d_u_s_t_r_i_a_l_i_z_i_n_g_Space_E_c_o_n_o_m_i_e_s_Quot,
        NewlyIndustrializingEconomy)
. abbreviation(a_Quot_N_I_E_Quot, NewlyIndustrializingEconomy)
. formerName(a_Quot_N_e_w_l_y_Space_I_n_d_u_s_t_r_i_a_l_i_z_i_n_g_Space_C_o_u_n_t_r_i_e_s_Quot,
             NewlyIndustrializingEconomy)
. formerName(a_Quot_N_I_C_Quot, NewlyIndustrializingEconomy)
%{NewlyIndustrializingEconomy
"&%NewlyIndustrializingEconomy is an &%Attribute used to describe a 
&%LessDevelopedCountry (LDC) that is undergoing rapid industrial 
development.  Also called 'newly industrializing economy' (or 
'country')."}%
. instance(FourDragonsEconomy, EconomicDevelopmentLevel)
. names(a_Quot_F_o_u_r_Space_D_r_a_g_o_n_s_Quot,
        FourDragonsEconomy)
. names(a_Quot_F_o_u_r_Space_T_i_g_e_r_s_Quot, FourDragonsEconomy)
. economyType(HongKong, FourDragonsEconomy)
. economyType(Singapore, FourDragonsEconomy)
. economyType(SouthKorea, FourDragonsEconomy)
. economyType(Taiwan, FourDragonsEconomy)
%{FourDragonsEconomy
"&%FourDragonsEconomy describes four 
small Asian countries that achieved rapid economic growth in the 1990s. 
Some systems of &%EconomicDevelopmentLevel place them as a 
&%LessDevelopedCountry, but the IMF includes them in &%AdvancedEconomy."}%
. attribute(vAREA, FourDragonsEconomy) =>
      economyType(vAREA, LessDevelopedCountry)
. attribute(vAREA, FourDragonsEconomy) =>
      economyType(vAREA, AdvancedEconomy)
. instance(UnderdevelopedCountry, EconomicDevelopmentLevel)
. subAttribute(UnderdevelopedCountry, LessDevelopedCountry)
%{UnderdevelopedCountry
"&%UnderdevelopedCountry is an 
&%Attribute describing less developed countries that have potential 
for above-average economic growth.  See also &%LessDevelopedCountry."}%
. instance(LeastDevelopedCountry, EconomicDevelopmentLevel)
. subAttribute(LeastDevelopedCountry, LessDevelopedCountry)
. conventionalLongName(a_Quot_L_e_a_s_t_Space_D_e_v_e_l_o_p_e_d_Space_C_o_u_n_t_r_i_e_s_Quot,
                       LeastDevelopedCountry)
. names(a_Quot_U_n_d_e_v_e_l_o_p_e_d_Space_C_o_u_n_t_r_y_Quot,
        LeastDevelopedCountry)
. names(a_Quot_U_n_d_e_v_e_l_o_p_e_d_Space_E_c_o_n_o_m_y_Quot,
        LeastDevelopedCountry)
. abbreviation(a_Quot_L_L_D_C_Quot, LeastDevelopedCountry)
. cardinality(ExtensionFn(LeastDevelopedCountry), a_4_2)
%{LeastDevelopedCountry
"&%LeastDevelopedCountry 
is a sub-classification of &%LessDevelopedCountry characterizing
those countries that have no significant economic growth, a per 
capita GDP of less than $1,000 &%UnitedStatesDollars, and low 
literacy.  Also known as 'undeveloped countries'."}%
. subclass(WorldBankGNIPerCapitaLevel, EconomicDevelopmentLevel)
. names(a_Quot_G_N_I_Space_p_e_r_Space_c_a_p_i_t_a_Quot,
        WorldBankGNIPerCapitaLevel)
. names(a_Quot_g_r_o_s_s_Space_n_a_t_i_o_n_a_l_Space_i_n_c_o_m_e_Space_p_e_r_Space_c_a_p_i_t_a_Quot,
        WorldBankGNIPerCapitaLevel)
%{WorldBankGNIPerCapitaLevel
"&%WorldBankGNIPerCapitaLevel 
is the subclass of &%EconomicDevelopmentLevel containing attributes 
that characterize countries according to their per capita gross national 
income (GNI), as determined by the &%WorldBankGroup.  The World Bank 
uses the Atlas method for making cross-country comparisons of national 
income."}%
. successorAttribute(LowIncomeCountry, LowerMiddleIncomeCountry)
. successorAttribute(LowerMiddleIncomeCountry,
                     UpperMiddleIncomeCountry)
. successorAttribute(UpperMiddleIncomeCountry, HighIncomeCountry)
. instance(LowIncomeCountry, WorldBankGNIPerCapitaLevel)
. attribute(vAREA, LowIncomeCountry) =>
      economyType(vAREA, LeastDevelopedCountry)
%{LowIncomeCountry
"&%LowIncomeCountry is an 
&%Attribute representing the World Bank classification for any country 
where the per capita GNI is $755 or below in &%UnitedStatesDollars."}%
. instance(vYEAR, TimeInterval)
  /\ holdsDuring(vYEAR, economyType(vAREA, LowIncomeCountry)) =>
      perCapitaGDPInPeriod(vAREA, MeasureFn(vAMOUNT, UnitedStatesDollar),
                           vYEAR)
      /\ lessThan(vAMOUNT, a_7_5_6)
. instance(LowerMiddleIncomeCountry, WorldBankGNIPerCapitaLevel)
%{LowerMiddleIncomeCountry
"&%LowerMiddleIncomeCountry is an &%Attribute representing the World 
Bank classification for any country where the per capita GNI is 
between $756 and $2,995 (inclusive) in &%UnitedStatesDollars."}%
. instance(vYEAR, TimeInterval)
  /\ holdsDuring(vYEAR,
                 economyType(vAREA, LowerMiddleIncomeCountry)) =>
      perCapitaGDPInPeriod(vAREA, MeasureFn(vAMOUNT, UnitedStatesDollar),
                           vYEAR)
      /\ greaterThanOrEqualTo(vAMOUNT, a_7_5_6)
. instance(vYEAR, TimeInterval)
  /\ holdsDuring(vYEAR,
                 economyType(vAREA, LowerMiddleIncomeCountry)) =>
      perCapitaGDPInPeriod(vAREA, MeasureFn(vAMOUNT, UnitedStatesDollar),
                           vYEAR)
      /\ lessThan(vAMOUNT, a_2_9_9_6)
. instance(UpperMiddleIncomeCountry, WorldBankGNIPerCapitaLevel)
%{UpperMiddleIncomeCountry
"&%LowerMiddleIncomeCountry is an &%Attribute representing the World Bank 
classification for any country where the per capita GNI is 
between $2,996 and $9,266 (inclusive) in &%UnitedStatesDollars."}%
. instance(vYEAR, TimeInterval)
  /\ holdsDuring(vYEAR,
                 economyType(vAREA, UpperMiddleIncomeCountry)) =>
      perCapitaGDPInPeriod(vAREA, MeasureFn(vAMOUNT, UnitedStatesDollar),
                           vYEAR)
      /\ greaterThanOrEqualTo(vAMOUNT, a_2_9_9_6)
. instance(vYEAR, TimeInterval)
  /\ holdsDuring(vYEAR,
                 economyType(vAREA, UpperMiddleIncomeCountry)) =>
      perCapitaGDPInPeriod(vAREA, MeasureFn(vAMOUNT, UnitedStatesDollar),
                           vYEAR)
      /\ lessThan(vAMOUNT, a_9_2_6_7)
. instance(HighIncomeCountry, WorldBankGNIPerCapitaLevel)
%{HighIncomeCountry
"&%HighIncomeCountry is an &%Attribute representing the World Bank 
classification for any country where the per capita GNI is 
equal to or greater than &9,266 in &%UnitedStatesDollars."}%
. attribute(vAREA, HighIncomeCountry)
  /\ not member(vAREA, OrganizationOfPetroleumExportingCountries) =>
      economyType(vAREA, DevelopedCountry)
. subclass(IMFDevelopmentLevel, EconomicDevelopmentLevel)
. successorAttribute(DevelopingCountry, CountryInTransition)
. successorAttribute(CountryInTransition, AdvancedEconomy)
%{IMFDevelopmentLevel
"&%IMFDevelopmentLevel is a 
collection of &%Attributes representing economic development levels 
used by the &%InternationalMonetaryFund (IMF) to characterize national 
economies.  The hierarchy of IMF levels includes: &%AdvancedEconomy, 
&%CountryInTransition, and &%DevelopingCountry.  There is some, but not  
complete, overlap with concepts used by &%UnitedNations agencies.  
See "}%
. instance(AdvancedEconomy, IMFDevelopmentLevel)
%{AdvancedEconomy
"&%AdvancedEconomy is an &%Attribute 
used to represent the &%InternationalMonetaryFund's top category of 
development levels (&%AdvancedEconomy,, countries in transition, and 
developing countries.  Generally (but not exactly) corresponds with 
&%DevelopedCountry classification used by &%UnitedNations agencies."}%
. economyType(Australia, AdvancedEconomy)
. economyType(Austria, AdvancedEconomy)
. economyType(Belgium, AdvancedEconomy)
. economyType(Canada, AdvancedEconomy)
. economyType(Denmark, AdvancedEconomy)
. economyType(Finland, AdvancedEconomy)
. economyType(France, AdvancedEconomy)
. economyType(Germany, AdvancedEconomy)
. economyType(Greece, AdvancedEconomy)
. economyType(HongKong, AdvancedEconomy)
. economyType(Iceland, AdvancedEconomy)
. economyType(Ireland, AdvancedEconomy)
. economyType(Israel, AdvancedEconomy)
. economyType(Italy, AdvancedEconomy)
. economyType(Japan, AdvancedEconomy)
. economyType(SouthKorea, AdvancedEconomy)
. economyType(Luxembourg, AdvancedEconomy)
. economyType(Netherlands, AdvancedEconomy)
. economyType(NewZealand, AdvancedEconomy)
. economyType(Norway, AdvancedEconomy)
. economyType(Portugal, AdvancedEconomy)
. economyType(Singapore, AdvancedEconomy)
. economyType(Spain, AdvancedEconomy)
. economyType(Sweden, AdvancedEconomy)
. economyType(Switzerland, AdvancedEconomy)
. economyType(Taiwan, AdvancedEconomy)
. economyType(UnitedKingdom, AdvancedEconomy)
. economyType(UnitedStates, AdvancedEconomy)
. instance(CountryInTransition, IMFDevelopmentLevel)
%{CountryInTransition
"&%CountryInTransition is a term 
used by the &%InternationalMonetaryFund (IMF) to describe the middle 
group in its hierarchy of advanced countries, countries in transition, 
and developing countries.  Most of the countries with this attribute 
are former USSR or Eastern European countries.  Generally corresponds 
with &%FormerSovietOrEasternEuropeanCountry classification used by 
&%UnitedNations agencies."}%
. economyType(Albania, CountryInTransition)
. economyType(Armenia, CountryInTransition)
. economyType(Azerbaijan, CountryInTransition)
. economyType(Belarus, CountryInTransition)
. economyType(BosniaAndHerzegovina, CountryInTransition)
. economyType(Bulgaria, CountryInTransition)
. economyType(Croatia, CountryInTransition)
. economyType(CzechRepublic, CountryInTransition)
. economyType(Estonia, CountryInTransition)
. economyType(RepublicOfGeorgia, CountryInTransition)
. economyType(Hungary, CountryInTransition)
. economyType(Kazakhstan, CountryInTransition)
. economyType(Kyrgyzstan, CountryInTransition)
. economyType(Latvia, CountryInTransition)
. economyType(Lithuania, CountryInTransition)
. economyType(Macedonia, CountryInTransition)
. economyType(Moldova, CountryInTransition)
. economyType(Mongolia, CountryInTransition)
. economyType(Poland, CountryInTransition)
. economyType(Romania, CountryInTransition)
. economyType(Russia, CountryInTransition)
. economyType(Slovakia, CountryInTransition)
. economyType(Slovenia, CountryInTransition)
. economyType(Tajikistan, CountryInTransition)
. economyType(Turkmenistan, CountryInTransition)
. economyType(Ukraine, CountryInTransition)
. economyType(Uzbekistan, CountryInTransition)
. economyType(Yugoslavia, CountryInTransition)
. instance(Yugoslavia, Nation)
. instance(DevelopingCountry, IMFDevelopmentLevel)
%{DevelopingCountry
"&%DevelopingCountry is a term 
used by the &%InternationalMonetaryFund (IMF) for the bottom group 
in its hierarchy of advanced countries, countries in transition, 
and developing countries. Generally corresponds to the attribute 
&%LessDevelopedCountry used by &%UnitedNations agencies.  Not to 
be confused with &%DevelopedCountry."}%
. cardinality(ExtensionFn(DevelopingCountry), a_1_2_6)
. economyType(Afghanistan, DevelopingCountry)
. economyType(Algeria, DevelopingCountry)
. economyType(Angola, DevelopingCountry)
. economyType(AntiguaAndBarbuda, DevelopingCountry)
. economyType(Argentina, DevelopingCountry)
. economyType(Aruba, DevelopingCountry)
. economyType(TheBahamas, DevelopingCountry)
. economyType(Bahrain, DevelopingCountry)
. economyType(Bangladesh, DevelopingCountry)
. economyType(Barbados, DevelopingCountry)
. economyType(Belize, DevelopingCountry)
. economyType(Burundi, DevelopingCountry)
. economyType(Cambodia, DevelopingCountry)
. economyType(Cameroon, DevelopingCountry)
. economyType(CapeVerde, DevelopingCountry)
. economyType(CentralAfricanRepublic, DevelopingCountry)
. economyType(Chad, DevelopingCountry)
. economyType(Chile, DevelopingCountry)
. economyType(China, DevelopingCountry)
. economyType(Colombia, DevelopingCountry)
. economyType(Comoros, DevelopingCountry)
. economyType(DemocraticRepublicOfTheCongo, DevelopingCountry)
. economyType(CostaRica, DevelopingCountry)
. economyType(CoteDIvoire, DevelopingCountry)
. economyType(Cyprus, DevelopingCountry)
. economyType(Djibouti, DevelopingCountry)
. economyType(Dominica, DevelopingCountry)
. economyType(DominicanRepublic, DevelopingCountry)
. economyType(Ecuador, DevelopingCountry)
. economyType(Egypt, DevelopingCountry)
. economyType(ElSalvador, DevelopingCountry)
. economyType(EquatorialGuinea, DevelopingCountry)
. economyType(Ethiopia, DevelopingCountry)
. economyType(Fiji, DevelopingCountry)
. economyType(Gabon, DevelopingCountry)
. economyType(Gambia, DevelopingCountry)
. economyType(Ghana, DevelopingCountry)
. economyType(Grenada, DevelopingCountry)
. economyType(Guatemala, DevelopingCountry)
. economyType(Guinea, DevelopingCountry)
. economyType(GuineaBissau, DevelopingCountry)
. economyType(Guyana, DevelopingCountry)
. economyType(Haiti, DevelopingCountry)
. economyType(Honduras, DevelopingCountry)
. economyType(India, DevelopingCountry)
. economyType(Indonesia, DevelopingCountry)
. economyType(Iran, DevelopingCountry)
. economyType(Iraq, DevelopingCountry)
. economyType(Jamaica, DevelopingCountry)
. economyType(Jordan, DevelopingCountry)
. economyType(Kenya, DevelopingCountry)
. economyType(Kiribati, DevelopingCountry)
. economyType(Kuwait, DevelopingCountry)
. economyType(Laos, DevelopingCountry)
. economyType(Lebanon, DevelopingCountry)
. economyType(Lesotho, DevelopingCountry)
. economyType(Liberia, DevelopingCountry)
. economyType(Libya, DevelopingCountry)
. economyType(Madagascar, DevelopingCountry)
. economyType(Malawi, DevelopingCountry)
. economyType(Malaysia, DevelopingCountry)
. economyType(Maldives, DevelopingCountry)
. economyType(Mali, DevelopingCountry)
. economyType(Malta, DevelopingCountry)
. economyType(MarshallIslands, DevelopingCountry)
. economyType(Mauritania, DevelopingCountry)
. economyType(Mauritius, DevelopingCountry)
. economyType(Mexico, DevelopingCountry)
. economyType(Micronesia, DevelopingCountry)
. economyType(Morocco, DevelopingCountry)
. economyType(Mozambique, DevelopingCountry)
. economyType(Namibia, DevelopingCountry)
. economyType(Nepal, DevelopingCountry)
. economyType(NetherlandsAntilles, DevelopingCountry)
. economyType(Nicaragua, DevelopingCountry)
. economyType(Niger, DevelopingCountry)
. economyType(Nigeria, DevelopingCountry)
. economyType(Oman, DevelopingCountry)
. economyType(Pakistan, DevelopingCountry)
. economyType(Panama, DevelopingCountry)
. economyType(PapuaNewGuinea, DevelopingCountry)
. economyType(Paraguay, DevelopingCountry)
. economyType(Peru, DevelopingCountry)
. economyType(Philippines, DevelopingCountry)
. economyType(Qatar, DevelopingCountry)
. economyType(Rwanda, DevelopingCountry)
. economyType(SaintKittsAndNevis, DevelopingCountry)
. economyType(SaintLucia, DevelopingCountry)
. economyType(SaintVincentAndTheGrenadines, DevelopingCountry)
. economyType(Samoa, DevelopingCountry)
. economyType(SaoTomeAndPrincipe, DevelopingCountry)
. economyType(SaudiArabia, DevelopingCountry)
. economyType(Senegal, DevelopingCountry)
. economyType(Seychelles, DevelopingCountry)
. economyType(SierraLeone, DevelopingCountry)
. economyType(SolomonIslands, DevelopingCountry)
. economyType(Somalia, DevelopingCountry)
. economyType(SouthAfrica, DevelopingCountry)
. economyType(SriLanka, DevelopingCountry)
. economyType(Sudan, DevelopingCountry)
. economyType(Suriname, DevelopingCountry)
. economyType(Swaziland, DevelopingCountry)
. economyType(Syria, DevelopingCountry)
. economyType(Tanzania, DevelopingCountry)
. economyType(Thailand, DevelopingCountry)
. economyType(Togo, DevelopingCountry)
. economyType(TrinidadAndTobago, DevelopingCountry)
. economyType(Tunisia, DevelopingCountry)
. economyType(Turkey, DevelopingCountry)
. economyType(UnitedArabEmirates, DevelopingCountry)
. economyType(Uganda, DevelopingCountry)
. economyType(Uruguay, DevelopingCountry)
. economyType(Vanuatu, DevelopingCountry)
. economyType(Venezuela, DevelopingCountry)
. economyType(Vietnam, DevelopingCountry)
. economyType(Yemen, DevelopingCountry)
. economyType(Zambia, DevelopingCountry)
. economyType(Zimbabwe, DevelopingCountry)
. instance(MajorIndustrialEconomy, EconomicDevelopmentLevel)
%{MajorIndustrialEconomy
"&%MajorIndustrialEconomy is an 
&%Attribute used to describe countries with the largest, industrialized, 
non-communist economies in the world."}%
. attribute(vAREA, MajorIndustrialEconomy) =>
      economyType(vAREA, DevelopedCountry)
. attribute(vAREA, MajorIndustrialEconomy) =>
      economyType(vAREA, AdvancedEconomy)
. member(vSTATE, GroupOf7) =>
      attribute(vSTATE, MajorIndustrialEconomy)
. instance(HighTechIndustrialEconomy, EconomicDevelopmentLevel)
%{HighTechIndustrialEconomy
"&%HighTechIndustrialEconomy 
is an &%Attribute used to describe industrialized countries whose 
infrastructure uses the most advanced kinds of technology."}%
. subclass(EconomicSystemAttribute, EconomicAttribute)
%{EconomicSystemAttribute
"&%EconomicSystemAttribute 
is the class of &%Attributes that describe the type of economic 
system that a country or area has.  For example, &%CapitalistEconomy 
or &%SocialistEconomy."}%
. instance(CapitalistEconomy, EconomicSystemAttribute)
. subAttribute(CapitalistEconomy, PrivateEnterpriseEconomy)
%{CapitalistEconomy
"&%CapitalistEconomy is the 
&%Attribute used to characterize a country whose economy is based 
on private ownership of the means of production and distribution, 
and on private accumulation of capital."}%
. instance(PureCapitalistEconomy, EconomicSystemAttribute)
. subAttribute(PureCapitalistEconomy, CapitalistEconomy)
. contraryAttribute(PureCapitalistEconomy, MixedEconomy)
%{PureCapitalistEconomy
"&%PureCapitalistEconomy is an 
&%Attribute representing a capitalist economy that has no admixture of 
socialism."}%
. instance(PrivateEnterpriseEconomy, EconomicSystemAttribute)
. subAttribute(PrivateEnterpriseEconomy, CapitalistEconomy)
%{PrivateEnterpriseEconomy
"&%PrivateEnterpriseEconomy is 
the &%Attribute used to characterize a country in which private 
enterprise is the main source of economic wealth."}%
. instance(MarketEconomy, EconomicSystemAttribute)
%{MarketEconomy
"&%MarketEconomy is an &%Attribute that 
describes an economy in which market forces, specifically supply and 
demand, provide input for privately managed decisions about pricing 
and production of goods."}%
. instance(SocialistEconomy, EconomicSystemAttribute)
%{SocialistEconomy
"&%SocialistEconomy is the &%Attribute 
used to characterize a country in which there is government ownership 
or direction of the means of production and distribution."}%
. instance(PureSocialistEconomy, EconomicSystemAttribute)
. subAttribute(PureSocialistEconomy, SocialistEconomy)
. contraryAttribute(PureSocialistEconomy, MixedEconomy)
. contraryAttribute(PureSocialistEconomy, PureCapitalistEconomy)
%{PureSocialistEconomy
"&%PureSocialistEconomy is an 
&%Attribute representing a socialist economy that has no admixture of 
capitalism."}%
. instance(DemocraticSocialism, EconomicSystemAttribute)
. subAttribute(DemocraticSocialism, SocialistEconomy)
%{DemocraticSocialism
"&%DemocraticSocialism is an  
&%Attribute that describes a country in which socialism is promoted 
by a political party or parties within a democratic government. 
Under &%DemocraticSocialism, the government participates in central 
planning of the economy and may also manage nationalized industries."}%
. attribute(vAREA, DemocraticSocialism) =>
      governmentType(vAREA, Democracy)
. instance(MarketSocialism, EconomicSystemAttribute)
. subAttribute(MarketSocialism, PartialMarketEconomy)
. instance(CommunalLandOwnershipEconomy, EconomicSystemAttribute)
. subAttribute(CommunalLandOwnershipEconomy, SocialistEconomy)
. instance(MixedEconomy, EconomicSystemAttribute)
%{MixedEconomy
"&%MixedEconomy is the &%Attribute 
of a country whose economy has elements of more than one pure 
economic system, e.g., a market economy with government welfare 
for unemployed workers.  A mixed-economy country may be a 
&%CountryInTransition, as from a prior communist economy to 
capitalism, but a mixed economy may also be a stable combination 
of different economic approaches in different areas of a national 
economy, e.g., nationally managed health care and education systems 
in an otherwise private-enterprise economy."}%
. instance(PartialMarketEconomy, EconomicSystemAttribute)
. subAttribute(PartialMarketEconomy, MixedEconomy)
. instance(GovernmentRegulatedEconomy, EconomicSystemAttribute)
%{GovernmentRegulatedEconomy
"&%GovernmentRegulatedEconomy 
is an &%Attribute that describes the economy of a country in which the 
government determines prices, production, wages, allocation of resources, 
or other economic factors.  An economy that is wholly government planned 
is a &%CentrallyPlannedEconomy."}%
. instance(CentrallyPlannedEconomy, EconomicSystemAttribute)
. subAttribute(CentrallyPlannedEconomy, GovernmentRegulatedEconomy)
%{CentrallyPlannedEconomy
"&%CentrallyPlannedEconomy 
is a term used mainly to describe communist or formerly communist 
states, many of which are now evolving away from command economies 
towards market-oriented systems.  Also known as a 'command economy'."}%
. attribute(vAREA, CommunistState) /\ instance(vAREA, Nation) =>
      economyType(vAREA, CentrallyPlannedEconomy)
. instance(PrivatizingEconomy, EconomicSystemAttribute)
. subAttribute(PrivatizingEconomy, MixedEconomy)
%{PrivatizingEconomy
"&%PrivatizingEconomy is an 
&%Attribute that describes a country in which formerly government-
owned industries are being transferred into private holdings."}%
. attribute(vAREA, PrivatizingEconomy) =>
      economyType(vAREA, CountryInTransition)
. instance(NationalizedIndustryEconomy, EconomicSystemAttribute)
. subAttribute(NationalizedIndustryEconomy,
               GovernmentRegulatedEconomy)
%{NationalizedIndustryEconomy
"&%NationalizedIndustryEconomy 
is an &%Attribute describing an economy in which the major industries,  
such as energy and transportation, are owned by the national government."}%
. instance(GovernmentSubsidizedEconomy, EconomicSystemAttribute)
%{GovernmentSubsidizedEconomy
"&%GovernmentSubsidizedEconomy 
is an &%Attribute describing an economy in which the government provides 
subsidies to various industries, workers, or other groups as part of its 
economic policy."}%
. instance(WelfareCapitalism, EconomicSystemAttribute)
. subAttribute(WelfareCapitalism, MixedEconomy)
. subAttribute(WelfareCapitalism, GovernmentSubsidizedEconomy)
%{WelfareCapitalism
"&%WelfareCapitalism is an &%Attribute 
describing an economy in which the government provides economic subsidies 
to unemployed or disabled individuals."}%
. subclass(FinancialSectorAttribute, EconomicAttribute)
%{FinancialSectorAttribute
"&%FinancialSectorAttribute is 
a class of &%Attributes that are used to indicate which financial sectors 
are most important in the economy of a &%Nation or &%GeopoliticalArea."}%
. instance(DiversifiedEconomy, FinancialSectorAttribute)
. instance(ManufacturingBasedEconomy, FinancialSectorAttribute)
. instance(TradeBasedEconomy, FinancialSectorAttribute)
. instance(PetroleumBasedEconomy, FinancialSectorAttribute)
. instance(TourismBasedEconomy, FinancialSectorAttribute)
. instance(ServiceBasedEconomy, FinancialSectorAttribute)
. instance(AgricultureBasedEconomy, FinancialSectorAttribute)
. instance(SubsistenceAgricultureEconomy, FinancialSectorAttribute)
. subAttribute(SubsistenceAgricultureEconomy,
               AgricultureBasedEconomy)
. instance(TwoTierLaborMarketEconomy, FinancialSectorAttribute)
. instance(ControlledLaborMarketEconomy, FinancialSectorAttribute)
. instance(OffshoreFinancialSectorEconomy,
           FinancialSectorAttribute)
. subAttribute(TaxHavenEconomy, OffshoreFinancialSectorEconomy)
. subAttribute(OffshoreBankingSectorEconomy,
               OffshoreFinancialSectorEconomy)
. instance(totalGDPInPeriod, PPPBasedEconomicValuation)
. instance(totalGDPInPeriod, TernaryPredicate)
. domain(totalGDPInPeriod, a_1, GeopoliticalArea)
. domain(totalGDPInPeriod, a_2, CurrencyMeasure)
. domainSubclass(totalGDPInPeriod, a_3, TimeInterval)
%{totalGDPInPeriod
"(&%totalGDPInPeriod ?AREA ?AMOUNT ?PERIOD) 
means that the value of all final goods and services produced within 
the &%GeopoliticalArea ?AREA is ?AMOUNT in the period indicated by ?PERIOD, 
measured in U.S. dollars calculated on a purchasing power parity basis.  
(See &%PPPBasedEconomicValuation.)  This is the Gross Domestic Product for 
?AREA for a specified period."}%
. instance(totalGDP, PPPBasedEconomicValuation)
. instance(totalGDP, BinaryPredicate)
. domain(totalGDP, a_1, GeopoliticalArea)
. domain(totalGDP, a_2, CurrencyMeasure)
%{totalGDP
"(&%totalGDP ?AREA ?AMOUNT) means that the value 
of all final goods and services produced within the &%GeopoliticalArea 
?AREA is ?AMOUNT, in U.S. dollars, calculated on a purchasing power parity 
basis.  This represents Gross Domestic Product (GDP).  See 
&%PPPBasedEconomicValuation."}%
. totalGDPInPeriod(vAREA, vAMOUNT, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, totalGDP(vAREA, vAMOUNT)))
. subclass(PPPBasedEconomicValuation, Relation)
%{PPPBasedEconomicValuation
"&%PPPBasedEconomicValuation 
is a class of relations used to state international economic information 
in U.S. dollar amounts.  The U.S. dollar amounts are derived from Purchasing 
Power Parity conversions of economic totals (e.g., GDP)  given in local 
currency.  This contrasts with a method of conversion based on currency 
exchange rates.  The PPP method is used by the CIA World Fact Book for 
the purpose of presenting economic data for all countries covered.  Their 
basis for PPP dollar price weights is the UN International Comparison Program 
(UNICP) and the work of Professors Robert Summers and Alan Heston of the 
University of Pennsylvania."}%
. instance(realGrowthRateOfGDPInPeriod, PPPBasedEconomicValuation)
. instance(realGrowthRateOfGDPInPeriod, TernaryPredicate)
. domain(realGrowthRateOfGDPInPeriod, a_1, GeopoliticalArea)
. domain(realGrowthRateOfGDPInPeriod, a_2, RealNumber)
. domainSubclass(realGrowthRateOfGDPInPeriod, a_3, TimeInterval)
%{realGrowthRateOfGDPInPeriod
"(&%realGrowthRateOfGDPInPeriod ?AREA ?RATE ?PERIOD) means that the 
annual rate of growth in the Gross Domestic Product (GDP) for the 
&%GeopoliticalArea ?AREA is the fraction ?RATE in the period ?PERIOD, 
adjusted for inflation, with GDP calculated on a purchasing power 
parity basis.  See &%PPPBasedEconomicValuation."}%
. instance(realGrowthRateOfGDP, PPPBasedEconomicValuation)
. instance(realGrowthRateOfGDP, BinaryPredicate)
. domain(realGrowthRateOfGDP, a_1, GeopoliticalArea)
. domain(realGrowthRateOfGDP, a_2, RealNumber)
%{realGrowthRateOfGDP
"(&%realGrowthRateOfGDP ?AREA ?RATE) 
means that the annual rate of growth in the Gross Domestic Product (GDP) 
for the &%GeopoliticalArea ?AREA is the fraction ?RATE, adjusted for 
inflation, with GDP calculated on a purchasing power parity basis.  
See &%PPPBasedEconomicValuation."}%
. realGrowthRateOfGDPInPeriod(vAREA, vRATE, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, realGrowthRateOfGDP(vAREA, vRATE)))
. instance(perCapitaGDPInPeriod, PPPBasedEconomicValuation)
. instance(perCapitaGDPInPeriod, TernaryPredicate)
. domain(perCapitaGDPInPeriod, a_1, GeopoliticalArea)
. domain(perCapitaGDPInPeriod, a_2, CurrencyMeasure)
. domainSubclass(perCapitaGDPInPeriod, a_3, TimeInterval)
%{perCapitaGDPInPeriod
"(&%perCapitaGDPInPeriod ?AREA ?AMOUNT ?PERIOD) means that the Gross 
Domestic Product, on a per capita basis, for the &%GeopoliticalArea 
?AREA is ?AMOUNT during the period indicated by ?PERIOD, calculated in 
U.S. dollars on a purchasing power parity basis.  See 
&%PPPBasedEconomicValuation."}%
. instance(perCapitaGDP, PPPBasedEconomicValuation)
. instance(perCapitaGDP, BinaryPredicate)
. domain(perCapitaGDP, a_1, GeopoliticalArea)
. domain(perCapitaGDP, a_2, CurrencyMeasure)
%{perCapitaGDP
"(&%perCapitaGDP ?AREA ?AMOUNT) means 
that the Gross Domestic Product, on a per capita basis, for the 
&%GeopoliticalArea ?AREA is ?AMOUNT, calculated in U.S. dollars on a 
purchasing power parity basis.  See &%PPPBasedEconomicValuation."}%
. perCapitaGDPInPeriod(vAREA, vAMOUNT, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, perCapitaGDP(vAREA, vAMOUNT)))
. instance(sectorCompositionOfGDPInPeriod,
           PPPBasedEconomicValuation)
. instance(sectorCompositionOfGDPInPeriod, QuaternaryPredicate)
. domain(sectorCompositionOfGDPInPeriod, a_1, GeopoliticalArea)
. domain(sectorCompositionOfGDPInPeriod, a_2, IndustryAttribute)
. domain(sectorCompositionOfGDPInPeriod, a_3, RealNumber)
. domainSubclass(sectorCompositionOfGDPInPeriod, a_4, TimeInterval)
%{sectorCompositionOfGDPInPeriod
"(&%sectorCompositionOfGDPInPeriod ?AREA ?SECTOR ?FRACTION ?PERIOD) 
means that in the &%GeopoliticalArea ?AREA, the economic sector ?SECTOR 
contributes the amount ?FRACTION to the Gross National Product 
during the &%TimeInterval indicated by ?PERIOD."}%
. sectorCompositionOfGDPInPeriod(vAREA, vSECTOR, vFRACTION,
                                 vPERIOD) =>
      lessThanOrEqualTo(vFRACTION, a_1_Period_0)
. instance(sectorCompositionOfGDP, PPPBasedEconomicValuation)
. instance(sectorCompositionOfGDP, TernaryPredicate)
. domain(sectorCompositionOfGDP, a_1, GeopoliticalArea)
. domain(sectorCompositionOfGDP, a_2, IndustryAttribute)
. domain(sectorCompositionOfGDP, a_3, RealNumber)
%{sectorCompositionOfGDP
"(&%sectorCompositionOfGDP ?AREA ?SECTOR ?FRACTION) means 
that in the &%GeopoliticalArea ?AREA, the economic sector ?SECTOR 
contributes the amount ?FRACTION to the Gross National Product."}%
. sectorCompositionOfGDP(vAREA, vSECTOR, vFRACTION) =>
      lessThanOrEqualTo(vFRACTION, a_1_Period_0)
. sectorCompositionOfGDPInPeriod(vAREA, vAMOUNT, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, sectorCompositionOfGDP(vAREA, vAMOUNT)))
. instance(sectorValueOfGDPInPeriod, PPPBasedEconomicValuation)
. instance(sectorValueOfGDPInPeriod, QuaternaryPredicate)
. domain(sectorValueOfGDPInPeriod, a_1, GeopoliticalArea)
. domain(sectorValueOfGDPInPeriod, a_2, IndustryAttribute)
. domain(sectorValueOfGDPInPeriod, a_3, CurrencyMeasure)
. domainSubclass(sectorValueOfGDPInPeriod, a_4, TimeInterval)
%{sectorValueOfGDPInPeriod
"(&%sectorValueOfGDPInPeriod ?AREA ?SECTOR ?AMOUNT ?PERIOD) means that 
for the &%GeopoliticalArea ?AREA, the economic sector ?SECTOR contributes 
?AMOUNT to the Gross National Product during the &%TimeInterval indicated 
by ?PERIOD, evaluated in U.S. dollars on a purchasing power parity basis.  
See &%PPPBasedEconomicValuation."}%
. sectorCompositionOfGDPInPeriod(vAREA, vSECTOR, vFRACTION,
                                 vPERIOD)
  /\ totalGDPInPeriod(vAREA, vGDPAMOUNT, vPERIOD)
  /\ vAMOUNT = MultiplicationFn(vFRACTION, vGDPAMOUNT) =>
      sectorValueOfGDPInPeriod(vAREA, vSECTOR, vAMOUNT, vPERIOD)
. instance(sectorValueOfGDP, PPPBasedEconomicValuation)
. instance(sectorValueOfGDP, TernaryPredicate)
. domain(sectorValueOfGDP, a_1, GeopoliticalArea)
. domain(sectorValueOfGDP, a_2, IndustryAttribute)
. domain(sectorValueOfGDP, a_3, CurrencyMeasure)
%{sectorValueOfGDP
"(&%sectorValueOfGDP ?AREA ?SECTOR ?AMOUNT) means that for the 
&%GeopoliticalArea ?AREA, the economic sector ?SECTOR contributes 
?AMOUNT to the Gross National Product, evaluated in U.S. dollars on 
a purchasing power parity basis.  See &%PPPBasedEconomicValuation."}%
. sectorValueOfGDPInPeriod(vAREA, vSECTOR, vAMOUNT, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, sectorValueOfGDP(vAREA, vSECTOR, vAMOUNT)))
. instance(AgriculturalSector, IndustryAttribute)
. instance(IndustrialSector, IndustryAttribute)
. instance(ServiceSector, IndustryAttribute)
. subAttribute(AgricultureForestryFishingAndHunting,
               AgriculturalSector)
. instance(populationFractionBelowPovertyLineInPeriod,
           TernaryPredicate)
. domain(populationFractionBelowPovertyLineInPeriod, a_1,
         GeopoliticalArea)
. domain(populationFractionBelowPovertyLineInPeriod, a_2,
         RealNumber)
. domainSubclass(populationFractionBelowPovertyLineInPeriod, a_3,
                 TimeInterval)
%{populationFractionBelowPovertyLineInPeriod
"(&%populationFractionBelowPovertyLineInPeriod ?AREA ?FRACTION ?PERIOD) 
means that in the &%GeopoliticalArea ?AREA, the segment of the population 
living below the (locally defined) poverty line is ?FRACTION during the 
&%TimeInterval indicated by ?PERIOD.  Note that the definition of the 
poverty line varies internationally."}%
. populationFractionBelowPovertyLineInPeriod(vAREA, vFRACTION,
                                             vPERIOD) =>
      lessThanOrEqualTo(vFRACTION, a_1_Period_0)
. instance(populationFractionBelowPovertyLine, BinaryPredicate)
. domain(populationFractionBelowPovertyLine, a_1, GeopoliticalArea)
. domain(populationFractionBelowPovertyLine, a_2, RealNumber)
%{populationFractionBelowPovertyLine
"(&%populationFractionBelowPovertyLine ?AREA ?FRACTION) means that in 
the &%GeopoliticalArea ?AREA, the segment of the population living 
below the (locally defined) poverty line is ?FRACTION.  Note that the 
definition of the poverty line varies internationally."}%
. populationFractionBelowPovertyLine(vAREA, vFRACTION) =>
      lessThanOrEqualTo(vFRACTION, a_1_Period_0)
. populationFractionBelowPovertyLineInPeriod(vAREA, vFRACTION,
                                             vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME,
                            populationFractionBelowPovertyLine(vAREA,
                                                               vFRACTION)))
. instance(lowestDecileShareOfHouseholdIncomeInPeriod,
           TernaryPredicate)
. domain(lowestDecileShareOfHouseholdIncomeInPeriod, a_1,
         GeopoliticalArea)
. domain(lowestDecileShareOfHouseholdIncomeInPeriod, a_2,
         RealNumber)
. domainSubclass(lowestDecileShareOfHouseholdIncomeInPeriod, a_3,
                 TimeInterval)
%{lowestDecileShareOfHouseholdIncomeInPeriod
"(&%lowestDecileShareOfHouseholdIncomeInPeriod ?AREA ?FRACTION ?PERIOD) 
means that in the &%GeopoliticalArea ?AREA, the lowest decile (0-10%) 
of households with respect to household income (or consumption) had 
?FRACTION amount of the total household income (or consumption), during 
the &%TimeInterval indicated by ?PERIOD.  Data from different countries 
may not be directly comparable due to variation in the basis of the data 
(e.g., based on household income versus based on household consumption)."}%
. lowestDecileShareOfHouseholdIncomeInPeriod(vAREA, vFRACTION,
                                             vPERIOD) =>
      lessThanOrEqualTo(vFRACTION, a_1_Period_0)
. instance(lowestDecileShareOfHouseholdIncome, BinaryPredicate)
. domain(lowestDecileShareOfHouseholdIncome, a_1, GeopoliticalArea)
. domain(lowestDecileShareOfHouseholdIncome, a_2, RealNumber)
%{lowestDecileShareOfHouseholdIncome
"(&%lowestDecileShareOfHouseholdIncome ?AREA ?FRACTION) means that 
in the &%GeopoliticalArea ?AREA, the lowest decile (0-10%) of 
households with respect to household income (or consumption) had 
?FRACTION amount of the total household income (or consumption).  
Data from different countries may not be directly comparable due to 
variation in the basis of the data (e.g., based on income versus based 
on consumption)."}%
. lowestDecileShareOfHouseholdIncome(vAREA, vFRACTION) =>
      lessThanOrEqualTo(vFRACTION, a_1_Period_0)
. lowestDecileShareOfHouseholdIncomeInPeriod(vAREA, vFRACTION,
                                             vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME,
                            lowestDecileShareOfHouseholdIncome(vAREA,
                                                               vFRACTION)))
. instance(highestDecileShareOfHouseholdIncomeInPeriod,
           TernaryPredicate)
. domain(highestDecileShareOfHouseholdIncomeInPeriod, a_1,
         GeopoliticalArea)
. domain(highestDecileShareOfHouseholdIncomeInPeriod, a_2,
         RealNumber)
. domainSubclass(highestDecileShareOfHouseholdIncomeInPeriod, a_3,
                 TimeInterval)
%{highestDecileShareOfHouseholdIncomeInPeriod
"(&%highestDecileShareOfHouseholdIncomeInPeriod ?AREA ?FRACTION ?PERIOD) 
means that in the &%GeopoliticalArea ?AREA, the highest decile (90-100%) 
of households with respect to household income (or consumption) had 
?FRACTION amount of the total household income (or consumption), during 
the &%TimeInterval indicated by ?PERIOD.  Data from different countries 
may not be directly comparable due to variation in the basis of the data 
(e.g., based on household income versus based on household consumption)."}%
. highestDecileShareOfHouseholdIncomeInPeriod(vAREA, vFRACTION,
                                              vPERIOD) =>
      lessThanOrEqualTo(vFRACTION, a_1_Period_0)
. instance(highestDecileShareOfHouseholdIncome, BinaryPredicate)
. domain(highestDecileShareOfHouseholdIncome, a_1,
         GeopoliticalArea)
. domain(highestDecileShareOfHouseholdIncome, a_2, RealNumber)
. domainSubclass(highestDecileShareOfHouseholdIncome, a_3,
                 TimeInterval)
%{highestDecileShareOfHouseholdIncome
"(&%highestDecileShareOfHouseholdIncome ?AREA ?FRACTION) means that 
in the &%GeopoliticalArea ?AREA, the highest decile (90-100%) of 
households with respect to household income (or consumption) had 
?FRACTION amount of the total household income (or consumption).  
Data from different countries may not be directly comparable due to 
variation in the basis of the data (e.g., based on income versus 
based on consumption)."}%
. highestDecileShareOfHouseholdIncome(vAREA, vFRACTION) =>
      lessThanOrEqualTo(vFRACTION, a_1_Period_0)
. highestDecileShareOfHouseholdIncomeInPeriod(vAREA, vFRACTION,
                                              vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vPERIOD,
                            highestDecileShareOfHouseholdIncome(vAREA,
                                                                vFRACTION)))
. instance(incomeDistributionByGiniIndexInPeriod, TernaryPredicate)
. domain(incomeDistributionByGiniIndexInPeriod, a_1,
         GeopoliticalArea)
. domain(incomeDistributionByGiniIndexInPeriod, a_2,
         NonnegativeRealNumber)
. domainSubclass(incomeDistributionByGiniIndexInPeriod, a_3,
                 TimeInterval)
%{incomeDistributionByGiniIndexInPeriod
"(&%incomeDistributionByGiniIndexInPeriod ?AREA ?INDEX ?PERIOD) means that 
in the &%GeopoliticalArea ?AREA, the distribution of family income is 
?INDEX, as measured by the Gini index, during the &%TimeInterval indicated 
by ?PERIOD."}%
. incomeDistributionByGiniIndexInPeriod(vAREA, vINDEX, vPERIOD) =>
      lessThanOrEqualTo(vINDEX, a_1_0_0)
. instance(incomeDistributionByGiniIndex, BinaryPredicate)
. domain(incomeDistributionByGiniIndex, a_1, GeopoliticalArea)
. domain(incomeDistributionByGiniIndex, a_2, NonnegativeRealNumber)
%{incomeDistributionByGiniIndex
"(&%incomeDistributionByGiniIndex ?AREA ?INDEX) means that in the 
&%GeopoliticalArea ?AREA, the distribution of family income is ?INDEX, 
as measured by the Gini index for family income distribution."}%
. incomeDistributionByGiniIndex(vAREA, vINDEX) =>
      lessThanOrEqualTo(vINDEX, a_1_0_0)
. incomeDistributionByGiniIndexInPeriod(vAREA, vINDEX, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME,
                            incomeDistributionByGiniIndex(vAREA, vINDEX)))
. instance(inflationRateOfConsumerPricesInPeriod, TernaryPredicate)
. domain(inflationRateOfConsumerPricesInPeriod, a_1,
         GeopoliticalArea)
. domain(inflationRateOfConsumerPricesInPeriod, a_2, RealNumber)
. domainSubclass(inflationRateOfConsumerPricesInPeriod, a_3,
                 TimeInterval)
%{inflationRateOfConsumerPricesInPeriod
"(&%inflationRateOfConsumerPricesInPeriod ?AREA ?FRACTION ?PERIOD) means 
that in the &%GeopoliticalArea ?AREA, the annual change in consumer 
prices was ?FRACTION, for the &%TimeInterval indicated by ?PERIOD, 
compared with prices from the prior period."}%
. inflationRateOfConsumerPricesInPeriod(vAREA, vFRACTION,
                                        vPERIOD) =>
      lessThanOrEqualTo(vFRACTION, a_1_Period_0)
. instance(inflationRateOfConsumerPrices, BinaryPredicate)
. domain(inflationRateOfConsumerPrices, a_1, GeopoliticalArea)
. domain(inflationRateOfConsumerPrices, a_2, RealNumber)
%{inflationRateOfConsumerPrices
"(&%inflationRateOfConsumerPrices ?AREA ?FRACTION) means that in the 
&%GeopoliticalArea ?AREA, the annual change in consumer prices was 
?FRACTION, compared with prices from the previous year."}%
. inflationRateOfConsumerPrices(vAREA, vFRACTION) =>
      lessThanOrEqualTo(vFRACTION, a_1_Period_0)
. inflationRateOfConsumerPricesInPeriod(vAREA, vFRACTION,
                                        vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME,
                            inflationRateOfConsumerPrices(vAREA, vFRACTION)))
. instance(laborForceTotalInPeriod, TernaryPredicate)
. domain(laborForceTotalInPeriod, a_1, GeopoliticalArea)
. domain(laborForceTotalInPeriod, a_2, NonnegativeRealNumber)
. domainSubclass(laborForceTotalInPeriod, a_3, TimeInterval)
%{laborForceTotalInPeriod
"(&%laborForceTotalInPeriod ?AREA ?AMOUNT ?PERIOD) means that the total 
labor force of the &%GeopoliticalArea ?AREA is ?AMOUNT during the 
&%TimeInterval indicated by ?PERIOD.  This includes unemployed workers."}%
. instance(laborForceTotal, BinaryPredicate)
. domain(laborForceTotal, a_1, GeopoliticalArea)
. domain(laborForceTotal, a_2, NonnegativeRealNumber)
%{laborForceTotal
"(&%laborForceTotal ?AREA ?AMOUNT) means that the total labor 
force of the &%GeopoliticalArea ?AREA is ?AMOUNT. This includes 
unemployed workers."}%
. laborForceTotalInPeriod(vAREA, vAMOUNT, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, laborForceTotal(vAREA, vAMOUNT)))
. instance(laborForceFractionByOccupationInPeriod,
           QuaternaryPredicate)
. domain(laborForceFractionByOccupationInPeriod, a_1,
         GeopoliticalArea)
. domain(laborForceFractionByOccupationInPeriod, a_2, Attribute)
. domain(laborForceFractionByOccupationInPeriod, a_3, RealNumber)
. domainSubclass(laborForceFractionByOccupationInPeriod, a_4,
                 TimeInterval)
%{laborForceFractionByOccupationInPeriod
"(&%laborForceFractionByOccupationInPeriod ?AREA ?SECTOR ?FRACTION ?PERIOD) 
means that in the &%GeopoliticalArea ?AREA, workers in the job area   
?SECTOR make up ?FRACTION of the labor force, during the &%TimeInterval 
indicated by ?PERIOD.  The unemployed are not included in these figures. 
Occupation may be indicated by an &%OccupationalRole or an 
&%IndustryAttribute."}%
. laborForceFractionByOccupationInPeriod(vAREA, vSECTOR, vFRACTION,
                                         vPERIOD) =>
      lessThanOrEqualTo(vFRACTION, a_1_Period_0)
. instance(laborForceFractionByOccupation, TernaryPredicate)
. domain(laborForceFractionByOccupation, a_1, GeopoliticalArea)
. domain(laborForceFractionByOccupation, a_2, Attribute)
. domain(laborForceFractionByOccupation, a_3, RealNumber)
%{laborForceFractionByOccupation
"(&%laborForceFractionByOccupation ?AREA ?SECTOR ?FRACTION) 
means that in the &%GeopoliticalArea ?AREA, workers in the job area   
?SECTOR make up ?FRACTION of the labor force.  The unemployed are not 
included in these figures.  Occupation may be indicated by an 
&%OccupationalRole or an &%IndustryAttribute."}%
. laborForceFractionByOccupation(vAREA, vSECTOR, vFRACTION) =>
      lessThanOrEqualTo(vFRACTION, a_1_Period_0)
. laborForceFractionByOccupationInPeriod(vAREA, vSECTOR, vFRACTION,
                                         vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME,
                            laborForceFractionByOccupation(vAREA, vSECTOR,
                                                           vFRACTION)))
. instance(unemploymentRateOfAreaInPeriod, TernaryPredicate)
. domain(unemploymentRateOfAreaInPeriod, a_1, GeopoliticalArea)
. domain(unemploymentRateOfAreaInPeriod, a_2, RealNumber)
. domainSubclass(unemploymentRateOfAreaInPeriod, a_3, TimeInterval)
%{unemploymentRateOfAreaInPeriod
"(&%unemploymentRateOfAreaInPeriod ?AREA ?RATE ?PERIOD) means that the 
unemployment rate in the &%GeographicalArea ?AREA is ?RATE, during the 
&%TimeInterval indicated by ?PERIOD."}%
. unemploymentRateOfAreaInPeriod(vAREA, vRATE, vPERIOD) =>
      lessThanOrEqualTo(vRATE, a_1_Period_0)
. instance(unemploymentRateOfArea, TernaryPredicate)
. domain(unemploymentRateOfArea, a_1, GeopoliticalArea)
. domain(unemploymentRateOfArea, a_2, RealNumber)
. domainSubclass(unemploymentRateOfArea, a_3, TimeInterval)
%{unemploymentRateOfArea
"(&%unemploymentRateOfArea ?AREA ?RATE ?PERIOD) means that the 
unemployment rate in the &%GeographicalArea ?AREA is ?RATE, 
during the &%TimeInterval indicated by ?PERIOD."}%
. unemploymentRateOfArea(vAREA, vRATE) =>
      lessThanOrEqualTo(vRATE, a_1_Period_0)
. unemploymentRateOfAreaInPeriod(vAREA, vRATE, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, unemploymentRateOfArea(vAREA, vRATE)))
. instance(annualRevenuesOfAreaInPeriod, TernaryPredicate)
. domain(annualRevenuesOfAreaInPeriod, a_1, GeopoliticalArea)
. domain(annualRevenuesOfAreaInPeriod, a_2, CurrencyMeasure)
. domainSubclass(annualRevenuesOfAreaInPeriod, a_3, TimeInterval)
%{annualRevenuesOfAreaInPeriod
"(&%annualRevenuesOfAreaInPeriod ?AREA ?AMOUNT ?PERIOD) means that the 
annual budgetary revenues of the &%GeopoliticalArea ?AREA are ?AMOUNT 
for the annual &%TimeInterval indicated by ?PERIOD, calculated in U.S. 
dollars according to the currency exchange rate method."}%
. instance(annualRevenuesOfArea, BinaryPredicate)
. domain(annualRevenuesOfArea, a_1, GeopoliticalArea)
. domain(annualRevenuesOfArea, a_2, CurrencyMeasure)
%{annualRevenuesOfArea
"(&%annualRevenuesOfArea ?AREA ?AMOUNT) means that the annual budgetary 
revenues of the &%GeopoliticalArea ?AREA are ?AMOUNT, calculated in U.S. 
dollars according  to the currency exchange rate method."}%
. annualRevenuesOfAreaInPeriod(vAREA, vAMOUNT, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, annualRevenuesOfArea(vAREA, vAMOUNT)))
. instance(annualExpendituresOfAreaInPeriod, TernaryPredicate)
. domain(annualExpendituresOfAreaInPeriod, a_1, GeopoliticalArea)
. domain(annualExpendituresOfAreaInPeriod, a_2, CurrencyMeasure)
. domainSubclass(annualExpendituresOfAreaInPeriod, a_3,
                 TimeInterval)
%{annualExpendituresOfAreaInPeriod
"(&%annualExpendituresOfAreaInPeriod ?AREA ?AMOUNT ?PERIOD) means that 
the annual budgetary expenditures of the &%GeopoliticalArea ?AREA are 
?AMOUNT for the annual &%TimeInterval indicated by ?PERIOD, calculated 
in U.S. dollars according to the currency exchange rate method."}%
. instance(annualExpendituresOfArea, BinaryPredicate)
. domain(annualExpendituresOfArea, a_1, GeopoliticalArea)
. domain(annualExpendituresOfArea, a_2, CurrencyMeasure)
%{annualExpendituresOfArea
"(&%annualExpendituresOfArea ?AREA ?AMOUNT) means that the annual 
budgetary expenditures of the &%GeopoliticalArea ?AREA are ?AMOUNT, 
calculated in U.S. dollars according  to the currency exchange rate 
method."}%
. annualExpendituresOfAreaInPeriod(vAREA, vAMOUNT, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, annualExpendituresOfArea(vAREA, vAMOUNT)))
. instance(capitalExpendituresOfAreaInPeriod, TernaryPredicate)
. domain(capitalExpendituresOfAreaInPeriod, a_1, GeopoliticalArea)
. domain(capitalExpendituresOfAreaInPeriod, a_2, CurrencyMeasure)
. domainSubclass(capitalExpendituresOfAreaInPeriod, a_3,
                 TimeInterval)
%{capitalExpendituresOfAreaInPeriod
"(&%capitalExpendituresOfAreaInPeriod ?AREA ?AMOUNT ?PERIOD) means that 
the annual capital expenditures of the &%GeopoliticalArea ?AREA are 
?AMOUNT for the annual &%TimeInterval indicated by ?PERIOD, calculated in 
U.S. dollars according to the currency exchange rate method.  This figure 
is a portion of the &%annualExpendituresOfArea for ?AREA in ?PERIOD."}%
. capitalExpendituresOfAreaInPeriod(vAREA, vCAPAMOUNT, vPERIOD)
  /\ annualExpendituresOfAreaInPeriod(vAREA, vTOTALAMOUNT,
                                      vPERIOD) =>
      greaterThan(vTOTALAMOUNT, vCAPAMOUNT)
. instance(capitalExpendituresOfArea, BinaryPredicate)
. domain(capitalExpendituresOfArea, a_1, GeopoliticalArea)
. domain(capitalExpendituresOfArea, a_2, CurrencyMeasure)
%{capitalExpendituresOfArea
"(&%capitalExpendituresOfArea ?AREA ?AMOUNT) means that the annual 
capital expenditures of the &%GeopoliticalArea ?AREA are ?AMOUNT, 
calculated in U.S. dollars according to the currency exchange rate 
method.  This figure is a portion of the &%annualExpendituresOfArea 
for ?AREA."}%
. holdsDuring(vTIME, capitalExpendituresOfArea(vAREA, vCAPAMOUNT))
  /\ holdsDuring(vTIME,
                 annualExpendituresOfArea(vAREA, vTOTALAMOUNT)) =>
      greaterThan(vTOTALAMOUNT, vCAPAMOUNT)
. capitalExpendituresOfAreaInPeriod(vAREA, vCAPAMOUNT, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, capitalExpendituresOfArea(vAREA, vAMOUNT)))
. instance(industryOfArea, BinaryPredicate)
. domain(industryOfArea, a_1, GeopoliticalArea)
. domain(industryOfArea, a_2, IndustryAttribute)
%{industryOfArea
"(&%industryOfArea ?AREA ?SECTOR) 
means that the &%GeopoliticalArea ?AREA produces goods or services 
in the economic area ?SECTOR."}%
. instance(industryRankByOutput, TernaryPredicate)
. domain(industryRankByOutput, a_1, GeopoliticalArea)
. domain(industryRankByOutput, a_2, IndustryAttribute)
. domain(industryRankByOutput, a_3, PositiveInteger)
%{industryRankByOutput
"(&%industryRankByOutput ?AREA ?SECTOR ?NTH) means that in the 
&%GeopoliticalArea ?AREA, the economic area ?SECTOR is ?NTH with 
respect to the value of its annual output."}%
. industryRankByOutput(vAREA, vSECTOR, vNTH) =>
      industryOfArea(vAREA, vSECTOR)
. instance(industryProductType, BinaryPredicate)
. domain(industryProductType, a_1, IndustryAttribute)
. domainSubclass(industryProductType, a_2, Object)
%{industryProductType
"(&%industryProductType ?INDUSTRY ?TYPE) means that organizations with 
the &%IndustryAttribute ?INDUSTRY produce products of the kind ?TYPE."}%
. instance(vORG, Organization)
  /\ attribute(vORG, vINDUSTRY)
  /\ industryProductType(vINDUSTRY, vTYPE) =>
      exists vEVENT: U; vITEM: U
          . instance(vEVENT, Making)
            /\ instance(vITEM, vTYPE)
            /\ agent(vEVENT, vORG)
            /\ a_r_e_s_u_l_t(vEVENT, vITEM)
. instance(organizationProductType, BinaryPredicate)
. domain(organizationProductType, a_1, Organization)
. domainSubclass(organizationProductType, a_2, Object)
%{organizationProductType
"(&%organizationProductType ?BUSINESS ?TYPE) means that the &%Organization 
?BUSINESS produces products of the kind ?TYPE."}%
. organizationProductType(vBUSINESS, vTYPE)
  /\ subclass(vTYPE, vGENUS) =>
      organizationProductType(vBUSINESS, vGENUS)
. industryProductType(vINDUSTRY, vTYPE)
  /\ instance(vINDUSTRY, IndustryAttribute)
  /\ instance(vBUSINESS, Organization)
  /\ attribute(vBUSINESS, vINDUSTRY) =>
      organizationProductType(vBUSINESS, vTYPE)
. instance(industryServiceType, BinaryPredicate)
. domain(industryServiceType, a_1, IndustryAttribute)
. domainSubclass(industryServiceType, a_2, IntentionalProcess)
%{industryServiceType
"(&%industryServiceType ?INDUSTRY ?TYPE) means that organizations with 
the &%IndustryAttribute ?INDUSTRY provide services of the kind ?TYPE."}%
. instance(vORG, Organization)
  /\ attribute(vORG, vINDUSTRY)
  /\ industryServiceType(vINDUSTRY, vTYPE) =>
      exists vEVENT: U . instance(vEVENT, vTYPE) /\ agent(vEVENT, vORG)
. instance(organizationServiceType, BinaryPredicate)
. domain(organizationServiceType, a_1, Organization)
. domainSubclass(organizationServiceType, a_2, IntentionalProcess)
%{organizationServiceType
"(&%organizationServiceType ?BUSINESS ?TYPE) means that the &%Organization 
?BUSINESS provides services of the kind ?TYPE."}%
. organizationServiceType(vBUSINESS, vTYPE)
  /\ subclass(vTYPE, vGENUS) =>
      organizationServiceType(vBUSINESS, vGENUS)
. industryServiceType(vINDUSTRY, vTYPE)
  /\ instance(vINDUSTRY, IndustryAttribute)
  /\ instance(vBUSINESS, Organization)
  /\ attribute(vBUSINESS, vINDUSTRY) =>
      organizationServiceType(vBUSINESS, vTYPE)
. instance(resultType, BinaryPredicate)
. domain(resultType, a_1, Process)
. domainSubclass(resultType, a_2, Object)
%{resultType
"(&%resultType ?PROCESS ?TYPE) means that 
the &%Process ?PROCESS produces some result(s) of the type ?TYPE."}%
. resultType(vPROCESS, vTYPE) =>
      exists vITEM: U
          . instance(vITEM, vTYPE) /\ a_r_e_s_u_l_t(vPROCESS, vITEM)
. industryProductType(AircraftManufacturing, Aircraft)
. industryProductType(AluminaRefining, Alumina)
. industryProductType(PrimaryAluminumProduction, AluminumMetal)
. industryProductType(AutomobileManufacturing, Automobile)
. industryProductType(CementManufacturing, Cement)
. industryProductType(ChemicalManufacturing, ChemicalProduct)
. instance(CoalIndustry, IndustryAttribute)
. subAttribute(CoalMining, CoalIndustry)
. subAttribute(CoalProductsManufacturing, CoalIndustry)
. industryProductType(CoalMining, Coal)
. subAttribute(CoalProductsManufacturing,
               PetroleumAndCoalProductsManufacturing)
. instance(ConsumerGoodsIndustry, IndustryAttribute)
. industryProductType(ConsumerGoodsIndustry, ConsumerGood)
. instance(CopperIndustry, IndustryAttribute)
. subAttribute(CopperOreMining, CopperIndustry)
. subAttribute(PrimarySmeltingAndRefiningOfCopper, CopperIndustry)
. subAttribute(CopperRollingDrawingExtrudingAndAlloying,
               CopperIndustry)
. subAttribute(CopperFoundriesExceptDieCasting, CopperIndustry)
. industryProductType(CopperOreMining, CopperOre)
. subAttribute(CopperOreMining, CopperOreAndNickelOreMining)
. instance(FertilizerIndustry, IndustryAttribute)
. subAttribute(FertilizerManufacturing, FertilizerIndustry)
. subAttribute(FertilizerMineralMining, FertilizerIndustry)
. subAttribute(FertilizerMineralMining,
               OtherChemicalAndFertilizerMineralMining)
. industryProductType(FertilizerMineralMining, Fertilizer)
. industryProductType(FoodManufacturing, Food)
. industryProductType(FoodManufacturing, FoodProduct)
. subclass(Footwear, Clothing)
. industryProductType(FootwearManufacturing, Footwear)
. instance(FurnitureIndustry, IndustryAttribute)
. subAttribute(FurnitureAndRelatedProductManufacturing,
               FurnitureIndustry)
. subAttribute(FurnitureAndHomeFurnishingWholesalers,
               FurnitureIndustry)
. subAttribute(FurnitureAndHomeFurnishingsStores,
               FurnitureIndustry)
. subAttribute(FurnitureManufacturing,
               FurnitureAndRelatedProductManufacturing)
. industryProductType(FurnitureManufacturing, Furniture)
. instance(HandicraftIndustry, IndustryAttribute)
. subAttribute(HandwovenCarpetManufacturing, HandicraftIndustry)
. industryProductType(HandwovenCarpetManufacturing,
                      HandwovenCarpet)
. instance(LeadIndustry, IndustryAttribute)
. subAttribute(LeadOreMining, LeadIndustry)
. subAttribute(LeadManufacturing, LeadIndustry)
. subAttribute(LeadOreMining, LeadOreAndZincOreMining)
. industryProductType(LeadOreMining, LeadOre)
. instance(LeadManufacturing, IndustryAttribute)
. industryProductType(LeadManufacturing, LeadProduct)
. instance(LumberIndustry, IndustryAttribute)
. subAttribute(ForestryAndLogging, LumberIndustry)
. subAttribute(WoodProductManufacturing, LumberIndustry)
. subAttribute(Millwork, LumberIndustry)
. subAttribute(LumberPlywoodMillworkAndWoodPanelWholesalers,
               LumberIndustry)
. industryProductType(ForestryAndLogging, Timber)
. industryProductType(WoodProductManufacturing, WoodProduct)
. industryProductType(Millwork, WoodProduct)
. industryProductType(MachineryManufacturing, Machinery)
. instance(MetallurgyIndustry, IndustryAttribute)
. industryProductType(MetallurgyIndustry, Metal)
. instance(vORG, MetallurgicalPlant) =>
      attribute(vORG, MetallurgyIndustry)
. industryProductType(MetalworkingMachineryManufacturing,
                      MachineTool)
. instance(MiningIndustry, IndustryAttribute)
. subAttribute(MiningExceptOilAndGas, MiningIndustry)
. subAttribute(SupportActivitiesForMetalMining, MiningIndustry)
. subAttribute(SupportActivitiesForNonmetallicMineralsExceptFuels,
               MiningIndustry)
. subAttribute(NickelOreMining, CopperOreAndNickelOreMining)
. industryProductType(IndustrialSandMining, Sand)
. industryProductType(IronOreMining, IronOre)
. industryProductType(KaolinAndBallClayMining, Clay)
. industryProductType(NickelOreMining, NickelOre)
. industryProductType(StoneMiningAndQuarrying, Rock)
. instance(MotorVehicleIndustry, IndustryAttribute)
. subAttribute(MotorVehicleManufacturing, MotorVehicleIndustry)
. subAttribute(MotorVehiclePartsManufacturing,
               MotorVehicleIndustry)
. subAttribute(MotorVehicleBodyAndTrailerManufacturing,
               MotorVehicleIndustry)
. subAttribute(MotorVehicleAndMotorVehiclePartsAndSuppliesWholesalers,
               MotorVehicleIndustry)
. subAttribute(MotorVehicleAndPartsDealers, MotorVehicleIndustry)
. industryProductType(MotorVehicleManufacturing, RoadVehicle)
. industryProductType(TruckTrailerManufacturing, Trailer)
. instance(NaturalGasIndustry, IndustryAttribute)
. subAttribute(NaturalGasLiquidExtraction, NaturalGasIndustry)
. subAttribute(NaturalGasDistribution, NaturalGasIndustry)
. subAttribute(PipelineTransportationOfNaturalGas,
               NaturalGasIndustry)
. industryProductType(NaturalGasIndustry, NaturalGas)
. instance(PetroleumIndustry, IndustryAttribute)
. subAttribute(PetroleumProductsManufacturing, PetroleumIndustry)
. subAttribute(PetroleumRefineries, PetroleumIndustry)
. subAttribute(CrudePetroleumExtraction, PetroleumIndustry)
. subAttribute(DrillingOilAndGasWells, PetroleumIndustry)
. subAttribute(SupportActivitiesForOilOperations,
               PetroleumIndustry)
. subAttribute(AsphaltPavingRoofingAndSaturatedMaterialsManufacturing,
               PetroleumIndustry)
. subAttribute(SupportActivitiesForOilOperations,
               SupportActivitiesForOilAndGasOperations)
. subAttribute(PetroleumProductsManufacturing,
               PetroleumAndCoalProductsManufacturing)
. subAttribute(PetroleumLubricatingOilAndGreaseManufacturing,
               PetroleumProductsManufacturing)
. subAttribute(CrudePetroleumExtraction,
               CrudePetroleumAndNaturalGasExtraction)
. industryProductType(CrudePetroleumExtraction, Petroleum)
. industryProductType(PetroleumRefineries, RefinedPetroleumProduct)
. industryProductType(PetroleumLubricatingOilAndGreaseManufacturing,
                      PetroleumLubricant)
. industryProductType(AsphaltPavingRoofingAndSaturatedMaterialsManufacturing,
                      Asphalt)
. instance(RefrigeratorAndFreezerIndustry, IndustryAttribute)
. subAttribute(RefrigerationEquipmentManufacturing,
               RefrigeratorAndFreezerIndustry)
. subAttribute(RefrigerationEquipmentAndSuppliesWholesalers,
               RefrigeratorAndFreezerIndustry)
. subAttribute(RefrigeratedWarehousingAndStorage,
               RefrigeratorAndFreezerIndustry)
. subAttribute(CommercialAndIndustrialRefrigerationAndEquipmentManufacturing,
               AirConditioningAndWarmAirHeatingEquipmentAndCommercialAndIndustrialRefrigerationEquipmentManufacturing)
. instance(RefrigerationEquipmentManufacturing, IndustryAttribute)
. subAttribute(HouseholdRefrigeratorAndHomeFreezerManufacturing,
               RefrigeratorAndFreezerIndustry)
. subAttribute(CommercialAndIndustrialRefrigerationAndEquipmentManufacturing,
               RefrigeratorAndFreezerIndustry)
. industryProductType(SoapAndOtherDetergentManufacturing,
                      Detergent)
. instance(SteelIndustry, IndustryAttribute)
. subAttribute(SteelMills, SteelIndustry)
. subAttribute(SteelForging, SteelIndustry)
. subAttribute(SteelFoundriesExceptInvestment, SteelIndustry)
. subAttribute(SteelInvestmentFoundries, SteelIndustry)
. subAttribute(SteelProductManufacturingFromPurchasedSteel,
               SteelIndustry)
. subAttribute(SteelMills, IronAndSteelMills)
. subAttribute(IronMills, IronAndSteelMills)
. subAttribute(SteelForging, IronAndSteelForging)
. subAttribute(IronForging, IronAndSteelForging)
. industryProductType(SteelMills, Steel)
. industryProductType(IronMills, IronMetal)
. instance(TextileIndustry, IndustryAttribute)
. subAttribute(TextileMills, TextileIndustry)
. subAttribute(TextileProductMills, TextileIndustry)
. industryProductType(FabricMills, Fabric)
. subclass(TextileProduct, Artifact)
. industryProductType(TextileIndustry, TextileProduct)
. instance(TourismIndustry, IndustryAttribute)
%{TourismIndustry
"&%TourismIndustry is an &%Attribute that 
describes organizations that provide services or products for travellers 
who stay temporarily in a region to experience local attractions.  There 
is an overlap between &%TourismIndustry and each of the following 
industries: &%TravelArrangementAndReservationServices, 
&%TravelerAccommodation, &%MuseumsHistoricalSitesAndSimilarInstitutions, 
&%AmusementGamblingAndRecreationIndustries, and
&%ArtsEntertainmentAndRecreation."}%
. relatedInternalConcept(TravelArrangementAndReservationServices,
                         TourismIndustry)
. relatedInternalConcept(TravelerAccommodation, TourismIndustry)
. relatedInternalConcept(MuseumsHistoricalSitesAndSimilarInstitutions,
                         TourismIndustry)
. relatedInternalConcept(AmusementGamblingAndRecreationIndustries,
                         TourismIndustry)
. relatedInternalConcept(ArtsEntertainmentAndRecreation,
                         TourismIndustry)
. instance(VegetableOilIndustry, IndustryAttribute)
. subAttribute(GrainAndOilseedMilling, VegetableOilIndustry)
. instance(ZincIndustry, IndustryAttribute)
. subAttribute(ZincOreMining, ZincIndustry)
. subAttribute(ZincOreMining, LeadOreAndZincOreMining)
. industryProductType(ZincOreMining, ZincOre)
. instance(ZincManufacturing, IndustryAttribute)
. industryProductType(ZincManufacturing, ZincProduct)
. instance(industrialProductionGrowthRateInPeriod,
           TernaryPredicate)
. domain(industrialProductionGrowthRateInPeriod, a_1,
         GeopoliticalArea)
. domain(industrialProductionGrowthRateInPeriod, a_2, RealNumber)
. domainSubclass(industrialProductionGrowthRateInPeriod, a_3,
                 TimeInterval)
%{industrialProductionGrowthRateInPeriod
"(&%industrialProductionGrowthRateInPeriod ?AREA ?RATE ?PERIOD) means 
that in the &%GeopoliticalArea ?AREA, the annual percentage increase in 
industrial production is ?RATE, for the &%TimeInterval ?PERIOD."}%
. instance(industrialProductionGrowthRate, BinaryPredicate)
. domain(industrialProductionGrowthRate, a_1, GeopoliticalArea)
. domain(industrialProductionGrowthRate, a_2, RealNumber)
%{industrialProductionGrowthRate
"(&%industrialProductionGrowthRate ?AREA ?RATE) means that in 
the &%GeopoliticalArea ?AREA, the annual percentage increase in 
industrial production is ?RATE."}%
. industrialProductionGrowthRateInPeriod(vAREA, vRATE, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME,
                            industrialProductionGrowthRate(vAREA, vRATE)))
. instance(electricityProductionInPeriod, TernaryPredicate)
. domain(electricityProductionInPeriod, a_1, GeopoliticalArea)
. domain(electricityProductionInPeriod, a_2, PhysicalQuantity)
. domainSubclass(electricityProductionInPeriod, a_3, TimeInterval)
%{electricityProductionInPeriod
"(&%electricityProductionInPeriod ?AREA ?AMOUNT ?PERIOD) means that the 
&%GeopoliticalArea ?AREA generates ?AMOUNT of electricity, measured in 
&%KilowattHours, during the &%TimeInterval indicated by ?PERIOD."}%
. instance(annualElectricityProduction, BinaryPredicate)
. domain(annualElectricityProduction, a_1, GeopoliticalArea)
. domain(annualElectricityProduction, a_2, PhysicalQuantity)
%{annualElectricityProduction
"(&%annualElectricityProduction ?AREA ?AMOUNT) means that the amount of 
electricity generated annually in the &%GeographicalArea ?AREA is 
?AMOUNT, measured in &%KilowattHours."}%
. electricityProductionInPeriod(vAREA, vAMOUNT, vPERIOD)
  /\ (subclass(vPERIOD, Year)
      \/ subclass(vPERIOD, FiscalYearFn(vAREA))) =>
      exists vYEAR: U
          . instance(vYEAR, vPERIOD)
            /\ holdsDuring(vYEAR, annualElectricityProduction(vAREA, vAMOUNT))
. holdsDuring(vYEAR, annualElectricityProduction(vAREA, vAMOUNT))
  /\ instance(vYEAR, vPERIOD)
  /\ (subclass(vPERIOD, Year)
      \/ subclass(vPERIOD, FiscalYearFn(vAREA))) =>
      electricityProductionInPeriod(vAREA, vAMOUNT, vPERIOD)
. instance(KilowattHour, UnitOfMeasure)
. subclass(KilowattHour, FunctionQuantity)
. abbreviation(a_Quot_k_W_h_Quot, KilowattHour)
%{KilowattHour
"&%KilowattHour is a &%UnitOfMeasure for 
energy that represents 1000 &%Watts (1 kW) of power expended over one 
hour (1 h) of time.  This is the unit commonly used in commercial 
power contexts.  It is equivalent to 3,600,000 &%Joules."}%
. MeasureFn(a_1, KilowattHour) =
      MeasureFn(a_3_Period_6, MegaFn(Joule))
. MeasureFn(a_1, KilowattHour) = MeasureFn(a_3_6_0_0_0_0_0, Joule)
. vAMOUNT = MeasureFn(vX, KilowattHour) =>
      vAMOUNT = MeasureFn(MultiplicationFn(a_3_6_0_0_0_0_0, vX), Joule)
. vAMOUNT = MeasureFn(vX, Joule) =>
      vAMOUNT =
          MeasureFn(MultiplicationFn(a_0_Period_0_0_0_2_7_7_8, vX), Watt)
. instance(electricityFractionFromSourceInPeriod,
           QuaternaryPredicate)
. domain(electricityFractionFromSourceInPeriod, a_1,
         GeopoliticalArea)
. domainSubclass(electricityFractionFromSourceInPeriod, a_2,
                 PowerGeneration)
. domain(electricityFractionFromSourceInPeriod, a_3, RealNumber)
. domainSubclass(electricityFractionFromSourceInPeriod, a_4,
                 TimeInterval)
%{electricityFractionFromSourceInPeriod
"(&%electricityFractionFromSourceInPeriod ?AREA ?SOURCE ?FRACTION ?PERIOD) 
means that in the &%GeopoliticalArea ?AREA, ?SOURCE provides ?FRACTION 
of the total electricity production during the &%TimeInterval indicated 
by ?PERIOD."}%
. electricityFractionFromSourceInPeriod(vAREA, vSOURCE, vFRACTION,
                                        vPERIOD) =>
      lessThanOrEqualTo(vFRACTION, a_1_Period_0)
. instance(electricityFractionFromSource, TernaryPredicate)
. domain(electricityFractionFromSource, a_1, GeopoliticalArea)
. domainSubclass(electricityFractionFromSource, a_2,
                 PowerGeneration)
. domain(electricityFractionFromSource, a_3, RealNumber)
%{electricityFractionFromSource
"(&%electricityFractionFromSource ?AREA ?SOURCE ?FRACTION) means that in 
the &%GeopoliticalArea ?AREA, ?SOURCE provides ?FRACTION of the total 
electricity production."}%
. electricityFractionFromSource(vAREA, vSOURCE, vFRACTION) =>
      lessThanOrEqualTo(vFRACTION, a_1_Period_0)
. electricityFractionFromSourceInPeriod(vAREA, vSOURCE, vFRACTION,
                                        vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME,
                            electricityFractionFromSource(vAREA, vSOURCE,
                                                          vFRACTION)))
. subclass(PowerGeneration, Process)
%{PowerGeneration
"&%PowerGeneration is the class of 
&%Processes in which some kind of power is generated either for immediate 
use in a &%Device or to be stored for future use."}%
. subclass(ElectricalPowerGeneration, PowerGeneration)
%{ElectricalPowerGeneration
"&%ElectricalPowerGeneration is 
the subclass of &%PowerGeneration processes in which electricity is 
generated."}%
. instance(FossilFuelPowerGeneration, PowerGeneration)
. instance(HydroElectricPowerGeneration, ElectricalPowerGeneration)
. instance(NuclearPowerGeneration, PowerGeneration)
. instance(OtherSourcePowerGeneration, PowerGeneration)
%{OtherSourcePowerGeneration
"&%OtherSourcePowerGeneration 
represents all non-fossil fuel, non-hydroelectric, and non-nuclear power 
generation processes, e.g., wind power generation."}%
. disjointDecomposition(PowerGeneration, FossilFuelPowerGeneration,
                        HydroElectricPowerGeneration, NuclearPowerGeneration,
                        OtherSourcePowerGeneration)
. instance(electricityConsumptionInPeriod, TernaryPredicate)
. domain(electricityConsumptionInPeriod, a_1, GeopoliticalArea)
. domain(electricityConsumptionInPeriod, a_2, PhysicalQuantity)
. domainSubclass(electricityConsumptionInPeriod, a_3, TimeInterval)
%{electricityConsumptionInPeriod
"(&%electricityConsumptionInPeriod ?AREA ?AMOUNT ?YEAR) means that 
the &%GeopoliticalArea ?AREA used ?AMOUNT of electricity (measured in 
&%KilowattHours) during the &%TimeInterval indicated by ?YEAR."}%
. instance(annualElectricityConsumption, BinaryPredicate)
. domain(annualElectricityConsumption, a_1, GeopoliticalArea)
. domain(annualElectricityConsumption, a_2, PhysicalQuantity)
%{annualElectricityConsumption
"(&%annualElectricityConsumption ?AREA ?AMOUNT) means that the 
&%GeopoliticalArea ?AREA uses ?AMOUNT of electricity (measured in 
&%KilowattHours) annually."}%
. electricityConsumptionInPeriod(vAREA, vAMOUNT, vPERIOD)
  /\ (subclass(vPERIOD, Year)
      \/ subclass(vPERIOD, FiscalYearFn(vAREA))) =>
      exists vYEAR: U
          . instance(vYEAR, vPERIOD)
            /\ holdsDuring(vYEAR, annualElectricityConsumption(vAREA, vAMOUNT))
. holdsDuring(vYEAR, annualElectricityConsumption(vAREA, vAMOUNT))
  /\ instance(vYEAR, vPERIOD)
  /\ (subclass(vPERIOD, Year)
      \/ subclass(vPERIOD, FiscalYearFn(vAREA))) =>
      electricityConsumptionInPeriod(vAREA, vAMOUNT, vPERIOD)
. instance(electricityExportInPeriod, TernaryPredicate)
. domain(electricityExportInPeriod, a_1, GeopoliticalArea)
. domain(electricityExportInPeriod, a_2, PhysicalQuantity)
. domainSubclass(electricityExportInPeriod, a_3, TimeInterval)
%{electricityExportInPeriod
"(&%electricityExportInPeriod ?AREA ?AMOUNT ?PERIOD) means that 
the &%GeopoliticalArea ?AREA exported the total ?AMOUNT of electricity 
(measured in &%KilowattHours) during the &%TimeInterval indicated 
by ?PERIOD."}%
. instance(annualElectricityExport, BinaryPredicate)
. domain(annualElectricityExport, a_1, GeopoliticalArea)
. domain(annualElectricityExport, a_2, PhysicalQuantity)
%{annualElectricityExport
"(&%annualElectricityExport ?AREA ?AMOUNT) means that the 
&%GeopoliticalArea ?AREA exported the total ?AMOUNT of 
electricity (measured in &%KilowattHours) annually."}%
. electricityExportInPeriod(vAREA, vAMOUNT, vPERIOD)
  /\ (subclass(vPERIOD, Year)
      \/ subclass(vPERIOD, FiscalYearFn(vAREA))) =>
      exists vYEAR: U
          . instance(vYEAR, vPERIOD)
            /\ holdsDuring(vYEAR, annualElectricityExport(vAREA, vAMOUNT))
. holdsDuring(vYEAR, annualElectricityExport(vAREA, vAMOUNT))
  /\ instance(vYEAR, vPERIOD)
  /\ (subclass(vPERIOD, Year)
      \/ subclass(vPERIOD, FiscalYearFn(vAREA))) =>
      electricityExportInPeriod(vAREA, vAMOUNT, vPERIOD)
. instance(electricityImportInPeriod, TernaryPredicate)
. domain(electricityImportInPeriod, a_1, GeopoliticalArea)
. domain(electricityImportInPeriod, a_2, PhysicalQuantity)
. domainSubclass(electricityImportInPeriod, a_3, TimeInterval)
%{electricityImportInPeriod
"(&%electricityImportInPeriod ?AREA ?AMOUNT ?PERIOD) means that 
the &%GeopoliticalArea ?AREA imported the total ?AMOUNT of electricity 
(measured in &%KilowattHours) during the &%TimeInterval indicated 
by ?PERIOD."}%
. instance(annualElectricityImport, BinaryPredicate)
. domain(annualElectricityImport, a_1, GeopoliticalArea)
. domain(annualElectricityImport, a_2, PhysicalQuantity)
%{annualElectricityImport
"(&%annualElectricityImport ?AREA ?AMOUNT) means that the 
&%GeopoliticalArea ?AREA imported the total ?AMOUNT of 
electricity (measured in &%KilowattHours) annually."}%
. electricityImportInPeriod(vAREA, vAMOUNT, vPERIOD)
  /\ (subclass(vPERIOD, Year)
      \/ subclass(vPERIOD, FiscalYearFn(vAREA))) =>
      exists vYEAR: U
          . instance(vYEAR, vPERIOD)
            /\ holdsDuring(vYEAR, annualElectricityImport(vAREA, vAMOUNT))
. holdsDuring(vYEAR, annualElectricityImport(vAREA, vAMOUNT))
  /\ instance(vYEAR, vPERIOD)
  /\ (subclass(vPERIOD, Year)
      \/ subclass(vPERIOD, FiscalYearFn(vAREA))) =>
      electricityImportInPeriod(vAREA, vAMOUNT, vPERIOD)
. instance(agriculturalProductType, BinaryPredicate)
. domain(agriculturalProductType, a_1, GeopoliticalArea)
. domainSubclass(agriculturalProductType, a_2, Object)
%{agriculturalProductType
"(&%agriculturalProductType ?AREA ?TYPE) means that the 
&%GeopoliticalArea ?AREA produces a crop or other 
agricultural product of ?TYPE."}%
. instance(agriculturalProductTypeByRank, TernaryPredicate)
. domain(agriculturalProductTypeByRank, a_1, GeopoliticalArea)
. domainSubclass(agriculturalProductTypeByRank, a_2, Object)
. domainSubclass(agriculturalProductTypeByRank, a_3,
                 PositiveInteger)
%{agriculturalProductTypeByRank
"(&%agriculturalProductTypeByRank ?AREA ?TYPE ?NTH) means that the 
&%GeopoliticalArea ?AREA produces a crop or other 
agricultural product of ?TYPE, which is its ?NTH most important 
crop."}%
. instance(exportTotalInPeriod, TernaryPredicate)
. domain(exportTotalInPeriod, a_1, GeopoliticalArea)
. domain(exportTotalInPeriod, a_2, CurrencyMeasure)
. domainSubclass(exportTotalInPeriod, a_3, TimeInterval)
%{exportTotalInPeriod
"(&%exportTotalInPeriod ?AREA ?AMOUNT ?PERIOD) means that the 
total value of exports from the &%GeopoliticalArea ?AREA is ?AMOUNT 
(in &%UnitedStatesDollars) for the &%TimeInterval indicated by ?PERIOD.  
Export value is calculated on a Free on Board (F.O.B.) basis."}%
. instance(annualExportTotal, BinaryPredicate)
. domain(annualExportTotal, a_1, GeopoliticalArea)
. domain(annualExportTotal, a_2, CurrencyMeasure)
%{annualExportTotal
"(&%annualExportTotal ?AREA ?AMOUNT) means that the total 
value of exports from the &%GeopoliticalArea ?AREA is ?AMOUNT 
(in &%UnitedStatesDollars) annually.  Export value is calculated 
on a Free on Board (F.O.B.) basis."}%
. exportTotalInPeriod(vAREA, vAMOUNT, vPERIOD)
  /\ (subclass(vPERIOD, Year)
      \/ subclass(vPERIOD, FiscalYearFn(vAREA))) =>
      exists vYEAR: U
          . instance(vYEAR, vPERIOD)
            /\ holdsDuring(vYEAR, annualExportTotal(vAREA, vAMOUNT))
. holdsDuring(vYEAR, annualExportTotal(vAREA, vAMOUNT))
  /\ instance(vYEAR, vPERIOD)
  /\ (subclass(vPERIOD, Year)
      \/ subclass(vPERIOD, FiscalYearFn(vAREA))) =>
      exportTotalInPeriod(vAREA, vAMOUNT, vPERIOD)
. instance(exportCommodityType, BinaryPredicate)
. domain(exportCommodityType, a_1, GeopoliticalArea)
. domainSubclass(exportCommodityType, a_2, Object)
%{exportCommodityType
"(&%exportCommodityType ?AREA ?TYPE) means that the &%GeopoliticalArea 
?AREA exports the commodity ?TYPE."}%
. exportCommodityType(vAGENT, vTYPE) =>
      exists vEXPORT: U; vOBJECT: U
          . instance(vEXPORT, Exporting)
            /\ agent(vEXPORT, vAGENT)
            /\ instance(vOBJECT, vTYPE)
            /\ patient(vEXPORT, vOBJECT)
. instance(exportCommodityTypeByRank, TernaryPredicate)
. domain(exportCommodityTypeByRank, a_1, GeopoliticalArea)
. domainSubclass(exportCommodityTypeByRank, a_2, Object)
. domain(exportCommodityTypeByRank, a_3, PositiveInteger)
%{exportCommodityTypeByRank
"(&%exportCommodityTypeByRank ?AREA ?TYPE ?NTH) means that the 
&%GeopoliticalArea ?AREA has the commodity ?TYPE as its ?NTH 
most valuable export."}%
. exportCommodityTypeByRank(vAREA, vTYPE, vRANK) =>
      exportCommodityType(vAREA, vTYPE)
. exportCommodityType(vAREA, vTYPE) =>
      exists vTRANSFER: U; vOBJECT: U
          . instance(vTRANSFER, Exporting)
            /\ agent(vTRANSFER, vAREA)
            /\ patient(vTRANSFER, vOBJECT)
            /\ instance(vOBJECT, vTYPE)
. instance(exportPartnerInPeriod, TernaryPredicate)
. instance(exportPartnerInPeriod, IrreflexiveRelation)
. domain(exportPartnerInPeriod, a_1, Agent)
. domain(exportPartnerInPeriod, a_2, Agent)
. domainSubclass(exportPartnerInPeriod, a_3, TimeInterval)
%{exportPartnerInPeriod
"(&%exportPartnerInPeriod ?AGENT1 ?AGENT2 ?PERIOD) means that the &%Agent 
?AGENT1 exports goods to the &%Agent ?AGENT2 during the &%TimeInterval 
indicated by ?PERIOD."}%
. exportPartnerInPeriod(vAGENT1, vAGENT2, vPERIOD) =>
      exists vTIME: U; vEXPORT: U
          . instance(vTIME, vPERIOD)
            /\ instance(vEXPORT, Exporting)
            /\ overlapsTemporally(vTIME, WhenFn(vEXPORT))
            /\ origin(vEXPORT, vAGENT1)
            /\ destination(vEXPORT, vAGENT2)
. instance(exportPartner, BinaryPredicate)
. instance(exportPartner, IrreflexiveRelation)
. domain(exportPartner, a_1, Agent)
. domain(exportPartner, a_2, Agent)
%{exportPartner
"(&%exportPartner ?AGENT1 ?AGENT2) 
means that the &%Agent ?AGENT1 exports goods to the &%Agent 
?AGENT2."}%
. exportPartner(vAGENT1, vAGENT2) =>
      exists vEXPORT: U
          . instance(vEXPORT, Exporting)
            /\ origin(vEXPORT, vAGENT1)
            /\ destination(vEXPORT, vAGENT2)
. exportPartnerInPeriod(vAGENT1, vAGENT2, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, exportPartner(vAGENT1, vAGENT2)))
. subclass(Exporting, ChangeOfPossession)
. subclass(Exporting, FinancialTransaction)
%{Exporting
"&%Exporting is the class of actions in 
which there is a &%ChangeOfPossession of goods shipped from a 
provider in one &%Nation to a destination in another &%Nation. 
Typically, there are &%Selling and &%Buying events associated 
with an &%Exporting.  Either the seller or the exporting country 
may be considered the &%origin of &%Exporting."}%
. instance(vEXPORT, Exporting) =>
      exists vITEM: U
          . instance(vITEM, Object) /\ patient(vEXPORT, vITEM)
. instance(vEXPORT, Exporting)
  /\ patient(vEXPORT, vITEM)
  /\ instance(vAREA, GeopoliticalArea)
  /\ origin(vEXPORT, vAREA) =>
      holdsDuring(BeginFn(WhenFn(vEXPORT)), located(vITEM, vAREA))
. instance(vEXPORT, Exporting)
  /\ patient(vEXPORT, vITEM)
  /\ instance(vAREA, GeopoliticalArea)
  /\ holdsDuring(BeginFn(WhenFn(vEXPORT)), located(vITEM, vAREA)) =>
      holdsDuring(EndFn(WhenFn(vEXPORT)), a_n_o_t(located(vITEM, vAREA)))
. instance(vEXPORT, Exporting)
  /\ patient(vEXPORT, vITEM)
  /\ instance(vAREA, GeopoliticalArea)
  /\ holdsDuring(BeginFn(WhenFn(vEXPORT)), located(vITEM, vAREA)) =>
      exists vAREA2: U
          . instance(vAREA2, GeopoliticalArea)
            /\ not geopoliticalSubdivision(vAREA1, vAREA2)
            /\ not geopoliticalSubdivision(vAREA2, vAREA1)
            /\ holdsDuring(EndFn(WhenFn(vEXPORT)), located(vITEM, vAREA2))
. instance(vEXPORT, Exporting)
  /\ patient(vEXPORT, vITEM)
  /\ instance(vAREA, GeopoliticalArea)
  /\ destination(vEXPORT, vAREA) =>
      holdsDuring(EndFn(WhenFn(vEXPORT)), located(vITEM, vAREA))
. instance(vEXPORT, Exporting)
  /\ patient(vEXPORT, vITEM)
  /\ instance(vAREA1, GeopoliticalArea)
  /\ instance(vAREA2, GeopoliticalArea)
  /\ holdsDuring(BeginFn(WhenFn(vEXPORT)), located(vITEM, vAREA1))
  /\ holdsDuring(EndFn(WhenFn(vEXPORT)), located(vITEM, vAREA2)) =>
      not located(vAREA2, vAREA1)
. instance(vEXPORT, Exporting)
  /\ patient(vEXPORT, vITEM)
  /\ instance(vAREA1, GeopoliticalArea)
  /\ origin(vEXPORT, vAREA1)
  /\ instance(vAREA2, GeopoliticalArea)
  /\ destination(vEXPORT, vAREA2) =>
      not vAREA1 = vAREA2
. instance(vEXPORT, Exporting)
  /\ patient(vEXPORT, vITEM)
  /\ instance(vAREA1, GeopoliticalArea)
  /\ origin(vEXPORT, vAREA1)
  /\ instance(vAREA2, GeopoliticalArea)
  /\ destination(vEXPORT, vAREA2) =>
      not located(vAREA2, vAREA1)
. instance(exportPartnerByRankInPeriod, QuaternaryPredicate)
. domain(exportPartnerByRankInPeriod, a_1, GeopoliticalArea)
. domain(exportPartnerByRankInPeriod, a_2, GeopoliticalArea)
. domain(exportPartnerByRankInPeriod, a_3, PositiveInteger)
. domainSubclass(exportPartnerByRankInPeriod, a_4, TimeInterval)
%{exportPartnerByRankInPeriod
"(&%exportPartnerByRankInPeriod ?AREA1 ?AREA2 ?NTH ?PERIOD) means that 
the &%GeopoliticalArea ?AREA1 exports goods to &%GeopoliticalArea 
?AREA2 and is the ?NTH most important export partner of ?AREA1, 
in the &%TimeInterval ?PERIOD, based on U.S. dollar value of exports."}%
. instance(exportPartnerByRank, TernaryPredicate)
. domain(exportPartnerByRank, a_1, GeopoliticalArea)
. domain(exportPartnerByRank, a_2, GeopoliticalArea)
. domain(exportPartnerByRank, a_3, PositiveInteger)
%{exportPartnerByRank
"(&%exportPartnerByRank ?AREA1 ?AREA2 ?NTH) means that 
the &%GeopoliticalArea ?AREA1 exports goods to &%GeopoliticalArea 
?AREA2 and is the ?NTH most important export partner of ?AREA1, 
based on U.S. dollar value of exports."}%
. exportPartnerByRankInPeriod(vAREA1, vAREA2, vNTH, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, exportPartnerByRank(vAREA1, vAREA2, vNTH)))
. instance(exportPartnerByFractionInPeriod, QuaternaryPredicate)
. domain(exportPartnerByFractionInPeriod, a_1, GeopoliticalArea)
. domain(exportPartnerByFractionInPeriod, a_2, GeopoliticalArea)
. domain(exportPartnerByFractionInPeriod, a_3, PositiveRealNumber)
. domainSubclass(exportPartnerByFractionInPeriod, a_4,
                 TimeInterval)
%{exportPartnerByFractionInPeriod
"(&%exportPartnerByFractionInPeriod ?AREA1 ?AREA2 ?FRACTION ?PERIOD) means 
that the &%GeopoliticalArea ?AREA1 exports goods to &%GeopoliticalArea 
?AREA2 and receives ?FRACTION of the &%exportTotalInPeriod of ?AREA1 
in the &%TimeInterval ?PERIOD, based on U.S. dollar value of exports."}%
. exportPartnerByFractionInPeriod(vAREA1, vAREA2, vFRACTION,
                                  vPERIOD) =>
      lessThanOrEqualTo(vYEAR, a_1_Period_0)
. instance(exportPartnerByFraction, TernaryPredicate)
. domain(exportPartnerByFraction, a_1, GeopoliticalArea)
. domain(exportPartnerByFraction, a_2, GeopoliticalArea)
. domain(exportPartnerByFraction, a_3, PositiveRealNumber)
%{exportPartnerByFraction
"(&%exportPartnerByFraction ?AREA1 ?AREA2 ?FRACTION) means that 
the &%GeopoliticalArea ?AREA1 exports goods to &%GeopoliticalArea 
?AREA2 and receives ?FRACTION of the &%exportTotalInPeriod of ?AREA1, 
based on U.S. dollar value of exports."}%
. exportPartnerByFraction(vAREA1, vAREA2, vFRACTION) =>
      lessThanOrEqualTo(vYEAR, a_1_Period_0)
. exportPartnerByFractionInPeriod(vAREA1, vAREA2, vFRACTION,
                                  vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME,
                            exportPartnerByFraction(vAREA1, vAREA2, vFRACTION)))
. instance(importTotalInPeriod, TernaryPredicate)
. domain(importTotalInPeriod, a_1, GeopoliticalArea)
. domain(importTotalInPeriod, a_2, CurrencyMeasure)
. domainSubclass(importTotalInPeriod, a_3, TimeInterval)
%{importTotalInPeriod
"(&%importTotalInPeriod ?AREA ?AMOUNT ?PERIOD) means that the 
total value of imports to the &%GeopoliticalArea ?AREA is ?AMOUNT 
(in &%UnitedStatesDollars) for the &%TimeInterval indicated by ?PERIOD.  
Import value is calculated on a Cost, Insurance, and Freight (C.I.F.) 
or a Free on Board (F.O.B.) basis."}%
. instance(annualImportTotal, BinaryPredicate)
. domain(annualImportTotal, a_1, GeopoliticalArea)
. domain(annualImportTotal, a_2, CurrencyMeasure)
%{annualImportTotal
"(&%annualImportTotal ?AREA ?AMOUNT) means that the total 
value of imports to the &%GeopoliticalArea ?AREA is ?AMOUNT (in 
&%UnitedStatesDollars) annually.  Import value is calculated on a Cost, 
Insurance, and Freight (C.I.F.) or a Free on Board (F.O.B.) basis."}%
. importTotalInPeriod(vAREA, vAMOUNT, vPERIOD)
  /\ (subclass(vPERIOD, Year)
      \/ subclass(vPERIOD, FiscalYearFn(vAREA))) =>
      exists vYEAR: U
          . instance(vYEAR, vPERIOD)
            /\ holdsDuring(vYEAR, annualImportTotal(vAREA, vAMOUNT))
. holdsDuring(vYEAR, annualImportTotal(vAREA, vAMOUNT))
  /\ instance(vYEAR, vPERIOD)
  /\ (subclass(vPERIOD, Year)
      \/ subclass(vPERIOD, FiscalYearFn(vAREA))) =>
      importTotalInPeriod(vAREA, vAMOUNT, vPERIOD)
. instance(importCommodityType, BinaryPredicate)
. domain(importCommodityType, a_1, GeopoliticalArea)
. domainSubclass(importCommodityType, a_2, Object)
%{importCommodityType
"(&%importCommodityType ?AREA ?TYPE) means that the &%GeopoliticalArea 
?AREA imports the commodity ?TYPE."}%
. instance(importCommodityTypeByRank, TernaryPredicate)
. domain(importCommodityTypeByRank, a_1, GeopoliticalArea)
. domainSubclass(importCommodityTypeByRank, a_2, Object)
. domain(importCommodityTypeByRank, a_3, PositiveInteger)
%{importCommodityTypeByRank
"(&%importCommodityTypeByRank ?AREA ?TYPE ?NTH) means that the 
&%GeopoliticalArea ?AREA has the commodity ?TYPE as its ?NTH 
most valuable import."}%
. importCommodityTypeByRank(vAREA, vTYPE, vRANK) =>
      importCommodityType(vAREA, vTYPE)
. instance(importPartnerInPeriod, TernaryPredicate)
. instance(importPartnerInPeriod, IrreflexiveRelation)
. domain(importPartnerInPeriod, a_1, Agent)
. domain(importPartnerInPeriod, a_2, Agent)
. domainSubclass(importPartnerInPeriod, a_3, TimeInterval)
%{importPartnerInPeriod
"(&%importPartnerInPeriod ?AGENT1 ?AGENT2 ?PERIOD) means that the &%Agent 
?AGENT1 imports goods from the &%Agent ?AGENT2 during the &%TimeInterval 
indicated by ?PERIOD."}%
. importPartnerInPeriod(vAGENT1, vAGENT2, vPERIOD) =>
      exists vTIME: U; vEXPORT: U
          . instance(vTIME, vPERIOD)
            /\ instance(vEXPORT, Exporting)
            /\ overlapsTemporally(vTIME, vEXPORT)
            /\ origin(vEXPORT, vAGENT2)
            /\ destination(vEXPORT, vAGENT1)
. instance(importPartner, BinaryPredicate)
. instance(importPartner, IrreflexiveRelation)
. domain(importPartner, a_1, Agent)
. domain(importPartner, a_2, Agent)
%{importPartner
"(&%importPartner ?AGENT1 ?AGENT2) means 
that the &%Agent ?AGENT1 imports goods from the &%Agent ?AGENT2."}%
. importPartner(vAGENT1, vAGENT2) =>
      exists vEXPORT: U
          . instance(vEXPORT, Exporting)
            /\ origin(vEXPORT, vAGENT2)
            /\ destination(vEXPORT, vAGENT1)
. importPartnerInPeriod(vAGENT1, vAGENT2, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, importPartner(vAGENT1, vAGENT2)))
. instance(importPartnerByRankInPeriod, QuaternaryPredicate)
. domain(importPartnerByRankInPeriod, a_1, GeopoliticalArea)
. domain(importPartnerByRankInPeriod, a_2, GeopoliticalArea)
. domain(importPartnerByRankInPeriod, a_3, PositiveInteger)
. domainSubclass(importPartnerByRankInPeriod, a_4, TimeInterval)
%{importPartnerByRankInPeriod
"(&%importPartnerByRankInPeriod ?AREA1 ?AREA2 ?NTH ?PERIOD) means that 
the &%GeopoliticalArea ?AREA1 imports goods from &%GeopoliticalArea 
?AREA2 is the ?NTH most important import partner of ?AREA1 during 
the &%TimeInterval ?PERIOD, based on U.S. dollar value of imports."}%
. instance(importPartnerByRank, TernaryPredicate)
. domain(importPartnerByRank, a_1, GeopoliticalArea)
. domain(importPartnerByRank, a_2, GeopoliticalArea)
. domain(importPartnerByRank, a_3, PositiveInteger)
%{importPartnerByRank
"(&%importPartnerByRank ?AREA1 ?AREA2 ?NTH) means that 
the &%GeopoliticalArea ?AREA1 imports goods from &%GeopoliticalArea 
?AREA2 is the ?NTH most important import partner of ?AREA1, based on 
U.S. dollar value of imports."}%
. importPartnerByRankInPeriod(vAREA1, vAREA2, vNTH, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, importPartnerByRank(vAREA1, vAREA2, vNTH)))
. instance(importPartnerByFractionInPeriod, QuaternaryPredicate)
. domain(importPartnerByFractionInPeriod, a_1, GeopoliticalArea)
. domain(importPartnerByFractionInPeriod, a_2, GeopoliticalArea)
. domain(importPartnerByFractionInPeriod, a_3, PositiveRealNumber)
. domainSubclass(importPartnerByFractionInPeriod, a_4,
                 TimeInterval)
%{importPartnerByFractionInPeriod
"(&%importPartnerByFractionInPeriod ?AREA1 ?AREA2 ?FRACTION ?PERIOD) means 
that the &%GeopoliticalArea ?AREA1 imports goods from &%GeopoliticalArea 
?AREA2 and provides ?FRACTION of the &%importTotalInPeriod of ?AREA1 
during the &%TimeInterval ?PERIOD, in U.S. dollar value of imports."}%
. importPartnerByFractionInPeriod(vAREA1, vAREA2, vFRACTION,
                                  vPERIOD) =>
      lessThanOrEqualTo(vYEAR, a_1_Period_0)
. instance(importPartnerByFraction, TernaryPredicate)
. domain(importPartnerByFraction, a_1, GeopoliticalArea)
. domain(importPartnerByFraction, a_2, GeopoliticalArea)
. domain(importPartnerByFraction, a_3, PositiveRealNumber)
%{importPartnerByFraction
"(&%importPartnerByFraction ?AREA1 ?AREA2 ?FRACTION) means that 
the &%GeopoliticalArea ?AREA1 imports goods from &%GeopoliticalArea 
?AREA2 and provides ?FRACTION of the &%importTotalInPeriod of ?AREA1, 
based on U.S. dollar value of imports."}%
. importPartnerByFraction(vAREA1, vAREA2, vFRACTION) =>
      lessThanOrEqualTo(vYEAR, a_1_Period_0)
. importPartnerByFractionInPeriod(vAREA1, vAREA2, vFRACTION,
                                  vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME,
                            importPartnerByFraction(vAREA1, vAREA2, vFRACTION)))
. instance(externalDebtInPeriod, TernaryPredicate)
. domain(externalDebtInPeriod, a_1, GeopoliticalArea)
. domain(externalDebtInPeriod, a_2, CurrencyMeasure)
. domainSubclass(externalDebtInPeriod, a_3, TimeInterval)
%{externalDebtInPeriod
"(&%externalDebtInPeriod ?COUNTRY ?AMOUNT ?PERIOD) means that the 
&%GeopoliticalArea ?COUNTRY owes the total sum ?AMOUNT of debt (public 
and private) to nonresidents during the &%TimeInterval indicated by 
?PERIOD. The amount is valued in U.S. dollars but may be repayable in 
foreign currency, goods, or services."}%
. instance(externalDebt, BinaryPredicate)
. domain(externalDebt, a_1, GeopoliticalArea)
. domain(externalDebt, a_2, CurrencyMeasure)
%{externalDebt
"(&%externalDebt ?COUNTRY ?AMOUNT) means 
that the &%GeopoliticalArea ?COUNTRY owes the total sum ?AMOUNT of debt 
(public and private) to nonresidents.  The amount is valued in U.S. 
dollars but may be repayable in foreign currency, goods, or services."}%
. externalDebt(vCOUNTRY, vAMOUNT, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, externalDebt(vCOUNTRY, vAMOUNT)))
. instance(economicAidDonatedInPeriod, TernaryPredicate)
. domain(economicAidDonatedInPeriod, a_1, GeopoliticalArea)
. domain(economicAidDonatedInPeriod, a_2, CurrencyMeasure)
. domainSubclass(economicAidDonatedInPeriod, a_3, TimeInterval)
%{economicAidDonatedInPeriod
"(&%economicAidDonatedInPeriod ?AGENT ?AMOUNT ?PERIOD) means that the 
&%GeopoliticalArea ?AGENT donated ?AMOUNT of aid (valued in U.S. dollars) 
to developing countries and multilateral organizations during the 
&%TimeInterval indicated by ?PERIOD.  This figure covers 'net official 
development assistance' (ODA), which is net financial assistance from 
nations belonging to the 
&%OrganizationForEconomicCooperationAndDevelopment (OECD), with the main 
goal of promoting economic development and welfare.  Such aid contains a 
grant element of at least 25%.  This statistic does not cover private 
flows of assistance or other official flows (OOF)."}%
. instance(economicAidDonated, BinaryPredicate)
. domain(economicAidDonated, a_1, GeopoliticalArea)
. domain(economicAidDonated, a_2, CurrencyMeasure)
%{economicAidDonated
"(&%economicAidDonated ?AGENT ?AMOUNT) means that the &%GeopoliticalArea 
?AREA donated ?AMOUNT of aid (valued in U.S. dollars) to developing 
countries and multilateral organizations.  This figure covers 'net 
official development assistance' (ODA), which is net financial assistance 
from nations belonging to the 
&%OrganizationForEconomicCooperationAndDevelopment (OECD), with the main 
goal of promoting economic development and welfare.  Such aid contains a 
grant element of at least 25%.  This statistic does not cover private 
flows of assistance or other official flows (OOF)."}%
. economicAidDonatedInPeriod(vCOUNTRY, vAMOUNT, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, economicAidDonated(vCOUNTRY, vAMOUNT)))
. instance(economicAidReceivedNetInPeriod, TernaryPredicate)
. domain(economicAidReceivedNetInPeriod, a_1, GeopoliticalArea)
. domain(economicAidReceivedNetInPeriod, a_2, CurrencyMeasure)
. domainSubclass(economicAidReceivedNetInPeriod, a_3, TimeInterval)
%{economicAidReceivedNetInPeriod
"(&%economicAidReceivedNetInPeriod ?AREA ?AMOUNT ?PERIOD) means that the 
&%GeopoliticalArea ?AREA had a net inflow of Official Development Finance 
(ODF) of ?AMOUNT during the &%TimeInterval indicated by ?PERIOD.  ODF 
includes funds from the World Bank, the IMF, other international 
organizations, and individual donor nations, including both grants and 
loans.  The figure includes formal commitments of aid not yet disbursed.  
The figure is the net amount of inflow after deducting repayments, 
valued in U.S. dollars."}%
. instance(economicAidReceivedNet, BinaryPredicate)
. domain(economicAidReceivedNet, a_1, GeopoliticalArea)
. domain(economicAidReceivedNet, a_2, CurrencyMeasure)
%{economicAidReceivedNet
"(&%economicAidReceivedNet ?AREA ?AMOUNT) means that the 
&%GeopoliticalArea ?AREA had a net inflow of Official Development Finance 
(ODF) of ?AMOUNT.  ODF includes funds from the World Bank, the IMF, other 
international organizations, and individual donor nations, including both 
grants and loans.  The figure includes formal commitments of aid not yet 
disbursed.  The figure is the net amount of inflow after deducting 
repayments, valued in U.S. dollars."}%
. economicAidReceivedNetInPeriod(vCOUNTRY, vAMOUNT, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, economicAidReceivedNet(vCOUNTRY, vAMOUNT)))
. instance(currencyType, BinaryPredicate)
. domain(currencyType, a_1, GeopoliticalArea)
. domain(currencyType, a_2, UnitOfMeasure)
. domainSubclass(currencyType, a_2, CurrencyMeasure)
%{currencyType
"(&%currencyType ?AREA ?UNIT) means 
that the official currency used in the &%GeopoliticalArea ?AREA 
is the &%UnitOfMeasure ?UNIT."}%
. subclass(AfghanAfghani, CurrencyMeasure)
. instance(AfghanAfghani, UnitOfMeasure)
. subclass(BritishPound, CurrencyMeasure)
. instance(BritishPound, UnitOfMeasure)
. subclass(CanadianDollar, CurrencyMeasure)
. instance(CanadianDollar, UnitOfMeasure)
. subclass(FrenchFranc, CurrencyMeasure)
. instance(FrenchFranc, UnitOfMeasure)
. subclass(GermanMark, CurrencyMeasure)
. instance(GermanMark, UnitOfMeasure)
. subclass(ItalianLire, CurrencyMeasure)
. instance(ItalianLire, UnitOfMeasure)
. subclass(JapaneseYen, CurrencyMeasure)
. instance(JapaneseYen, UnitOfMeasure)
. subclass(TajikSomoni, CurrencyMeasure)
. instance(TajikSomoni, UnitOfMeasure)
. subclass(OldTajikSomoni, CurrencyMeasure)
. instance(OldTajikSomoni, UnitOfMeasure)
. instance(currencyCode, BinaryPredicate)
. domain(currencyCode, a_1, SymbolicString)
. domain(currencyCode, a_2, UnitOfMeasure)
. domainSubclass(currencyCode, a_2, CurrencyMeasure)
. subrelation(currencyCode, abbreviation)
%{currencyCode
"(&%currencyCode ?CODE ?UNIT) means 
that ?CODE is the &%InternationalOrganizationForStandardization 
(ISO) 4217 alphabetic currency code for the national 
&%CurrencyMeasure ?UNIT."}%
. instance(currencyExchangePerUSDollar, BinaryPredicate)
. domain(currencyExchangePerUSDollar, a_1, CurrencyMeasure)
. domainSubclass(currencyExchangePerUSDollar, a_2, TimeInterval)
%{currencyExchangePerUSDollar
"(&%currencyExchangePerUSDollar ?AMOUNT ?PERIOD) means that one 
&%UnitedStatesDollar is worth ?AMOUNT (in a non-U.S. &%CurrencyMeasure), 
during the &%TimeInterval indicated by ?PERIOD.  The rate of exchange may 
be based either on international market forces or official fiat."}%
. instance(currencyExchangeRateInPeriod, TernaryPredicate)
. domain(currencyExchangeRateInPeriod, a_1, UnitOfMeasure)
. domainSubclass(currencyExchangeRateInPeriod, a_1,
                 CurrencyMeasure)
. domain(currencyExchangeRateInPeriod, a_2, CurrencyMeasure)
. domainSubclass(currencyExchangeRateInPeriod, a_3, TimeInterval)
%{currencyExchangeRateInPeriod
"(&%currencyExchangeRateInPeriod ?UNIT ?AMOUNT ?PERIOD) means that the 
currency denomination ?UNIT is worth ?AMOUNT (which is in another 
&%CurrencyMeasure) during the &%TimeInterval indicated by ?PERIOD."}%
. currencyExchangePerUSDollar(vAMOUNT, vPERIOD) <=>
      currencyExchangeRateInPeriod(UnitedStatesDollar, vAMOUNT, vPERIOD)
. instance(currencyExchangeRate, BinaryPredicate)
. domain(currencyExchangeRate, a_1, UnitOfMeasure)
. domainSubclass(currencyExchangeRate, a_1, CurrencyMeasure)
. domain(currencyExchangeRate, a_2, CurrencyMeasure)
%{currencyExchangeRate
"(&%currencyExchangeRate ?UNIT ?AMOUNT) means that the currency 
denomination ?UNIT is worth ?AMOUNT (which is in another 
&%CurrencyMeasure)."}%
. currencyExchangePerUSDollar(vAMOUNT, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME,
                            currencyExchangeRate(UnitedStatesDollar, vAMOUNT)))
. currencyExchangeRateInPeriod(vUNIT, vAMOUNT, vPERIOD) <=>
      (exists vTIME: U
           . instance(vTIME, vPERIOD)
             /\ holdsDuring(vTIME, currencyExchangeRate(vUNIT, vAMOUNT)))
. instance(fiscalYearPeriod, BinaryPredicate)
. domain(fiscalYearPeriod, a_1, Agent)
. domainSubclass(fiscalYearPeriod, a_2, TimeInterval)
%{fiscalYearPeriod
"The predicate &%fiscalYearPeriod 
indicates the period that an &%Agent or &%Organization uses as its 
12-month accounting period.  (&%fiscalYearPeriod ?AGENT &%Year) means 
that ?AGENT observes its 12-month accounting period during the 
regular calendar year (CY), from &%January to &%December.  For 
fiscal years with other beginning and ending months (FYs), use 
(&%fiscalYearPeriod ?AGENT (&%RecurrentTimeIntervalFn ?STARTMONTH ?ENDMONTH)).  
For example, (&%fiscalYearPeriod (&%GovernmentFn &%UnitedStates) 
(&%RecurrentTimeIntervalFn &%October &%September)).  For FYs that begin 
or end mid-month, days may be specified within &%RecurrentTimeIntervalFn."}%
. instance(FiscalYearFn, UnaryFunction)
. domain(FiscalYearFn, a_1, Agent)
. rangeSubclass(FiscalYearFn, TimeInterval)
%{FiscalYearFn
"(&%FiscalYearFn ?PLACE) denotes the subclass 
of &%TimeIntervals that are &%fiscalYearPeriods of the &%Organization or 
&%GeopoliticalArea ?PLACE."}%
. vFY = FiscalYearFn(vPLACE) =>
      instance(vPLACE, GeopoliticalArea)
      \/ instance(vPLACE, Organization)
. fiscalYearPeriod(vPLACE, vPERIOD)
  /\ instance(vFY, FiscalYearFn(vPLACE)) =>
      instance(vFY, vPERIOD)
. instance(vFY, FiscalYearFn(vPLACE)) =>
      duration(vFY, MeasureFn(a_1, YearDuration))
. instance(FiscalYearStartingFn, BinaryFunction)
. domain(FiscalYearStartingFn, a_1, Agent)
. domainSubclass(FiscalYearStartingFn, a_2, Year)
. range(FiscalYearStartingFn, TimeInterval)
%{FiscalYearStartingFn
"(&%FiscalYearStartingFn ?PLACE ?YEAR) 
denotes the particular fiscal year that is observed in ?PLACE and begins  
during the calendar &%Year indicated by ?YEAR."}%
. vFY = FiscalYearStartingFn(vPLACE, vYEAR) =>
      instance(vPLACE, GeopoliticalArea)
      \/ instance(vPLACE, Organization)
. instance(vPLACE, Agent) /\ instance(vYEAR, Year) =>
      instance(FiscalYearStartingFn(vPLACE, vYEAR), FiscalYearFn(vPLACE))
. vFY = FiscalYearStartingFn(vPLACE, vYEAR) =>
      duration(vFY, MeasureFn(a_1, YearDuration))
. vFY = FiscalYearStartingFn(vPLACE, vYEAR)
  /\ fiscalYearPeriod(vPLACE, vPERIOD) =>
      instance(vFY, vPERIOD)
. vFY = FiscalYearStartingFn(vPLACE, vYEAR)
  /\ fiscalYearPeriod(vPLACE, vPERIOD)
  /\ instance(vFY, vPERIOD) =>
      exists vDAY: U
          . instance(vDAY, Day)
            /\ starts(vDAY, vFY)
            /\ temporalPart(vDAY, vYEAR)
. subclass(AgriculturalProduct, Product)
. subclass(AgriculturalProduct, OrganicObject)
%{AgriculturalProduct
"&%AgriculturalProduct is the 
subclass of &%Product that comprises the products of agricultural 
activity."}%
. instance(vAG, Agriculture) =>
      resultType(vAG, AgriculturalProduct)
. subclass(PlantAgriculturalProduct, AgriculturalProduct)
%{PlantAgriculturalProduct
"&%PlantAgriculturalProduct 
is the class of &%AgriculturalProducts that are vegetable in nature, 
in the widest sense, e.g., fruits, grains, green vegetables, cotton, 
linen, flowers, wine grapes, hops."}%
. subclass(AnimalAgriculturalProduct, AgriculturalProduct)
%{AnimalAgriculturalProduct
"&%AnimalAgriculturalProduct is the class of &%AgriculturalProducts 
that are animal in nature, including meat, fish, dairy products, 
hides, furs, animal fats and oils, etc."}%
. subclass(CerealGrass, Grass)
. subclass(PaddyRice, CerealGrass)
. subclass(Sorghum, CerealGrass)
. subclass(CerealGrain, PlantAgriculturalProduct)
. subclass(CerealGrain, Vegetable)
. subclass(WheatGrain, CerealGrain)
. subclass(RiceGrain, CerealGrain)
. subclass(MaizeGrain, CerealGrain)
. names(a_Quot_m_a_i_z_e_Quot, MaizeGrain)
. names(a_Quot_c_o_r_n_Quot, MaizeGrain)
. subclass(OatGrain, CerealGrain)
. subclass(BarleyGrain, CerealGrain)
. subclass(RyeGrain, CerealGrain)
. subclass(SorghumGrain, CerealGrain)
. subclass(MilletGrain, CerealGrain)
. subclass(Sugar, PlantAgriculturalProduct)
. subclass(Sugar, Substance)
. subclass(GroceryProduce, PlantAgriculturalProduct)
. subclass(GroceryProduce, FruitOrVegetable)
. subclass(Vegetable, FruitOrVegetable)
. subclass(LeafyGreenVegetable, Vegetable)
. subclass(LeafyGreenVegetable, GroceryProduce)
. subclass(Corn, Vegetable)
. subclass(Corn, GroceryProduce)
. relatedInternalConcept(Corn, MaizeGrain)
. subclass(Cucumber, Vegetable)
. subclass(Cucumber, GroceryProduce)
. subclass(Cabbage, Vegetable)
. subclass(Cabbage, GroceryProduce)
. subclass(Cauliflower, Vegetable)
. subclass(Cauliflower, GroceryProduce)
. subclass(Eggplant, Vegetable)
. subclass(Eggplant, GroceryProduce)
. subclass(GreenPepper, Vegetable)
. subclass(GreenPepper, GroceryProduce)
. subclass(SweetPepper, Vegetable)
. subclass(SweetPepper, GroceryProduce)
. subclass(RootVegetable, PlantAgriculturalProduct)
. subclass(RootVegetable, FruitOrVegetable)
. names(a_Quot_r_o_o_t_Space_v_e_g_e_t_a_b_l_e_Quot, RootVegetable)
. names(a_Quot_r_o_o_t_Space_c_r_o_p_Quot, RootVegetable)
. subclass(EdibleTuber, PlantAgriculturalProduct)
. subclass(EdibleTuber, RootVegetable)
. subclass(RootStarch, PlantAgriculturalProduct)
. subclass(RootStarch, FruitOrVegetable)
. relatedInternalConcept(RootStarch, RootVegetable)
. subclass(Turnip, RootVegetable)
. subclass(Turnip, GroceryProduce)
. subclass(Carrot, RootVegetable)
. subclass(Carrot, GroceryProduce)
. subclass(Squash, Vegetable)
. subclass(Squash, GroceryProduce)
. subclass(SugarBeet, Vegetable)
. subclass(PotatoTuber, EdibleTuber)
. subclass(PotatoTuber, GroceryProduce)
. subclass(SweetPotatoTuber, EdibleTuber)
. subclass(SweetPotatoTuber, GroceryProduce)
. subclass(TaroTuber, EdibleTuber)
. subclass(TaroTuber, GroceryProduce)
. subclass(YamTuber, EdibleTuber)
. subclass(YamTuber, GroceryProduce)
. subclass(Cassava, RootVegetable)
. subclass(Cassava, GroceryProduce)
. names(a_Quot_c_a_s_s_a_v_a_Quot, Cassava)
. names(a_Quot_t_a_p_i_o_c_a_Quot, Cassava)
. names(a_Quot_m_a_n_i_o_c_Quot, Cassava)
. subclass(Legume, Vegetable)
. subclass(Legume, PlantAgriculturalProduct)
. subclass(Bean, Legume)
. subclass(Soybean, Bean)
. subclass(Soya, PlantAgriculturalProduct)
. subclass(Soya, ExtensionFn(Liquid))
. relatedInternalConcept(Soya, Soybean)
. subclass(Pea, Legume)
. subclass(CowPea, Legume)
. subclass(Pulse, Legume)
. subclass(Lentil, Pulse)
. subclass(SugarCane, Vegetable)
. subclass(SugarCane, GroceryProduce)
. subclass(Fruit, FruitOrVegetable)
. subclass(Tomato, Fruit)
. subclass(Tomato, GroceryProduce)
. subclass(Grape, Fruit)
. subclass(Grape, GroceryProduce)
. subclass(Melon, Fruit)
. subclass(Melon, GroceryProduce)
. subclass(Watermelon, Melon)
. subclass(Berry, Fruit)
. subclass(Berry, GroceryProduce)
. subclass(Apple, Fruit)
. subclass(Apple, GroceryProduce)
. subclass(Olive, Fruit)
. subclass(Olive, GroceryProduce)
. subclass(CitrusFruit, Fruit)
. subclass(CitrusFruit, GroceryProduce)
. subclass(Lemon, CitrusFruit)
. subclass(Lime, CitrusFruit)
. subclass(TropicalFruit, Fruit)
. subclass(TropicalFruit, GroceryProduce)
. subclass(Avocado, TropicalFruit)
. subclass(Avocado, GroceryProduce)
. subclass(Banana, TropicalFruit)
. subclass(Banana, GroceryProduce)
. subclass(Breadfruit, TropicalFruit)
. subclass(Breadfruit, GroceryProduce)
. subclass(Coconut, TropicalFruit)
. subclass(Coconut, GroceryProduce)
. subclass(DateFruit, TropicalFruit)
. subclass(DateFruit, GroceryProduce)
. subclass(Mango, TropicalFruit)
. subclass(Mango, GroceryProduce)
. subclass(Papaw, TropicalFruit)
. subclass(Papaw, GroceryProduce)
. names(a_Quot_p_a_p_a_w_Quot, Papaw)
. names(a_Quot_p_a_w_p_a_w_Quot, Papaw)
. subclass(Papaya, TropicalFruit)
. subclass(Papaya, GroceryProduce)
. subclass(PassionFruit, TropicalFruit)
. subclass(PassionFruit, GroceryProduce)
. subclass(Pineapple, TropicalFruit)
. subclass(Pineapple, GroceryProduce)
. subclass(Plantain, TropicalFruit)
. subclass(Plantain, GroceryProduce)
. subclass(Spice, FruitOrVegetable)
. subclass(Spice, PlantAgriculturalProduct)
. subclass(Vanilla, Spice)
. subclass(Clove, Spice)
. subclass(Nutmeg, Spice)
. subclass(Mace, Spice)
. subclass(Cardamom, Spice)
. subclass(BlackPepper, Spice)
. subclass(SpicePepper, Spice)
. subclass(Cinnamon, Spice)
. subclass(Ginger, Spice)
. subclass(Ginger, Vegetable)
. subclass(Nut, PlantAgriculturalProduct)
. subclass(Nut, ReproductiveBody)
. subclass(EdibleNut, GroceryProduce)
. subclass(EdibleNut, FruitOrVegetable)
. subclass(Walnut, EdibleNut)
. subclass(AlmondNut, EdibleNut)
. subclass(PecanNut, EdibleNut)
. subclass(CashewNut, EdibleNut)
. subclass(MacademiaNut, EdibleNut)
. subclass(SheaNut, EdibleNut)
. subclass(Peanut, GroceryProduce)
. subclass(Peanut, EdibleNut)
. subclass(Groundnut, GroceryProduce)
. subclass(Groundnut, FruitOrVegetable)
. subclass(Groundnut, EdibleTuber)
. subclass(Sesame, PlantAgriculturalProduct)
. subclass(Seed, FruitOrVegetable)
. subclass(NorfolkIslandPineSeed, PlantAgriculturalProduct)
. subclass(NorfolkIslandPineSeed, Seed)
. subclass(KentiaPalmSeed, PlantAgriculturalProduct)
. subclass(KentiaPalmSeed, Seed)
. subclass(SunflowerSeed, PlantAgriculturalProduct)
. subclass(SunflowerSeed, Seed)
. subclass(Sunflower, PlantAgriculturalProduct)
. subclass(Sunflower, FloweringPlant)
. subclass(Oilseed, PlantAgriculturalProduct)
. subclass(Oilseed, Seed)
. subclass(Copra, PlantAgriculturalProduct)
. relatedInternalConcept(Copra, VegetableOil)
%{Copra
"&%Copra is the class of dried coconut 
meat valued for the extracted coconut oil."}%
. subclass(PalmOilNut, PlantAgriculturalProduct)
. subclass(PalmOilNut, Nut)
. relatedInternalConcept(PalmKernel, PalmOilNut)
. names(a_Quot_p_a_l_m_Space_o_i_l_Space_n_u_t_Quot, PalmOilNut)
. names(a_Quot_c_o_q_u_i_l_l_a_Space_n_u_t_Quot, PalmOilNut)
. subclass(PalmKernel, PlantAgriculturalProduct)
. subclass(VegetableOil, PlantAgriculturalProduct)
. subclass(PalmOil, VegetableOil)
. subclass(OliveOil, VegetableOil)
. subclass(CoffeeBean, FruitOrVegetable)
. subclass(CoffeeBean, PlantAgriculturalProduct)
. subclass(Cocoa, FruitOrVegetable)
. subclass(Cocoa, PlantAgriculturalProduct)
. subclass(CocoaBean, FruitOrVegetable)
. subclass(CocoaBean, PlantAgriculturalProduct)
. relatedInternalConcept(CocoaBean, Cocoa)
%{Cocoa
"&%Cocoa is the class of powdered 
&%PlantAgriculturalProduct derived from cacao beans."}%
. subclass(TeaPlantAerialPart, FruitOrVegetable)
. subclass(TeaLeaf, TeaPlantAerialPart)
%{TeaPlantAerialPart
"&%TeaPlantAerialPart is the 
class of all parts of the tea plant from which tea may be made, 
including leaves, stems, and twigs."}%
. subclass(WineGrape, PlantAgriculturalProduct)
. subclass(Wine, PlantAgriculturalProduct)
. subclass(Wine, Beverage)
. subclass(PerfumeEssence, PlantAgriculturalProduct)
. subclass(YlangYlang, PerfumeEssence)
. subclass(GumArabic, PlantAgriculturalProduct)
. subclass(GumArabic, Substance)
. subclass(Quinine, PlantAgriculturalProduct)
. subclass(Opium, PlantAgriculturalProduct)
. subclass(Tobacco, PlantAgriculturalProduct)
. subclass(Cannabis, PlantAgriculturalProduct)
. subclass(Cocaine, PlantAgriculturalProduct)
. subclass(Aloes, PlantAgriculturalProduct)
%{Aloes
"&%Aloes is the class of 
&%PlantAgriculturalProducts that are dried juice of 
the Aloe plant."}%
. subclass(Coca, PlantAgriculturalProduct)
%{Coca
"&%Coca is the class of 
&%PlantAgriculturalProducts consisting of the parts, 
especially leaves, of the coca plant.  Coca leaves 
are the source of &%Cocaine."}%
. subclass(Khat, PlantAgriculturalProduct)
. names(a_Quot_k_h_a_t_Quot, Khat)
. names(a_Quot_q_a_t_Quot, Khat)
%{Khat
"&%Khat is the class of &%PlantAgriculturalProducts 
made from the leaves and buds of the staff tree, which 
are chewed or brewed as a stimulating tea."}%
. subclass(Narcotic, ControlledSubstance)
. subclass(Opium, Narcotic)
. subclass(Cocaine, Narcotic)
%{Narcotic
"&%Narcotic is a subclass of addictive 
&%BiologicallyActiveSubstances that have damping effects on the 
nervous system and may be fatal in large doses."}%
. subclass(ControlledSubstance, BiologicallyActiveSubstance)
%{ControlledSubstance
"&%ControlledSubstance is 
the subclass of &%BiologicallyActiveSubstances whose distribution 
and use is controlled by government regulation."}%
. subclass(Fodder, OrganicObject)
%{Fodder
"&%Fodder is the class of &%OrganicObjects that 
are used as food for domesticated animals."}%
. subclass(Alfalfa, PlantAgriculturalProduct)
. subclass(Alfalfa, Plant)
. subclass(Alfalfa, Fodder)
. subclass(Clover, PlantAgriculturalProduct)
. subclass(Clover, Plant)
. subclass(Clover, Fodder)
. subclass(ForageCrop, PlantAgriculturalProduct)
. subclass(ForageCrop, Fodder)
. subclass(ForageCrop, Plant)
. subclass(MulberryLeaf, PlantAgriculturalProduct)
. subclass(MulberryLeaf, Fodder)
. subclass(MulberryLeaf, Leaf)
. subclass(Leaf, AnatomicalStructure)
. subclass(CottonFiber, PlantAgriculturalProduct)
. subclass(HempFiber, PlantAgriculturalProduct)
. subclass(FlaxFiber, PlantAgriculturalProduct)
. subclass(SisalFiber, PlantAgriculturalProduct)
. subclass(JuteFiber, PlantAgriculturalProduct)
. subclass(OpiumPoppy, PlantAgriculturalProduct)
. subclass(OpiumPoppy, FloweringPlant)
. subclass(Orchid, PlantAgriculturalProduct)
. subclass(Orchid, FloweringPlant)
. subclass(Chrysanthemum, PlantAgriculturalProduct)
. subclass(Chrysanthemum, FloweringPlant)
. relatedInternalConcept(Chrysanthemum, Pyrethrum)
. subclass(CutFlower, PlantAgriculturalProduct)
. relatedInternalConcept(CutFlower, FloweringPlant)
. subclass(Pyrethrum, BiologicallyActiveSubstance)
. subclass(Pyrethrum, PlantAgriculturalProduct)
%{Pyrethrum
"&%Pyrethrum is the subclass of 
&%BiologicallyActiveSubstance consisting of insecticidal 
derivations from the flower heads of Chrysanthemums."}%
. subclass(Livestock, AnimalAgriculturalProduct)
. subclass(Livestock, DomesticAnimal)
%{Livestock
"&%Livestock is the class of live animals 
raised as &%AgriculturalProducts."}%
. instance(vITEM, Livestock) => instance(vITEM, Animal)
. subclass(Sheep, Livestock)
. subclass(Cattle, HoofedMammal)
. subclass(Cattle, Livestock)
. subclass(GuernseyCattle, Cattle)
. subclass(SenepolCattle, Cattle)
. subclass(Pig, HoofedMammal)
. subclass(Pig, Livestock)
. subclass(Goat, HoofedMammal)
. subclass(Goat, Livestock)
. subclass(WaterBuffalo, HoofedMammal)
. subclass(WaterBuffalo, Livestock)
. subclass(Reindeer, HoofedMammal)
. subclass(Reindeer, Livestock)
. subclass(Horse, Livestock)
. subclass(Deer, HoofedMammal)
. subclass(Deer, Livestock)
. subclass(Donkey, Livestock)
. subclass(Camel, Mammal)
. subclass(Camel, Livestock)
. subclass(Poultry, Livestock)
. subclass(Poultry, Bird)
. subclass(Chicken, Poultry)
. subclass(Turkey, Poultry)
. subclass(Goose, Poultry)
. subclass(Duck, Poultry)
. subclass(Turtle, Reptile)
. subclass(Turtle, Livestock)
. subclass(OrnamentalFish, AnimalAgriculturalProduct)
. subclass(OrnamentalFish, Fish)
. subclass(DairyProduct, AnimalAgriculturalProduct)
. names(a_Quot_d_a_i_r_y_Space_p_r_o_d_u_c_t_Quot, DairyProduct)
. names(a_Quot_m_i_l_k_Space_p_r_o_d_u_c_t_Quot, DairyProduct)
. subclass(Milk, DairyProduct)
. subclass(Cheese, DairyProduct)
. subclass(FoodEgg, AnimalAgriculturalProduct)
. subclass(Honey, AnimalAgriculturalProduct)
. subclass(WoolFiber, AnimalAgriculturalProduct)
. subclass(Meat, AnimalAgriculturalProduct)
. subclass(MeatOfLandAnimal, Meat)
. subclass(Beef, MeatOfLandAnimal)
. subclass(Mutton, MeatOfLandAnimal)
. subclass(Veal, MeatOfLandAnimal)
. subclass(Pork, MeatOfLandAnimal)
. subclass(LambMeat, MeatOfLandAnimal)
. subclass(ChickenMeat, MeatOfLandAnimal)
. subclass(TurkeyMeat, MeatOfLandAnimal)
. subclass(WaterBuffaloMeat, MeatOfLandAnimal)
. subclass(Seafood, Meat)
. subclass(FoodFish, Seafood)
. subclass(Salmon, FoodFish)
. subclass(Shellfish, Seafood)
. subclass(Shrimp, Shellfish)
. subclass(Crayfish, Shellfish)
. subclass(FishProduct, AnimalAgriculturalProduct)
. relatedInternalConcept(FishProduct, FoodFish)
%{FishProduct
"&%FishProduct is the subclass of 
&%AnimalAgriculturalProduct that comprises products derived  
from fish."}%
. subclass(FishRoe, FishProduct)
. subclass(Caviar, FishRoe)
. subclass(AnimalSkin, BodyCovering)
%{AnimalSkin
"&%AnimalSkin is the subclass of 
&%BodyCovering that includes the skins, or parts of skins, 
of animals."}%
. subclass(Pelt, AnimalSkin)
. subclass(Pelt, AnimalAgriculturalProduct)
. names(a_Quot_p_e_l_t_Quot, Pelt)
. names(a_Quot_h_i_d_e_Quot, Pelt)
%{Pelt
"&%Pelt is the subclass of &%AnimalSkin 
that comprises the pelts or hides of animals that are used in 
the manufacture of wearable or household items."}%
. subclass(Sheepskin, Pelt)
. subclass(Lambskin, Pelt)
. subclass(FoodProduct, Product)
%{FoodProduct
"&%FoodProduct is the class of food 
products, packaged or unpackaged."}%
. instance(vITEM, FoodProduct) =>
      instance(vITEM, Food) \/ instance(vITEM, PackagedFoodProduct)
. subclass(PackagedFoodProduct, Product)
%{PackagedFoodProduct
"&%PackagedFoodProduct is the 
class of &%Products that consist of a &%FoodProduct in a package."}%
. instance(vITEM, PackagedFoodProduct) =>
      exists vFOOD: U; vPACKAGE: U
          . instance(vFOOD, FoodProduct)
            /\ instance(vPACKAGE, ProductPackage)
            /\ contains(vPACKAGE, vFOOD)
. subclass(BeverageProduct, Product)
%{BeverageProduct
"&%BeverageProduct is the class of products 
that are &%Beverages, packaged or unpackaged."}%
. instance(vITEM, BeverageProduct) => instance(vITEM, Beverage)
. subclass(PackagedBeverageProduct, Product)
%{PackagedBeverageProduct
"&%PackagedBeverageProduct is the 
class of &%Products that consist of a &%BeverageProduct in some kind of 
packaging, including cups and bottles."}%
. instance(vITEM, PackagedBeverageProduct) =>
      exists vDRINK: U; vPACKAGE: U
          . instance(vDRINK, BeverageProduct)
            /\ instance(vPACKAGE, ProductPackage)
            /\ contains(vPACKAGE, vDRINK)
. subclass(ProductPackage, Object)
%{ProductPackage
"&%ProductPackage is the class of objects 
designed to contain &%Products for shipping and sale."}%
. subclass(ForestProduct, Product)
. subclass(Timber, ForestProduct)
. subclass(Lumber, ForestProduct)
. subclass(Lumber, ManufacturedProduct)
. subclass(Hardwood, WoodProduct)
. subclass(WoodProduct, ForestProduct)
. subclass(BalsaWood, WoodProduct)
. subclass(Okoume, Hardwood)
%{Okoume
"&%Okoume (Aucoumea klaineana), also called 
'gaboon', is a wood of West African origin."}%
. subclass(NaturalRubber, PlantAgriculturalProduct)
%{NaturalRubber
"&%NaturalRubber is the subclass of 
&%PlantAgriculturalProducts made from the sap of plant species 
which produce natural polymers."}%
. subclass(MiningProduct, Product)
%{MiningProduct
"&%MiningProduct is the class of things 
that are produced from the earth for human use by mining or another form 
of extraction.  This includes metal ores, petroleum, and other products."}%
. subclass(Bauxite, MiningProduct)
. subclass(Bauxite, Mixture)
. instance(vORE, Bauxite) =>
      exists vMETAL: U
          . instance(vMETAL, Alumina) /\ component(vMETAL, vORE)
. subclass(Alumina, CompoundSubstance)
. names(a_Quot_a_l_u_m_i_n_u_m_Space_o_x_i_d_e_Quot, Alumina)
. names(a_Quot_a_l_u_m_i_n_a_Quot, Alumina)
%{Alumina
"&%Alumina is the naturally occurring oxide 
of aluminum which is found in corundum and bauxite."}%
. subclass(IronOre, MiningProduct)
. subclass(IronOre, Mineral)
. instance(vORE, IronOre) =>
      exists vMETAL: U
          . instance(vMETAL, Iron) /\ component(vMETAL, vORE)
. subclass(CopperOre, MiningProduct)
. subclass(CopperOre, Mineral)
. instance(vORE, CopperOre) =>
      exists vMETAL: U
          . instance(vMETAL, Copper) /\ component(vMETAL, vORE)
. subclass(NickelOre, MiningProduct)
. subclass(NickelOre, Mineral)
. instance(vORE, NickelOre) =>
      exists vMETAL: U
          . instance(vMETAL, Nickel) /\ component(vMETAL, vORE)
. subclass(LeadOre, MiningProduct)
. subclass(LeadOre, Mineral)
. instance(vORE, LeadOre) =>
      exists vMETAL: U
          . instance(vMETAL, Lead) /\ component(vMETAL, vORE)
. subclass(ZincOre, MiningProduct)
. subclass(ZincOre, Mineral)
. instance(vORE, ZincOre) =>
      exists vMETAL: U
          . instance(vMETAL, Zinc) /\ component(vMETAL, vORE)
. subclass(PetroleumProduct, MiningProduct)
. subclass(PetroleumProduct, CompoundSubstance)
%{PetroleumProduct
"&%PetroleumProduct is a broad class that 
includes both crude oil (&%Petroleum) and &%RefinedPetroleumProducts."}%
. subclass(Petroleum, PetroleumProduct)
. names(a_Quot_p_e_t_r_o_l_e_u_m_Quot, Petroleum)
. names(a_Quot_c_r_u_d_e_Space_o_i_l_Quot, Petroleum)
%{Petroleum
"Petroleum is commonly known as crude 
oil.  It is a thick, dark brown or greenish flammable liquid, which exists 
in the upper strata of some areas of the Earth's crust.  It consists of a 
complex mixture of various hydrocarbons, largely of the methane series, 
but may vary much in appearance, composition, and purity. (from Wikipedia)
Crude oil has not be subject to the distillation that will yield a
&%RefinedPetroleumProduct."}%
. subclass(Distilling, Separating)
%{Distilling
"Distillation is a means of separating &%Liquids 
through differences in their &%boilingPoints.  The device used in 
distillation is referred to as a still and consists at a minimum of a pot 
in which the source material is heated, a condenser in which the heated 
&%Gas is cooled back to the liquid state, and a receiver in which the 
concentrated or purified liquid is collected.  The equipment may effect 
separation by one of two main methods.  Firstly the vapours given off by 
the heated mixture may consist of two liquids with significantly different 
boiling points.  Thus, the vapour that is given off is in the vast 
majority of one or the other liquid, which after condensation and 
collection effects the separation.  The second method (fractional 
distillation) relies upon a gradient of temperatures existing in the 
condenser stage of the equipment.  Often in this technique, a vertical 
condenser, or column, is used.  By extracting products that are liquid at 
different heights up the column, it is possible to extract liquids that 
have different boiling points.  (from Wikipedia)"}%
. subclass(Electricity, Substance)
%{Electricity
"While electricity is typically thought of as just a difference
in electrical potential, one way of modeling electricity is as a substance
that can be moved from one point to another or consumed.  One could make the claim
that subatomic physics also supports the classification as a substance since electrons
are objects."}%
. industryProductType(ElectricalPowerGeneration, Electricity)
. subclass(ManufacturedProduct, Product)
%{ManufacturedProduct
"&%ManufacturedProduct is 
the subclass of &%Product that includes goods that are produced 
or assembled in factories or other manufacturing processes, 
in contrast to &%AgriculturalProducts."}%
. subclass(CapitalGood, Product)
%{CapitalGood
"&%CapitalGoods are those that are used 
in the production of other &%Products.  For example, raw materials 
from which end products are manufactured, or machines and other 
structures used in the production process."}%
. subclass(IndustrialRawMaterial, CapitalGood)
. subclass(IndustrialSupply, CapitalGood)
. subclass(IndustrialSupply, ManufacturedProduct)
%{IndustrialSupply
"&%IndustrialSupply is the class of 
products that are used in industry but which are not raw materials 
for products being manufactured.  &%IndustrialSupply includes maintenance, 
repair, and operation (MRO) supplies, including janitorial, electrical, 
bearings, tools, machinery, accessories, fire and safety equipment, and 
other industrial items."}%
. relatedInternalConcept(IndustrialMachineryManufacturing,
                         IndustrialSupply)
. relatedInternalConcept(IndustrialMachineryAndEquipmentWholesalers,
                         IndustrialSupply)
. relatedInternalConcept(MachineryEquipmentAndSuppliesWholesalers,
                         IndustrialSupply)
. subclass(Machinery, IndustrialSupply)
. subclass(Machinery, Device)
. subclass(Machine, Machinery)
%{Machinery
"&%Machinery is the class of products 
that includes &%Machines, tools, and machine parts used in industrial 
or other commercial processes."}%
. subclass(MachineTool, Machinery)
. subclass(ChemicalProduct, ManufacturedProduct)
. subclass(ChemicalProduct, CompoundSubstance)
%{ChemicalProduct
"&%ChemicalProduct is the subclass 
of &%Product comprising all chemical compounds that are end products 
or industrial products used in the manufacture of end products."}%
. subclass(Plastic, ManufacturedProduct)
. industryProductType(PlasticsProductManufacturing, Plastic)
. subclass(MetalProduct, ManufacturedProduct)
. relatedInternalConcept(MetalProduct, Metal)
. instance(vITEM, MetalProduct) =>
      instance(vITEM, Metal)
      \/ (exists vPART: U
              . instance(vPART, Metal)
                /\ (part(vPART, vITEM) \/ component(vPART, vITEM)))
. subclass(Steel, MetalProduct)
. relatedInternalConcept(Steel, Iron)
. instance(vITEM, Steel) =>
      exists vPART: U . instance(vPART, Iron) /\ part(vPART, vITEM)
. instance(vITEM, Steel) =>
      exists vPART: U . instance(vPART, Carbon) /\ part(vPART, vITEM)
. subclass(IronMetal, MetalProduct)
. relatedInternalConcept(IronMetal, Iron)
. instance(vITEM, IronMetal) =>
      exists vPART: U . instance(vPART, Iron) /\ part(vPART, vITEM)
. subclass(AluminumMetal, MetalProduct)
. relatedInternalConcept(AluminumMetal, Aluminum)
. instance(vITEM, AluminumMetal) =>
      exists vPART: U . instance(vPART, Aluminum) /\ part(vPART, vITEM)
. subclass(LeadMetal, MetalProduct)
. relatedInternalConcept(LeadMetal, Lead)
. instance(vITEM, LeadMetal) =>
      exists vPART: U . instance(vPART, Lead) /\ part(vPART, vITEM)
. subclass(LeadProduct, ManufacturedProduct)
. subclass(LeadProduct, LeadMetal)
. subclass(ZincProduct, ManufacturedProduct)
. subclass(ZincProduct, MetalProduct)
. subclass(Concrete, ManufacturedProduct)
. subclass(Concrete, Mixture)
. industryProductType(ConcretePipeBrickAndBlockManufacturing,
                      Concrete)
. industryProductType(OtherConcreteProductManufacturing, Concrete)
%{Concrete
"&%Concrete is a class of &%CompoundSubstances 
used as building materials.  Concrete is made up of &%Mineral pieces 
(sand or gravel) and a &%Cement material used to bind them together."}%
. instance(vCONCRETE, Concrete) =>
      exists vPART: U
          . instance(vPART, Mineral) /\ component(vPART, vCONCRETE)
. instance(vCONCRETE, Concrete) =>
      exists vPART: U
          . instance(vPART, Cement) /\ component(vPART, vCONCRETE)
. subclass(ReadyMixConcrete, Concrete)
. industryProductType(ReadyMixConcreteManufacturing,
                      ReadyMixConcrete)
. subclass(Cement, ManufacturedProduct)
. subclass(Cement, CompoundSubstance)
%{Cement
"&%Cement is a subclass of &%CompoundSubstance 
whose instances may contain various minerals or ores, prepared by 
heating and pulverizing, and used in binding &%Concrete or in laying 
brick or stone."}%
. subclass(RefinedPetroleumProduct, PetroleumProduct)
%{RefinedPetroleumProduct
"A &%Substance that is the result
of the &%Distilling of &%Petroleum."}%
. subclass(PetroleumLubricant, RefinedPetroleumProduct)
%{PetroleumLubricant
"PetroleumLubricant is the subclass of 
RefinedPetroleumProducts that are lubricants."}%
. subclass(MotorOil, PetroleumLubricant)
%{MotorOil
"MotorOil is the subclass of PetroleumLubricants 
that are used to lubricate motors."}%
. subclass(Gasoline, RefinedPetroleumProduct)
. subclass(Gasoline, FossilFuel)
%{Gasoline
"Gasoline is the subclass of 
RefinedPetroleumProducts that are fuels for internal combustion engines."}%
. subclass(DieselFuel, RefinedPetroleumProduct)
. subclass(DieselFuel, FossilFuel)
%{DieselFuel
"DieselFuel is the subclass of 
RefinedPetroleumProducts that are fuels for diesel engines."}%
. subclass(Asphalt, RefinedPetroleumProduct)
. disjoint(Asphalt, FossilFuel)
%{Asphalt
"Asphalt is a highly viscous liquid that occurs 
naturally in most crude petroleums.  Asphalt can be separated from the 
other components in crude oil (such as naphtha, gasoline and diesel) by 
the process of fractional distillation, usually under vacuum conditions.  
Both tars and asphalts are classified as bitumens, a classification that 
includes all materials entirely soluble in carbon disulphide.  Asphalt is 
commonly used in roofing shingles, and combined with mineral aggregate to 
make asphalt concrete for making roads.  (definition from Wikipedia)"}%
. subclass(Soap, Surfactant)
%{Soap
"Soap is a &%Surfactant &%Cleaning mixture used for 
personal or minor cleaning.  It usually comes in solid moulded form.  In 
the developed world, synthetic detergents have superseded soap as a 
laundry aid.  Many soaps are mixtures of sodium or potassium salts of 
fatty acids which can be derived from oils or fats by reacting them with 
an alkali (such as sodium or potassium hydroxide) at 80-100 degrees Celsius in a 
process known as saponification. (from Wikipedia)"}%
. subclass(Fertilizer, Mixture)
%{Fertilizer
"Any Mixture which is used to provide nutrients to 
living Plants.  Fertilizers can be made up of plant or animal material, e.g. 
compost, or they can be entirely synthetic, e.g. ammonium nitrate."}%
. relatedInternalConcept(Fertilizer, Nitrogen)
. relatedInternalConcept(Fertilizer, Potash)
. relatedInternalConcept(Fertilizer, PhosphoricAcid)
. subclass(PhosphoricAcid, CompoundSubstance)
. relatedInternalConcept(PhosphoricAcid, Phosphorus)
. subclass(DurableGood, ManufacturedProduct)
%{DurableGood
"&%DurableGood is the subclass of 
&%ManufacturedProducts which are designed to last for three years 
or more."}%
. subclass(MajorAppliance, DurableGood)
. subclass(MajorAppliance, Device)
. subclass(Refrigerator, MajorAppliance)
. subclass(Freezer, MajorAppliance)
. subclass(CookingRange, MajorAppliance)
. subclass(CookingOven, MajorAppliance)
. subclass(HotWaterHeater, MajorAppliance)
. subclass(ClothesWashingMachine, MajorAppliance)
. subclass(ClothesDrier, MajorAppliance)
. subclass(Dishwasher, MajorAppliance)
. subclass(Furniture, DurableGood)
. subclass(Lumber, DurableGood)
. subclass(MetalProduct, DurableGood)
. subclass(Machinery, DurableGood)
. subclass(ConsumerGood, ManufacturedProduct)
. subclass(TextileProduct, ManufacturedProduct)
. industryProductType(TextileMills, TextileProduct)
. industryProductType(TextileProductMills, TextileProduct)
. subclass(HandicraftProduct, Product)
%{HandicraftProduct
"&%HandicraftProduct is the class of 
&%Products that are manufactured by hand with a special skill."}%
. subclass(HandwovenCarpet, TextileProduct)
. subclass(HandwovenCarpet, HandicraftProduct)
. subclass(PersonalAdornment, WearableItem)
%{PersonalAdornment
"&%PersonalAdornment is the subclass 
of &%WearableItems that are worn primarily for decorative purposes."}%
. subclass(WearableItem, Artifact)
. subclass(Clothing, WearableItem)
%{WearableItem
"&%WearableItem is the subclass of 
&%Artifacts that are made to be worn on the body."}%
. subclass(PreciousGemstone, MiningProduct)
. subclass(SemipreciousGemstone, MiningProduct)
. subclass(Gemstone, Mixture)
. subclass(PreciousGemstone, Gemstone)
. subclass(SemipreciousGemstone, Gemstone)
. subclass(Gem, Object)
. subclass(Pearl, Gem)
. subclass(Gem, Jewelry)
%{Gemstone
"&%Gemstone is the subclass of &%Mineral items 
that are especially valued for use in jewelry and other decorative items, and also in some mechanical and industrial applications."}%
. subclass(Jewelry, PersonalAdornment)
. subclass(Jewelry, WearableItem)
%{Jewelry
"&%Jewelry is the subclass of &%PersonalAdornment 
items that are typically made of metals (especially precious metals), 
gems, and other non-cloth materials."}%
. subclass(PharmaceuticalProduct, ManufacturedProduct)
. relatedInternalConcept(PharmaceuticalProduct, ChemicalProduct)
. industryProductType(PharmaceuticalPreparationManufacturing,
                      PharmaceuticalProduct)
. instance(AgricultureFn, UnaryFunction)
. domainSubclass(AgricultureFn, a_1, AgriculturalProduct)
. rangeSubclass(AgricultureFn, Agriculture)
%{AgricultureFn
"(&%AgricultureFn ?PRODUCT) denotes the 
subclass of &%Agriculture processes in which the &%AgriculturalProduct 
?PRODUCT is cultivated."}%
. subclass(vITEM, FruitOrVegetable) =>
      attribute(AgricultureFn(vITEM), CropProduction)
. subAttribute(vINDUSTRY, AnimalProduction)
  /\ industryProductType(vINDUSTRY, vANIMAL)
  /\ subclass(vANIMAL, Livestock) =>
      attribute(AgricultureFn(vANIMAL), vINDUSTRY)
. instance(CerealGrainFarming, IndustryAttribute)
. subAttribute(CerealGrainFarming, OilseedAndGrainFarming)
. industryProductType(CerealGrainFarming, CerealGrain)
. subAttribute(CornFarming, CerealGrainFarming)
. subAttribute(RiceFarming, CerealGrainFarming)
. subAttribute(WheatFarming, CerealGrainFarming)
. industryProductType(CornFarming, MaizeGrain)
. industryProductType(WheatFarming, WheatGrain)
. industryProductType(RiceFarming, RiceGrain)
. instance(OatFarming, IndustryAttribute)
. subAttribute(OatFarming, CerealGrainFarming)
. subAttribute(OatFarming, OtherGrainFarming)
. industryProductType(OatFarming, OatGrain)
. instance(BarleyFarming, IndustryAttribute)
. subAttribute(BarleyFarming, CerealGrainFarming)
. subAttribute(BarleyFarming, OtherGrainFarming)
. industryProductType(BarleyFarming, BarleyGrain)
. instance(RyeFarming, IndustryAttribute)
. subAttribute(RyeFarming, CerealGrainFarming)
. subAttribute(RyeFarming, OtherGrainFarming)
. industryProductType(RyeFarming, RyeGrain)
. instance(SorghumFarming, IndustryAttribute)
. subAttribute(SorghumFarming, CerealGrainFarming)
. subAttribute(SorghumFarming, OtherGrainFarming)
. industryProductType(SorghumFarming, SorghumGrain)
. instance(MilletFarming, IndustryAttribute)
. subAttribute(MilletFarming, CerealGrainFarming)
. subAttribute(MilletFarming, OtherGrainFarming)
. industryProductType(MilletFarming, MilletGrain)
. instance(FruitFarming, IndustryAttribute)
. subAttribute(FruitFarming, FruitAndTreeNutFarming)
. industryProductType(FruitFarming, Fruit)
. instance(VegetableFarming, IndustryAttribute)
. subAttribute(VegetableFarming, VegetableAndMelonFarming)
. industryProductType(VegetableFarming, Vegetable)
. industryProductType(ForestryAndLogging, ForestProduct)
. industryProductType(TreeNutFarming, EdibleNut)
. industryProductType(PeanutFarming, Peanut)
. industryProductType(CattleRanchingAndFarming, Cattle)
. industryProductType(SheepFarming, Sheep)
. industryProductType(GoatFarming, Goat)
. industryProductType(HogAndPigFarming, Pork)
. industryProductType(PotatoFarming, PotatoTuber)
. industryProductType(SugarBeetFarming, SugarBeet)
. industryProductType(CottonFarming, CottonFiber)
. industryProductType(PoultryAndEggProduction, Poultry)
. industryProductType(PoultryAndEggProduction, FoodEgg)
. industryProductType(DairyCattleAndMilkProduction, DairyProduct)
. subAttribute(WineGrapeVineyards, GrapeVineyards)
. industryProductType(WineGrapeVineyards, WineGrape)
. subclass(OpiumPoppyFarming, Farming)
. industryProductType(OpiumPoppyFarming, OpiumPoppy)

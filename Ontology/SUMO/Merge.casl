sort U
ops AbnormalAnatomicalStructure, Above, AbsoluteValueFn, Abstract,
    AbstractionFn, AdditionFn, Adjacent, Adjective, Adverb,
    Advertising, AgeGroup, Agent, Air, AlethicAttribute, Alga,
    Ambulating, Ampere, Amphibian, Amu, AnatomicalStructure,
    AngleMeasure, Angstrom, AngularDegree, AnimacyAttribute, Animal,
    AnimalAnatomicalStructure, AnimalLanguage, AnimalSubstance,
    AntisymmetricRelation, Ape, April, AquaticMammal, Arachnid,
    AreaMeasure, Argument, ArtWork, Arthropod, Article, Artifact,
    ArtificialLanguage, AsexualReproduction, Asleep, AssignmentFn,
    AssociativeFunction, AstronomicalBody, AsymmetricRelation, Atom,
    AtomGram, AtomicNucleus, Attaching, AttachingDevice, Attack,
    Attribute, Audible, August, AutonomicProcess, Awake, BackFn,
    Bacterium, Battle, Becquerel, BeginFn, BeginNodeFn, BeliefGroup,
    Below, Betting, Beverage, BinaryFunction, BinaryNumber,
    BinaryPredicate, BinaryRelation, BiologicalAttribute,
    BiologicalProcess, BiologicallyActiveSubstance, Bird, Birth, Bit,
    Black, Blood, Blue, BodyCavity, BodyCovering, BodyJunction,
    BodyMotion, BodyPart, BodyPosition, BodySubstance, BodyVessel,
    Boiling, Bone, Book, Borrowing, Breathing, BritishThermalUnit,
    Building, Buying, Byte, Calculating, Calorie, Candela, Canine,
    Carbohydrate, CardinalityFn, Carnivore, Carrying, CaseRole,
    CeilingFn, Cell, CelsiusDegree, Centimeter, CentralTimeZone,
    Certificate, ChangeOfPossession, Character, ChemicalDecomposition,
    ChemicalProcess, ChemicalSynthesis, City, Class, Classifying,
    ClosedTwoDimensionalFigure, Clothing, Cloud, CognitiveAgent,
    ColdBloodedVertebrate, Collection, ColorAttribute, Coloring,
    Combining, Combustion, CommercialAgent, CommercialService,
    Committing, Communication, CommutativeFunction, Comparing,
    ComplementFn, ComplexNumber, CompoundSubstance, ComputerLanguage,
    ComputerProgram, Condensing, Confining, ConsciousnessAttribute,
    ConstantQuantity, ConstructedLanguage, Constructing,
    ContentBearingObject, ContentBearingPhysical,
    ContentBearingProcess, ContentDevelopment, Contest,
    ContestAttribute, Continent, ContinuousFunction, Contract, Cooking,
    Cooling, Cooperation, CoordinatedUniversalTimeZone, Corporation,
    CorpuscularObject, CosineFn, Coulomb, Counting, County, Covering,
    Creation, Crustacean, Cup, Currency, CurrencyBill, CurrencyCoin,
    CurrencyMeasure, CutSetFn, Cutting, Damaging, Damp, Dancing, Day,
    DayDuration, DayFn, Dead, Death, December, Deciding, Declaring,
    Decoding, Decreasing, DeductiveArgument, DefensiveManeuver,
    Demonstrating, DenominatorFn, DensityFn, DeonticAttribute,
    Designing, Destruction, Detaching, DevelopmentalAttribute, Device,
    DiagnosticProcess, Digesting, DirectedGraph, Directing,
    DirectionChange, DirectionalAttribute, Disagreeing, Discovering,
    DiseaseOrSyndrome, Disseminating, DivisionFn, Drinking, Driving,
    Dry, Drying, DualObjectProcess, East, EasternTimeZone, Eating,
    EditionFn, EducationalOrganization, EducationalProcess, Egg,
    Election, Electron, ElectronVolt, ElementalSubstance, Embryonic,
    EmotionalState, Encoding, EndFn, EndNodeFn, EngineeringComponent,
    EngineeringConnection, EnglishLanguage, Entity, Enzyme,
    EquivalenceRelation, EthnicGroup, EuroCent, EuroDollar,
    EvenInteger, Experimenting, Explanation, ExponentiationFn,
    Expressing, ExtensionFn, Fabric, FactualText, FahrenheitDegree,
    Falling, False, FamilyGroup, Farad, FatTissue, February, Feline,
    Female, Fern, FictionalText, FieldOfStudy, Fillable,
    FinancialInstrument, FinancialTransaction, FiniteSet, Fish,
    FloorFn, FloweringPlant, Fluid, Food, FootLength, Formula,
    Freezing, FreshWaterArea, Friday, FrontFn, FruitOrVegetable,
    FullyFormed, Function, FunctionQuantity, Funding, Fungus, FutureFn,
    Game, Gas, GasMixture, GasMotion, GeneralizedIntersectionFn,
    GeneralizedUnionFn, GeographicArea, GeologicalProcess,
    GeometricFigure, GeometricPoint, GeopoliticalArea, Gesture,
    Getting, GigaFn, Giving, GivingBack, Gland, Government,
    GovernmentFn, GovernmentOrganization, Grabbing, Graduation, Gram,
    Graph, GraphArc, GraphCircuit, GraphElement, GraphLoop, GraphNode,
    GraphPath, GraphPathFn, Gray, GreatestCommonDivisorFn, Group,
    GroupOfPeople, Growth, Guiding, Hearing, Heating, Henry, Hertz,
    Hiring, Hole, HoleHostFn, HoleSkinFn, Hominid, HoofedMammal,
    Horizontal, Hormone, Hotel, Hour, HourDuration, HourFn, House,
    Human, HumanLanguage, Icon, Illuminated, ImaginaryNumber,
    ImaginaryPartFn, ImmediateFamilyFn, ImmediateFutureFn,
    ImmediatePastFn, Impacting, Impelling, Inch, Increasing,
    InductiveArgument, InformationMeasure, Ingesting,
    InheritableRelation, InitialNodeFn, Injecting, Injuring, Insect,
    Inserting, Integer, IntegerSquareRootFn, IntentionalProcess,
    IntentionalPsychologicalProcess, IntentionalRelation,
    InternalAttribute, InternalChange, Interpreting, IntersectionFn,
    IntervalFn, IntransitiveRelation, InvalidDeductiveArgument,
    Invertebrate, Investigating, IrrationalNumber, IrreflexiveRelation,
    Island, January, JoiningAnOrganization, Joule, Judging,
    JudicialOrganization, JudicialProcess, July, June, KappaFn,
    Keeping, KelvinDegree, Killing, KiloByte, KiloFn, LandArea,
    LandTransitway, Language, Larval, Law, LeapYear, Learning,
    LeastCommonMultipleFn, LeavingAnOrganization, Left, LegalAction,
    LegalDecision, Lending, LengthMeasure, Likely,
    LinguisticCommunication, LinguisticExpression, Liquid,
    LiquidMixture, LiquidMotion, List, ListConcatenateFn, ListFn,
    ListLengthFn, ListOrderFn, Listening, Liter, Living, LogFn,
    LogicalOperator, Looking, Lumen, Lux, Machine, MagnitudeFn,
    Maintaining, Making, Male, Mammal, Man, Managing, Maneuver,
    ManualHumanLanguage, Manufacture, Manufacturer, March, Marsupial,
    MassMeasure, Matriculation, MaxFn, MaximalWeightedPathFn, May,
    MeasureFn, Measuring, MeasuringDevice, Meat, Meeting, MegaByte,
    MegaFn, Melting, MercantileOrganization, MereologicalDifferenceFn,
    MereologicalProductFn, MereologicalSumFn, Metal, Meter, MicroFn,
    Microorganism, Mile, MilitaryForce, MilitaryOrganization,
    MilitaryProcess, MilliFn, MinFn, Mineral, MinimalCutSetFn,
    MinimalWeightedPathFn, Minute, MinuteDuration, MinuteFn, Mixture,
    Mole, Molecule, Mollusk, Monday, Monkey, Monochromatic, Month,
    MonthDuration, MonthFn, Morpheme, Moss, Motion, MotionPicture,
    MountainTimeZone, MultiGraph, MultiplicationFn, Muscle, Music,
    MusicalInstrument, MutuallyDisjointClass, Myriapod, NakedPromise,
    Naming, NanoFn, Nation, NaturalLanguage, NaturalSubstance, Near,
    Necessity, NegativeInfinity, NegativeInteger, NegativeRealNumber,
    Neutron, Newton, NonFloweringPlant, NonFullyFormed, NonNullSet,
    NonnegativeInteger, NonnegativeRealNumber, NormativeAttribute,
    North, Noun, NounPhrase, November, NullList, NullSet, Number,
    NumberE, NumeratorFn, Nutrient, Object, ObjectAttitude,
    ObjectiveNorm, Obligation, October, OddInteger, Offering, Ohm,
    OlfactoryAttribute, On, OneDimensionalFigure, OneToOneFunction,
    OpenTwoDimensionalFigure, Ordering, Organ, OrganOrTissueProcess,
    OrganicObject, Organism, OrganismProcess, Organization,
    OrganizationalProcess, Ounce, PacificTimeZone,
    PairwiseDisjointClass, Paper, ParamilitaryOrganization,
    PartialOrderingRelation, PartialValuedRelation, ParticleWord,
    Pascal, PastFn, Patent, PathWeightFn, PathologicProcess, PerFn,
    Perception, PerceptualAttribute, Periodical, PeriodicalIssueFn,
    PermanentResidence, Permission, Phrase, Physical, PhysicalQuantity,
    PhysicalState, PhysiologicProcess, Pi, PicoFn, Pint, Plan,
    PlaneAngleMeasure, Planning, Plant, PlantAnatomicalStructure,
    PlantSubstance, Plasma, Pliable, Poisoning, Poking,
    PoliceOrganization, PoliticalOrganization, PoliticalProcess,
    Pollen, Polychromatic, Position, PositionalAttribute,
    PositiveInfinity, PositiveInteger, PositiveRealNumber, Possibility,
    PoundForce, PoundMass, PowerSetFn, Precipitation, PredecessorFn,
    Predicate, Predicting, PremisesFn, PrepositionalPhrase, Pretending,
    PrimaryColor, Primate, PrimeNumber, ProbabilityAttribute,
    ProbabilityFn, ProbabilityRelation, Procedure, Process, Product,
    Prohibition, Promise, PropertyFn, Proposition,
    PropositionalAttitude, Prostrate, Protein, Proton, PseudoGraph,
    PsychologicalAttribute, PsychologicalDysfunction,
    PsychologicalProcess, Publication, PurchaseContract, PureSubstance,
    Pursuing, Putting, Quantity, QuantityChange, Quart,
    QuaternaryFunction, QuaternaryPredicate, QuaternaryRelation,
    Questioning, QuintaryPredicate, QuintaryRelation, Radian,
    Radiating, RadiatingElectromagnetic, RadiatingLight,
    RadiatingNuclear, RadiatingSound, RankineDegree, RationalNumber,
    RationalNumberFn, Reading, RealNumber, RealNumberFn, Reasoning,
    ReciprocalFn, RecreationOrExercise, RecurrentTimeIntervalFn, Red,
    ReflexiveRelation, Region, RegulatoryProcess, Relation,
    RelationExtendedToQuantities, RelationalAttribute,
    RelativeComplementFn, RelativeTimeFn, Releasing,
    ReligiousOrganization, ReligiousProcess, RemainderFn, Remembering,
    Removing, Repairing, Replication, RepresentationalArtWork,
    ReproductiveBody, Reptile, Requesting, Residence,
    ResidentialBuilding, Right, Rigid, Roadway, Rodent, Room, Rough,
    RoundFn, Running, SaltWaterArea, SaturationAttribute, Saturday,
    Second, SecondDuration, SecondFn, Seed, Seeing, Selecting,
    SelfConnectedObject, Selling, Sentence, SentientAgent, Separating,
    September, SequenceFunction, Series, SeriesVolumeFn,
    ServiceContract, Set, SetOrClass, SexAttribute, SexualReproduction,
    ShapeAttribute, ShapeChange, Shooting, ShoreArea, Siemens, Sievert,
    SignumFn, SineFn, Singing, SingleFamilyResidence,
    SingleValuedRelation, Sitting, Slug, Smelling, Smoke, Smooth,
    SocialInteraction, SocialRole, SocialUnit, Solid,
    SolidAngleMeasure, Solution, SoundAttribute, South,
    SpatialRelation, Speaking, SpeedFn, SpokenHumanLanguage, Spore,
    Sport, SquareRootFn, Standing, StateChange, StateOfMind,
    StateOrProvince, StaticWaterArea, Stating, StationaryArtifact,
    Steradian, StreamWaterArea, SubatomicParticle,
    SubjectiveAssessmentAttribute, Substance, Substituting,
    SubtractionFn, SuccessorFn, Summary, Sunday, Supposing,
    SurfaceChange, Surgery, Suspension, Swimming, SymbolicString,
    SymmetricRelation, SyntheticSubstance, SystemeInternationalUnit,
    TactilePerception, TangentFn, TasteAttribute, Tasting,
    TemperatureMeasure, TemporalCompositionFn, TemporalRelation,
    TemporaryResidence, TeraFn, TerminalNodeFn, TerminatingEmployment,
    TernaryFunction, TernaryPredicate, TernaryRelation, Tesla, Text,
    TextureAttribute, TherapeuticProcess, ThreeDimensionalFigure,
    Thursday, TimeDependentQuantity, TimeDuration, TimeInterval,
    TimeIntervalFn, TimeMeasure, TimePoint, TimePosition, TimeZone,
    Tissue, TotalOrderingRelation, TotalValuedRelation, Touching,
    TraitAttribute, Transaction, Transfer, TransitiveRelation,
    Transitway, Translating, Translocation, Transportation,
    TransportationDevice, Tree, TrichotomizingRelation, True,
    TruthValue, Tuesday, TwoDimensionalAngle, TwoDimensionalFigure,
    UnaryConstantFunctionQuantity, UnaryFunction, Unconscious,
    Uncovering, Unemployed, Ungrasping, UnilateralGetting,
    UnilateralGiving, Unilluminated, UnionFn, UniqueList,
    UnitOfMeasure, UnitedKingdomGallon, UnitedStatesCent,
    UnitedStatesDollar, UnitedStatesGallon, Unlikely,
    ValidDeductiveArgument, VariableArityRelation, Vehicle, VelocityFn,
    Verb, VerbPhrase, Vertebrate, Vertical, ViolentContest, Virus,
    VisualAttribute, Vitamin, Vocalizing, Volt, VolumeMeasure, Voting,
    Walking, War, WarmBloodedVertebrate, Warranty, Water, WaterArea,
    WaterCloud, WaterMotion, Watt, WealthFn, Weapon, WeatherProcess,
    Weber, Wedding, Wednesday, Week, WeekDuration, West, Wet, Wetting,
    WhenFn, WhereFn, White, Wind, Woman, Word, Worm, Writing, Year,
    YearDuration, YearFn, Yellow, a_0,
    a_0_Period_0_0_0_0_0_0_0_0_0_0_0_1, a_0_Period_0_0_0_0_0_0_0_0_1,
    a_0_Period_0_0_0_0_0_1, a_0_Period_0_0_1, a_0_Period_0_1,
    a_0_Period_0_2_5_4, a_0_Period_3_0_4_8, a_0_Period_5, a_1, a_1_0_0,
    a_1_0_0_0, a_1_0_0_0_0_0_0, a_1_0_0_0_0_0_0_0_0_0,
    a_1_0_0_0_0_0_0_0_0_0_0_0_0, a_1_0_2_4,
    a_1_0_5_5_Period_0_5_5_8_5_2_6_2, a_1_2, a_1_4_5_9_3_Period_9_0,
    a_1_6_0_9_Period_3_4_4, a_1_8_0, a_1_Period_0_E_Minus_1_0,
    a_1_Period_6_0_2_1_7_7_3_3_E_Minus_1_9,
    a_1_Period_6_6_0_5_4_0_2_E_Minus_2_4, a_1_Period_8, a_2, a_2_4,
    a_2_7_3_Period_1_5, a_2_8, a_2_9, a_3, a_3_0, a_3_1, a_3_2,
    a_3_6_0, a_3_6_5, a_3_Period_7_8_5_4_1_1_7_8_4, a_4, a_4_0_0,
    a_4_5_3_Period_5_9_2_3_7, a_4_Period_1_8_6_8,
    a_4_Period_4_4_8_2_2_2, a_4_Period_5_4_6_0_9, a_5, a_6, a_6_0, a_7,
    a_8, a_At_R_O_W, a_At_R_O_W_1, a_At_R_O_W_2, a_Minus_1,
    a_Quot_a_v_e_r_a_g_e_Quot, a_r_e_s_u_l_t, a_t_r_u_e,
    a_v_e_r_s_i_o_n, age, agent, altitude, ancestor, angleOfFigure,
    angularMeasure, arcWeight, attends, attribute, authors, average,
    before, beforeOrEqual, believes, between, bottom, brother,
    capability, causes, causesSubclass, citizen, closedOn,
    completelyFills, component, conclusion, conditionalProbability,
    confersNorm, confersObligation, confersRight, connected,
    connectedEngineeringComponents, connects,
    connectsEngineeringComponents, considers, consistent, contains,
    containsInformation, contraryAttribute, cooccur, copy, crosses,
    date, daughter, decreasesLikelihood, deprivesNorm, depth, desires,
    destination, developmentalForm, diameter, direction, disjoint,
    disjointDecomposition, disjointRelation, distance, distributes,
    documentation, domain, domainSubclass, duration, during, earlier,
    editor, element, employs, engineeringSubcomponent, entails, equal,
    equivalenceRelationOn, equivalentContentClass,
    equivalentContentInstance, exactlyLocated, exhaustiveAttribute,
    exhaustiveDecomposition, experiencer, exploits,
    expressedInLanguage, faces, familyRelation, father, fills,
    finishes, frequency, geographicSubregion, geometricDistance,
    geometricPart, geopoliticalSubdivision, graphPart, grasps,
    greaterThan, greaterThanOrEqualTo, hasPurpose, hasPurposeForAgent,
    hasSkill, height, holds, holdsDuring, holdsObligation, holdsRight,
    hole, home, husband, identicalListItems, identityElement,
    immediateInstance, immediateSubclass, inList, inScopeOfInterest,
    increasesLikelihood, independentProbability, inhabits, inhibits,
    initialList, instance, instrument, interiorPart, inverse,
    involvedInEvent, irreflexiveOn, knows, larger, leader,
    legalRelation, length, lessThan, lessThanOrEqualTo, lineMeasure,
    links, located, manner, material, measure, meetsSpatially,
    meetsTemporally, member, modalAttribute, monetaryValue, mother,
    names, needs, occupiesPosition, orientation, origin,
    overlapsPartially, overlapsSpatially, overlapsTemporally, parallel,
    parent, part, partialOrderingOn, partiallyFills, partition,
    partlyLocated, path, pathLength, patient, penetrates, piece,
    pointOfFigure, pointOfIntersection, possesses, precondition,
    prefers, premise, prevents, properPart, properlyFills, property,
    publishes, range, rangeSubclass, realization, refers, reflexiveOn,
    relatedExternalConcept, relatedInternalConcept, represents,
    representsForAgent, representsInLanguage, resource, sibling, side,
    sister, smaller, son, spouse, starts, stays, subAttribute,
    subCollection, subGraph, subList, subOrganization, subPlan,
    subProcess, subProposition, subclass, subrelation, subset,
    subsumedExternalConcept, subsumesContentClass,
    subsumesContentInstance, subsumingExternalConcept,
    successorAttribute, successorAttributeClosure, superficialPart,
    surface, synonymousExternalConcept, temporalPart,
    temporallyBetween, temporallyBetweenOrEqual, time, top,
    totalOrderingOn, transactionAmount, traverses, trichotomizingOn,
    uniqueIdentifier, uses, valence, wants, wears, width, wife
        : U;
    AbsoluteValueFn, AbstractionFn, BackFn, BeginFn, BeginNodeFn,
    CardinalityFn, CeilingFn, CosineFn, CutSetFn, EndFn, EndNodeFn,
    ExtensionFn, FloorFn, FrontFn, FutureFn, GigaFn, GovernmentFn,
    GreatestCommonDivisorFn, HoleHostFn, HoleSkinFn, ImaginaryPartFn,
    ImmediateFamilyFn, ImmediateFutureFn, ImmediatePastFn,
    InitialNodeFn, KiloFn, LeastCommonMultipleFn, ListFn, ListLengthFn,
    MagnitudeFn, MegaFn, MicroFn, MilliFn, MinimalCutSetFn, NanoFn,
    PastFn, PathWeightFn, PicoFn, PredecessorFn, PremisesFn,
    ProbabilityFn, PropertyFn, RealNumberFn, ReciprocalFn, RoundFn,
    SignumFn, SineFn, SquareRootFn, SuccessorFn, TangentFn, TeraFn,
    TerminalNodeFn, WealthFn, WhenFn, a_n_o_t
        : U -> U;
    AdditionFn, AssignmentFn, DayFn, DivisionFn, EditionFn,
    ExponentiationFn, GraphPathFn, HourFn, IntervalFn, KappaFn,
    ListConcatenateFn, ListFn, ListOrderFn, MaxFn,
    MaximalWeightedPathFn, MeasureFn, MereologicalDifferenceFn,
    MereologicalProductFn, MereologicalSumFn, MinFn,
    MinimalWeightedPathFn, MinuteFn, MonthFn, MultiplicationFn,
    PeriodicalIssueFn, RecurrentTimeIntervalFn, RelativeTimeFn,
    RemainderFn, SecondFn, SeriesVolumeFn, SpeedFn, SubtractionFn,
    TemporalCompositionFn, TimeIntervalFn, UnionFn, WhereFn, a_a_n_d,
    a_t_r_u_e, age, agent, attribute, believes, causes, component,
    connected, considers, contains, containsInformation, destination,
    developmentalForm, direction, employs, equal, exactlyLocated,
    faces, fills, grasps, holdsDuring, instance, knows, located,
    manner, measure, member, modalAttribute, names, or, origin, part,
    patient, possesses, property, spouse, uses, wants
        : U * U -> U;
    AssignmentFn, confersNorm, connects, deprivesNorm, holds,
    orientation
        : U * U * U -> U;
    VelocityFn, a_a_n_d : U * U * U * U -> U
preds contraryAttribute, disjointDecomposition, disjointRelation,
      exhaustiveDecomposition, hasPurpose, holds, partition : U;
      a_r_e_s_u_l_t, a_t_r_u_e, a_v_e_r_s_i_o_n, age, agent, ancestor,
      arcWeight, attends, attribute, authors, average, before,
      beforeOrEqual, believes, bottom, causes, causesSubclass, closedOn,
      completelyFills, component, conclusion, connected,
      connectedEngineeringComponents, consistent, contains,
      containsInformation, contraryAttribute, cooccur, copy, crosses,
      date, decreasesLikelihood, desires, destination, disjoint,
      disjointDecomposition, disjointRelation, distributes, duration,
      during, earlier, element, employs, engineeringSubcomponent,
      entails, equivalenceRelationOn, equivalentContentClass,
      equivalentContentInstance, exactlyLocated, exhaustiveAttribute,
      exhaustiveDecomposition, experiencer, exploits,
      expressedInLanguage, familyRelation, father, fills, finishes,
      frequency, geopoliticalSubdivision, graphPart, greaterThan,
      greaterThanOrEqualTo, hasPurpose, hasSkill, height, holds,
      holdsDuring, holdsObligation, holdsRight, hole, home,
      identicalListItems, identityElement, immediateInstance,
      immediateSubclass, inList, inScopeOfInterest, increasesLikelihood,
      independentProbability, inhabits, inhibits, initialList, instance,
      instrument, interiorPart, inverse, irreflexiveOn, knows, larger,
      leader, legalRelation, length, lessThan, lessThanOrEqualTo,
      located, material, measure, meetsSpatially, meetsTemporally,
      member, modalAttribute, monetaryValue, mother, needs, origin,
      overlapsPartially, overlapsSpatially, overlapsTemporally, parallel,
      parent, part, partialOrderingOn, partiallyFills, partlyLocated,
      path, pathLength, patient, penetrates, piece, pointOfFigure,
      possesses, precondition, premise, prevents, properPart,
      properlyFills, property, publishes, range, rangeSubclass,
      realization, refers, reflexiveOn, relatedInternalConcept,
      represents, resource, sibling, side, starts, stays, subAttribute,
      subCollection, subGraph, subList, subOrganization, subProcess,
      subProposition, subclass, subrelation, subset,
      subsumesContentClass, subsumesContentInstance, successorAttribute,
      successorAttributeClosure, superficialPart, surface, temporalPart,
      time, top, totalOrderingOn, transactionAmount, traverses,
      trichotomizingOn, uses, valence, wants, wears, width : U * U;
      altitude, between, capability, conditionalProbability, confersNorm,
      confersObligation, confersRight, connects,
      connectsEngineeringComponents, deprivesNorm, depth,
      disjointDecomposition, disjointRelation, distance, domain,
      domainSubclass, exhaustiveAttribute, geometricDistance,
      hasPurposeForAgent, holds, links, occupiesPosition, orientation,
      partition, pointOfIntersection, prefers, representsForAgent,
      representsInLanguage, synonymousExternalConcept, temporallyBetween,
      temporallyBetweenOrEqual : U * U * U;
      contraryAttribute, disjointDecomposition, holds, partition : U *
                                                                   U * U * U;
      disjointDecomposition, holds, partition : U * U * U * U * U;
      disjointDecomposition, exhaustiveAttribute, holds, partition : U *
                                                                     U * U * U *
                                                                     U * U;
      holds, partition : U * U * U * U * U * U * U;
      holds : U * U * U * U * U * U * U * U
vars a_v_I_N_T_E_R_V_A_L_Minus_T_Y_P_E, vA1, vA2, vABS, vACT,
     vACTION, vADVERT, vAGE1, vAGE2, vAGENT, vAGENT1, vAGENT2, vAIR,
     vALGA, vALT, vAMBULATE, vAMOUNT, vANAT, vANGLE, vANIMAL, vANIMAL1,
     vANIMAL2, vARC, vARC1, vARC2, vARC3, vAREA, vARG1, vARG2,
     vARGUMENT, vARTICLE1, vARTICLE2, vARTIFACT, vARTIFACT1, vARTIFACT2,
     vATOM, vATOM1, vATOM2, vATT, vATTACH, vATTACK, vATTR, vATTR1,
     vATTR2, vATTRIBUTE, vAVERAGE, vBACTERIUM, vBANK, vBATTLE, vBED,
     vBELIEF, vBEV, vBILL, vBIO, vBIRTH, vBODY, vBOIL, vBONE, vBOOK,
     vBOOK1, vBOOK2, vBORROW, vBOTTOM, vBUILD, vBUILDING, vBURNING,
     vBUSINESS, vBUY, vCARNIVORE, vCARRY, vCAUSE, vCELL, vCELL1, vCELL2,
     vCHANGE, vCHILD, vCLASS, vCLASS1, vCLASS2, vCLASS3, vCLOTHING,
     vCLOUD, vCOIN, vCOLL, vCOLL1, vCOLL2, vCOLOR, vCOLOR1, vCOLOR2,
     vCOLORING, vCOMBINE, vCOMBUSTION, vCOMM, vCOMMIT, vCOMMUNICATE,
     vCOMP, vCOMP1, vCOMP2, vCOMPOUND, vCONCLUSION, vCOND, vCONFINE,
     vCONNECTION, vCONTENT, vCONTEST, vCOOK, vCOOL, vCOOPERATE, vCOUNT,
     vCOVER, vCURRENCY, vDAMAGE, vDATE1, vDATE2, vDAY, vDAY1, vDAY2,
     vDEATH, vDECIDE, vDECISION, vDECLARE, vDECODE, vDECOMP, vDECREASE,
     vDEFENSE, vDEGREE, vDEMO, vDEPTH, vDEST, vDETACH, vDEVELOP,
     vDEVICE, vDIGEST, vDIRECT, vDIRECTION, vDIS, vDISCOVER, vDISEASE,
     vDISSEMINATE, vDISTANCE, vDOC, vDOC1, vDOC2, vDRINK, vDRIVE, vDROP,
     vDRY, vDURATION, vEAT, vEDITION1, vEDITION2, vEDUCATION, vELECT,
     vELECTRON, vELEMENT, vELEMENT1, vELEMENT2, vEMIT, vENCODE, vENTITY,
     vEVENT, vEXPRESS, vEXPRESSION1, vEXPRESSION2, vFABRIC, vFAMILY,
     vFATHER, vFIGURE1, vFIGURE2, vFINISH, vFIRE, vFISH, vFOOD,
     vFORMULA, vFORMULA1, vFORMULA2, vFREEZE, vFROM, vFUN, vFUNCTION,
     vFUNCTION1, vFUNCTION2, vFUND, vFUNGUS, vGET, vGIVE, vGIVE1,
     vGIVE2, vGLAND, vGOV, vGRAB, vGRAD, vGRAPH, vGRAPH1, vGRAPH2,
     vGREATER, vGROUP, vGROWTH, vHEAR, vHEAT, vHEIGHT, vHIRE, vHOLE,
     vHOLE1, vHOLE2, vHOLE3, vHOME, vHORMONE, vHOTEL, vHOUR, vHOUR1,
     vHOUR2, vHUMAN, vID, vIMPACT, vIMPEL, vINCREASE, vINFO, vINGEST,
     vINJ, vINJECT, vINSERT, vINST, vINST1, vINST2, vINST3, vINSTANCE,
     vINSTRUMENT, vINT, vINT1, vINT2, vINTERACTION, vINTERPRET,
     vINTERVAL, vINTERVAL1, vINTERVAL2, vINTERVAL3, vINVESTIGATE,
     vISLAND, vISLE, vISSUE, vITEM, vITEM1, vITEM2, vITEM3, vITEM4,
     vITEM5, vITEM6, vJOIN, vJUDGE, vJUNCT, vKEEP, vKILL, vLAND, vLAND1,
     vLAND2, vLANG, vLANGUAGE, vLANGUAGE1, vLANGUAGE2, vLEAP, vLEARN,
     vLEAVE, vLEND, vLENGTH, vLENGTH1, vLENGTH2, vLESS, vLIGHT, vLINE1,
     vLINE2, vLIST, vLIST1, vLIST2, vLIST3, vLISTITEM, vLOC, vLOOP,
     vMACHINE, vMAKING, vMAN, vMANEUVER, vMANUFACTURE, vMAT, vMEAS,
     vMEASURE, vMEASURE1, vMEASURE2, vMEAT, vMEET, vMELT, vMEMB, vMEMB1,
     vMEMB2, vMEMBER, vMETAL, vMINUTE, vMINUTE1, vMINUTE2, vMIX,
     vMIXTURE, vMOL1, vMOL2, vMOLE, vMONEY, vMONTH, vMONTH1, vMONTH2,
     vMORPH, vMOTHER, vMOTION, vMOVE, vMOVEMENT, vNAME, vNEUTRON, vNODE,
     vNODE1, vNODE2, vNODE3, vNORM, vNOUN, vNUCLEUS, vNUCLEUS1,
     vNUCLEUS2, vNUMBER, vNUMBER1, vNUMBER2, vNUMBER3, vNUTRIENT, vOBJ,
     vOBJ1, vOBJ2, vOBJ3, vOBJECT, vOBJECTTYPE, vOBLIGATION, vORDER,
     vORG, vORGAN, vORGANISM, vORGANISM1, vORGANISM2, vORGANISM3,
     vORGANIZATION, vOTHER, vOTHERINT, vOTHERMORPH, vOTHEROBJ,
     vOTHERPOINT, vPAPER, vPARENT, vPARENT1, vPARENT2, vPART, vPART1,
     vPART2, vPARTICLE, vPATH, vPATH1, vPATH2, vPATHCLASS, vPATIENT,
     vPERCEPT, vPERCEPTION, vPERIODICAL, vPERSON, vPERSON1, vPERSON2,
     vPHRASE, vPHRASE1, vPHRASE2, vPHYS, vPHYS1, vPHYS2, vPLACE,
     vPLACE1, vPLACE2, vPLAN, vPLANNING, vPLANT, vPOINT, vPOINT1,
     vPOINT2, vPOINT3, vPOISON, vPOKE, vPOL, vPOS, vPOSITION, vPRED1,
     vPRED2, vPREDICT, vPREMISES, vPREP, vPRETEND, vPREY, vPRIME, vPROC,
     vPROC1, vPROC2, vPROCESS, vPRODUCT, vPROP, vPROP1, vPROP2,
     vPROPERTY, vPROPOSITION, vPROTON, vPUB, vPUB1, vPUB2, vPURE1,
     vPURE2, vPURP, vPURP1, vPURP2, vPURPOSE, vPURSUE, vPUT, vQUANT,
     vQUANT1, vQUANT2, vQUANTITY, vQUANTTYPE, vQUESTION, vREAD, vREAL,
     vREAL1, vREAL2, vREASON, vREF, vREGION, vREL, vREL1, vREL2,
     vRELATION, vRELEASE, vREMEMBER, vREMOVE, vREP, vREPAIR, vREQUEST,
     vRESIDENCE, vRESOURCE, vRESULT, vRETURN, vROLE, vROOM, vRUN, vSALE,
     vSECOND, vSECOND1, vSECOND2, vSEE, vSEED, vSELL, vSENT, vSENTENCE,
     vSEPARATE, vSEQ, vSERIES, vSET, vSET1, vSET2, vSIDE, vSIDE1,
     vSIDE2, vSITUATION, vSITUATION1, vSITUATION2, vSMELL, vSMOKE,
     vSOUND, vSOURCE, vSPORE, vSTAGE, vSTART, vSTATE, vSTATE1, vSTATE2,
     vSTMT1, vSTMT2, vSTRING, vSTRUCT, vSTRUCTURE, vSTUFF, vSUB,
     vSUBACT, vSUBCLASS, vSUBOBJ, vSUBPART, vSUBPATH, vSUBPROC, vSUBSET,
     vSUBSTANCE, vSUBSTANCE1, vSUBSTANCE2, vSUM, vSUPERCLASS, vSURFACE,
     vSWIM, vTACTILE, vTASTE, vTEXT, vTEXT1, vTEXT2, vTHING, vTHING1,
     vTHING2, vTIME, vTIME1, vTIME2, vTIMECLASS1, vTIMECLASS2, vTO,
     vTOP, vTOUCH, vTRANS, vTRANSFER, vTRANSLATE, vTRANSPORT, vUNIT,
     vVALENCE, vVALUE, vVEHICLE, vVERB, vVERT, vVIRUS, vVOCAL, vVOLUME,
     vVOLUME1, vVOLUME2, vVOTE, vWALK, vWAR, vWATER, vWAY, vWEAPON,
     vWED, vWEEK, vWEEK1, vWEEK2, vWET, vWIDTH, vWIND, vWOMAN, vWORD,
     vWRITE, vX, vY, vYEAR, vYEAR1, vYEAR2, vZ: U
. instance(instance, BinaryPredicate)
. domain(instance, a_1, Entity)
. domain(instance, a_2, SetOrClass)
%{instance
"An object is an &%instance of a &%SetOrClass if 
it is included in that &%SetOrClass.  An individual may be an instance of many 
classes, some of which may be subclasses of others.  Thus, there is no 
assumption in the meaning of &%instance about specificity or uniqueness."}%
. subrelation(immediateInstance, instance)
. instance(immediateInstance, AsymmetricRelation)
. instance(immediateInstance, IntransitiveRelation)
%{immediateInstance
"An object is an &%immediateInstance of 
a &%SetOrClass if it is an instance of the &%SetOrClass and it is not an 
instance of a proper subclass of &%SetOrClass."}%
. immediateInstance(vENTITY, vCLASS) =>
      not (exists vSUBCLASS: U
               . subclass(vSUBCLASS, vCLASS)
                 /\ not vSUBCLASS = vCLASS
                 /\ instance(vENTITY, vSUBCLASS))
. instance(inverse, BinaryPredicate)
. instance(inverse, IrreflexiveRelation)
. instance(inverse, IntransitiveRelation)
. instance(inverse, SymmetricRelation)
. domain(inverse, a_1, BinaryRelation)
. domain(inverse, a_2, BinaryRelation)
%{inverse
"The inverse of a &%BinaryRelation is a relation 
in which all the tuples of the original relation are reversed.  In 
other words, one &%BinaryRelation is the inverse of another if they are 
equivalent when their arguments are swapped."}%
. inverse(vREL1, vREL2) =>
      forall vINST1: U; vINST2: U
          . holds(vREL1, vINST1, vINST2) <=> holds(vREL2, vINST2, vINST1)
. instance(subclass, BinaryPredicate)
. instance(subclass, PartialOrderingRelation)
. domain(subclass, a_1, SetOrClass)
. domain(subclass, a_2, SetOrClass)
%{subclass
"(&%subclass ?CLASS1 ?CLASS2) means that ?CLASS1 is 
a subclass of ?CLASS2, i.e. every instance of ?CLASS1 is also an instance of 
?CLASS2.  A class may have multiple superclasses and subclasses."}%
. subclass(vX, vY) /\ instance(vZ, vX) => instance(vZ, vY)
. subrelation(immediateSubclass, subclass)
. instance(immediateSubclass, AsymmetricRelation)
. instance(immediateSubclass, IntransitiveRelation)
%{immediateSubclass
"A &%SetOrClass ?CLASS1 is an &%immediateSubclass 
of another &%SetOrClass ?CLASS2 just in case ?CLASS1 is a subclass of ?CLASS2 and 
there is no other subclass of ?CLASS2 such that ?CLASS1 is also a subclass of it."}%
. immediateSubclass(vCLASS1, vCLASS2) =>
      not (exists vCLASS3: U
               . subclass(vCLASS3, vCLASS2)
                 /\ subclass(vCLASS1, vCLASS3)
                 /\ not vCLASS2 = vCLASS3
                 /\ not vCLASS1 = vCLASS3)
. instance(subrelation, BinaryPredicate)
. instance(subrelation, PartialOrderingRelation)
. domain(subrelation, a_1, Relation)
. domain(subrelation, a_2, Relation)
%{subrelation
"(&%subrelation ?REL1 ?REL2) means that 
every tuple of ?REL1 is also a tuple of ?REL2.  In other words, if 
the &%Relation ?REL1 holds for some arguments arg_1, arg_2, ... arg_n, 
then the &%Relation ?REL2 holds for the same arguments.  A consequence 
of this is that a &%Relation and its subrelations must have the same 
&%valence. In CycL, &%subrelation is called #$genlPreds."}%
. subrelation(vPRED1, vPRED2) /\ valence(vPRED1, vNUMBER) =>
      valence(vPRED2, vNUMBER)
. subrelation(vPRED1, vPRED2)
  /\ domain(vPRED2, vNUMBER, vCLASS1) =>
      domain(vPRED1, vNUMBER, vCLASS1)
. subrelation(vREL1, vREL2) /\ holds(vREL1, a_At_R_O_W) =>
      holds(vREL2, a_At_R_O_W)
. subrelation(vPRED1, vPRED2)
  /\ instance(vPRED2, vCLASS)
  /\ instance(vCLASS, InheritableRelation) =>
      instance(vPRED1, vCLASS)
. instance(domain, TernaryPredicate)
. domain(domain, a_1, Relation)
. domain(domain, a_2, PositiveInteger)
. domain(domain, a_3, SetOrClass)
%{domain
"Provides a computationally and heuristically
convenient mechanism for declaring the argument types of a given relation.  
The formula (&%domain ?REL ?INT ?CLASS) means that the ?INT'th element of each 
tuple in the relation ?REL must be an instance of ?CLASS.  Specifying argument
types is very helpful in maintaining ontologies.  Representation systems can 
use these specifications to classify terms and check integrity constraints.  
If the restriction on the argument type of a &%Relation is not captured by a 
&%SetOrClass already defined in the ontology, one can specify a &%SetOrClass 
compositionally with the functions &%UnionFn, &%IntersectionFn, etc."}%
. domain(vREL, vNUMBER, vCLASS1)
  /\ domain(vREL, vNUMBER, vCLASS2) =>
      subclass(vCLASS1, vCLASS2) \/ subclass(vCLASS2, vCLASS1)
. instance(domainSubclass, TernaryPredicate)
. domain(domainSubclass, a_1, Relation)
. domain(domainSubclass, a_2, PositiveInteger)
. domain(domainSubclass, a_3, SetOrClass)
%{domainSubclass
"&%Predicate used to specify argument 
type restrictions of &%Predicates.  The formula (&%domainSubclass 
?REL ?INT ?CLASS) means that the ?INT'th element of each tuple in the 
relation ?REL must be a subclass of ?CLASS."}%
. subrelation(vREL1, vREL2)
  /\ domainSubclass(vREL2, vNUMBER, vCLASS1) =>
      domainSubclass(vREL1, vNUMBER, vCLASS1)
. domainSubclass(vREL, vNUMBER, vCLASS1)
  /\ domainSubclass(vREL, vNUMBER, vCLASS2) =>
      subclass(vCLASS1, vCLASS2) \/ subclass(vCLASS2, vCLASS1)
. instance(equal, BinaryPredicate)
. instance(equal, EquivalenceRelation)
. instance(equal, RelationExtendedToQuantities)
. domain(equal, a_1, Entity)
. domain(equal, a_2, Entity)
%{equal
"(equal ?ENTITY1 ?ENTITY2) is true just in case 
?ENTITY1 is identical with ?ENTITY2."}%
. vTHING1 = vTHING2 =>
      forall vATTR: U
          . property(vTHING1, vATTR) <=> property(vTHING2, vATTR)
. vATTR1 = vATTR2 =>
      forall vTHING: U
          . property(vTHING, vATTR1) <=> property(vTHING, vATTR2)
. vTHING1 = vTHING2 =>
      forall vCLASS: U
          . instance(vTHING1, vCLASS) <=> instance(vTHING2, vCLASS)
. vCLASS1 = vCLASS2 =>
      forall vTHING: U
          . instance(vTHING, vCLASS1) <=> instance(vTHING, vCLASS2)
. vREL1 = vREL2 =>
      forall vROW: U
          . holds(vREL1, a_At_R_O_W) <=> holds(vREL2, a_At_R_O_W)
. ListFn(a_At_R_O_W_1) = ListFn(a_At_R_O_W_2) =>
      (holds(a_At_R_O_W_1) <=> holds(a_At_R_O_W_2))
. vLIST1 = vLIST2 =>
      vLIST1 = ListFn(a_At_R_O_W_1) /\ vLIST2 = ListFn(a_At_R_O_W_2) =>
          forall vNUMBER: U
              . ListOrderFn(ListFn(a_At_R_O_W_1), vNUMBER) =
                    ListOrderFn(ListFn(a_At_R_O_W_2), vNUMBER)
. instance(range, BinaryPredicate)
. instance(range, AsymmetricRelation)
. domain(range, a_1, Function)
. domain(range, a_2, SetOrClass)
%{range
"Gives the range of a function.  In other words, 
(&%range ?FUNCTION ?CLASS) means that all of the values assigned by 
?FUNCTION are &%instances of ?CLASS."}%
. range(vFUNCTION, vCLASS)
  /\ AssignmentFn(vFUNCTION, a_At_R_O_W) = vVALUE =>
      instance(vVALUE, vCLASS)
. subrelation(vREL1, vREL2) /\ range(vREL2, vCLASS1) =>
      range(vREL1, vCLASS1)
. range(vREL, vCLASS1) /\ range(vREL, vCLASS2) =>
      subclass(vCLASS1, vCLASS2) \/ subclass(vCLASS2, vCLASS1)
. instance(rangeSubclass, BinaryPredicate)
. instance(rangeSubclass, AsymmetricRelation)
. domain(rangeSubclass, a_1, Function)
. domainSubclass(rangeSubclass, a_2, SetOrClass)
%{rangeSubclass
"(&%rangeSubclass ?FUNCTION ?CLASS) means that 
all of the values assigned by ?FUNCTION are &%subclasses of ?CLASS."}%
. rangeSubclass(vFUNCTION, vCLASS)
  /\ AssignmentFn(vFUNCTION, a_At_R_O_W) = vVALUE =>
      subclass(vVALUE, vCLASS)
. subrelation(vREL1, vREL2) /\ rangeSubclass(vREL2, vCLASS1) =>
      rangeSubclass(vREL1, vCLASS1)
. rangeSubclass(vREL, vCLASS1) /\ rangeSubclass(vREL, vCLASS2) =>
      subclass(vCLASS1, vCLASS2) \/ subclass(vCLASS2, vCLASS1)
. instance(valence, BinaryPredicate)
. instance(valence, AsymmetricRelation)
. instance(valence, SingleValuedRelation)
. domain(valence, a_1, Relation)
. domain(valence, a_2, PositiveInteger)
%{valence
"Specifies the number of arguments that a 
relation can take.  If a relation does not have a fixed number of 
arguments, it does not have a valence and it is an instance of 
&%VariableArityRelation.  For example, &%holds is a 
&%VariableArityRelation."}%
. instance(documentation, BinaryPredicate)
. instance(documentation, AsymmetricRelation)
. domain(documentation, a_1, Entity)
. domain(documentation, a_2, SymbolicString)
%{documentation
"A relation between objects in the domain 
of discourse and strings of natural language text.  The domain of 
&%documentation is not constants (names), but the objects themselves.  
This means that one does not quote the names when associating them with 
their documentation."}%
. instance(disjoint, BinaryPredicate)
. instance(disjoint, SymmetricRelation)
. domain(disjoint, a_1, SetOrClass)
. domain(disjoint, a_2, SetOrClass)
%{disjoint
"&%Classes are &%disjoint only if they share no 
instances, i.e. just in case the result of applying &%IntersectionFn to
them is empty."}%
. disjoint(vCLASS1, vCLASS2) <=>
      instance(vCLASS1, NonNullSet)
      /\ instance(vCLASS2, NonNullSet)
      /\ (forall vINST: U
              . not (instance(vINST, vCLASS1) /\ instance(vINST, vCLASS2)))
. instance(disjointRelation, Predicate)
. instance(disjointRelation, VariableArityRelation)
. relatedInternalConcept(disjointRelation, disjoint)
%{disjointRelation
"This predicate relates any number of &%Relations.  
(&%disjointRelation @ROW) means that any two relations in @ROW have no tuples in 
common.  As a consequence, the intersection of all of the relations in @ROW is the 
null set."}%
. disjointRelation(a_At_R_O_W)
  /\ inList(vREL, ListFn(a_At_R_O_W)) =>
      instance(vREL, Relation)
. disjointRelation(a_At_R_O_W)
  /\ inList(vREL1, ListFn(a_At_R_O_W))
  /\ inList(vREL2, ListFn(a_At_R_O_W))
  /\ valence(vREL1, vNUMBER) =>
      valence(vREL2, vNUMBER)
. domain(vREL1, vNUMBER, vCLASS1)
  /\ domain(vREL2, vNUMBER, vCLASS2)
  /\ disjoint(vCLASS1, vCLASS2) =>
      disjointRelation(vREL1, vREL2)
. domainSubclass(vREL1, vNUMBER, vCLASS1)
  /\ domainSubclass(vREL2, vNUMBER, vCLASS2)
  /\ disjoint(vCLASS1, vCLASS2) =>
      disjointRelation(vREL1, vREL2)
. range(vREL1, vCLASS1)
  /\ range(vREL2, vCLASS2)
  /\ disjoint(vCLASS1, vCLASS2) =>
      disjointRelation(vREL1, vREL2)
. rangeSubclass(vREL1, vCLASS1)
  /\ rangeSubclass(vREL2, vCLASS2)
  /\ disjoint(vCLASS1, vCLASS2) =>
      disjointRelation(vREL1, vREL2)
. disjointRelation(a_At_R_O_W_1)
  /\ inList(vREL1, ListFn(a_At_R_O_W_1))
  /\ inList(vREL2, ListFn(a_At_R_O_W_1))
  /\ not vREL1 = vREL2
  /\ holds(vREL1, a_At_R_O_W_2) =>
      not holds(vREL2, a_At_R_O_W_2)
. instance(contraryAttribute, Predicate)
. instance(contraryAttribute, VariableArityRelation)
%{contraryAttribute
"A &%contraryAttribute is a set of &%Attributes 
such that something can not simultaneously have more than one of these &%Attributes.  
For example, (&%contraryAttribute &%Pliable &%Rigid) means that nothing can be both 
&%Pliable and &%Rigid."}%
. contraryAttribute(a_At_R_O_W) =>
      inList(vELEMENT, ListFn(a_At_R_O_W)) =>
          instance(vELEMENT, Attribute)
. contraryAttribute(a_At_R_O_W_1)
  /\ identicalListItems(ListFn(a_At_R_O_W_1),
                        ListFn(a_At_R_O_W_2)) =>
      contraryAttribute(a_At_R_O_W_2)
. contraryAttribute(a_At_R_O_W) =>
      forall vATTR1: U; vATTR2: U
          . vATTR1 = ListOrderFn(ListFn(a_At_R_O_W), vNUMBER1)
            /\ vATTR2 = ListOrderFn(ListFn(a_At_R_O_W), vNUMBER2)
            /\ not vNUMBER1 = vNUMBER2 =>
                property(vOBJ, vATTR1) => not property(vOBJ, vATTR2)
. instance(exhaustiveAttribute, Predicate)
. instance(exhaustiveAttribute, VariableArityRelation)
. domainSubclass(exhaustiveAttribute, a_1, Attribute)
%{exhaustiveAttribute
"This predicate relates a &%Class to a 
set of &%Attributes, and it means that the elements of this set exhaust the 
instances of the &%Class.  For example, (&%exhaustiveAttribute &%PhysicalState 
&%Solid &%Fluid &%Liquid &%Gas &%Plasma) means that there are only five instances of 
the class &%PhysicalState, viz. &%Solid, &%Fluid, &%Liquid, &%Gas and &%Plasma."}%
. exhaustiveAttribute(vCLASS, a_At_R_O_W) =>
      inList(vATTR, ListFn(a_At_R_O_W)) => instance(vATTR, Attribute)
. exhaustiveAttribute(vCLASS, a_At_R_O_W) =>
      forall vATTR1: U
          . instance(vATTR1, vCLASS) =>
                exists vATTR2: U
                    . inList(vATTR2, ListFn(a_At_R_O_W)) /\ vATTR1 = vATTR2
. instance(exhaustiveDecomposition, Predicate)
. instance(exhaustiveDecomposition, VariableArityRelation)
. domain(exhaustiveDecomposition, a_1, Class)
. relatedInternalConcept(exhaustiveDecomposition, partition)
%{exhaustiveDecomposition
"An &%exhaustiveDecomposition of a 
&%Class C is a set of subclasses of C such that every instance of C is an 
instance of one of the subclasses in the set.  Note:  this does not necessarily 
mean that the elements of the set are disjoint (see &%partition - a &%partition 
is a disjoint exhaustive decomposition)."}%
. exhaustiveDecomposition(a_At_R_O_W) =>
      inList(vELEMENT, ListFn(a_At_R_O_W)) => instance(vELEMENT, Class)
. instance(disjointDecomposition, Predicate)
. instance(disjointDecomposition, VariableArityRelation)
. domain(disjointDecomposition, a_1, Class)
. relatedInternalConcept(disjointDecomposition,
                         exhaustiveDecomposition)
. relatedInternalConcept(disjointDecomposition, disjoint)
%{disjointDecomposition
"A &%disjointDecomposition of a &%Class 
C is a set of subclasses of C that are mutually &%disjoint."}%
. disjointDecomposition(a_At_R_O_W) =>
      inList(vELEMENT, ListFn(a_At_R_O_W)) => instance(vELEMENT, Class)
. instance(partition, Predicate)
. instance(partition, VariableArityRelation)
. domain(partition, a_1, Class)
%{partition
"A &%partition of a class C is a set of 
mutually &%disjoint classes (a subclass partition) which covers C.  
Every instance of C is an instance of exactly one of the subclasses 
in the partition."}%
. partition(a_At_R_O_W) <=>
      exhaustiveDecomposition(a_At_R_O_W)
      /\ disjointDecomposition(a_At_R_O_W)
. instance(relatedInternalConcept, BinaryPredicate)
. instance(relatedInternalConcept, EquivalenceRelation)
. domain(relatedInternalConcept, a_1, Entity)
. domain(relatedInternalConcept, a_2, Entity)
%{relatedInternalConcept
"Means that the two arguments are 
related concepts within the SUMO, i.e. there is a significant similarity 
of meaning between them.  To indicate a meaning relation between a SUMO 
concept and a concept from another source, use the Predicate 
&%relatedExternalConcept."}%
. instance(relatedExternalConcept, TernaryPredicate)
. domain(relatedExternalConcept, a_1, SymbolicString)
. domain(relatedExternalConcept, a_2, Entity)
. domain(relatedExternalConcept, a_3, Language)
. relatedInternalConcept(relatedExternalConcept,
                         relatedInternalConcept)
%{relatedExternalConcept
"Used to signify a three-place 
relation between a concept in an external knowledge source, a concept 
in the SUMO, and the name of the other knowledge source."}%
. subrelation(synonymousExternalConcept, relatedExternalConcept)
. disjointRelation(synonymousExternalConcept,
                   subsumedExternalConcept, subsumingExternalConcept)
%{synonymousExternalConcept
"(&%synonymousExternalConcept 
?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING has the 
same meaning as ?STRING in ?LANGUAGE."}%
. subrelation(subsumingExternalConcept, relatedExternalConcept)
%{subsumingExternalConcept
"(&%subsumingExternalConcept 
?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING subsumes 
the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is broader 
in meaning than ?STRING."}%
. subrelation(subsumedExternalConcept, relatedExternalConcept)
%{subsumedExternalConcept
"(&%subsumedExternalConcept 
?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING is subsumed 
by the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is narrower 
in meaning than ?STRING."}%
. instance(subAttribute, BinaryPredicate)
. instance(subAttribute, PartialOrderingRelation)
. domain(subAttribute, a_1, Attribute)
. domain(subAttribute, a_2, Attribute)
. disjointRelation(subAttribute, successorAttribute)
%{subAttribute
"Means that the second argument can be 
ascribed to everything which has the first argument ascribed to it."}%
. subAttribute(vATTR1, vATTR2) =>
      forall vOBJ: U . property(vOBJ, vATTR1) => property(vOBJ, vATTR2)
. subAttribute(vATTR1, vATTR2) /\ instance(vATTR2, vCLASS) =>
      instance(vATTR1, vCLASS)
. instance(successorAttribute, BinaryPredicate)
. instance(successorAttribute, AsymmetricRelation)
. domain(successorAttribute, a_1, Attribute)
. domain(successorAttribute, a_2, Attribute)
%{successorAttribute
"(&%successorAttribute ?ATTR1 ?ATTR2) 
means that ?ATTR2 is the &%Attribute that comes immediately after ?ATTR1 
on the scale that they share."}%
. successorAttribute(vATTR1, vATTR2)
  /\ holdsDuring(vTIME1, property(vENTITY, vATTR2)) =>
      exists vTIME2: U
          . temporalPart(vTIME2, PastFn(vTIME1))
            /\ holdsDuring(vTIME2, property(vENTITY, vATTR1))
. instance(successorAttributeClosure, BinaryPredicate)
. instance(successorAttributeClosure, TransitiveRelation)
. instance(successorAttributeClosure, IrreflexiveRelation)
. domain(successorAttributeClosure, a_1, Attribute)
. domain(successorAttributeClosure, a_2, Attribute)
. relatedInternalConcept(successorAttributeClosure,
                         successorAttribute)
%{successorAttributeClosure
"The transitive closure of 
&%successorAttribute.  (&%successorAttributeClosure ?ATTR1 ?ATTR2) means 
that there is a chain of &%successorAttribute assertions connecting 
?ATTR1 and ?ATTR2."}%
. successorAttribute(vATTR1, vATTR2) =>
      successorAttributeClosure(vATTR1, vATTR2)
. instance(entails, BinaryPredicate)
. domain(entails, a_1, Formula)
. domain(entails, a_2, Formula)
%{entails
"The operator of logical entailment.  (&%entails 
?FORMULA1 ?FORMULA2) means that ?FORMULA2 can be derived from ?FORMULA1 
by means of the proof theory of SUO-KIF."}%
. instance(AssignmentFn, Function)
. instance(AssignmentFn, VariableArityRelation)
. domain(AssignmentFn, a_1, Function)
. range(AssignmentFn, Entity)
%{AssignmentFn
"If F is a &%Function with a value for the 
objects denoted by N1,..., NK, then (&%AssignmentFn F N1 ... NK) is the 
value of applying F to the objects denoted by N1,..., NK.  Otherwise, 
the value is undefined."}%
. instance(holds, Predicate)
. instance(holds, VariableArityRelation)
. domain(holds, a_1, Relation)
%{holds
"(holds P N1 ... NK) is true just in case 
the tuple of objects denoted by N1,..., NK is an element of 
the &%Relation P."}%
. instance(PowerSetFn, UnaryFunction)
. instance(PowerSetFn, TotalValuedRelation)
. domain(PowerSetFn, a_1, SetOrClass)
. rangeSubclass(PowerSetFn, SetOrClass)
%{PowerSetFn
"(&%PowerSetFn ?CLASS) maps the &%SetOrClass 
?CLASS to the &%SetOrClass of all &%subclasses of ?CLASS."}%
. partition(Entity, Physical, Abstract)
%{Entity
"The universal class of individuals.  This is the root 
node of the ontology."}%
. instance(vTHING, Entity)
. exists vTHING: U . instance(vTHING, Entity)
. instance(vCLASS, Class) <=> subclass(vCLASS, Entity)
. subclass(Physical, Entity)
. partition(Physical, Object, Process)
%{Physical
"An entity that has a location in space-time.  
Note that locations are themselves understood to have a location in 
space-time."}%
. instance(vPHYS, Physical) <=>
      (exists vLOC: U; vTIME: U
           . located(vPHYS, vLOC) /\ time(vPHYS, vTIME))
. subclass(Object, Physical)
%{Object
"Corresponds roughly to the class of ordinary 
objects.  Examples include normal physical objects, geographical regions, 
and locations of &%Processes, the complement of &%Objects in the &%Physical 
class.  In a 4D ontology, an &%Object is something whose spatiotemporal 
extent is thought of as dividing into spatial parts roughly parallel to the 
time-axis."}%
. subclass(SelfConnectedObject, Object)
%{SelfConnectedObject
"A &%SelfConnectedObject is any 
&%Object that does not consist of two or more disconnected parts."}%
. instance(FrontFn, SpatialRelation)
. instance(FrontFn, PartialValuedRelation)
. instance(FrontFn, UnaryFunction)
. instance(FrontFn, AsymmetricRelation)
. instance(FrontFn, IrreflexiveRelation)
. domain(FrontFn, a_1, SelfConnectedObject)
. range(FrontFn, SelfConnectedObject)
%{FrontFn
"A &%Function that maps an &%Object to the side 
that generally receives the most attention or that typically faces the 
direction in which the &%Object moves.  Note that this is a partial 
function, since some &%Objects do not have sides, e.g. apples and 
spheres.  Note too that the &%range of this &%Function is indefinite in 
much the way that &%ImmediateFutureFn and &%ImmediatePastFn are indefinite.  
Although this indefiniteness is undesirable from a theoretical standpoint, 
it does not have significant practical implications, since there is 
widespread intersubjective agreement about the most common cases."}%
. instance(vOBJ, SelfConnectedObject) => side(FrontFn(vOBJ), vOBJ)
. instance(BackFn, SpatialRelation)
. instance(BackFn, PartialValuedRelation)
. instance(BackFn, UnaryFunction)
. instance(BackFn, AsymmetricRelation)
. instance(BackFn, IrreflexiveRelation)
. domain(BackFn, a_1, SelfConnectedObject)
. range(BackFn, SelfConnectedObject)
%{BackFn
"A &%Function that maps an &%Object to the side 
that is opposite the &%FrontFn of the &%Object.  Note that this is a 
partial function, since some &%Objects do not have sides, e.g. apples 
and spheres.  Note too that the &%range of this &%Function is indefinite in 
much the way that &%ImmediateFutureFn and &%ImmediatePastFn are indefinite.  
Although this indefiniteness is undesirable from a theoretical standpoint, 
it does not have significant practical implications, since there is 
widespread intersubjective agreement about the most common cases."}%
. instance(vOBJ, SelfConnectedObject) => side(BackFn(vOBJ), vOBJ)
. instance(part, SpatialRelation)
. instance(part, PartialOrderingRelation)
. domain(part, a_1, Object)
. domain(part, a_2, Object)
%{part
"The basic mereological relation.  All other 
mereological relations are defined in terms of this one.  
(&%part ?PART ?WHOLE) simply means that the &%Object ?PART is part
of the &%Object ?WHOLE.  Note that, since &%part is a 
&%ReflexiveRelation, every &%Object is a part of itself."}%
. instance(properPart, AsymmetricRelation)
. instance(properPart, TransitiveRelation)
. subrelation(properPart, part)
%{properPart
"(&%properPart ?OBJ1 ?OBJ2) means that 
?OBJ1 is a part of ?OBJ2 other than ?OBJ2 itself. This is a 
&%TransitiveRelation and &%AsymmetricRelation (hence an 
&%IrreflexiveRelation)."}%
. properPart(vOBJ1, vOBJ2) <=>
      part(vOBJ1, vOBJ2) /\ not part(vOBJ2, vOBJ1)
. subrelation(piece, part)
. domain(piece, a_1, Substance)
. domain(piece, a_2, Substance)
%{piece
"A specialized common sense notion of part for 
arbitrary parts of &%Substances.  Quasi-synonyms are: chunk, hunk, bit, 
etc.  Compare &%component, another subrelation of &%part."}%
. piece(vSUBSTANCE1, vSUBSTANCE2) =>
      forall vCLASS: U
          . instance(vSUBSTANCE1, vCLASS) => instance(vSUBSTANCE2, vCLASS)
. subrelation(component, part)
. domain(component, a_1, CorpuscularObject)
. domain(component, a_2, CorpuscularObject)
%{component
"A specialized common sense notion of part 
for heterogeneous parts of complexes. (&%component ?COMPONENT ?WHOLE) 
means that ?COMPONENT is a component of ?WHOLE. Examples of component 
include the doors and walls of a house, the states or provinces of a 
country, or the limbs and organs of an animal.  Compare &%piece, which 
is also a subrelation of &%part."}%
. instance(material, BinaryPredicate)
. domainSubclass(material, a_1, Substance)
. domain(material, a_2, CorpuscularObject)
%{material
"(&%material ?SUBSTANCE ?OBJECT) means that 
?OBJECT is structurally made up in part of ?SUBSTANCE. This relation 
encompasses the concepts of 'composed of', 'made of', and 'formed of'.  
For example, plastic is a &%material of my computer monitor.  Compare 
&%part and its subrelations, viz &%component and &%piece."}%
. subrelation(contains, partlyLocated)
. instance(contains, SpatialRelation)
. instance(contains, AsymmetricRelation)
. disjointRelation(contains, part)
. domain(contains, a_1, SelfConnectedObject)
. domain(contains, a_2, Object)
%{contains
"The relation of spatial containment for two 
separable objects.  When the two objects are not separable (e.g. an 
automobile and one of its seats), the relation of &%part should be used.  
(&%contains ?OBJ1 ?OBJ2) means that the &%SelfConnectedObject ?OBJ1 has 
a space (i.e. a &%Hole) which is at least partially filled by ?OBJ2."}%
. contains(vOBJ1, vOBJ2) <=>
      (exists vHOLE: U
           . hole(vHOLE, vOBJ1) /\ properlyFills(vOBJ2, vHOLE))
. subclass(Substance, SelfConnectedObject)
. partition(Substance, PureSubstance, Mixture)
. partition(Substance, SyntheticSubstance, NaturalSubstance)
%{Substance
"An &%Object in which every part is similar to 
every other in every relevant respect.  More precisely, something is a 
&%Substance when it has only arbitrary pieces as parts - any parts have 
properties which are similar to those of the whole.  Note that a &%Substance 
may nonetheless have physical properties that vary.  For example, the 
temperature, chemical constitution, density, etc. may change from one part 
to another.  An example would be a body of water."}%
. subclass(vOBJECTTYPE, Substance)
  /\ instance(vOBJECT, vOBJECTTYPE)
  /\ part(vPART, vOBJECT) =>
      instance(vPART, vOBJECTTYPE)
. instance(vOBJ, Substance)
  /\ attribute(vOBJ, vATTR)
  /\ part(vPART, vOBJ) =>
      attribute(vPART, vATTR)
. subclass(SyntheticSubstance, Substance)
%{SyntheticSubstance
"Any &%Substance that is the result of an 
&%IntentionalProcess, i.e. any substance that is created by &%Humans."}%
. instance(vSUBSTANCE, SyntheticSubstance) <=>
      (exists vPROCESS: U
           . instance(vPROCESS, IntentionalProcess)
             /\ a_r_e_s_u_l_t(vPROCESS, vSUBSTANCE)
             /\ instance(vSUBSTANCE, Substance))
. subclass(NaturalSubstance, Substance)
%{NaturalSubstance
"Any &%Substance that is not the result of 
an &%IntentionalProcess, i.e. any substance that occurs naturally."}%
. subclass(PureSubstance, Substance)
. partition(PureSubstance, CompoundSubstance, ElementalSubstance)
%{PureSubstance
"The &%Class of &%Substances with constant 
composition.  A &%PureSubstance can be either an element (&%ElementalSubstance) 
or a compound of elements (&%CompoundSubstance).  Examples: Table salt 
(sodium chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), water (H_2O), 
iron (Fe), copper (Cu), and oxygen (O_2)."}%
. subclass(ElementalSubstance, PureSubstance)
%{ElementalSubstance
"The &%Class of &%PureSubstances that 
cannot be separated into two or more &%Substances by ordinary chemical 
(or physical) means. This excludes nuclear reactions. &%ElementalSubstances 
are composed of only one kind of atom. Examples: Iron (Fe), copper (Cu), 
and oxygen (O_2).  &%ElementalSubstances are the simplest 
&%PureSubstances."}%
. subclass(Metal, ElementalSubstance)
%{Metal
"A &%Metal is an &%ElementalSubstance that conducts heat 
and electricity, is shiny and reflects many colors of light, and can be hammered 
into sheets or drawn into wire.  About 80% of the known chemical elements 
(&%ElementalSubstances) are metals."}%
. subclass(Atom, ElementalSubstance)
%{Atom
"An extremely small unit of matter that retains its 
identity in Chemical reactions.  It consists of an &%AtomicNucleus and 
&%Electrons surrounding the &%AtomicNucleus."}%
. instance(vATOM, Atom) =>
      exists vPROTON: U; vELECTRON: U
          . component(vPROTON, vATOM)
            /\ component(vELECTRON, vATOM)
            /\ instance(vPROTON, Proton)
            /\ instance(vELECTRON, Electron)
. instance(vATOM, Atom) =>
      forall vNUCLEUS1: U; vNUCLEUS2: U
          . component(vNUCLEUS1, vATOM)
            /\ component(vNUCLEUS2, vATOM)
            /\ instance(vNUCLEUS1, AtomicNucleus)
            /\ instance(vNUCLEUS2, AtomicNucleus) =>
                vNUCLEUS1 = vNUCLEUS2
. subclass(SubatomicParticle, ElementalSubstance)
%{SubatomicParticle
"The class of &%ElementalSubstances that 
are smaller than &%Atoms and compose &%Atoms."}%
. instance(vPARTICLE, SubatomicParticle) =>
      exists vATOM: U . instance(vATOM, Atom) /\ part(vPARTICLE, vATOM)
. subclass(AtomicNucleus, SubatomicParticle)
%{AtomicNucleus
"The core of the &%Atom.  It is composed of 
&%Protons and &%Neutrons."}%
. instance(vNUCLEUS, AtomicNucleus) =>
      exists vNEUTRON: U; vPROTON: U
          . component(vNEUTRON, vNUCLEUS)
            /\ component(vPROTON, vNUCLEUS)
            /\ instance(vNEUTRON, Neutron)
            /\ instance(vPROTON, Proton)
. subclass(Electron, SubatomicParticle)
%{Electron
"&%SubatomicParticles that surround the 
&%AtomicNucleus.  They have a negative charge."}%
. subclass(Proton, SubatomicParticle)
%{Proton
"Components of the &%AtomicNucleus.  They have a 
positive charge."}%
. subclass(Neutron, SubatomicParticle)
%{Neutron
"Components of the &%AtomicNucleus.  They have no 
charge."}%
. subclass(CompoundSubstance, PureSubstance)
%{CompoundSubstance
"The &%Class of &%Substances that contain 
two or more elements (&%ElementalSubstances), in definite proportion by weight. 
The composition of a pure compound will be invariant, regardless of the method 
of preparation. Compounds are composed of more than one kind of atom (element). 
The term molecule is often used for the smallest unit of a compound that still 
retains all of the properties of the compound.  Examples: Table salt (sodium 
chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), and water (H_2O). "}%
. subclass(Mixture, Substance)
%{Mixture
"A &%Mixture is two or more &%PureSubstances, 
combined in varying proportions - each retaining its own specific properties. 
The components of a &%Mixture can be separated by physical means, i.e. without 
the making and breaking of chemical bonds. Examples: Air, table salt thoroughly 
dissolved in water, milk, wood, and concrete. "}%
. instance(vMIXTURE, Mixture) =>
      exists vPURE1: U; vPURE2: U
          . instance(vPURE1, PureSubstance)
            /\ instance(vPURE2, PureSubstance)
            /\ not vPURE1 = vPURE2
            /\ part(vPURE1, vMIXTURE)
            /\ part(vPURE2, vMIXTURE)
. instance(vMIXTURE, Mixture)
  /\ part(vSUBSTANCE, vMIXTURE)
  /\ not instance(vSUBSTANCE, Mixture) =>
      instance(vSUBSTANCE, PureSubstance)
. subclass(CorpuscularObject, SelfConnectedObject)
. disjoint(CorpuscularObject, Substance)
%{CorpuscularObject
"A &%SelfConnectedObject whose parts have 
properties that are not shared by the whole."}%
. instance(vOBJ, CorpuscularObject) =>
      exists vSUBSTANCE1: U; vSUBSTANCE2: U
          . subclass(vSUBSTANCE1, Substance)
            /\ subclass(vSUBSTANCE2, Substance)
            /\ material(vSUBSTANCE1, vOBJ)
            /\ material(vSUBSTANCE2, vOBJ)
            /\ not vSUBSTANCE1 = vSUBSTANCE2
. subclass(Region, Object)
%{Region
"A topographic location.  &%Regions encompass 
surfaces of &%Objects, imaginary places, and &%GeographicAreas.  Note 
that a &%Region is the only kind of &%Object which can be located at 
itself.  Note too that &%Region is not a subclass of &%SelfConnectedObject, 
because some &%Regions, e.g. archipelagos, have &%parts which are not 
&%connected with one another."}%
. instance(vREGION, Region) =>
      exists vPHYS: U . located(vPHYS, vREGION)
. subclass(Collection, Object)
. disjoint(Collection, SelfConnectedObject)
%{Collection
"Collections have &%members like &%Classes, but, 
unlike &%Classes, they have a position in space-time and &%members can be 
added and subtracted without thereby changing the identity of the 
&%Collection.  Some examples are toolkits, football teams, and flocks 
of sheep."}%
. instance(vCOLL, Collection) =>
      exists vOBJ: U . member(vOBJ, vCOLL)
. subrelation(member, part)
. instance(member, AsymmetricRelation)
. instance(member, IntransitiveRelation)
. domain(member, a_1, SelfConnectedObject)
. domain(member, a_2, Collection)
. relatedInternalConcept(member, instance)
. relatedInternalConcept(member, element)
%{member
"A specialized common sense notion of part for 
uniform parts of &%Collections.  For example, each sheep in a flock of 
sheep would have the relationship of member to the flock."}%
. instance(subCollection, BinaryPredicate)
. instance(subCollection, PartialOrderingRelation)
. domain(subCollection, a_1, Collection)
. domain(subCollection, a_2, Collection)
%{subCollection
"(&%subCollection ?COLL1 ?COLL2) means that 
the &%Collection ?COLL1 is a proper part of the &%Collection ?COLL2."}%
. subCollection(vCOLL1, vCOLL2) <=>
      instance(vCOLL1, Collection)
      /\ instance(vCOLL2, Collection)
      /\ (forall vMEMBER: U
              . member(vMEMBER, vCOLL1) => member(vMEMBER, vCOLL2))
. subclass(ContentBearingPhysical, Physical)
%{ContentBearingPhysical
"Any &%Object or &%Process that
expresses content.  This covers &%Objects that contain a &%Proposition,
such as a book, as well as &%ManualSignLanguage, which may similarly
contain a &%Proposition."}%
. instance(vOBJ, ContentBearingPhysical) =>
      exists vTHING: U . represents(vOBJ, vTHING)
. subclass(ContentBearingProcess, ContentBearingPhysical)
%{ContentBearingProcess
"Any &%Process, for example 
&%ManualHumanLanguage, which may contain a &%Proposition."}%
. subclass(ContentBearingObject, CorpuscularObject)
. subclass(ContentBearingObject, ContentBearingPhysical)
. relatedInternalConcept(ContentBearingObject, containsInformation)
%{ContentBearingObject
"Any &%SelfConnectedObject that expresses 
content.  This content may be a &%Proposition, e.g. when the &%ContentBearingObject 
is a &%Sentence or &%Text, or it may be a representation of an abstract or 
physical object, as with an &%Icon, a &%Word or a &%Phrase."}%
. subclass(SymbolicString, ContentBearingObject)
%{SymbolicString
"The &%Class of alphanumeric sequences."}%
. subclass(Character, SymbolicString)
%{Character
"An element of an alphabet, a set of numerals, etc.  
Note that a &%Character may or may not be part of a &%Language.  &%Character 
is a subclass of &%SymbolicString, because every instance of &%Character is 
an alphanumeric sequence consisting of a single element."}%
. instance(vSTRING, SymbolicString) =>
      exists vPART: U
          . part(vPART, vSTRING) /\ instance(vPART, Character)
. instance(containsInformation, BinaryPredicate)
. instance(containsInformation, AsymmetricRelation)
. subrelation(containsInformation, represents)
. domain(containsInformation, a_1, ContentBearingPhysical)
. domain(containsInformation, a_2, Proposition)
%{containsInformation
"A subrelation of &%represents.  This 
predicate relates a &%ContentBearingPhysical to the &%Proposition that is 
expressed by the &%ContentBearingPhysical. Examples include the relationships 
between a physical novel and its story and between a printed score and its 
musical content."}%
. subclass(Icon, ContentBearingPhysical)
%{Icon
"This is the subclass of &%ContentBearingPhysical 
which are not part of a &%Language and which have some sort of similarity 
with the &%Objects that they represent.  This &%Class would include symbolic 
roadway signs, representational art works, photographs, etc."}%
. subclass(MotionPicture, Text)
%{MotionPicture
"A &%ContentBearingObject which depicts motion 
(and which may have an audio or text component as well).  This &%Class covers 
films, videos, etc."}%
. subclass(LinguisticExpression, ContentBearingPhysical)
. disjoint(LinguisticExpression, Icon)
%{LinguisticExpression
"This is the subclass of 
&%ContentBearingPhysical which are language-related.  Note that this &%Class 
encompasses both &%Language and the the elements of &%Languages, 
e.g. &%Words."}%
. subclass(Language, LinguisticExpression)
. disjointDecomposition(Language, AnimalLanguage, HumanLanguage,
                        ComputerLanguage)
%{Language
"A system of signs for expressing thought.  The 
system can be either natural or artificial, i.e. something that emerges 
gradually as a cultural artifact or something that is intentionally created 
by a person or group of people."}%
. subclass(AnimalLanguage, Language)
%{AnimalLanguage
"The &%subclass of &%Languages used by 
&%Animals other than &%Humans."}%
. instance(vLANG, AnimalLanguage)
  /\ agent(vPROC, vAGENT)
  /\ instrument(vPROC, vLANG) =>
      instance(vAGENT, Animal) /\ not instance(vAGENT, Human)
. subclass(ArtificialLanguage, Language)
%{ArtificialLanguage
"The &%subclass of &%Languages that are 
designed by &%Humans."}%
. subclass(ComputerLanguage, ArtificialLanguage)
%{ComputerLanguage
"The class of &%Languages designed for 
and interpreted by a computer."}%
. instance(vLANG, ComputerLanguage)
  /\ agent(vPROC, vAGENT)
  /\ instrument(vPROC, vLANG) =>
      instance(vAGENT, Machine)
. subclass(HumanLanguage, Language)
. partition(HumanLanguage, NaturalLanguage, ConstructedLanguage)
. partition(HumanLanguage, SpokenHumanLanguage,
            ManualHumanLanguage)
%{HumanLanguage
"The &%subclass of &%Languages used by 
&%Humans."}%
. instance(vLANG, HumanLanguage)
  /\ agent(vPROC, vAGENT)
  /\ instrument(vPROC, vLANG) =>
      instance(vAGENT, Human)
. subclass(ConstructedLanguage, HumanLanguage)
. subclass(ConstructedLanguage, ArtificialLanguage)
%{ConstructedLanguage
"An &%ConstructedLanguage is a 
&%HumanLanguage that did not evolve spontaneously within a language
community, but rather had its core grammar and vocabulary invented by 
one or more language experts, often with an aim to produce a more 
grammatically regular language than any language that has evolved 
naturally.  This &%Class includes languages like Esperanto that were 
created to facilitate international communication"}%
. instance(vLANG, ConstructedLanguage) =>
      exists vPLAN: U
          . instance(vPLAN, Planning) /\ a_r_e_s_u_l_t(vPLAN, vLANG)
. subclass(NaturalLanguage, HumanLanguage)
%{NaturalLanguage
"The &%subclass of &%HumanLanguages which 
are not designed and which evolve from generation to generation.  This 
&%Class includes all of the national languages, e.g. English, Spanish, 
Japanese, etc.  Note that this class includes dialects of natural 
languages."}%
. subclass(ManualHumanLanguage, HumanLanguage)
%{ManualHumanLanguage
"A &%ManualHumanLanguage is a
&%HumanLanguage which has as its medium gestures and movement, such 
as the shape, position, and movement of the hands."}%
. subclass(SpokenHumanLanguage, HumanLanguage)
%{SpokenHumanLanguage
"A &%SpokenHumanLanguage is a
&%HumanLanguage which has as its medium the human voice. It can also 
berepresented visually through writing, although not all 
&%SpokenHumanLanguages have a codified written form."}%
. subclass(Word, LinguisticExpression)
%{Word
"A term of a &%Language that represents a concept."}%
. subclass(Formula, Sentence)
%{Formula
"A syntactically well-formed formula in the 
SUO-KIF knowledge representation language."}%
. subclass(Agent, Object)
%{Agent
"Something or someone that can act on its own and 
produce changes in the world."}%
. instance(vAGENT, Agent) <=>
      (exists vPROC: U . agent(vPROC, vAGENT))
. subclass(SentientAgent, Agent)
%{SentientAgent
"An &%Agent that has rights but may or may 
not have responsibilities and the ability to reason.  If the latter are 
present, then the &%Agent is also an instance of &%CognitiveAgent.  
Domesticated animals are an example of &%SentientAgents that are not 
also &%CognitiveAgents."}%
. subclass(CognitiveAgent, SentientAgent)
%{CognitiveAgent
"A &%SentientAgent with responsibilities 
and the ability to reason, deliberate, make plans, etc.  This is 
essentially the legal/ethical notion of a person.  Note that, although 
&%Human is a subclass of &%CognitiveAgent, there may be instances of 
&%CognitiveAgent which are not also instances of &%Human.  For example, 
chimpanzees, gorillas, dolphins, whales, and some extraterrestrials 
(if they exist) may be &%CognitiveAgents."}%
. instance(leader, BinaryPredicate)
. instance(leader, AsymmetricRelation)
. instance(leader, SingleValuedRelation)
. domain(leader, a_1, Agent)
. domain(leader, a_2, Human)
%{leader
"(&%leader ?INSTITUTION ?PERSON)
means that the leader of ?INSTITUTION is ?PERSON."}%
. leader(vX, vY) => attribute(vY, Living)
. subclass(Process, Physical)
%{Process
"Intuitively, the class of things that happen 
and have temporal parts or stages.  Examples include extended events 
like a football match or a race, actions like &%Pursuing and &%Reading, 
and biological processes. The formal definition is: anything that lasts 
for a time but is not an &%Object.  Note that a &%Process may have 
participants 'inside' it which are &%Objects, such as the players 
in a football match.  In a 4D ontology, a &%Process is something whose 
spatiotemporal extent is thought of as dividing into temporal stages 
roughly perpendicular to the time-axis."}%
. subclass(DualObjectProcess, Process)
%{DualObjectProcess
"Any &%Process that requires two, 
nonidentical &%patients."}%
. instance(vPROCESS, DualObjectProcess) =>
      exists vOBJ1: U; vOBJ2: U
          . patient(vPROCESS, vOBJ1)
            /\ patient(vPROCESS, vOBJ2)
            /\ not vOBJ1 = vOBJ2
. subclass(Abstract, Entity)
. disjointDecomposition(Abstract, Quantity, Attribute, SetOrClass,
                        Relation, Proposition)
%{Abstract
"Properties or qualities as distinguished from any 
particular embodiment of the properties/qualities in a physical medium.  
Instances of Abstract can be said to exist in the same sense as mathematical 
objects such as sets and relations, but they cannot exist at a particular 
place and time without some physical encoding or embodiment."}%
. instance(vABS, Abstract) <=>
      not (exists vPOINT: U
               . located(vABS, vPOINT) \/ time(vABS, vPOINT))
. subclass(Quantity, Abstract)
%{Quantity
"Any specification of how many or how much of 
something there is.  Accordingly, there are two subclasses of &%Quantity:  
&%Number (how many) and &%PhysicalQuantity (how much)."}%
. subclass(Attribute, Abstract)
. partition(Attribute, InternalAttribute, RelationalAttribute)
%{Attribute
"Qualities which we cannot or choose not to 
reify into subclasses of &%Object."}%
. instance(property, BinaryPredicate)
. domain(property, a_1, Entity)
. domain(property, a_2, Attribute)
%{property
"This &%Predicate holds between an instance of 
&%Entity and an instance of &%Attribute.  (&%property ?ENTITY ?ATTR) 
means that ?ENTITY has the &%Attribute ?ATTR."}%
. instance(attribute, AsymmetricRelation)
. instance(attribute, IrreflexiveRelation)
. subrelation(attribute, property)
. domain(attribute, a_1, Object)
%{attribute
"(&%attribute ?OBJECT ?PROPERTY) means that 
?PROPERTY is a &%Attribute of ?OBJECT.  For example, 
(&%attribute &%MyLittleRedWagon &%Red)."}%
. instance(manner, AsymmetricRelation)
. instance(manner, IrreflexiveRelation)
. subrelation(manner, property)
. domain(manner, a_1, Process)
. disjointRelation(manner, attribute)
%{manner
"(&%manner ?PROCESS ?MANNER) means that the 
&%Process ?PROCESS is qualified by the &%Attribute ?MANNER.  The &%Attributes 
of &%Processes are usually denoted by adverbs and include things like the 
speed of the wind, the style of a dance, or the intensity of a sports 
competition."}%
. instance(AbstractionFn, UnaryFunction)
. instance(AbstractionFn, PartialValuedRelation)
. domain(AbstractionFn, a_1, Class)
. range(AbstractionFn, Attribute)
%{AbstractionFn
"A &%UnaryFunction that maps a &%Class into 
the instance of &%Attribute that specifies the condition(s) for membership 
in the &%Class."}%
. AbstractionFn(vCLASS) = vATTR <=>
      (forall vINST: U
           . instance(vINST, vCLASS) <=> property(vINST, vATTR))
. instance(ExtensionFn, UnaryFunction)
. instance(ExtensionFn, PartialValuedRelation)
. domain(ExtensionFn, a_1, Attribute)
. range(ExtensionFn, Class)
%{ExtensionFn
"A &%UnaryFunction that maps an &%Attribute 
into the &%Class whose condition for membership is the &%Attribute."}%
. ExtensionFn(vATTRIBUTE) = vCLASS <=>
      AbstractionFn(vCLASS) = vATTRIBUTE
. subclass(InternalAttribute, Attribute)
%{InternalAttribute
"Any &%Attribute of an &%Entity that is an 
internal property of the &%Entity, e.g. its shape, its color, its fragility, 
etc."}%
. subclass(RelationalAttribute, Attribute)
%{RelationalAttribute
"Any &%Attribute that an &%Entity has by 
virtue of a relationship that it bears to another &%Entity or set of &%Entities, 
e.g. &%SocialRoles and &%PositionalAttributes."}%
. subclass(Number, Quantity)
. partition(Number, RealNumber, ImaginaryNumber, ComplexNumber)
%{Number
"A measure of how many things there are, or how
much there is, of a certain kind.  &%Numbers are subclassed into 
&%RealNumber, &%ComplexNumber, and &%ImaginaryNumber."}%
. instance(lessThan, BinaryPredicate)
. instance(lessThan, TransitiveRelation)
. instance(lessThan, IrreflexiveRelation)
. instance(lessThan, RelationExtendedToQuantities)
. trichotomizingOn(lessThan, RealNumber)
. domain(lessThan, a_1, Quantity)
. domain(lessThan, a_2, Quantity)
%{lessThan
"(&%lessThan ?NUMBER1 ?NUMBER2) is true just 
in case the &%Quantity ?NUMBER1 is less than the &%Quantity ?NUMBER2."}%
. instance(greaterThan, BinaryPredicate)
. instance(greaterThan, TransitiveRelation)
. instance(greaterThan, IrreflexiveRelation)
. instance(greaterThan, RelationExtendedToQuantities)
. trichotomizingOn(greaterThan, RealNumber)
. domain(greaterThan, a_1, Quantity)
. domain(greaterThan, a_2, Quantity)
. inverse(greaterThan, lessThan)
%{greaterThan
"(&%greaterThan ?NUMBER1 ?NUMBER2) is true 
just in case the &%Quantity ?NUMBER1 is greater than the &%Quantity 
?NUMBER2."}%
. instance(lessThanOrEqualTo, BinaryPredicate)
. instance(lessThanOrEqualTo, PartialOrderingRelation)
. instance(lessThanOrEqualTo, RelationExtendedToQuantities)
. trichotomizingOn(lessThanOrEqualTo, RealNumber)
. domain(lessThanOrEqualTo, a_1, Quantity)
. domain(lessThanOrEqualTo, a_2, Quantity)
%{lessThanOrEqualTo
"(&%lessThanOrEqualTo ?NUMBER1 ?NUMBER2) 
is true just in case the &%Quantity ?NUMBER1 is less than or equal to 
the &%Quantity ?NUMBER2."}%
. lessThanOrEqualTo(vNUMBER1, vNUMBER2) <=>
      vNUMBER1 = vNUMBER2 \/ lessThan(vNUMBER1, vNUMBER2)
. instance(greaterThanOrEqualTo, BinaryPredicate)
. instance(greaterThanOrEqualTo, PartialOrderingRelation)
. instance(greaterThanOrEqualTo, RelationExtendedToQuantities)
. trichotomizingOn(greaterThanOrEqualTo, RealNumber)
. domain(greaterThanOrEqualTo, a_1, Quantity)
. domain(greaterThanOrEqualTo, a_2, Quantity)
. inverse(greaterThanOrEqualTo, lessThanOrEqualTo)
%{greaterThanOrEqualTo
"(&%greaterThanOrEqualTo ?NUMBER1 
?NUMBER2) is true just in case the &%Quantity ?NUMBER1 is greater 
than the &%Quantity ?NUMBER2."}%
. greaterThanOrEqualTo(vNUMBER1, vNUMBER2) <=>
      vNUMBER1 = vNUMBER2 \/ greaterThan(vNUMBER1, vNUMBER2)
. subclass(RealNumber, Number)
. partition(RealNumber, NegativeRealNumber, NonnegativeRealNumber)
. partition(RealNumber, RationalNumber, IrrationalNumber)
%{RealNumber
"Any &%Number that can be expressed as a 
(possibly infinite) decimal, i.e. any &%Number that has a position 
on the number line."}%
. subclass(ImaginaryNumber, Number)
%{ImaginaryNumber
"Any &%Number that is the result of 
multiplying a &%RealNumber by the square root of -1."}%
. instance(vNUMBER, ImaginaryNumber) =>
      exists vREAL: U
          . instance(vREAL, RealNumber)
            /\ vNUMBER = MultiplicationFn(vREAL, SquareRootFn(a_Minus_1))
. subclass(RationalNumber, RealNumber)
%{RationalNumber
"Any &%RealNumber that is the product of 
dividing two &%Integers."}%
. subclass(IrrationalNumber, RealNumber)
%{IrrationalNumber
"Any &%RealNumber that is not also a 
&%RationalNumber."}%
. subclass(NonnegativeRealNumber, RealNumber)
%{NonnegativeRealNumber
"A &%RealNumber that is greater than 
or equal to zero."}%
. instance(vNUMBER, NonnegativeRealNumber) <=>
      greaterThanOrEqualTo(vNUMBER, a_0) /\ instance(vNUMBER, RealNumber)
. subclass(PositiveRealNumber, NonnegativeRealNumber)
%{PositiveRealNumber
"A &%RealNumber that is greater than 
zero."}%
. instance(vNUMBER, PositiveRealNumber) <=>
      greaterThan(vNUMBER, a_0) /\ instance(vNUMBER, RealNumber)
. subclass(NegativeRealNumber, RealNumber)
%{NegativeRealNumber
"A &%RealNumber that is less than 
zero."}%
. instance(vNUMBER, NegativeRealNumber) <=>
      lessThan(vNUMBER, a_0) /\ instance(vNUMBER, RealNumber)
. subclass(Integer, RationalNumber)
. partition(Integer, OddInteger, EvenInteger)
. partition(Integer, NegativeInteger, NonnegativeInteger)
%{Integer
"A negative or nonnegative whole number."}%
. subclass(EvenInteger, Integer)
%{EvenInteger
"An &%Integer that is evenly divisible 
by 2."}%
. subclass(OddInteger, Integer)
%{OddInteger
"An &%Integer that is not evenly divisible 
by 2."}%
. subclass(PrimeNumber, Integer)
%{PrimeNumber
"An &%Integer that is evenly divisible only 
by itself and 1."}%
. subclass(NonnegativeInteger, Integer)
. subclass(NonnegativeInteger, NonnegativeRealNumber)
%{NonnegativeInteger
"An &%Integer that is greater than 
or equal to zero."}%
. subclass(NegativeInteger, Integer)
. subclass(NegativeInteger, NegativeRealNumber)
%{NegativeInteger
"An &%Integer that is less than zero."}%
. subclass(PositiveInteger, NonnegativeInteger)
. subclass(PositiveInteger, PositiveRealNumber)
%{PositiveInteger
"An &%Integer that is greater than zero."}%
. subclass(BinaryNumber, RealNumber)
%{BinaryNumber
"Elements from the number system with base 2.  
Every &%BinaryNumber is expressed as a sequence of the digits 1 and 0."}%
. subclass(ComplexNumber, Number)
. disjoint(ComplexNumber, RealNumber)
%{ComplexNumber
"A &%Number that has the form: x + yi, where x 
and y are &%RealNumbers and i is the square root of -1."}%
. instance(vNUMBER, ComplexNumber) =>
      exists vREAL1: U; vREAL2: U
          . instance(vREAL1, RealNumber)
            /\ instance(vREAL2, RealNumber)
            /\ vNUMBER =
                   AdditionFn(vREAL1,
                              MultiplicationFn(vREAL2, SquareRootFn(a_Minus_1)))
. subclass(PhysicalQuantity, Quantity)
. partition(PhysicalQuantity, ConstantQuantity, FunctionQuantity)
%{PhysicalQuantity
"&%A PhysicalQuantity is a measure of 
some quantifiable aspect of the modeled world, such as 'the earth's 
diameter' (a constant length) and 'the stress in a loaded deformable 
solid' (a measure of stress, which is a function of three spatial 
coordinates).  All &%PhysicalQuantities are either &%ConstantQuantities 
or &%FunctionQuantities.  Instances of &%ConstantQuantity are dependent 
on a &%UnitOfMeasure, while instances of &%FunctionQuantity are 
&%Functions that map instances of &%ConstantQuantity to other instances 
of &%ConstantQuantity (e.g., &%TimeDependentQuantities are 
&%FunctionQuantities).  Although the name and definition of 
&%PhysicalQuantity is borrowed from physics, &%PhysicalQuantities need 
not be material.  Aside from the dimensions of length, time, velocity, 
etc., nonphysical dimensions such as currency are also possible.  
Accordingly, amounts of money would be instances of &%PhysicalQuantity.  
&%PhysicalQuantities are distinguished from &%Numbers by the fact that 
the former are associated with a dimension of measurement."}%
. subclass(ConstantQuantity, PhysicalQuantity)
%{ConstantQuantity
"A &%ConstantQuantity is a 
&%PhysicalQuantity which has a constant value, e.g. 3 meters and 5 hours.  
The magnitude (see &%MagnitudeFn) of every &%ConstantQuantity is a 
&%RealNumber.  &%ConstantQuantities are distinguished from 
&%FunctionQuantities, which map &%ConstantQuantities to other 
&%ConstantQuantities.  All &%ConstantQuantites are expressed with the 
&%BinaryFunction &%MeasureFn, which takes a &%Number and a &%UnitOfMeasure 
as arguments.  For example, 3 &%Meters can be expressed as (&%MeasureFn 3 
&%Meter).  &%ConstantQuantities form a partial order (see 
&%PartialOrderingRelation) with the &%lessThan relation, since &%lessThan 
is a &%RelationExtendedToQuantities and &%lessThan is defined over the 
&%RealNumbers.  The &%lessThan relation is not a total order (see 
&%TotalOrderingRelation) over the class &%ConstantQuantity since elements 
of some subclasses of &%ConstantQuantity (such as length quantities) 
are incomparable to elements of other subclasses of &%ConstantQuantity 
(such as mass quantities)."}%
. subclass(TimeMeasure, ConstantQuantity)
%{TimeMeasure
"The class of temporal durations (instances 
of &%TimeDuration) and positions of &%TimePoints and &%TimeIntervals along 
the universal timeline (instances of &%TimePosition)."}%
. subclass(TimeDuration, TimeMeasure)
%{TimeDuration
"Any measure of length of time, 
with or without respect to the universal timeline."}%
. subclass(TimePosition, TimeMeasure)
. partition(TimePosition, TimeInterval, TimePoint)
%{TimePosition
"Any &%TimePoint or &%TimeInterval 
along the universal timeline from &%NegativeInfinity to 
&%PositiveInfinity."}%
. subclass(TimeInterval, TimePosition)
%{TimeInterval
"An interval of time.  Note that a 
&%TimeInterval has both an extent and a location on the universal 
timeline.  Note too that a &%TimeInterval has no gaps, i.e. this 
class contains only convex time intervals."}%
. subclass(TimePoint, TimePosition)
%{TimePoint
"An extensionless point on the universal timeline. 
The &%TimePoints at which &%Processes occur can be known with various 
degrees of precision and approximation, but conceptually &%TimePoints are 
point-like and not interval-like.  That is, it doesn't make sense to talk 
about how long a &%TimePoint lasts."}%
. subclass(FunctionQuantity, PhysicalQuantity)
%{FunctionQuantity
"A &%FunctionQuantity is a &%PhysicalQuantity 
that is returned by a &%Function that maps from one or more instances of 
&%ConstantQuantity to another instance of &%ConstantQuantity.  For example, 
the velocity of a particle would be represented by a &%FunctionQuantity 
relating values of time (which are &%ConstantQuantities) to values of distance 
(also &%ConstantQuantities).  Note that all elements of the range of the 
&%Function corresponding to a &%FunctionQuantity have the same physical 
dimension as the &%FunctionQuantity itself."}%
. subclass(UnaryConstantFunctionQuantity, FunctionQuantity)
%{UnaryConstantFunctionQuantity
"The class of &%FunctionQuantities 
that are returned by &%UnaryFunctions that map from the &%Class &%ConstantQuantity 
to the &%Class &%ConstantQuantity."}%
. subclass(TimeDependentQuantity, UnaryConstantFunctionQuantity)
%{TimeDependentQuantity
"A &%UnaryConstantFunctionQuantity of 
continuous time.  All instances of this &%Class are returned by &%Functions 
that map a time quantity into another &%ConstantQuantity such as temperature.  
For example, 'the temperature at the top of the Empire State Building' is a 
&%TimeDependentQuantity since its value depends on the time."}%
. subclass(SetOrClass, Abstract)
. partition(SetOrClass, Set, Class)
%{SetOrClass
"The &%SetOrClass of &%Sets and &%Classes, i.e. any instance 
of &%Abstract that has &%elements or &%instances."}%
. subclass(Class, SetOrClass)
%{Class
"&%Classes differ from &%Sets in three important respects.  
First, &%Classes are not assumed to be extensional.  That is, distinct 
&%Classes might well have exactly the same instances.  Second, &%Classes typically 
have an associated `condition' that determines the instances of the &%Class.  So, 
for example, the condition `human' determines the &%Class of &%Humans.  Note that 
some &%Classes might satisfy their own condition (e.g., the &%Class of &%Abstract 
things is &%Abstract) and hence be instances of themselves.  Third, the instances 
of a class may occur only once within the class, i.e. a class cannot contain 
duplicate instances."}%
. subclass(Set, SetOrClass)
%{Set
"A &%SetOrClass that satisfies extensionality as well as
other constraints specified by some choice of set theory.  &%Sets differ 
from &%Classes in two important respects.  First, &%Sets are extensional - 
two &%Sets with the same &%elements are identical.  Second, a &%Set can be 
an arbitrary stock of objects.  That is, there is no requirement that &%Sets 
have an associated condition that determines their membership.  Note that &%Sets 
are not assumed to be unique sets, i.e. &%elements of a &%Set may occur more 
than once in the &%Set."}%
. subclass(Relation, Abstract)
. disjointDecomposition(Relation, BinaryRelation, TernaryRelation,
                        QuaternaryRelation, QuintaryRelation,
                        VariableArityRelation)
. partition(Relation, Predicate, Function, List)
. partition(Relation, TotalValuedRelation, PartialValuedRelation)
%{Relation
"The &%Class of relations.  There are three kinds 
of &%Relation:  &%Predicate, &%Function, and &%List.  &%Predicates and 
&%Functions both denote sets of ordered n-tuples.  The difference between 
these two &%Classes is that &%Predicates cover formula-forming operators, while 
&%Functions cover term-forming operators.  A &%List, on the other hand, is a 
particular ordered n-tuple."}%
. instance(vREL, Relation) =>
      (holds(vREL, a_At_R_O_W) <=> holds(vREL, a_At_R_O_W))
. subclass(SingleValuedRelation, Relation)
. instance(SingleValuedRelation, InheritableRelation)
%{SingleValuedRelation
"A &%Relation is a &%SingleValuedRelation 
just in case an assignment of values to every argument position except the last 
one determines at most one assignment for the last argument position.  Note 
that not all &%SingleValuedRelations are &%TotalValuedRelations."}%
. instance(vREL, SingleValuedRelation) =>
      forall vROW: U; vITEM1: U; vITEM2: U
          . holds(vREL, a_At_R_O_W, vITEM1)
            /\ holds(vREL, a_At_R_O_W, vITEM2) =>
                vITEM1 = vITEM2
. subclass(TotalValuedRelation, Relation)
. instance(TotalValuedRelation, InheritableRelation)
%{TotalValuedRelation
"A &%Relation is a &%TotalValuedRelation 
just in case there exists an assignment for the last argument position of the 
&%Relation given any assignment of values to every argument position except 
the last one.  Note that declaring a &%Relation to be both a &%TotalValuedRelation 
and a &%SingleValuedRelation means that it is a total function."}%
. instance(vREL, TotalValuedRelation) <=>
      (exists vVALENCE: U
           . instance(vREL, Relation)
             /\ valence(vREL, vVALENCE)
             /\ ((forall vNUMBER: U; vELEMENT: U; vCLASS: U
                      . lessThan(vNUMBER, vVALENCE)
                        /\ domain(vREL, vNUMBER, vCLASS)
                        /\ vELEMENT =
                               ListOrderFn(ListFn(a_At_R_O_W), vNUMBER) =>
                            instance(vELEMENT, vCLASS)) =>
                     exists vITEM: U . holds(vREL, a_At_R_O_W, vITEM)))
. subclass(PartialValuedRelation, Relation)
%{PartialValuedRelation
"A &%Relation is a &%PartialValuedRelation 
just in case it is not a &%TotalValuedRelation, i.e. just in case assigning values 
to every argument position except the last one does not necessarily mean that there 
is a value assignment for the last argument position.  Note that, if a &%Relation 
is both a &%PartialValuedRelation and a &%SingleValuedRelation, then it is a partial 
function."}%
. subclass(BinaryRelation, Relation)
. instance(BinaryRelation, InheritableRelation)
%{BinaryRelation
"&%BinaryRelations are relations that are 
true only of pairs of things.  &%BinaryRelations are represented as slots 
in frame systems."}%
. instance(vREL, BinaryRelation) =>
      not (exists vITEM1: U; vITEM2: U; vITEM3: U; vROW: U
               . holds(vREL, vITEM1, vITEM2, vITEM3, a_At_R_O_W))
. subclass(ReflexiveRelation, BinaryRelation)
%{ReflexiveRelation
"&%Relation ?REL is reflexive if 
(?REL ?INST ?INST) for all ?INST."}%
. instance(vREL, ReflexiveRelation) =>
      holds(vREL, vINST1, vINST2) \/ holds(vREL, vINST2, vINST1) =>
          holds(vREL, vINST1, vINST1)
. subclass(IrreflexiveRelation, BinaryRelation)
%{IrreflexiveRelation
"&%Relation ?REL is irreflexive 
if (?REL ?INST ?INST) holds for no value of ?INST."}%
. instance(vREL, IrreflexiveRelation) =>
      forall vINST: U . not holds(vREL, vINST, vINST)
. subclass(SymmetricRelation, BinaryRelation)
%{SymmetricRelation
"A &%BinaryRelation ?REL is
symmetric just in case (?REL ?INST1 ?INST2) imples (?REL 
?INST2 ?INST1), for all ?INST1 and ?INST2."}%
. instance(vREL, SymmetricRelation) =>
      forall vINST1: U; vINST2: U
          . holds(vREL, vINST1, vINST2) => holds(vREL, vINST2, vINST1)
. subclass(AsymmetricRelation, IrreflexiveRelation)
. subclass(AsymmetricRelation, AntisymmetricRelation)
%{AsymmetricRelation
"A &%BinaryRelation is asymmetric only 
if it is both an &%AntisymmetricRelation and an &%IrreflexiveRelation."}%
. instance(vREL, BinaryRelation)
  /\ (domain(vREL, a_1, vCLASS1)
      \/ domainSubclass(vREL, a_1, vCLASS1))
  /\ (domain(vREL, a_2, vCLASS2)
      \/ domainSubclass(vREL, a_2, vCLASS2)
      \/ range(vREL, vCLASS2)
      \/ rangeSubclass(vREL, vCLASS2))
  /\ disjoint(vCLASS1, vCLASS2) =>
      instance(vREL, AsymmetricRelation)
. subclass(AntisymmetricRelation, BinaryRelation)
%{AntisymmetricRelation
"&%BinaryRelation ?REL is an 
&%AntisymmetricRelation if for distinct ?INST1 and ?INST2, (?REL ?INST1 
?INST2) implies not (?REL ?INST2 ?INST1).  In other words, for all ?INST1 
and ?INST2, (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST1) imply that ?INST1 
and ?INST2 are identical.  Note that it is possible for an 
&%AntisymmetricRelation to be a &%ReflexiveRelation."}%
. instance(vREL, AntisymmetricRelation) =>
      forall vINST1: U; vINST2: U
          . holds(vREL, vINST1, vINST2) /\ holds(vREL, vINST2, vINST1) =>
                vINST1 = vINST2
. subclass(TrichotomizingRelation, BinaryRelation)
%{TrichotomizingRelation
"A &%BinaryRelation ?REL is a 
&%TrichotomizingRelation just in case all ordered pairs consisting of 
distinct individuals are elements of ?REL."}%
. instance(vREL, TrichotomizingRelation) =>
      forall vINST1: U; vINST2: U
          . holds(vREL, vINST1, vINST2)
            \/ vINST1 = vINST2
            \/ holds(vREL, vINST2, vINST1)
. subclass(TransitiveRelation, BinaryRelation)
%{TransitiveRelation
"A &%BinaryRelation ?REL is transitive 
if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply (?REL ?INST1 ?INST3), 
for all ?INST1, ?INST2, and ?INST3."}%
. instance(vREL, TransitiveRelation) =>
      forall vINST1: U; vINST2: U; vINST3: U
          . holds(vREL, vINST1, vINST2) /\ holds(vREL, vINST2, vINST3) =>
                holds(vREL, vINST1, vINST3)
. subclass(IntransitiveRelation, BinaryRelation)
%{IntransitiveRelation
"A &%BinaryRelation ?REL is 
intransitive only if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply not 
(?REL ?INST1 ?INST3), for all ?INST1, ?INST2, and ?INST3."}%
. instance(vREL, IntransitiveRelation) =>
      forall vINST1: U; vINST2: U; vINST3: U
          . holds(vREL, vINST1, vINST2) /\ holds(vREL, vINST2, vINST3) =>
                not holds(vREL, vINST1, vINST3)
. subclass(PartialOrderingRelation, TransitiveRelation)
. subclass(PartialOrderingRelation, AntisymmetricRelation)
. subclass(PartialOrderingRelation, ReflexiveRelation)
%{PartialOrderingRelation
"A &%BinaryRelation is a partial 
ordering if it is a &%ReflexiveRelation, an &%AntisymmetricRelation, and 
a &%TransitiveRelation."}%
. subclass(TotalOrderingRelation, PartialOrderingRelation)
. subclass(TotalOrderingRelation, TrichotomizingRelation)
%{TotalOrderingRelation
"A &%BinaryRelation is a 
&%TotalOrderingRelation if it is a &%PartialOrderingRelation 
and a &%TrichotomizingRelation."}%
. instance(vREL, TotalOrderingRelation) =>
      forall vINST1: U; vINST2: U
          . holds(vREL, vINST1, vINST2) \/ holds(vREL, vINST2, vINST1)
. subclass(EquivalenceRelation, TransitiveRelation)
. subclass(EquivalenceRelation, SymmetricRelation)
. subclass(EquivalenceRelation, ReflexiveRelation)
%{EquivalenceRelation
"A &%BinaryRelation is an equivalence 
relation if it is a &%ReflexiveRelation, a &%SymmetricRelation, and a 
&%TransitiveRelation."}%
. subclass(CaseRole, BinaryPredicate)
. instance(CaseRole, InheritableRelation)
. subclass(CaseRole, AsymmetricRelation)
%{CaseRole
"The &%Class of &%Predicates relating the 
spatially distinguished parts of a &%Process. &%CaseRoles include, for 
example, the &%agent, &%patient or &%destination of an action, the flammable 
substance in a burning process, or the water that falls in rain."}%
. instance(agent, CaseRole)
. domain(agent, a_1, Process)
. domain(agent, a_2, Agent)
%{agent
"(&%agent ?PROCESS ?AGENT) means that ?AGENT is 
an active determinant, either animate or inanimate, of the &%Process 
?PROCESS, with or without voluntary intention.  For example, Eve is an 
&%agent in the following proposition: Eve bit an apple."}%
. instance(vPROCESS, Process) =>
      exists vCAUSE: U . agent(vPROCESS, vCAUSE)
. instance(destination, CaseRole)
. domain(destination, a_1, Process)
. domain(destination, a_2, Entity)
%{destination
"(destination ?PROCESS ?GOAL) means that 
?GOAL is the target or goal of the Process ?PROCESS.  For example, 
Danbury would be the destination in the following proposition:  Bob went 
to Danbury.  Note that this is a very general &%CaseRole and, in 
particular, that it covers the concepts of 'recipient' and 'beneficiary'.  
Thus, John would be the &%destination in the following proposition:  
Tom gave a book to John."}%
. instance(experiencer, CaseRole)
. domain(experiencer, a_1, Process)
. domain(experiencer, a_2, Agent)
%{experiencer
"(&%experiencer ?PROCESS ?AGENT) means 
that ?AGENT experiences the &%Process ?PROCESS.  For example, Yojo 
is the &%experiencer of seeing in the following proposition:  Yojo 
sees the fish.  Note that &%experiencer, unlike &%agent, does 
not entail a causal relation between its arguments."}%
. subrelation(instrument, patient)
. domain(instrument, a_1, Process)
. domain(instrument, a_2, Object)
%{instrument
"(instrument ?EVENT ?TOOL) means that ?TOOL 
is used by an agent in bringing about ?EVENT and that ?TOOL is not 
changed by ?EVENT.  For example, the key is an &%instrument in the 
following proposition: The key opened the door.  Note that &%instrument 
and &%resource cannot be satisfied by the same ordered pair."}%
. instance(origin, CaseRole)
. domain(origin, a_1, Process)
. domain(origin, a_2, Object)
. subrelation(origin, involvedInEvent)
%{origin
"(&%origin ?PROCESS ?SOURCE) means that ?SOURCE 
indicates where the ?Process began.  Note that this relation implies 
that ?SOURCE is present at the beginning of the process, but need not 
participate throughout the process.  For example, the submarine is the 
&%origin in the following proposition: the missile was launched from a 
submarine."}%
. instance(patient, CaseRole)
. domain(patient, a_1, Process)
. domain(patient, a_2, Entity)
%{patient
"(&%patient ?PROCESS ?ENTITY) means that ?ENTITY 
is a participant in ?PROCESS that may be moved, said, experienced, etc.  
For example, the direct objects in the sentences 'The cat swallowed the 
canary' and 'Billy likes the beer' would be examples of &%patients.  Note 
that the &%patient of a &%Process may or may not undergo structural 
change as a result of the &%Process.  The &%CaseRole of &%patient is used 
when one wants to specify as broadly as possible the object of a 
&%Process."}%
. subrelation(resource, patient)
. domain(resource, a_1, Process)
. domain(resource, a_2, Object)
. disjointRelation(resource, a_r_e_s_u_l_t, instrument)
%{resource
"(&%resource ?PROCESS ?RESOURCE) means that 
?RESOURCE is present at the beginning of ?PROCESS, is used by ?PROCESS, 
and as a consequence is changed by ?PROCESS.  For example, soap is a 
&%resource in the following proposition:  the gun was carved out of soap.  
Note that &%resource differs from &%instrument, another subrelation of 
&%patient, in that its internal or physical properties are altered in 
some way by the &%Process."}%
. subrelation(a_r_e_s_u_l_t, patient)
. domain(a_r_e_s_u_l_t, a_1, Process)
. domain(a_r_e_s_u_l_t, a_2, Entity)
%{result
"(result ?ACTION ?OUTPUT) means that ?OUTPUT is 
a product of ?ACTION.  For example, house is a &%result in the 
following proposition: Eric built a house."}%
. instance(InheritableRelation, Class)
%{InheritableRelation
"This is a &%Class of &%Classes.  Each 
&%instance of &%InheritableRelation is a &%subclass of &%Relation whose 
properties can be inherited downward in the class hierarchy via the 
&%subrelation &%Predicate."}%
. subclass(ProbabilityRelation, Relation)
. instance(ProbabilityRelation, InheritableRelation)
%{ProbabilityRelation
"The &%Class of &%Relations that 
permit assessment of the probability of an event or situation."}%
. instance(ProbabilityFn, ProbabilityRelation)
. instance(ProbabilityFn, TotalValuedRelation)
. instance(ProbabilityFn, UnaryFunction)
. domain(ProbabilityFn, a_1, Formula)
. range(ProbabilityFn, RealNumber)
. instance(ProbabilityFn, AsymmetricRelation)
%{ProbabilityFn
"One of the basic &%ProbabilityRelations, 
&%ProbabilityFn is used to state the a priori probability of a state of 
affairs.  (&%ProbabilityFn ?FORMULA) denotes the a priori probability 
of ?FORMULA."}%
. instance(conditionalProbability, ProbabilityRelation)
. instance(conditionalProbability, TernaryPredicate)
. domain(conditionalProbability, a_1, Formula)
. domain(conditionalProbability, a_2, Formula)
. domain(conditionalProbability, a_3, RealNumber)
%{conditionalProbability
"One of the basic &%ProbabilityRelations.  
&%conditionalProbability is used to state the numeric value of a conditional 
probability.  (&%conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER) means 
that the probability of ?FORMULA2 being true given that ?FORMULA1 is true is 
?NUMBER."}%
. instance(increasesLikelihood, ProbabilityRelation)
. instance(increasesLikelihood, BinaryPredicate)
. instance(increasesLikelihood, IrreflexiveRelation)
. domain(increasesLikelihood, a_1, Formula)
. domain(increasesLikelihood, a_2, Formula)
. disjointRelation(increasesLikelihood, decreasesLikelihood,
                   independentProbability)
%{increasesLikelihood
"One of the basic &%ProbabilityRelations.  
(&%increasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is more 
likely to be true if ?FORMULA1 is true."}%
. increasesLikelihood(vFORMULA1, vFORMULA2)
  /\ ProbabilityFn(vFORMULA2) = vNUMBER1
  /\ conditionalProbability(vFORMULA1, vFORMULA2, vNUMBER2) =>
      greaterThan(vNUMBER2, vNUMBER1)
. instance(decreasesLikelihood, ProbabilityRelation)
. instance(decreasesLikelihood, BinaryPredicate)
. instance(decreasesLikelihood, IrreflexiveRelation)
. domain(decreasesLikelihood, a_1, Formula)
. domain(decreasesLikelihood, a_2, Formula)
%{decreasesLikelihood
"One of the basic &%ProbabilityRelations.  
(&%decreasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is less 
likely to be true if ?FORMULA1 is true."}%
. decreasesLikelihood(vFORMULA1, vFORMULA2)
  /\ ProbabilityFn(vFORMULA2) = vNUMBER1
  /\ conditionalProbability(vFORMULA1, vFORMULA2, vNUMBER2) =>
      lessThan(vNUMBER2, vNUMBER1)
. instance(independentProbability, ProbabilityRelation)
. instance(independentProbability, BinaryPredicate)
. instance(independentProbability, SymmetricRelation)
. domain(independentProbability, a_1, Formula)
. domain(independentProbability, a_2, Formula)
%{independentProbability
"One of the basic &%ProbabilityRelations.  
(&%independentProbability ?FORMULA1 ?FORMULA2) means that the probabilities of 
?FORMULA1 and ?FORMULA2 being true are independent."}%
. independentProbability(vFORMULA1, vFORMULA2)
  /\ ProbabilityFn(vFORMULA2) = vNUMBER1
  /\ conditionalProbability(vFORMULA1, vFORMULA2, vNUMBER2) =>
      vNUMBER2 = vNUMBER1
. instance(vFORMULA1, Formula) /\ instance(vFORMULA2, Formula) =>
      increasesLikelihood(vFORMULA1, vFORMULA2)
      \/ decreasesLikelihood(vFORMULA1, vFORMULA2)
      \/ independentProbability(vFORMULA1, vFORMULA2)
. subclass(SpatialRelation, Relation)
. instance(SpatialRelation, InheritableRelation)
%{SpatialRelation
"The &%Class of &%Relations that are 
spatial in a wide sense.  This &%Class includes mereological relations 
and topological relations."}%
. subclass(TemporalRelation, Relation)
. instance(TemporalRelation, InheritableRelation)
%{TemporalRelation
"The &%Class of temporal &%Relations.  
This &%Class includes notions of (temporal) topology of intervals, 
(temporal) schemata, and (temporal) extension."}%
. instance(IntentionalRelation, InheritableRelation)
. subclass(IntentionalRelation, Relation)
%{IntentionalRelation
"The &%Class of &%Relations between 
an &%Agent and one or more &%Entities, where the &%Relation requires that 
the &%Agent have awareness of the &%Entity."}%
. instance(vREL, IntentionalRelation)
  /\ holds(vREL, vAGENT, a_At_R_O_W)
  /\ inList(vOBJ, ListFn(a_At_R_O_W)) =>
      inScopeOfInterest(vAGENT, vOBJ)
. instance(prefers, TernaryPredicate)
. instance(prefers, IntentionalRelation)
. domain(prefers, a_1, CognitiveAgent)
. domain(prefers, a_2, Formula)
. domain(prefers, a_3, Formula)
%{prefers
"(&%prefers ?AGENT ?FORMULA1 ?FORMULA2) means that 
&%CognitiveAgent ?AGENT prefers the state of affairs expressed by ?FORMULA1
over the state of affairs expressed by ?FORMULA2 all things being equal."}%
. prefers(vAGENT, vFORMULA1, vFORMULA2) =>
      not (a_t_r_u_e(vFORMULA1, True) /\ a_t_r_u_e(vFORMULA2, True))
. subclass(PropositionalAttitude, IntentionalRelation)
. subclass(PropositionalAttitude, AsymmetricRelation)
. instance(PropositionalAttitude, InheritableRelation)
%{PropositionalAttitude
"The &%Class of 
&%IntentionalRelations where the &%Agent has awareness of a 
&%Proposition."}%
. instance(vREL, PropositionalAttitude)
  /\ holds(vREL, vAGENT, vFORMULA) =>
      instance(vFORMULA, Formula)
. subclass(ObjectAttitude, IntentionalRelation)
. instance(ObjectAttitude, InheritableRelation)
. disjoint(ObjectAttitude, PropositionalAttitude)
%{ObjectAttitude
"The &%Class of &%IntentionalRelations 
where the &%Agent has awareness of an instance of &%Physical."}%
. instance(vREL, ObjectAttitude) /\ holds(vREL, vAGENT, vTHING) =>
      instance(vTHING, Physical)
. instance(inScopeOfInterest, BinaryPredicate)
. instance(inScopeOfInterest, IntentionalRelation)
. domain(inScopeOfInterest, a_1, CognitiveAgent)
. domain(inScopeOfInterest, a_2, Entity)
%{inScopeOfInterest
"A very general &%Predicate.  
(&%inScopeOfInterest ?AGENT ?ENTITY) means that ?ENTITY is within the 
scope of interest of ?AGENT.  Note that the interest indicated can be 
either positive or negative, i.e. the ?AGENT can have an interest in 
avoiding or promoting ?ENTITY."}%
. (exists vPROCESS: U
       . instance(vPROCESS, IntentionalProcess)
         /\ agent(vPROCESS, vAGENT)
         /\ patient(vPROCESS, vOBJECT)) <=>
      inScopeOfInterest(vAGENT, vOBJECT)
. instance(needs, ObjectAttitude)
. subrelation(needs, inScopeOfInterest)
. domain(needs, a_1, CognitiveAgent)
. domain(needs, a_2, Physical)
%{needs
"(&%needs ?AGENT ?OBJECT) means that ?OBJECT is 
physically required for the continued existence of ?AGENT."}%
. needs(vAGENT, vOBJECT) => wants(vAGENT, vOBJECT)
. instance(wants, ObjectAttitude)
. subrelation(wants, inScopeOfInterest)
. relatedInternalConcept(wants, desires)
. domain(wants, a_1, CognitiveAgent)
. domain(wants, a_2, Physical)
%{wants
"(&%wants ?AGENT ?OBJECT) means that ?OBJECT is desired by ?AGENT, 
i.e. ?AGENT believes that ?OBJECT will satisfy one of its goals.  Note that there is 
no implication that what is wanted by an agent is not already possessed by the agent."}%
. wants(vAGENT, vOBJ) =>
      exists vPURP: U . hasPurposeForAgent(vOBJ, vPURP, vAGENT)
. wants(vAGENT, vOBJ) => desires(vAGENT, possesses(vAGENT, vOBJ))
. instance(desires, PropositionalAttitude)
. subrelation(desires, inScopeOfInterest)
. relatedInternalConcept(desires, wants)
. domain(desires, a_1, CognitiveAgent)
. domain(desires, a_2, Formula)
%{desires
"(&%desires ?AGENT ?FORMULA) means that ?AGENT wants 
to bring about the state of affairs expressed by ?FORMULA.  Note that there 
is no implication that what is desired by the agent is not already true.  
Note too that &%desires is distinguished from &%wants only in that the former 
is a &%PropositionalAttitude, while &%wants is an &%ObjectAttitude."}%
. instance(considers, PropositionalAttitude)
. subrelation(considers, inScopeOfInterest)
. domain(considers, a_1, CognitiveAgent)
. domain(considers, a_2, Formula)
%{considers
"(&%considers ?AGENT ?FORMULA) means that ?AGENT 
considers or wonders about the truth of the proposition expressed by 
?FORMULA."}%
. instance(believes, PropositionalAttitude)
. subrelation(believes, inScopeOfInterest)
. domain(believes, a_1, CognitiveAgent)
. domain(believes, a_2, Formula)
%{believes
"The epistemic predicate of belief.  
(&%believes ?AGENT ?FORMULA) means that ?AGENT believes the proposition 
expressed by ?FORMULA."}%
. believes(vAGENT, vFORMULA) =>
      exists vTIME: U . holdsDuring(vTIME, considers(vAGENT, vFORMULA))
. instance(knows, PropositionalAttitude)
. subrelation(knows, inScopeOfInterest)
. domain(knows, a_1, CognitiveAgent)
. domain(knows, a_2, Formula)
%{knows
"The epistemic predicate of knowing.  (&%knows 
?AGENT ?FORMULA) means that ?AGENT knows the proposition expressed by 
?FORMULA.  Note that &%knows entails conscious awareness, so this 
&%Predicate cannot be used to express tacit or subconscious or 
unconscious knowledge."}%
. knows(vAGENT, vFORMULA) => believes(vAGENT, vFORMULA)
. knows(vAGENT, vFORMULA) => a_t_r_u_e(vFORMULA, True)
. subclass(TernaryRelation, Relation)
. instance(TernaryRelation, InheritableRelation)
%{TernaryRelation
"&%TernaryRelations relate three items.  
The two &%subclasses of &%TernaryRelation are &%TernaryPredicate and 
&%BinaryFunction."}%
. instance(vREL, TernaryRelation) =>
      not (exists vITEM1: U; vITEM2: U; vITEM3: U; vITEM4: U; vROW: U
               . holds(vREL, vITEM1, vITEM2, vITEM3, vITEM4, a_At_R_O_W))
. subclass(QuaternaryRelation, Relation)
. instance(QuaternaryRelation, InheritableRelation)
%{QuaternaryRelation
"&%QuaternaryRelations relate four 
items.  The two &%subclasses of &%QuaternaryRelation are 
&%QuaternaryPredicate and &%TernaryFunction."}%
. instance(vREL, QuaternaryRelation) =>
      not (exists vITEM1: U; vITEM2: U; vITEM3: U; vITEM4: U; vITEM5: U;
                  vROW: U
               . holds(vREL, vITEM1, vITEM2, vITEM3, vITEM4, vITEM5,
                       a_At_R_O_W))
. subclass(QuintaryRelation, Relation)
. instance(QuintaryRelation, InheritableRelation)
%{QuintaryRelation
"&%QuintaryRelations relate five items.  
The two &%subclasses of &%QuintaryRelation are &%QuintaryPredicate and 
&%QuaternaryFunction."}%
. instance(vREL, QuintaryRelation) =>
      not (exists vITEM1: U; vITEM2: U; vITEM3: U; vITEM4: U; vITEM5: U;
                  vITEM6: U; vROW: U
               . holds(vREL, vITEM1, vITEM2, vITEM3, vITEM4, vITEM5, vITEM6,
                       a_At_R_O_W))
. subclass(List, Relation)
%{List
"Every &%List is a particular ordered n-tuple of 
items.  Generally speaking, &%Lists are created by means of the &%ListFn 
&%Function, which takes any number of items as arguments and returns a 
&%List with the items in the same order.  Anything, including other 
&%Lists, may be an item in a &%List.  Note too that &%Lists are 
extensional - two lists that have the same items in the same order are 
identical.  Note too that a &%List may contain no items.  In that case, 
the &%List is the &%NullList."}%
. instance(vLIST, List) =>
      exists vNUMBER1: U
          . exists vITEM1: U
                . not ListOrderFn(vLIST, vNUMBER1) = vITEM1
                  /\ (forall vNUMBER2: U
                          . instance(vNUMBER2, PositiveInteger)
                            /\ lessThan(vNUMBER2, vNUMBER1) =>
                                exists vITEM2: U
                                    . ListOrderFn(vLIST, vNUMBER2) = vITEM2)
. subclass(UniqueList, List)
%{UniqueList
"A &%List in which no item appears more than once, 
i.e. a &%List for which there are no distinct numbers ?NUMBER1 and ?NUMBER2 
such that (&%ListOrderFn ?LIST ?NUMBER1) and (&%ListOrderFn ?LIST ?NUMBER2) 
return the same value."}%
. instance(vLIST, UniqueList) =>
      forall vNUMBER1: U; vNUMBER2: U
          . ListOrderFn(vLIST, vNUMBER1) = ListOrderFn(vLIST, vNUMBER2) =>
                vNUMBER1 = vNUMBER2
. instance(NullList, List)
%{NullList
"The &%List that has no items.  The uniqueness of 
&%NullList follows from the extensionality of &%Lists, i.e. the fact that 
two &%Lists with the same items in the same order are identical."}%
. vLIST = NullList <=>
      instance(vLIST, List)
      /\ not (exists vITEM: U . inList(vITEM, vLIST))
. instance(ListFn, Function)
. instance(ListFn, VariableArityRelation)
. range(ListFn, List)
%{ListFn
"A &%Function that takes any number of arguments and 
returns the &%List containing those arguments in exactly the same order."}%
. exhaustiveDecomposition(vCLASS, a_At_R_O_W) =>
      forall vOBJ: U
          . instance(vOBJ, vCLASS) =>
                exists vITEM: U
                    . inList(vITEM, ListFn(a_At_R_O_W)) /\ instance(vOBJ, vITEM)
. disjointDecomposition(vCLASS, a_At_R_O_W) =>
      forall vITEM: U
          . inList(vITEM, ListFn(a_At_R_O_W)) => subclass(vITEM, vCLASS)
. disjointDecomposition(vCLASS, a_At_R_O_W) =>
      forall vITEM1: U; vITEM2: U
          . inList(vITEM1, ListFn(a_At_R_O_W))
            /\ inList(vITEM2, ListFn(a_At_R_O_W))
            /\ not vITEM1 = vITEM2 =>
                disjoint(vITEM1, vITEM2)
. instance(ListOrderFn, BinaryFunction)
. instance(ListOrderFn, PartialValuedRelation)
. domain(ListOrderFn, a_1, List)
. domain(ListOrderFn, a_2, PositiveInteger)
. range(ListOrderFn, Entity)
%{ListOrderFn
"(&%ListOrderFn ?LIST ?NUMBER) denotes the item 
that is in the ?NUMBER position in the &%List ?LIST.  For example, 
(&%ListOrderFn (&%ListFn &%Monday &%Tuesday &%Wednesday) 2) would return the 
value &%Tuesday."}%
. instance(vLIST1, List)
  /\ instance(vLIST2, List)
  /\ (forall vNUMBER: U
          . ListOrderFn(vLIST1, vNUMBER) = ListOrderFn(vLIST2, vNUMBER)) =>
      vLIST1 = vLIST2
. domain(vREL, vNUMBER, vCLASS) /\ holds(vREL, a_At_R_O_W) =>
      instance(ListOrderFn(ListFn(a_At_R_O_W), vNUMBER), vCLASS)
. domainSubclass(vREL, vNUMBER, vCLASS)
  /\ holds(vREL, a_At_R_O_W) =>
      subclass(ListOrderFn(ListFn(a_At_R_O_W), vNUMBER), vCLASS)
. instance(ListLengthFn, UnaryFunction)
. instance(ListLengthFn, TotalValuedRelation)
. domain(ListLengthFn, a_1, List)
. range(ListLengthFn, NonnegativeInteger)
%{ListLengthFn
"A &%Function that takes a &%List as its sole 
argument and returns the number of items in the &%List.  For example, 
(&%ListLengthFn (&%ListFn &%Monday &%Tuesday &%Wednesday)) would return the 
value 3."}%
. ListLengthFn(vLIST) = vNUMBER1
  /\ instance(vLIST, List)
  /\ instance(vNUMBER1, PositiveInteger) =>
      forall vNUMBER2: U
          . (exists vITEM: U
                 . ListOrderFn(vLIST, vNUMBER2) = vITEM
                   /\ inList(vITEM, vLIST)) <=>
                lessThanOrEqualTo(vNUMBER2, vNUMBER1)
. ListLengthFn(ListFn(a_At_R_O_W, vITEM)) =
      SuccessorFn(ListLengthFn(ListFn(a_At_R_O_W)))
. ListOrderFn(ListFn(a_At_R_O_W, vITEM),
              ListLengthFn(ListFn(a_At_R_O_W, vITEM))) =
      vITEM
. valence(vREL, vNUMBER) =>
      forall vROW: U
          . holds(vREL, a_At_R_O_W) =>
                ListLengthFn(ListFn(a_At_R_O_W)) = vNUMBER
. ListLengthFn(vLIST1) = vNUMBER
  /\ instance(vLIST, List)
  /\ instance(vNUMBER1, PositiveInteger) =>
      exists vLIST2: U; vITEM: U
          . initialList(vLIST1, vLIST2)
            /\ SuccessorFn(vNUMBER) = ListLengthFn(vLIST2)
            /\ ListOrderFn(vLIST2, SuccessorFn(vNUMBER)) = vITEM
. instance(ListConcatenateFn, BinaryFunction)
. instance(ListConcatenateFn, TotalValuedRelation)
. domain(ListConcatenateFn, a_1, List)
. domain(ListConcatenateFn, a_2, List)
. range(ListConcatenateFn, List)
%{ListConcatenateFn
"A &%Function that returns the concatenation 
of the two &%Lists that are given as arguments.  For example, the value of 
(&%ListConcatenateFn (&%ListFn &%Monday &%Tuesday) (&%ListFn &%Wednesday 
&%Thursday)) would be (&%ListFn &%Monday &%Tuesday &%Wednesday &%Thursday)."}%
. vLIST3 = ListConcatenateFn(vLIST1, vLIST2) <=>
      (forall vNUMBER1: U; vNUMBER2: U
           . lessThanOrEqualTo(vNUMBER1, ListLengthFn(vLIST1))
             /\ lessThanOrEqualTo(vNUMBER2, ListLengthFn(vLIST2))
             /\ instance(vNUMBER1, PositiveInteger)
             /\ instance(vNUMBER2, PositiveInteger) =>
                 ListOrderFn(vLIST3, vNUMBER1) = ListOrderFn(vLIST1, vNUMBER1)
                 /\ ListOrderFn(vLIST3,
                                AdditionFn(ListLengthFn(vLIST1), vNUMBER2)) =
                        ListOrderFn(vLIST2, vNUMBER2))
. instance(inList, BinaryPredicate)
. instance(inList, IrreflexiveRelation)
. instance(inList, AsymmetricRelation)
. domain(inList, a_1, Entity)
. domain(inList, a_2, List)
%{inList
"The analog of &%element and &%instance for &%Lists.  
(&%inList ?OBJ ?LIST) means that ?OBJ is in the &%List ?LIST.  For example, 
(&%inList &%Tuesday (&%ListFn &%Monday &%Tuesday &%Wednesday)) would be true."}%
. inList(vITEM, vLIST) =>
      exists vNUMBER: U . ListOrderFn(vLIST, vNUMBER) = vITEM
. instance(subList, BinaryPredicate)
. instance(subList, PartialOrderingRelation)
. domain(subList, a_1, List)
. domain(subList, a_2, List)
%{subList
"(&%subList ?LIST1 ?LIST2) means that ?LIST1 is a 
sublist of ?LIST2, i.e. every element of ?LIST1 is an element of ?LIST2 and 
the elements that are common to both &%Lists have the same order in both 
&%Lists."}%
. subList(vLIST1, vLIST2) =>
      forall vITEM: U . inList(vITEM, vLIST1) => inList(vITEM, vLIST2)
. subList(vLIST1, vLIST2) =>
      exists vNUMBER3: U
          . forall vITEM: U
                . inList(vITEM, vLIST1) =>
                      exists vNUMBER1: U; vNUMBER2: U
                          . ListOrderFn(vLIST1, vNUMBER1) = vITEM
                            /\ ListOrderFn(vLIST2, vNUMBER2) = vITEM
                            /\ vNUMBER2 = AdditionFn(vNUMBER1, vNUMBER3)
. instance(initialList, BinaryPredicate)
. instance(initialList, PartialOrderingRelation)
. subrelation(initialList, subList)
%{initialList
"(&%initialList ?LIST1 ?LIST2) means that ?LIST1 
is a &%subList of ?LIST2 and (&%ListOrderFn ?LIST1 ?NUMBER) returns the same 
value as (&%ListOrderFn ?LIST2 ?NUMBER) for all of the values of ?NUMBER over 
which (&%ListOrderFn ?LIST1 ?NUMBER) is defined."}%
. initialList(vLIST1, vLIST2) =>
      forall vNUMBER1: U; vNUMBER2: U
          . ListLengthFn(vLIST1) = vNUMBER1
            /\ lessThanOrEqualTo(vNUMBER2, vNUMBER1) =>
                ListOrderFn(vLIST1, vNUMBER2) = ListOrderFn(vLIST2, vNUMBER2)
. initialList(ListFn(a_At_R_O_W), ListFn(a_At_R_O_W, vITEM))
. instance(identicalListItems, BinaryPredicate)
. instance(identicalListItems, EquivalenceRelation)
. domain(identicalListItems, a_1, List)
. domain(identicalListItems, a_2, List)
%{identicalListItems
"(&%identicalListItems ?LIST1 ?LIST2) means that ?LIST1 and ?LIST2 have exactly the same items in their respective lists.  Although ?LIST1 and ?LIST2 are required to share exactly the same items, they may order these items differently."}%
. identicalListItems(vLIST1, vLIST2) =>
      (inList(vITEM, vLIST1) <=> inList(vITEM, vLIST2))
. subclass(Predicate, Relation)
. instance(Predicate, InheritableRelation)
%{Predicate
"A &%Predicate is a sentence-forming &%Relation.  
Each tuple in the &%Relation is a finite, ordered sequence of objects.  
The fact that a particular tuple is an element of a &%Predicate is denoted 
by '(*predicate* arg_1 arg_2 .. arg_n)', where the arg_i are the 
objects so related.  In the case of &%BinaryPredicates, the fact can
be read as `arg_1 is *predicate* arg_2' or `a *predicate* of
arg_1 is arg_2'."}%
. subclass(Function, SingleValuedRelation)
. instance(Function, InheritableRelation)
%{Function
"A &%Function is a term-forming &%Relation that 
maps from a n-tuple of arguments to a range and that associates this 
n-tuple with at most one range element.  Note that the range is a &%SetOrClass, 
and each element of the range is an instance of the &%SetOrClass."}%
. subclass(UnaryFunction, Function)
. subclass(UnaryFunction, BinaryRelation)
. instance(UnaryFunction, InheritableRelation)
%{UnaryFunction
"The &%Class of &%Functions that require a 
single argument."}%
. instance(vFUNCTION, UnaryFunction) => valence(vFUNCTION, a_1)
. subclass(OneToOneFunction, UnaryFunction)
%{OneToOneFunction
"The &%Class of &%UnaryFunctions which 
are one to one.  A function F is one to one just in case for all X, Y in the 
domain of F, if X is not identical to Y, then F(X) is not identical to F(Y)."}%
. instance(vFUN, OneToOneFunction) =>
      forall vARG1: U; vARG2: U
          . domain(vFUN, a_1, vCLASS)
            /\ instance(vARG1, vCLASS)
            /\ instance(vARG2, vCLASS)
            /\ not vARG1 = vARG2 =>
                not AssignmentFn(vFUN, vARG1) = AssignmentFn(vFUN, vARG2)
. subclass(SequenceFunction, OneToOneFunction)
%{SequenceFunction
"The &%Class of &%OneToOneFunctions whose range 
is a subclass of the &%PositiveIntegers."}%
. instance(vSEQ, SequenceFunction) /\ range(vSEQ, vCLASS) =>
      subclass(vCLASS, Integer)
. subclass(BinaryFunction, Function)
. subclass(BinaryFunction, TernaryRelation)
. instance(BinaryFunction, InheritableRelation)
%{BinaryFunction
"The &%Class of &%Functions that require 
two arguments."}%
. instance(vFUNCTION, BinaryFunction) => valence(vFUNCTION, a_2)
. subclass(AssociativeFunction, BinaryFunction)
%{AssociativeFunction
"A &%BinaryFunction is associative if 
bracketing has no effect on the value returned by the &%Function.  More 
precisely, a &%Function ?FUNCTION is associative just in case 
(?FUNCTION ?INST1 (?FUNCTION ?INST2 ?INST3)) is equal to 
(?FUNCTION (?FUNCTION ?INST1 ?INST2) ?INST3), for all ?INST1, ?INST2, 
and ?INST3."}%
. instance(vFUNCTION, AssociativeFunction) =>
      forall vINST1: U; vINST2: U; vINST3: U
          . domain(vFUNCTION, a_1, vCLASS)
            /\ instance(vINST1, vCLASS)
            /\ instance(vINST2, vCLASS)
            /\ instance(vINST3, vCLASS) =>
                AssignmentFn(vFUNCTION, vINST1,
                             AssignmentFn(vFUNCTION, vINST2, vINST3)) =
                    AssignmentFn(vFUNCTION,
                                 AssignmentFn(vFUNCTION, vINST1, vINST2),
                                 vINST3)
. subclass(CommutativeFunction, BinaryFunction)
%{CommutativeFunction
"A &%BinaryFunction is commutative if 
the ordering of the arguments of the function has no effect on the value 
returned by the function.  More precisely, a function ?FUNCTION is 
commutative just in case (?FUNCTION ?INST1 ?INST2) is equal to (?FUNCTION 
?INST2 ?INST1), for all ?INST1 and ?INST2."}%
. instance(vFUNCTION, CommutativeFunction) =>
      forall vINST1: U; vINST2: U
          . domain(vFUNCTION, a_1, vCLASS)
            /\ instance(vINST1, vCLASS)
            /\ instance(vINST2, vCLASS) =>
                AssignmentFn(vFUNCTION, vINST1, vINST2) =
                    AssignmentFn(vFUNCTION, vINST2, vINST1)
. subclass(TernaryFunction, Function)
. subclass(TernaryFunction, QuaternaryRelation)
. instance(TernaryFunction, InheritableRelation)
%{TernaryFunction
"The &%Class of &%Functions that require 
exactly three arguments."}%
. instance(vFUNCTION, TernaryFunction) => valence(vFUNCTION, a_3)
. subclass(QuaternaryFunction, Function)
. subclass(QuaternaryFunction, QuintaryRelation)
. instance(QuaternaryFunction, InheritableRelation)
%{QuaternaryFunction
"The &%Class of &%Functions that require 
exactly four arguments."}%
. instance(vFUNCTION, QuaternaryFunction) =>
      valence(vFUNCTION, a_4)
. subclass(ContinuousFunction, Function)
%{ContinuousFunction
"&%Functions which are continuous.  
This concept is taken as primitive until representations for limits 
are devised."}%
. subclass(BinaryPredicate, Predicate)
. subclass(BinaryPredicate, BinaryRelation)
. instance(BinaryPredicate, InheritableRelation)
%{BinaryPredicate
"A &%Predicate relating two items - its 
valence is two."}%
. instance(vREL, BinaryPredicate) => valence(vREL, a_2)
. subclass(TernaryPredicate, Predicate)
. subclass(TernaryPredicate, TernaryRelation)
. instance(TernaryPredicate, InheritableRelation)
%{TernaryPredicate
"The &%Class of &%Predicates that require 
exactly three arguments."}%
. instance(vREL, TernaryPredicate) => valence(vREL, a_3)
. subclass(QuaternaryPredicate, Predicate)
. subclass(QuaternaryPredicate, QuaternaryRelation)
. instance(QuaternaryPredicate, InheritableRelation)
%{QuaternaryPredicate
"The &%Class of &%Predicates that 
require four arguments."}%
. instance(vREL, QuaternaryPredicate) => valence(vREL, a_4)
. subclass(QuintaryPredicate, Predicate)
. subclass(QuintaryPredicate, QuintaryRelation)
. instance(QuintaryPredicate, InheritableRelation)
%{QuintaryPredicate
"The &%Class of &%Predicates that 
require five arguments."}%
. instance(vREL, QuintaryPredicate) => valence(vREL, a_5)
. subclass(VariableArityRelation, Relation)
%{VariableArityRelation
"The &%Class of &%Relations that 
do not have a fixed number of arguments."}%
. instance(vREL, VariableArityRelation) =>
      not (exists vINT: U . valence(vREL, vINT))
. subclass(RelationExtendedToQuantities, Relation)
. instance(RelationExtendedToQuantities, InheritableRelation)
%{RelationExtendedToQuantities
"A 
&%RelationExtendedToQuantities is a &%Relation that, when it is true on 
a sequence of arguments that are &%RealNumbers, it is also true on a 
sequence of &%ConstantQuantites with those magnitudes in some unit of 
measure.  For example, the &%lessThan relation is extended to quantities.  
This means that for all pairs of quantities ?QUANTITY1 and ?QUANTITY2, 
(lessThan ?QUANTITY1 ?QUANTITY2) if and only if, for some ?NUMBER1, 
?NUMBER2, and ?UNIT, ?QUANTITY1 = (MeasureFn ?NUMBER1 ?UNIT), 
?QUANTITY2 = (MeasureFn ?NUMBER2 ?UNIT), and (lessThan ?NUMBER1 ?NUMBER2), 
for all units ?UNIT on which ?QUANTITY1 and ?QUANTITY2 can be measured.  
Note that, when a &%RelationExtendedToQuantities is extended from 
&%RealNumbers to &%ConstantQuantities, the &%ConstantQuantities must be 
measured along the same physical dimension."}%
. subclass(LogicalOperator, Predicate)
%{LogicalOperator
"This &%Class comprises all 
of the logical operators (viz. 'and', 'or', 'not', '=>', and '<=>')."}%
. subclass(Proposition, Abstract)
%{Proposition
"&%Propositions are &%Abstract entities that 
express a complete thought or a set of such thoughts.  As an example, 
the formula '(instance Yojo Cat)' expresses the &%Proposition that the 
entity named Yojo is an element of the &%Class of Cats.  Note that 
propositions are not restricted to the content expressed by individual 
sentences of a &%Language.  They may encompass the content expressed by 
theories, books, and even whole libraries.  It is important to distinguish 
&%Propositions from the &%ContentBearingObjects that express them.  A 
&%Proposition is a piece of information, e.g. that the cat is on the mat, 
but a &%ContentBearingObject is an &%Object that represents this information.  
A &%Proposition is an abstraction that may have multiple representations: 
strings, sounds, icons, etc.  For example, the &%Proposition that the cat is 
on the mat is represented here as a string of graphical characters displayed 
on a monitor and/or printed on paper, but it can be represented by a sequence 
of sounds or by some non-latin alphabet or by some cryptographic form"}%
. instance(closedOn, BinaryPredicate)
. instance(closedOn, AsymmetricRelation)
. domain(closedOn, a_1, Function)
. domain(closedOn, a_2, SetOrClass)
%{closedOn
"A &%BinaryFunction is closed on a &%SetOrClass 
if it is defined for all instances of the &%SetOrClass and its value is 
always an instance of the &%SetOrClass."}%
. closedOn(vFUNCTION, vCLASS)
  /\ instance(vFUNCTION, UnaryFunction) =>
      forall vINST: U
          . instance(vINST, vCLASS) =>
                instance(AssignmentFn(vFUNCTION, vINST), vCLASS)
. closedOn(vFUNCTION, vCLASS)
  /\ instance(vFUNCTION, BinaryFunction) =>
      forall vINST1: U; vINST2: U
          . instance(vINST1, vCLASS) /\ instance(vINST2, vCLASS) =>
                instance(AssignmentFn(vFUNCTION, vINST1, vINST2), vCLASS)
. instance(reflexiveOn, BinaryPredicate)
. instance(reflexiveOn, AsymmetricRelation)
. domain(reflexiveOn, a_1, BinaryRelation)
. domain(reflexiveOn, a_2, SetOrClass)
%{reflexiveOn
"A &%BinaryRelation is reflexive on a 
&%SetOrClass only if every instance of the &%SetOrClass bears the relation 
to itself."}%
. reflexiveOn(vRELATION, vCLASS) =>
      forall vINST: U
          . instance(vINST, vCLASS) => holds(vRELATION, vINST, vINST)
. instance(irreflexiveOn, BinaryPredicate)
. instance(irreflexiveOn, AsymmetricRelation)
. domain(irreflexiveOn, a_1, BinaryRelation)
. domain(irreflexiveOn, a_2, SetOrClass)
%{irreflexiveOn
"A &%BinaryRelation is irreflexive on a 
&%SetOrClass only if no instance of the &%SetOrClass bears the relation to 
itself."}%
. irreflexiveOn(vRELATION, vCLASS) =>
      forall vINST: U
          . instance(vINST, vCLASS) => not holds(vRELATION, vINST, vINST)
. instance(partialOrderingOn, BinaryPredicate)
. instance(partialOrderingOn, AsymmetricRelation)
. domain(partialOrderingOn, a_1, BinaryRelation)
. domain(partialOrderingOn, a_2, SetOrClass)
%{partialOrderingOn
"A &%BinaryRelation is a partial 
ordering on a &%SetOrClass only if the relation is &%reflexiveOn the 
&%SetOrClass, and it is both an &%AntisymmetricRelation, and a 
&%TransitiveRelation."}%
. partialOrderingOn(vRELATION, vCLASS) =>
      reflexiveOn(vRELATION, vCLASS)
      /\ instance(vRELATION, TransitiveRelation)
      /\ instance(vRELATION, AntisymmetricRelation)
. instance(totalOrderingOn, BinaryPredicate)
. instance(totalOrderingOn, AsymmetricRelation)
. domain(totalOrderingOn, a_1, BinaryRelation)
. domain(totalOrderingOn, a_2, SetOrClass)
%{totalOrderingOn
"A &%BinaryRelation ?REL is a total 
ordering on a &%SetOrClass only if it is a partial ordering for which either 
(?REL ?INST1 ?INST2) or (?REL ?INST2 ?INST1) for every ?INST1 and ?INST2 
in the &%SetOrClass."}%
. totalOrderingOn(vRELATION, vCLASS) <=>
      partialOrderingOn(vRELATION, vCLASS)
      /\ trichotomizingOn(vRELATION, vCLASS)
. instance(trichotomizingOn, BinaryPredicate)
. instance(trichotomizingOn, AsymmetricRelation)
. domain(trichotomizingOn, a_1, BinaryRelation)
. domain(trichotomizingOn, a_2, SetOrClass)
%{trichotomizingOn
"A &%BinaryRelation ?REL is 
trichotomizing on a &%SetOrClass only if, for all instances ?INST1 and ?INST2 
of the &%SetOrClass, at least one of the following holds:  (?REL ?INST1 ?INST2),
(?REL ?INST2 ?INST1) or (equal ?INST1 ?INST2)."}%
. trichotomizingOn(vRELATION, vCLASS) =>
      forall vINST1: U; vINST2: U
          . instance(vINST1, vCLASS) /\ instance(vINST2, vCLASS) =>
                holds(vRELATION, vINST1, vINST2)
                \/ holds(vRELATION, vINST2, vINST1)
                \/ vINST1 = vINST2
. instance(equivalenceRelationOn, BinaryPredicate)
. instance(equivalenceRelationOn, AsymmetricRelation)
. domain(equivalenceRelationOn, a_1, BinaryRelation)
. domain(equivalenceRelationOn, a_2, SetOrClass)
%{equivalenceRelationOn
"A &%BinaryRelation is an 
&%equivalenceRelationOn a &%SetOrClass only if the relation is &%reflexiveOn 
the &%SetOrClass and it is both a &%TransitiveRelation and a 
&%SymmetricRelation."}%
. equivalenceRelationOn(vRELATION, vCLASS) =>
      instance(vRELATION, TransitiveRelation)
      /\ instance(vRELATION, SymmetricRelation)
      /\ reflexiveOn(vRELATION, vCLASS)
. instance(distributes, BinaryPredicate)
. instance(distributes, BinaryRelation)
. domain(distributes, a_1, BinaryFunction)
. domain(distributes, a_2, BinaryFunction)
%{distributes
"A &%BinaryFunction ?FUNCTION1 is 
distributive over another &%BinaryFunction ?FUNCTION2 just in case 
(?FUNCTION1 ?INST1 (?FUNCTION2 ?INST2 ?INST3)) is equal to 
(?FUNCTION2 (?FUNCTION1 ?INST1 ?INST2) (?FUNCTION1 ?INST1 ?INST3)), 
for all ?INST1, ?INST2, and ?INST3."}%
. distributes(vFUNCTION1, vFUNCTION2) =>
      forall vINST1: U; vINST2: U; vINST3: U
          . domain(vFUNCTION1, a_1, vCLASS1)
            /\ instance(vINST1, vCLASS1)
            /\ instance(vINST2, vCLASS1)
            /\ instance(vINST3, vCLASS1)
            /\ domain(vFUNCTION2, a_1, vCLASS2)
            /\ instance(vINST1, vCLASS2)
            /\ instance(vINST2, vCLASS2)
            /\ instance(vINST3, vCLASS2) =>
                AssignmentFn(vFUNCTION1, vINST1,
                             AssignmentFn(vFUNCTION2, vINST2, vINST3)) =
                    AssignmentFn(vFUNCTION2,
                                 AssignmentFn(vFUNCTION1, vINST1, vINST2),
                                 AssignmentFn(vFUNCTION1, vINST1, vINST3))
. instance(causes, BinaryPredicate)
. instance(causes, AsymmetricRelation)
. domain(causes, a_1, Process)
. domain(causes, a_2, Process)
. relatedInternalConcept(causes, causesSubclass)
%{causes
"The causation relation between instances of &%Process.  
(&%causes ?PROCESS1 ?PROCESS2) means that the instance of &%Process ?PROCESS1 
brings about the instance of &%Process ?PROCESS2."}%
. instance(vPROC1, Process) =>
      exists vPROC2: U . causes(vPROC2, vPROC1)
. instance(causesSubclass, BinaryPredicate)
. instance(causesSubclass, AsymmetricRelation)
. domainSubclass(causesSubclass, a_1, Process)
. domainSubclass(causesSubclass, a_2, Process)
%{causesSubclass
"The causation relation between subclasses of &%Process.  
(&%causesSubclass ?PROCESS1 ?PROCESS2) means that the subclass of &%Process ?PROCESS1 
brings about the subclass of &%Process ?PROCESS2, e.g. (&%causesSubclass &%Killing 
&%Death)."}%
. causesSubclass(vPROC1, vPROC2) =>
      forall vINST2: U
          . instance(vINST2, vPROC2) =>
                exists vINST1: U
                    . instance(vINST1, vPROC1) /\ causes(vINST1, vINST2)
. instance(copy, BinaryPredicate)
. instance(copy, EquivalenceRelation)
. domain(copy, a_1, Object)
. domain(copy, a_2, Object)
%{copy
"relates an &%Object to an exact copy of the 
&%Object, where an exact copy is indistinguishable from the original 
with regard to every property except (possibly) spatial and/or temporal 
location."}%
. copy(vOBJ1, vOBJ2) =>
      forall vATTR: U
          . attribute(vOBJ1, vATTR) => attribute(vOBJ2, vATTR)
. instance(time, BinaryPredicate)
. instance(time, TemporalRelation)
. instance(time, AsymmetricRelation)
. domain(time, a_1, Physical)
. domain(time, a_2, TimePosition)
. relatedInternalConcept(time, located)
. relatedInternalConcept(time, holdsDuring)
%{time
"This relation holds between an instance of 
&%Physical and an instance of &%TimePosition just in case the temporal 
lifespan of the former includes the latter.  In other words, (&%time
?THING ?TIME) means that ?THING existed or occurred at ?TIME.  Note 
that &%time does for instances of &%Physical what &%holdsDuring does 
for instances of &%Formula.  The constants &%located and &%time are 
the basic spatial and temporal predicates, respectively."}%
. instance(holdsDuring, BinaryPredicate)
. instance(holdsDuring, AsymmetricRelation)
. domain(holdsDuring, a_1, TimePosition)
. domain(holdsDuring, a_2, Formula)
%{holdsDuring
"(&%holdsDuring ?TIME ?FORMULA) means that the 
proposition denoted by ?FORMULA is true in the time frame ?TIME.  Note 
that this implies that ?FORMULA is true at every &%TimePoint which is a 
&%temporalPart of ?TIME."}%
. holdsDuring(vTIME, vSITUATION1)
  /\ entails(vSITUATION1, vSITUATION2) =>
      holdsDuring(vTIME, vSITUATION2)
. holdsDuring(vTIME, a_n_o_t(vSITUATION)) =>
      not holdsDuring(vTIME, vSITUATION)
. instance(capability, TernaryPredicate)
. domainSubclass(capability, a_1, Process)
. domain(capability, a_2, CaseRole)
. domain(capability, a_3, Object)
%{capability
"(&%capability ?PROCESS ?ROLE ?OBJ) means 
that ?OBJ has the ability to play the role of ?ROLE in &%Processes of 
type ?PROCESS."}%
. instance(vROLE, CaseRole)
  /\ holds(vROLE, vARG1, vARG2)
  /\ instance(vARG1, vPROC)
  /\ subclass(vPROC, Process) =>
      capability(vPROC, vROLE, vARG2)
. instance(exploits, BinaryPredicate)
. instance(exploits, AsymmetricRelation)
. domain(exploits, a_1, Object)
. domain(exploits, a_2, Agent)
%{exploits
"(&%exploits ?OBJ ?AGENT) means that ?OBJ is used 
by ?AGENT as a &%resource in an unspecified instance of &%Process.  This 
&%Predicate, as its corresponding axiom indicates, is a composition of the 
relations &%agent and &%resource."}%
. exploits(vOBJ, vAGENT) =>
      exists vPROCESS: U
          . agent(vPROCESS, vAGENT) /\ resource(vPROCESS, vOBJ)
. instance(hasPurpose, BinaryPredicate)
. instance(hasPurpose, AsymmetricRelation)
. domain(hasPurpose, a_1, Physical)
. domain(hasPurpose, a_2, Formula)
%{hasPurpose
"This &%Predicate expresses the concept of a 
conventional goal, i.e. a goal with a neutralized agent's intention.  
Accordingly, (&%hasPurpose ?THING ?FORMULA) means that the instance of 
&%Physical ?THING has, as its purpose, the &%Proposition expressed by 
?FORMULA.  Note that there is an important difference in meaning between 
the &%Predicates &%hasPurpose and &%result.  Although the second argument 
of the latter can satisfy the second argument of the former, 
a conventional goal is an expected and desired outcome, while a result 
may be neither expected nor desired.  For example, a machine process may 
have outcomes but no goals, aimless wandering may have an outcome but no 
goal; a learning process may have goals with no outcomes, and so on."}%
. instance(hasPurposeForAgent, TernaryPredicate)
. domain(hasPurposeForAgent, a_1, Physical)
. domain(hasPurposeForAgent, a_2, Formula)
. domain(hasPurposeForAgent, a_3, CognitiveAgent)
%{hasPurposeForAgent
"Expresses a cognitive attitude of an 
agent with respect to a particular instance of Physical.  More precisely, 
(&%hasPurposeForAgent ?THING ?FORMULA ?AGENT) means that the purpose of 
?THING for ?AGENT is the proposition expressed by ?FORMULA.  Very complex 
issues are involved here.  In particular, the rules of inference of the 
first order predicate calculus are not truth-preserving for the second 
argument position of this &%Predicate."}%
. hasPurpose(vTHING, vPURPOSE) =>
      exists vAGENT: U . hasPurposeForAgent(vTHING, vPURPOSE, vAGENT)
. instance(hasSkill, BinaryPredicate)
. instance(hasSkill, AsymmetricRelation)
. domainSubclass(hasSkill, a_1, Process)
. domain(hasSkill, a_2, Agent)
%{hasSkill
"Similar to the &%capability &%Predicate 
with the additional restriction that the ability be practised/
demonstrated to some measurable degree."}%
. hasSkill(vPROC, vAGENT) => capability(vPROC, agent, vAGENT)
. instance(confersNorm, TernaryPredicate)
. domain(confersNorm, a_1, Entity)
. domain(confersNorm, a_2, Formula)
. domain(confersNorm, a_3, ObjectiveNorm)
%{confersNorm
"Expresses the relationship between a &%Formula, 
an &%Entity, and an &%ObjectiveNorm when the &%Entity brings it about that 
the &%Formula has the &%ObjectiveNorm."}%
. holdsDuring(vTIME, confersNorm(vENTITY, vFORMULA, vNORM)) =>
      holdsDuring(ImmediatePastFn(vTIME),
                  a_n_o_t(modalAttribute(vFORMULA, vNORM)))
      /\ holdsDuring(ImmediateFutureFn(vTIME),
                     modalAttribute(vFORMULA, vNORM))
. instance(deprivesNorm, TernaryPredicate)
. disjointRelation(deprivesNorm, confersNorm)
. domain(deprivesNorm, a_1, Entity)
. domain(deprivesNorm, a_2, Formula)
. domain(deprivesNorm, a_3, ObjectiveNorm)
%{deprivesNorm
"Expresses the relationship between an 
&%Entity, a &%Formula, and an &%ObjectiveNorm when the &%Entity 
brings it about that the &%Formula does not have the &%ObjectiveNorm."}%
. holdsDuring(vTIME, deprivesNorm(vENTITY, vFORMULA, vNORM)) =>
      holdsDuring(ImmediatePastFn(vTIME),
                  modalAttribute(vFORMULA, vNORM))
      /\ holdsDuring(ImmediateFutureFn(vTIME),
                     a_n_o_t(modalAttribute(vFORMULA, vNORM)))
. instance(partlyLocated, SpatialRelation)
. instance(partlyLocated, AntisymmetricRelation)
. instance(partlyLocated, BinaryPredicate)
. domain(partlyLocated, a_1, Physical)
. domain(partlyLocated, a_2, Object)
%{partlyLocated
"(&%partlyLocated ?THING ?OBJ) means that the 
instance of &%Physical ?THING is at least partially located at ?OBJ.  For 
example, Istanbul is partly located in &%Asia and partly located in &%Europe.  
Note that &%partlyLocated is the most basic localization relation:  &%located 
is an immediate &%subrelation of &%partlyLocated and &%exactlyLocated is 
an immediate &%subrelation of &%located."}%
. instance(vOBJ1, Object) /\ partlyLocated(vOBJ1, vOBJ2) =>
      overlapsSpatially(vOBJ1, vOBJ2)
. instance(vOBJ1, Object) /\ partlyLocated(vOBJ1, vOBJ2) =>
      exists vSUB: U . part(vSUB, vOBJ1) /\ located(vSUB, vOBJ2)
. instance(located, AntisymmetricRelation)
. instance(located, TransitiveRelation)
. subrelation(located, partlyLocated)
%{located
"(&%located ?PHYS ?OBJ) means that ?PHYS is &%partlyLocated 
at ?OBJ, and there is no &%part or &%subProcess of ?PHYS that is not &%located at 
?OBJ."}%
. located(vOBJ1, vOBJ2) =>
      forall vSUB: U . part(vSUB, vOBJ1) => located(vSUB, vOBJ2)
. located(vPROCESS, vOBJ) =>
      forall vSUB: U . subProcess(vSUB, vPROCESS) => located(vSUB, vOBJ)
. subrelation(exactlyLocated, located)
%{exactlyLocated
"The actual, minimal location of an 
Object.  This is a subrelation of the more general &%Predicate 
&%located."}%
. exactlyLocated(vOBJ, vREGION) =>
      not (exists vOTHEROBJ: U
               . exactlyLocated(vOTHEROBJ, vREGION) /\ not vOTHEROBJ = vOBJ)
. instance(between, SpatialRelation)
. instance(between, TernaryPredicate)
. domain(between, a_1, Object)
. domain(between, a_2, Object)
. domain(between, a_3, Object)
%{between
"(between ?OBJ1 ?OBJ2 ?OBJ3) means that ?OBJ2 is 
spatially located between ?OBJ1 and ?OBJ3.  Note that this implies that 
?OBJ2 is directly between ?OBJ1 and ?OBJ3, i.e. the projections of ?OBJ1 
and ?OBJ3 overlap with ?OBJ2."}%
. instance(traverses, BinaryPredicate)
. instance(traverses, SpatialRelation)
. domain(traverses, a_1, Object)
. domain(traverses, a_2, Object)
%{traverses
"(&%traverses ?OBJ1 ?OBJ2) means that ?OBJ1 
crosses or extends across ?OBJ2.  Note that &%crosses and 
&%penetrates are subrelations of &%traverses."}%
. traverses(vOBJ1, vOBJ2) =>
      crosses(vOBJ1, vOBJ2) \/ penetrates(vOBJ1, vOBJ2)
. subrelation(crosses, traverses)
. instance(crosses, AsymmetricRelation)
. instance(crosses, TransitiveRelation)
. disjointRelation(crosses, connected)
%{crosses
"(crosses ?OBJ1 ?OBJ2) means that 
&%Object ?OBJ1 &%traverses Object ?OBJ2, without being &%connected 
to it."}%
. subrelation(penetrates, traverses)
. subrelation(penetrates, meetsSpatially)
. instance(penetrates, AsymmetricRelation)
. instance(penetrates, IntransitiveRelation)
%{penetrates
"(penetrates ?OBJ1 ?OBJ2) means that 
?OBJ1 is &%connected to ?OBJ2 along at least one whole dimension (length, 
width or depth)."}%
. instance(WhereFn, BinaryFunction)
. instance(WhereFn, SpatialRelation)
. instance(WhereFn, TotalValuedRelation)
. domain(WhereFn, a_1, Physical)
. domain(WhereFn, a_2, TimePoint)
. range(WhereFn, Region)
. relatedInternalConcept(WhereFn, WhenFn)
%{WhereFn
"Maps an &%Object and a &%TimePoint at which the 
&%Object exists to the &%Region where the &%Object existed at that 
&%TimePoint."}%
. WhereFn(vTHING, vTIME) = vREGION <=>
      holdsDuring(vTIME, exactlyLocated(vTHING, vREGION))
. instance(possesses, BinaryPredicate)
. instance(possesses, AsymmetricRelation)
. domain(possesses, a_1, Agent)
. domain(possesses, a_2, Object)
%{possesses
"&%Relation that holds between an &%Agent and 
an &%Object when the &%Agent has ownership of the &%Object."}%
. possesses(vPERSON, vOBJ) =>
      modalAttribute(uses(vOBJ, vPERSON), Permission)
. instance(vTIME, TimePosition)
  /\ holdsDuring(vTIME, possesses(vAGENT1, vOBJ))
  /\ holdsDuring(vTIME, possesses(vAGENT2, vOBJ)) =>
      vAGENT1 = vAGENT2
. instance(PropertyFn, UnaryFunction)
. instance(PropertyFn, TotalValuedRelation)
. domain(PropertyFn, a_1, Agent)
. range(PropertyFn, Set)
%{PropertyFn
"A &%UnaryFunction that maps an &%Agent to the 
&%Set of &%Objects owned by the &%Agent."}%
. instance(vOBJ, PropertyFn(vPERSON)) <=> possesses(vPERSON, vOBJ)
. instance(precondition, BinaryPredicate)
. instance(precondition, AsymmetricRelation)
. instance(precondition, TransitiveRelation)
. domainSubclass(precondition, a_1, Process)
. domainSubclass(precondition, a_2, Process)
%{precondition
"A very general &%Predicate.  (&%precondition 
?PROC1 ?PROC2) means that an instance of ?PROC2 can exist only if an 
instance of ?PROC1 also exists."}%
. precondition(vPROC1, vPROC2) =>
      (exists vINST2: U . instance(vINST2, vPROC2)) =>
          exists vINST1: U . instance(vINST1, vPROC1)
. instance(inhibits, BinaryPredicate)
. instance(inhibits, IrreflexiveRelation)
. domainSubclass(inhibits, a_1, Process)
. domainSubclass(inhibits, a_2, Process)
%{inhibits
"A very general &%Predicate.  (&%inhibits 
?PROC1 ?PROC2) means that the &%Process ?PROC1 inhibits or hinders 
the occurrence of the &%Process ?PROC2.  For example, obstructing an 
object inhibits moving it.  Note that this is a relation between types 
of &%Processes, not between instances."}%
. inhibits(vPROC1, vPROC2) =>
      forall vTIME: U; vPLACE: U
          . decreasesLikelihood(holdsDuring(vTIME,
                                            True
                                                when exists vINST1: U
                                                         . instance(vINST1,
                                                                    vPROC1)
                                                           /\ located(vINST1,
                                                                      vPLACE)
                                                else False),
                                holdsDuring(vTIME,
                                            True
                                                when exists vINST2: U
                                                         . instance(vINST2,
                                                                    vPROC2)
                                                           /\ located(vINST2,
                                                                      vPLACE)
                                                else False))
. instance(prevents, BinaryPredicate)
. instance(prevents, IrreflexiveRelation)
. domainSubclass(prevents, a_1, Process)
. domainSubclass(prevents, a_2, Process)
. relatedInternalConcept(prevents, inhibits)
%{prevents
"A very general &%Predicate.  (&%prevents ?PROC1 
?PROC2) means that ?PROC1 prevents the occurrence of ?PROC2.  In other 
words, if ?PROC1 is occurring in a particular time and place, ?PROC2 
cannot occur at the same time and place.  For example, innoculating 
prevents contracting disease.  Note that this is a relation between types 
of &%Processes, not between instances."}%
. prevents(vPROC1, vPROC2) =>
      forall vTIME: U; vPLACE: U
          . holdsDuring(vTIME,
                        True
                            when exists vINST1: U
                                     . instance(vINST1, vPROC1)
                                       /\ located(vINST1, vPLACE)
                            else False) =>
                not holdsDuring(vTIME,
                                True
                                    when exists vINST2: U
                                             . instance(vINST2, vPROC2)
                                               /\ located(vINST2, vPLACE)
                                    else False)
. instance(refers, BinaryPredicate)
. domain(refers, a_1, Entity)
. domain(refers, a_2, Entity)
%{refers
"(&%refers ?OBJ1 ?OBJ2) means that ?OBJ1 
mentions or includes a reference to ?OBJ2. Note that &%refers is 
more general in meaning than &%represents, because presumably something 
can represent something else only if it refers to this other thing.  
For example, an article whose topic is a recent change in the price of 
oil may refer to many other things, e.g. the general state of the economy, 
the weather in California, the prospect of global warming, the options 
for alternative energy sources, the stock prices of various oil companies, 
etc."}%
. subrelation(names, refers)
. domain(names, a_1, SymbolicString)
%{names
"(&%names ?STRING ?ENTITY) means that the thing ?ENTITY 
has the &%SymbolicString ?STRING as its name.  Note that &%names and &%represents 
are the two immediate &%subrelations of &%refers.  The predicate &%names is used 
when the referring item is merely a tag without connotative content, while the 
predicate &%represents is used for referring items that have such content."}%
. subrelation(uniqueIdentifier, names)
. instance(uniqueIdentifier, SingleValuedRelation)
%{uniqueIdentifier
"The class of &%names that uniquely identify 
an instance of &%Entity.  Some examples of &%uniqueIdentifiers are the keys 
of tables in database applications and the ISBN (International Standard Book 
Number)."}%
. subrelation(represents, refers)
%{represents
"A very general semiotics &%Predicate.  
(&%represents ?THING ?ENTITY) means that ?THING in some way indicates, 
expresses, connotes, pictures, describes, etc. ?ENTITY.  The &%Predicates 
&%containsInformation and &%realization are subrelations of &%represents.  
Note that &%represents is a subrelation of &%refers, since something can 
represent something else only if it refers to this other thing.  See the 
documentation string for &%names."}%
. instance(representsForAgent, TernaryPredicate)
. domain(representsForAgent, a_1, Entity)
. domain(representsForAgent, a_2, Entity)
. domain(representsForAgent, a_3, Agent)
%{representsForAgent
"A very general predicate.  
(&%representsForAgent ?ENTITY1 ?ENTITY2 ?AGENT) means that the ?AGENT 
chooses to use ?ENTITY1 to 'stand for' ?ENTITY2."}%
. representsForAgent(vREP, vENTITY, vAGENT) =>
      represents(vREP, vENTITY)
. instance(representsInLanguage, TernaryPredicate)
. domain(representsInLanguage, a_1, LinguisticExpression)
. domain(representsInLanguage, a_2, Entity)
. domain(representsInLanguage, a_3, Language)
%{representsInLanguage
"A very general predicate.  
(&%representsInLanguage ?THING ?ENTITY ?LANGUAGE) means that the 
&%LinguisticExpression ?THING stands for ?ENTITY in the &%Language 
?LANGUAGE."}%
. representsInLanguage(vREP, vENTITY, vLANGUAGE) =>
      exists vAGENT: U . representsForAgent(vREP, vENTITY, vAGENT)
. subrelation(equivalentContentClass, subsumesContentClass)
. instance(equivalentContentClass, EquivalenceRelation)
. domainSubclass(equivalentContentClass, a_1, ContentBearingObject)
. domainSubclass(equivalentContentClass, a_2, ContentBearingObject)
%{equivalentContentClass
"A &%BinaryPredicate that relates two 
subclasses of &%ContentBearingObject.  (&%equivalentContentClass ?CLASS1 
?CLASS2) means that the content expressed by each instance of ?CLASS1 is 
also expressed by each instance of ?CLASS2, and vice versa.  An example 
would be the relationship between English and Russian editions of Agatha 
Christie's 'Murder on the Orient Express'.  Note that 
(&%equivalentContentClass ?CLASS1 ?CLASS2) implies (&%subsumesContentClass 
?CLASS1 ?CLASS2) and (&%subsumesContentClass ?CLASS2 ?CLASS1)."}%
. subsumesContentClass(vCLASS1, vCLASS2)
  /\ subsumesContentClass(vCLASS2, vCLASS1) <=>
      equivalentContentClass(vCLASS1, vCLASS2)
. instance(subsumesContentClass, BinaryPredicate)
. instance(subsumesContentClass, PartialOrderingRelation)
. domainSubclass(subsumesContentClass, a_1, ContentBearingObject)
. domainSubclass(subsumesContentClass, a_2, ContentBearingObject)
%{subsumesContentClass
"A &%BinaryPredicate that relates two 
subclasses of &%ContentBearingObject.  (&%subsumesContentClass ?CLASS1 
?CLASS2) means that the content expressed by each instance of ?CLASS2 is 
also expressed by each instance of ?CLASS1.  Examples include the 
relationship between a poem and one of its stanzas or between a book and 
one of its chapters.  Note that this is a relation between subclasses of 
&%ContentBearingObject, rather than instances.  If one wants to relate 
instances, the &%Predicate &%subsumesContentInstance can be used.  Note 
that &%subsumesContentClass is needed in many cases.  Consider, for 
example, the relation between the King James edition of the Bible and its 
Book of Genesis.  This relation holds for every copy of this edition and 
not just for a single instance."}%
. subsumesContentClass(vCLASS1, vCLASS2) =>
      forall vOBJ2: U; vINFO: U
          . instance(vOBJ2, vCLASS2) /\ containsInformation(vOBJ2, vINFO) =>
                exists vOBJ1: U
                    . instance(vOBJ1, vCLASS1)
                      /\ containsInformation(vOBJ1, vINFO)
. subrelation(equivalentContentInstance, subsumesContentInstance)
. instance(equivalentContentInstance, EquivalenceRelation)
. domain(equivalentContentInstance, a_1, ContentBearingObject)
. domain(equivalentContentInstance, a_2, ContentBearingObject)
. relatedInternalConcept(equivalentContentInstance,
                         equivalentContentClass)
%{equivalentContentInstance
"A &%BinaryPredicate relating two 
instances of &%ContentBearingObject.  (&%equivalentContentInstance 
?OBJ1 ?OBJ2) means that the content expressed by ?OBJ1 is identical to 
the content expressed by ?OBJ2.  An example would be the relationship 
between a handwritten draft of a letter to one's lawyer and a typed 
copy of the same letter.  Note that (&%equivalentContentInstance ?OBJ1 
?OBJ2) implies (&%subsumesContentInstance ?OBJ1 ?OBJ2) and 
(&%subsumesContentInstance ?OBJ2 ?OBJ2)."}%
. subsumesContentInstance(vOBJ1, vOBJ2)
  /\ subsumesContentInstance(vOBJ2, vOBJ1) <=>
      equivalentContentInstance(vOBJ1, vOBJ2)
. instance(subsumesContentInstance, BinaryPredicate)
. instance(subsumesContentInstance, PartialOrderingRelation)
. domain(subsumesContentInstance, a_1, ContentBearingObject)
. domain(subsumesContentInstance, a_2, ContentBearingObject)
. relatedInternalConcept(subsumesContentInstance,
                         subsumesContentClass)
%{subsumesContentInstance
"A &%BinaryPredicate relating two 
instances of &%ContentBearingObject.  (&%subsumesContentInstance ?OBJ1 ?OBJ2) 
means that the content expressed by ?OBJ2 is part of the content expressed 
by ?OBJ1.  An example is the relationship between a handwritten poem and 
one of its stanzas.  Note that this is a relation between instances, 
rather than &%Classes.  If one wants to assert a content relationship 
between &%Classes, e.g. between the version of an intellectual work and a 
part of that work, the relation &%subsumesContentClass should be used."}%
. subsumesContentInstance(vOBJ1, vOBJ2) =>
      forall vINFO: U
          . containsInformation(vOBJ2, vINFO) =>
                containsInformation(vOBJ1, vINFO)
. subrelation(realization, represents)
. instance(realization, AsymmetricRelation)
. domain(realization, a_1, Process)
. domain(realization, a_2, Proposition)
. relatedInternalConcept(realization, equivalentContentInstance)
. relatedInternalConcept(realization, containsInformation)
%{realization
"A subrelation of &%represents.  
(&%realization ?PROCESS ?PROP) means that ?PROCESS is a Process which 
expresses the content of ?PROP. Examples include a particular musical 
performance, which realizes the content of a musical score, or the 
reading of a poem."}%
. realization(vPROCESS, vPROP) =>
      exists vOBJ: U
          . instance(vOBJ, ContentBearingObject)
            /\ containsInformation(vOBJ, vPROP)
. instance(expressedInLanguage, BinaryPredicate)
. instance(expressedInLanguage, AsymmetricRelation)
. domain(expressedInLanguage, a_1, LinguisticExpression)
. domain(expressedInLanguage, a_2, Language)
%{expressedInLanguage
"(&%expressedInLanguage ?EXPRESS ?LANG) 
means that the &%LinguisticExpression ?EXPRESS is part of the &%Language 
?LANG."}%
. expressedInLanguage(vEXPRESS, vLANGUAGE) <=>
      (exists vPROP: U
           . representsInLanguage(vEXPRESS, vPROP, vLANGUAGE))
. instance(subProposition, BinaryPredicate)
. instance(subProposition, TransitiveRelation)
. instance(subProposition, IrreflexiveRelation)
. domain(subProposition, a_1, Proposition)
. domain(subProposition, a_2, Proposition)
%{subProposition
"(&%subProposition ?PROP1 ?PROP2) means that 
?PROP1 is a &%Proposition which is a proper part of the &%Proposition ?PROP2.  
In other words, &%subProposition is the analogue of &%properPart for chunks 
of abstract content."}%
. subProposition(vPROP1, vPROP2) =>
      forall vOBJ1: U; vOBJ2: U
          . containsInformation(vOBJ1, vPROP1)
            /\ containsInformation(vOBJ2, vPROP2) =>
                subsumesContentInstance(vOBJ2, vOBJ1)
. subrelation(subPlan, subProposition)
. instance(subPlan, TransitiveRelation)
. instance(subPlan, IrreflexiveRelation)
. domain(subPlan, a_1, Plan)
. domain(subPlan, a_2, Plan)
%{subPlan
"(&%subPlan ?PLAN1 ?PLAN2) means that ?PLAN1 
is a &%Plan which is a proper part of ?PLAN2.  This relation is generally 
used to relate a supporting &%Plan to the overall &%Plan in a particular 
context."}%
. instance(uses, BinaryPredicate)
. instance(uses, AsymmetricRelation)
. domain(uses, a_1, Object)
. domain(uses, a_2, Agent)
%{uses
"(&%uses ?OBJECT AGENT) means that ?OBJECT is used by 
?AGENT as an instrument in an unspecified &%Process.  This &%Predicate, 
as its corresponding axiom indicates, is a composition of the &%CaseRoles 
&%agent and &%instrument."}%
. uses(vOBJ, vAGENT) =>
      exists vPROC: U . agent(vPROC, vAGENT) /\ instrument(vPROC, vOBJ)
. instance(MultiplicationFn, BinaryFunction)
. instance(MultiplicationFn, AssociativeFunction)
. instance(MultiplicationFn, CommutativeFunction)
. instance(MultiplicationFn, RelationExtendedToQuantities)
. instance(MultiplicationFn, TotalValuedRelation)
. domain(MultiplicationFn, a_1, Quantity)
. domain(MultiplicationFn, a_2, Quantity)
. range(MultiplicationFn, Quantity)
%{MultiplicationFn
"If ?NUMBER1 and ?NUMBER2 are &%Numbers, 
then (&%MultiplicationFn ?NUMBER1 ?NUMBER2) is the arithmetical product 
of these numbers."}%
. instance(AdditionFn, BinaryFunction)
. instance(AdditionFn, AssociativeFunction)
. instance(AdditionFn, CommutativeFunction)
. instance(AdditionFn, RelationExtendedToQuantities)
. instance(AdditionFn, TotalValuedRelation)
. domain(AdditionFn, a_1, Quantity)
. domain(AdditionFn, a_2, Quantity)
. range(AdditionFn, Quantity)
%{AdditionFn
"If ?NUMBER1 and ?NUMBER2 are &%Numbers, then 
(&%AdditionFn ?NUMBER1 ?NUMBER2) is the arithmetical sum of these 
numbers."}%
. SuccessorFn(vNUMBER) = AdditionFn(vNUMBER, a_1)
. instance(SubtractionFn, BinaryFunction)
. instance(SubtractionFn, AssociativeFunction)
. instance(SubtractionFn, RelationExtendedToQuantities)
. instance(SubtractionFn, TotalValuedRelation)
. domain(SubtractionFn, a_1, Quantity)
. domain(SubtractionFn, a_2, Quantity)
. range(SubtractionFn, Quantity)
%{SubtractionFn
"If ?NUMBER1 and ?NUMBER2 are &%Numbers, 
then (&%SubtractionFn ?NUMBER1 ?NUMBER2) is the arithmetical difference 
between ?NUMBER1 and ?NUMBER2, i.e. ?NUMBER1 minus ?NUMBER2.  An 
exception occurs when ?NUMBER1 is equal to 0, in which case 
(&%SubtractionFn ?NUMBER1 ?NUMBER2) is the negation of ?NUMBER2."}%
. PredecessorFn(vNUMBER) = SubtractionFn(vNUMBER, a_1)
. instance(DivisionFn, BinaryFunction)
. instance(DivisionFn, AssociativeFunction)
. instance(DivisionFn, RelationExtendedToQuantities)
. instance(DivisionFn, PartialValuedRelation)
. domain(DivisionFn, a_1, Quantity)
. domain(DivisionFn, a_2, Quantity)
. range(DivisionFn, Quantity)
%{DivisionFn
"If ?NUMBER1 and ?NUMBER2 are &%Numbers, then 
(&%DivisionFn ?NUMBER1 ?NUMBER2) is the result of dividing ?NUMBER1 by 
?NUMBER2.  Note that when ?NUMBER1 = 1 (&%DivisionFn ?NUMBER1 ?NUMBER2) 
is the reciprocal of ?NUMBER2.  Note too that (&%DivisionFn ?NUMBER1 
?NUMBER2) is undefined when ?NUMBER2 = 0."}%
. instance(vNUMBER, RationalNumber) =>
      exists vINT1: U; vINT2: U
          . instance(vINT1, Integer)
            /\ instance(vINT2, Integer)
            /\ vNUMBER = DivisionFn(vINT1, vINT2)
. instance(AbsoluteValueFn, UnaryFunction)
. instance(AbsoluteValueFn, TotalValuedRelation)
. domain(AbsoluteValueFn, a_1, RealNumber)
. range(AbsoluteValueFn, NonnegativeRealNumber)
%{AbsoluteValueFn
"The value of (&%AbsoluteValueFn ?NUMBER) 
is the absolute value of the &%RealNumber ?NUMBER."}%
. AbsoluteValueFn(vNUMBER1) = vNUMBER2
  /\ instance(vNUMBER1, RealNumber)
  /\ instance(vNUMBER2, RealNumber) <=>
      (instance(vNUMBER1, NonnegativeRealNumber) /\ vNUMBER1 = vNUMBER2)
      \/ (instance(vNUMBER1, NegativeRealNumber)
          /\ vNUMBER2 = SubtractionFn(a_0, vNUMBER1))
. instance(CeilingFn, UnaryFunction)
. instance(CeilingFn, TotalValuedRelation)
. domain(CeilingFn, a_1, RealNumber)
. range(CeilingFn, Integer)
%{CeilingFn
"(&%CeilingFn ?NUMBER) returns the smallest 
&%Integer greater than or equal to the &%RealNumber ?NUMBER."}%
. CeilingFn(vNUMBER) = vINT =>
      not (exists vOTHERINT: U
               . instance(vOTHERINT, Integer)
                 /\ greaterThanOrEqualTo(vOTHERINT, vNUMBER)
                 /\ lessThan(vOTHERINT, vINT))
. instance(CosineFn, UnaryFunction)
. instance(CosineFn, TotalValuedRelation)
. domain(CosineFn, a_1, PlaneAngleMeasure)
. range(CosineFn, RealNumber)
%{CosineFn
"(&%CosineFn ?DEGREE) returns the cosine of the 
&%PlaneAngleMeasure ?DEGREE.  The cosine of ?DEGREE is the ratio of the 
side next to ?DEGREE to the hypotenuse in a right-angled triangle."}%
. instance(DenominatorFn, UnaryFunction)
. instance(DenominatorFn, TotalValuedRelation)
. domain(DenominatorFn, a_1, RealNumber)
. range(DenominatorFn, Integer)
%{DenominatorFn
"(&%DenominatorFn ?NUMBER) returns the 
denominator of the canonical reduced form of the &%RealNumber ?NUMBER."}%
. instance(ExponentiationFn, BinaryFunction)
. instance(ExponentiationFn, RelationExtendedToQuantities)
. instance(ExponentiationFn, TotalValuedRelation)
. domain(ExponentiationFn, a_1, Quantity)
. domain(ExponentiationFn, a_2, Integer)
. range(ExponentiationFn, Quantity)
%{ExponentiationFn
"(&%ExponentiationFn ?NUMBER ?INT) returns 
the &%RealNumber ?NUMBER raised to the power of the &%Integer ?INT."}%
. instance(FloorFn, UnaryFunction)
. instance(FloorFn, TotalValuedRelation)
. domain(FloorFn, a_1, RealNumber)
. range(FloorFn, Integer)
%{FloorFn
"(&%FloorFn ?NUMBER) returns the largest &%Integer 
less than or equal to the &%RealNumber ?NUMBER."}%
. FloorFn(vNUMBER) = vINT =>
      not (exists vOTHERINT: U
               . instance(vOTHERINT, Integer)
                 /\ lessThanOrEqualTo(vOTHERINT, vNUMBER)
                 /\ greaterThan(vOTHERINT, vINT))
. instance(GreatestCommonDivisorFn, Function)
. instance(GreatestCommonDivisorFn, VariableArityRelation)
. instance(GreatestCommonDivisorFn, PartialValuedRelation)
. range(GreatestCommonDivisorFn, Integer)
%{GreatestCommonDivisorFn
"(&%GreatestCommonDivisorFn 
?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the greatest common divisor of 
?NUMBER1 through ?NUMBER."}%
. GreatestCommonDivisorFn(a_At_R_O_W) = vNUMBER =>
      forall vELEMENT: U
          . inList(vELEMENT, ListFn(a_At_R_O_W)) =>
                RemainderFn(vELEMENT, vNUMBER) = a_0
. GreatestCommonDivisorFn(a_At_R_O_W) = vNUMBER =>
      not (exists vGREATER: U
               . greaterThan(vGREATER, vNUMBER)
                 /\ (forall vELEMENT: U
                         . inList(vELEMENT, ListFn(a_At_R_O_W)) =>
                               RemainderFn(vELEMENT, vGREATER) = a_0))
. instance(ImaginaryPartFn, UnaryFunction)
. instance(ImaginaryPartFn, TotalValuedRelation)
. domain(ImaginaryPartFn, a_1, ComplexNumber)
. range(ImaginaryPartFn, ImaginaryNumber)
%{ImaginaryPartFn
"(&%ImaginaryPartFn ?NUMBER) returns 
the part of ?NUMBER that has the square root of -1 as its factor."}%
. instance(vNUMBER, ComplexNumber) =>
      exists vPART1: U; vPART2: U
          . vPART1 = RealNumberFn(vNUMBER)
            /\ vPART2 = ImaginaryPartFn(vNUMBER)
. instance(IntegerSquareRootFn, UnaryFunction)
. instance(IntegerSquareRootFn, PartialValuedRelation)
. domain(IntegerSquareRootFn, a_1, RealNumber)
. range(IntegerSquareRootFn, NonnegativeInteger)
%{IntegerSquareRootFn
"(&%IntegerSquareRootFn ?NUMBER) 
returns the integer square root of ?NUMBER."}%
. instance(LeastCommonMultipleFn, Function)
. instance(LeastCommonMultipleFn, PartialValuedRelation)
. instance(LeastCommonMultipleFn, VariableArityRelation)
. range(LeastCommonMultipleFn, Integer)
%{LeastCommonMultipleFn
"(&%LeastCommonMultipleFn 
?NUMBER1 ?NUMBER2 ... ?NUMBER) returns the least common multiple of 
?NUMBER1 through ?NUMBER."}%
. LeastCommonMultipleFn(a_At_R_O_W) = vNUMBER =>
      forall vELEMENT: U
          . inList(vELEMENT, ListFn(a_At_R_O_W)) =>
                RemainderFn(vNUMBER, vELEMENT) = a_0
. LeastCommonMultipleFn(a_At_R_O_W) = vNUMBER =>
      not (exists vLESS: U
               . lessThan(vLESS, vNUMBER)
                 /\ (forall vELEMENT: U
                         . inList(vELEMENT, ListFn(a_At_R_O_W)) =>
                               RemainderFn(vLESS, vELEMENT) = a_0))
. instance(LogFn, BinaryFunction)
. domain(LogFn, a_1, RealNumber)
. domain(LogFn, a_2, PositiveInteger)
. range(LogFn, RealNumber)
%{LogFn
"(LogFn ?NUMBER ?INT) returns the logarithm of the 
&%RealNumber ?NUMBER in the base denoted by the &%Integer ?INT."}%
. instance(MaxFn, BinaryFunction)
. instance(MaxFn, AssociativeFunction)
. instance(MaxFn, CommutativeFunction)
. instance(MaxFn, RelationExtendedToQuantities)
. instance(MaxFn, TotalValuedRelation)
. domain(MaxFn, a_1, Quantity)
. domain(MaxFn, a_2, Quantity)
. range(MaxFn, Quantity)
%{MaxFn
"(&%MaxFn ?NUMBER1 ?NUMBER2) is the largest of 
?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2, 
&%MaxFn returns one of its arguments."}%
. MaxFn(vNUMBER1, vNUMBER2) = vNUMBER =>
      (vNUMBER = vNUMBER1 /\ greaterThan(vNUMBER1, vNUMBER2))
      \/ (vNUMBER = vNUMBER2 /\ greaterThan(vNUMBER2, vNUMBER1))
      \/ (vNUMBER = vNUMBER1 /\ vNUMBER = vNUMBER2)
. instance(MinFn, BinaryFunction)
. instance(MinFn, AssociativeFunction)
. instance(MinFn, CommutativeFunction)
. instance(MinFn, RelationExtendedToQuantities)
. instance(MinFn, TotalValuedRelation)
. domain(MinFn, a_1, Quantity)
. domain(MinFn, a_2, Quantity)
. range(MinFn, Quantity)
%{MinFn
"(&%MinFn ?NUMBER1 ?NUMBER2) is the smallest of 
?NUMBER1 and ?NUMBER2.  In cases where ?NUMBER1 is equal to ?NUMBER2, 
&%MinFn returns one of its arguments."}%
. MinFn(vNUMBER1, vNUMBER2) = vNUMBER =>
      (vNUMBER = vNUMBER1 /\ lessThan(vNUMBER1, vNUMBER2))
      \/ (vNUMBER = vNUMBER2 /\ lessThan(vNUMBER2, vNUMBER1))
      \/ (vNUMBER = vNUMBER1 /\ vNUMBER = vNUMBER2)
. instance(NumeratorFn, UnaryFunction)
. instance(NumeratorFn, TotalValuedRelation)
. domain(NumeratorFn, a_1, RealNumber)
. range(NumeratorFn, Integer)
%{NumeratorFn
"(&%NumeratorFn ?NUMBER) returns the numerator 
of the canonical reduced form ?NUMBER."}%
. instance(Pi, PositiveRealNumber)
%{Pi
"&%Pi is the &%RealNumber that 
is the ratio of the perimeter of a circle to its diameter.  It is 
approximately equal to 3.141592653589793."}%
. instance(NumberE, PositiveRealNumber)
%{NumberE
"&%NumberE is the &%RealNumber that is the base for 
natural logarithms.  It is approximately equal to 2.718282."}%
. instance(RationalNumberFn, UnaryFunction)
. domain(RationalNumberFn, a_1, Number)
. range(RationalNumberFn, RationalNumber)
%{RationalNumberFn
"(&%RationalNumberFn ?NUMBER) returns 
the rational representation of ?NUMBER."}%
. instance(RealNumberFn, UnaryFunction)
. domain(RealNumberFn, a_1, Number)
. range(RealNumberFn, RealNumber)
%{RealNumberFn
"(RealNumberFn ?NUMBER) returns the part of 
?NUMBER that is a &%RealNumber."}%
. instance(ReciprocalFn, UnaryFunction)
. instance(ReciprocalFn, RelationExtendedToQuantities)
. instance(ReciprocalFn, TotalValuedRelation)
. domain(ReciprocalFn, a_1, Quantity)
. range(ReciprocalFn, Quantity)
%{ReciprocalFn
"(ReciprocalFn ?NUMBER) is the reciprocal 
element of ?NUMBER with respect to the multiplication operator 
(&%MultiplicationFn), i.e. 1/?NUMBER.  Not all numbers have a reciprocal 
element.  For example the number 0 does not.  If a number ?NUMBER has a 
reciprocal ?RECIP, then the product of ?NUMBER and ?RECIP will be 
1, e.g. 3*1/3 = 1.  The reciprocal of an element is &%equal to 
applying the &%ExponentiationFn function to the element to the power 
-1."}%
. instance(vNUMBER, Quantity) =>
      ReciprocalFn(vNUMBER) = ExponentiationFn(vNUMBER, a_Minus_1)
. instance(vNUMBER, Quantity) =>
      a_1 = MultiplicationFn(vNUMBER, ReciprocalFn(vNUMBER))
. instance(RemainderFn, BinaryFunction)
. instance(RemainderFn, RelationExtendedToQuantities)
. instance(RemainderFn, PartialValuedRelation)
. domain(RemainderFn, a_1, Quantity)
. domain(RemainderFn, a_2, Quantity)
. range(RemainderFn, Quantity)
%{RemainderFn
"(RemainderFn ?NUMBER ?DIVISOR) is the 
remainder of the number ?NUMBER divided by the number ?DIVISOR.  
The result has the same sign as ?DIVISOR."}%
. RemainderFn(vNUMBER1, vNUMBER2) = vNUMBER <=>
      AdditionFn(MultiplicationFn(FloorFn(DivisionFn(vNUMBER1,
                                                     vNUMBER2)),
                                  vNUMBER2),
                 vNUMBER) =
          vNUMBER1
. RemainderFn(vNUMBER1, vNUMBER2) = vNUMBER =>
      SignumFn(vNUMBER2) = SignumFn(vNUMBER)
. instance(vNUMBER, EvenInteger) => RemainderFn(vNUMBER, a_2) = a_0
. instance(vNUMBER, OddInteger) => RemainderFn(vNUMBER, a_2) = a_1
. instance(vPRIME, PrimeNumber) =>
      forall vNUMBER: U
          . RemainderFn(vPRIME, vNUMBER) = a_0 =>
                vNUMBER = a_1 \/ vNUMBER = vPRIME
. instance(RoundFn, UnaryFunction)
. instance(RoundFn, RelationExtendedToQuantities)
. instance(RoundFn, TotalValuedRelation)
. domain(RoundFn, a_1, Quantity)
. range(RoundFn, Quantity)
%{RoundFn
"(&%RoundFn ?NUMBER) is the &%Integer closest 
to ?NUMBER on the number line.  If ?NUMBER is halfway between two 
&%Integers (for example 3.5), it denotes the larger &%Integer."}%
. RoundFn(vNUMBER1) = vNUMBER2 =>
      (lessThan(SubtractionFn(vNUMBER1, FloorFn(vNUMBER1)),
                a_0_Period_5) =>
           vNUMBER2 = FloorFn(vNUMBER1))
      \/ (greaterThanOrEqualTo(SubtractionFn(vNUMBER1,
                                             FloorFn(vNUMBER1)),
                               a_0_Period_5) =>
              vNUMBER2 = CeilingFn(vNUMBER1))
. instance(SignumFn, UnaryFunction)
. instance(SignumFn, TotalValuedRelation)
. domain(SignumFn, a_1, RealNumber)
. range(SignumFn, Integer)
%{SignumFn
"(SignumFn ?NUMBER) denotes the sign of ?NUMBER.  
This is one of the following values:  -1, 1, or 0."}%
. instance(vNUMBER, NonnegativeRealNumber) =>
      SignumFn(vNUMBER) = a_1 \/ SignumFn(vNUMBER) = a_0
. instance(vNUMBER, PositiveRealNumber) => SignumFn(vNUMBER) = a_1
. instance(vNUMBER, NegativeRealNumber) =>
      SignumFn(vNUMBER) = a_Minus_1
. instance(SineFn, UnaryFunction)
. instance(SineFn, TotalValuedRelation)
. domain(SineFn, a_1, PlaneAngleMeasure)
. range(SineFn, RealNumber)
%{SineFn
"(&%SineFn ?DEGREE) is the sine of the 
&%PlaneAngleMeasure ?DEGREE.  The sine of ?DEGREE is the ratio of the side 
opposite ?DEGREE to the hypotenuse in a right-angled triangle."}%
. instance(SquareRootFn, UnaryFunction)
. domain(SquareRootFn, a_1, RealNumber)
. range(SquareRootFn, Number)
%{SquareRootFn
"(SquareRootFn ?NUMBER) is the principal 
square root of ?NUMBER."}%
. SquareRootFn(vNUMBER1) = vNUMBER2 =>
      MultiplicationFn(vNUMBER2, vNUMBER2) = vNUMBER1
. instance(TangentFn, UnaryFunction)
. instance(TangentFn, TotalValuedRelation)
. domain(TangentFn, a_1, PlaneAngleMeasure)
. range(TangentFn, RealNumber)
%{TangentFn
"(&%TangentFn ?DEGREE) is the tangent of the 
&%PlaneAngleMeasure ?DEGREE.  The tangent of ?DEGREE is the ratio of 
the side opposite ?DEGREE to the side next to ?DEGREE in a right-angled 
triangle."}%
. instance(vDEGREE, PlaneAngleMeasure) =>
      TangentFn(vDEGREE) = DivisionFn(SineFn(vDEGREE), CosineFn(vDEGREE))
. instance(identityElement, BinaryPredicate)
. instance(identityElement, AsymmetricRelation)
. domain(identityElement, a_1, BinaryFunction)
. domain(identityElement, a_2, Entity)
%{identityElement
"An object ?ID is the identity element 
for BinaryFunction ?FUNCTION just in case, for every instance ?INST, 
applying ?FUNCTION to ?INST and ?ID results in ?INST."}%
. identityElement(vFUNCTION, vID) =>
      forall vINST: U
          . domain(vFUNCTION, a_1, vCLASS) /\ instance(vINST, vCLASS) =>
                AssignmentFn(vFUNCTION, vID, vINST) = vINST
. identityElement(MultiplicationFn, a_1)
. identityElement(AdditionFn, a_0)
. identityElement(SubtractionFn, a_0)
. identityElement(DivisionFn, a_1)
. instance(SuccessorFn, UnaryFunction)
. instance(SuccessorFn, TotalValuedRelation)
. domain(SuccessorFn, a_1, Integer)
. range(SuccessorFn, Integer)
%{SuccessorFn
"A &%UnaryFunction that maps an &%Integer to 
its successor, e.g. the successor of 5 is 6."}%
. SuccessorFn(vINT1) = SuccessorFn(vINT2) => vINT1 = vINT2
. instance(vINT, Integer) => lessThan(vINT, SuccessorFn(vINT))
. instance(vINT1, Integer) /\ instance(vINT2, Integer) =>
      not (lessThan(vINT1, vINT2) /\ lessThan(vINT2, SuccessorFn(vINT1)))
. instance(vINT, Integer) =>
      vINT = SuccessorFn(PredecessorFn(vINT))
. instance(vINT, Integer) =>
      vINT = PredecessorFn(SuccessorFn(vINT))
. instance(PredecessorFn, UnaryFunction)
. instance(PredecessorFn, TotalValuedRelation)
. domain(PredecessorFn, a_1, Integer)
. range(PredecessorFn, Integer)
%{PredecessorFn
"A &%UnaryFunction that maps an &%Integer to 
its predecessor, e.g. the predecessor of 5 is 4."}%
. PredecessorFn(vINT1) = PredecessorFn(vINT2) => vINT1 = vINT2
. instance(vINT, Integer) => greaterThan(vINT, PredecessorFn(vINT))
. instance(vINT1, Integer) /\ instance(vINT2, Integer) =>
      not (lessThan(vINT2, vINT1)
           /\ lessThan(PredecessorFn(vINT1), vINT2))
. instance(average, PartialValuedRelation)
. instance(average, BinaryPredicate)
. instance(average, SingleValuedRelation)
. domain(average, a_1, List)
. domain(average, a_2, RealNumber)
. synonymousExternalConcept(a_Quot_a_v_e_r_a_g_e_Quot, average,
                            EnglishLanguage)
%{average
"A partial function that relates a &%List to a 
&%RealNumber, provided that the &%List only has list elements that are 
&%RealNumbers. The &%RealNumber associated with the &%List is equal to the 
mathematical average of the &%RealNumbers in the &%List divided by the total
number of list elements."}%
. average(vLIST, vAVERAGE) =>
      forall vLISTITEM: U
          . inList(vLISTITEM, vLIST) => instance(vLISTITEM, RealNumber)
. subrelation(subset, subclass)
. domain(subset, a_1, Set)
. domain(subset, a_2, Set)
%{subset
"(subset ?SET1 ?SET2) is true just in case the 
&%elements of the &%Set ?SET1 are also &%elements of the &%Set ?SET2."}%
. subset(vSUBSET, vSET) =>
      forall vELEMENT: U
          . element(vELEMENT, vSUBSET) => element(vELEMENT, vSET)
. instance(element, BinaryPredicate)
. instance(element, AsymmetricRelation)
. subrelation(element, instance)
. domain(element, a_1, Entity)
. domain(element, a_2, Set)
%{element
"(element ?ENTITY ?SET) is true just in case 
?ENTITY is contained in the &%Set ?SET.  An &%Entity can be an &%element 
of another &%Entity only if the latter is a &%Set."}%
. (forall vELEMENT: U
       . element(vELEMENT, vSET1) <=> element(vELEMENT, vSET2)) =>
      vSET1 = vSET2
. instance(UnionFn, BinaryFunction)
. instance(UnionFn, TotalValuedRelation)
. domain(UnionFn, a_1, SetOrClass)
. domain(UnionFn, a_2, SetOrClass)
. range(UnionFn, SetOrClass)
%{UnionFn
"A &%BinaryFunction that maps two &%SetOrClasses to 
the union of these &%SetOrClasses.  An object is an &%element of the union 
of two &%SetOrClasses just in case it is an &%instance of either &%SetOrClass."}%
. instance(IntersectionFn, BinaryFunction)
. instance(IntersectionFn, TotalValuedRelation)
. domain(IntersectionFn, a_1, SetOrClass)
. domain(IntersectionFn, a_2, SetOrClass)
. range(IntersectionFn, SetOrClass)
%{IntersectionFn
"A &%BinaryFunction that maps two 
&%SetOrClasses to the intersection of these &%SetOrClasses.  An object is 
an instance of the intersection of two &%SetOrClasses just in case it is 
an instance of both of those &%SetOrClasses."}%
. instance(RelativeComplementFn, BinaryFunction)
. instance(RelativeComplementFn, TotalValuedRelation)
. domain(RelativeComplementFn, a_1, SetOrClass)
. domain(RelativeComplementFn, a_2, SetOrClass)
. range(RelativeComplementFn, SetOrClass)
%{RelativeComplementFn
"A &%BinaryFunction that maps two 
&%SetOrClasses to the difference between these &%SetOrClasses.  More 
precisely, (&%RelativeComplementFn ?CLASS1 ?CLASS2) denotes the instances 
of ?CLASS1 that are not also instances of ?CLASS2."}%
. instance(ComplementFn, UnaryFunction)
. instance(ComplementFn, TotalValuedRelation)
. domain(ComplementFn, a_1, SetOrClass)
. range(ComplementFn, SetOrClass)
%{ComplementFn
"The complement of a given &%SetOrClass C is the 
&%SetOrClass of all things that are not instances of C.  In other words, an 
object is an instance of the complement of a &%SetOrClass C just in case it 
is not an instance of C."}%
. instance(GeneralizedUnionFn, UnaryFunction)
. instance(GeneralizedUnionFn, TotalValuedRelation)
. domainSubclass(GeneralizedUnionFn, a_1, SetOrClass)
. range(GeneralizedUnionFn, SetOrClass)
%{GeneralizedUnionFn
"A &%UnaryFunction that takes a &%SetOrClass 
of &%Classes as its single argument and returns a &%SetOrClass which is the 
merge of all of the &%Classes in the original &%SetOrClass, i.e. the &%SetOrClass 
containing just those instances which are instances of an instance of the 
original &%SetOrClass."}%
. instance(GeneralizedIntersectionFn, UnaryFunction)
. instance(GeneralizedIntersectionFn, TotalValuedRelation)
. domainSubclass(GeneralizedIntersectionFn, a_1, SetOrClass)
. range(GeneralizedIntersectionFn, SetOrClass)
%{GeneralizedIntersectionFn
"A &%UnaryFunction that takes a 
&%SetOrClass of &%Classes as its single argument and returns a &%SetOrClass which 
is the intersection of all of the &%Classes in the original &%SetOrClass, i.e. 
the &%SetOrClass containing just those instances which are instances of all 
instances of the original &%SetOrClass."}%
. instance(CardinalityFn, UnaryFunction)
. instance(CardinalityFn, TotalValuedRelation)
. instance(CardinalityFn, AsymmetricRelation)
. domain(CardinalityFn, a_1, UnionFn(SetOrClass, Collection))
. range(CardinalityFn, Number)
%{CardinalityFn
"(CardinalityFn ?CLASS) returns the 
number of instances in the &%SetOrClass ?CLASS or the number of 
members in the ?CLASS &%Collection."}%
. subclass(NullSet, SetOrClass)
%{NullSet
"Any &%SetOrClass that contains no instances."}%
. instance(vSET, NullSet) =>
      not (exists vINST: U . instance(vINST, vSET))
. subclass(NonNullSet, SetOrClass)
%{NonNullSet
"Any &%SetOrClass that contains at least one 
instance."}%
. instance(vSET, NonNullSet) =>
      exists vINST: U . instance(vINST, vSET)
. subclass(FiniteSet, Set)
%{FiniteSet
"A &%Set containing a finite number of elements."}%
. instance(vSET, FiniteSet) =>
      exists vNUMBER: U
          . instance(vNUMBER, NonnegativeInteger)
            /\ vNUMBER = CardinalityFn(vSET)
. subclass(PairwiseDisjointClass, SetOrClass)
%{PairwiseDisjointClass
"A &%SetOrClass is a &%PairwiseDisjointClass 
just in case every instance of the &%SetOrClass is either &%equal to or &%disjoint 
from every other instance of the &%SetOrClass."}%
. instance(vSUPERCLASS, PairwiseDisjointClass) =>
      forall vCLASS1: U; vCLASS2: U
          . instance(vCLASS1, vSUPERCLASS)
            /\ instance(vCLASS2, vSUPERCLASS) =>
                vCLASS1 = vCLASS2 \/ disjoint(vCLASS1, vCLASS2)
. subclass(MutuallyDisjointClass, SetOrClass)
%{MutuallyDisjointClass
"A &%SetOrClass is a &%MutuallyDisjointClass 
just in case there exists nothing which is an instance of all of the instances of 
the original &%SetOrClass."}%
. instance(vCLASS, MutuallyDisjointClass) =>
      forall vINST1: U; vINST2: U
          . instance(vINST1, vCLASS) /\ instance(vINST2, vINST1) =>
                exists vINST3: U
                    . instance(vINST3, vCLASS) /\ not instance(vINST2, vINST3)
. instance(KappaFn, BinaryFunction)
. domain(KappaFn, a_1, SymbolicString)
. domain(KappaFn, a_2, Formula)
. range(KappaFn, Class)
%{KappaFn
"A class-forming operator that takes two 
arguments:  a variable and a formula containing at least one unbound 
occurrence of the variable.  The result of applying &%KappaFn to a 
variable and a formula is the &%SetOrClass of things that satisfy the formula.  
For example, we can denote the &%SetOrClass of prime numbers that are less 
than 100 with the following expression:  (KappaFn ?NUMBER 
(and (instance ?NUMBER PrimeNumber) (lessThan ?NUMBER 100))).  Note that 
the use of this function is discouraged, since there is currently no 
axiomatic support for it."}%
. subclass(Graph, Abstract)
%{Graph
"The &%Class of graphs, where a graph is understood 
to be a set of &%GraphNodes connected by &%GraphArcs.  Note that this 
&%Class includes only connected graphs, i.e. graphs in which there is a 
&%GraphPath between any two &%GraphNodes.  Note too that every &%Graph 
is assumed to contain at least two &%GraphArcs and three &%GraphNodes."}%
. instance(vGRAPH, Graph)
  /\ instance(vNODE1, GraphNode)
  /\ instance(vNODE2, GraphNode)
  /\ graphPart(vNODE1, vGRAPH)
  /\ graphPart(vNODE2, vGRAPH)
  /\ not vNODE1 = vNODE2 =>
      exists vARC: U; vPATH: U
          . links(vNODE1, vNODE2, vARC)
            \/ (subGraph(vPATH, vGRAPH)
                /\ instance(vPATH, GraphPath)
                /\ ((BeginNodeFn(vPATH) = vNODE1 /\ EndNodeFn(vPATH) = vNODE2)
                    \/ (BeginNodeFn(vPATH) = vNODE2
                        /\ EndNodeFn(vPATH) = vNODE1)))
. instance(vGRAPH, Graph) =>
      exists vNODE1: U; vNODE2: U; vNODE3: U; vARC1: U; vARC2: U
          . graphPart(vNODE1, vGRAPH)
            /\ graphPart(vNODE2, vGRAPH)
            /\ graphPart(vNODE3, vGRAPH)
            /\ graphPart(vARC1, vGRAPH)
            /\ graphPart(vARC2, vGRAPH)
            /\ links(vARC1, vNODE1, vNODE2)
            /\ links(vARC2, vNODE2, vNODE3)
            /\ not vNODE1 = vNODE2
            /\ not vNODE2 = vNODE3
            /\ not vNODE1 = vNODE3
            /\ not vARC1 = vARC2
. subclass(DirectedGraph, Graph)
%{DirectedGraph
"The &%Class of directed graphs.  A 
directed graph is a &%Graph in which all &%GraphArcs
have direction, i.e. every &%GraphArc has an initial node (see 
&%InitialNodeFn) and a terminal node (see &%TerminalNodeFn)."}%
. instance(vGRAPH, DirectedGraph)
  /\ instance(vARC, GraphArc)
  /\ graphPart(vARC, vGRAPH) =>
      exists vNODE1: U; vNODE2: U
          . InitialNodeFn(vARC) = vNODE1 /\ TerminalNodeFn(vARC) = vNODE2
. subclass(Tree, Graph)
%{Tree
"A Tree is a &%DirectedGraph that has no 
&%GraphLoops."}%
. instance(vGRAPH, Tree) =>
      not (exists vLOOP: U
               . instance(vLOOP, GraphLoop) /\ graphPart(vLOOP, vGRAPH))
. subclass(GraphPath, DirectedGraph)
%{GraphPath
"Informally, a single, directed route between 
two &%GraphNodes in a &%Graph.  Formally, a &%DirectedGraph that is a 
&%subGraph of the original &%Graph and such that no two &%GraphArcs in 
the &%DirectedGraph have the same intial node (see &%InitialNodeFn) or 
the same terminal node (see &%TerminalNodeFn)."}%
. instance(vGRAPH, GraphPath)
  /\ instance(vARC, GraphArc)
  /\ graphPart(vARC, vGRAPH) =>
      InitialNodeFn(vARC) = vNODE =>
          not (exists vOTHER: U
                   . InitialNodeFn(vOTHER) = vNODE /\ not vOTHER = vARC)
. instance(vGRAPH, GraphPath)
  /\ instance(vARC, GraphArc)
  /\ graphPart(vARC, vGRAPH) =>
      TerminalNodeFn(vARC) = vNODE =>
          not (exists vOTHER: U
                   . TerminalNodeFn(vOTHER) = vNODE /\ not vOTHER = vARC)
. subclass(GraphCircuit, GraphPath)
%{GraphCircuit
"A &%GraphPath that begins (see 
&%BeginNodeFn) and ends (see &%EndNodeFn) at the same 
&%GraphNode."}%
. instance(vGRAPH, GraphCircuit) <=>
      (exists vNODE: U
           . BeginNodeFn(vGRAPH) = vNODE /\ EndNodeFn(vGRAPH) = vNODE)
. subclass(MultiGraph, Graph)
%{MultiGraph
"The &%Class of multigraphs.  A multigraph 
is a &%Graph containing at least one pair of &%GraphNodes that are 
connected by more than one &%GraphArc."}%
. instance(vGRAPH, MultiGraph) <=>
      (exists vARC1: U; vARC2: U; vNODE1: U; vNODE2: U
           . graphPart(vARC1, vGRAPH)
             /\ graphPart(vARC2, vGRAPH)
             /\ graphPart(vNODE1, vGRAPH)
             /\ graphPart(vNODE2, vGRAPH)
             /\ links(vNODE1, vNODE2, vARC1)
             /\ links(vNODE1, vNODE2, vARC2)
             /\ not vARC1 = vARC2)
. subclass(PseudoGraph, Graph)
%{PseudoGraph
"The &%Class of pseudographs.  A pseudograph 
is a &%Graph containing at least one &%GraphLoop."}%
. instance(vGRAPH, PseudoGraph) <=>
      (exists vLOOP: U
           . instance(vLOOP, GraphLoop) /\ graphPart(vLOOP, vGRAPH))
. subclass(GraphElement, Abstract)
. partition(GraphElement, GraphNode, GraphArc)
%{GraphElement
"Noncompositional parts of &%Graphs.  
These parts are restricted to &%GraphNodes and &%GraphArcs."}%
. instance(vPART, GraphElement) =>
      exists vGRAPH: U
          . instance(vGRAPH, Graph) /\ graphPart(vPART, vGRAPH)
. subclass(GraphNode, GraphElement)
%{GraphNode
"&%Graphs are comprised of &%GraphNodes 
and &%GraphArcs.  Every &%GraphNode is linked by a &%GraphArc."}%
. instance(vNODE, GraphNode) =>
      exists vOTHER: U; vARC: U . links(vNODE, vOTHER, vARC)
. subclass(GraphArc, GraphElement)
%{GraphArc
"&%Graphs are comprised of &%GraphNodes 
and &%GraphArcs.  Every &%GraphArc links two &%GraphNodes."}%
. instance(vARC, GraphArc) =>
      exists vNODE1: U; vNODE2: U . links(vNODE1, vNODE2, vARC)
. subclass(GraphLoop, GraphArc)
%{GraphLoop
"A &%GraphArc in which a &%GraphNode is 
linked to itself."}%
. instance(vLOOP, GraphLoop) <=>
      (exists vNODE: U . links(vNODE, vNODE, vLOOP))
. InitialNodeFn(vARC) = vNODE /\ TerminalNodeFn(vARC) = vNODE =>
      instance(vARC, GraphLoop)
. instance(links, TernaryPredicate)
. domain(links, a_1, GraphNode)
. domain(links, a_2, GraphNode)
. domain(links, a_3, GraphArc)
%{links
"a &%TernaryPredicate that specifies the 
&%GraphArc connecting two &%GraphNodes."}%
. links(vNODE1, vNODE2, vARC) => links(vNODE2, vNODE1, vARC)
. instance(graphPart, BinaryPredicate)
. instance(graphPart, AsymmetricRelation)
. instance(graphPart, IrreflexiveRelation)
. domain(graphPart, a_1, GraphElement)
. domain(graphPart, a_2, Graph)
%{graphPart
"A basic relation for &%Graphs and their 
parts.  (&%graphPart ?PART ?GRAPH) means that ?PART is a &%GraphArc 
or &%GraphNode of the &%Graph ?GRAPH."}%
. instance(subGraph, BinaryPredicate)
. instance(subGraph, ReflexiveRelation)
. instance(subGraph, TransitiveRelation)
. domain(subGraph, a_1, Graph)
. domain(subGraph, a_2, Graph)
%{subGraph
"The relation between two &%Graphs when one 
&%Graph is a part of the other.  (&%subGraph ?GRAPH1 ?GRAPH2) means 
that ?GRAPH1 is a part of ?GRAPH2."}%
. subGraph(vGRAPH1, vGRAPH2) /\ graphPart(vELEMENT, vGRAPH1) =>
      graphPart(vELEMENT, vGRAPH2)
. instance(pathLength, BinaryPredicate)
. instance(pathLength, AsymmetricRelation)
. instance(pathLength, IrreflexiveRelation)
. domain(pathLength, a_1, GraphPath)
. domain(pathLength, a_2, PositiveInteger)
%{pathLength
"A &%BinaryPredicate that specifies the 
length (in number of &%GraphNodes) of a &%GraphPath.
(&%pathLength ?PATH ?NUMBER) means that there are ?NUMBER nodes in 
the &%GraphPath ?PATH."}%
. instance(InitialNodeFn, UnaryFunction)
. instance(InitialNodeFn, PartialValuedRelation)
. domain(InitialNodeFn, a_1, GraphArc)
. range(InitialNodeFn, GraphNode)
%{InitialNodeFn
"A &%UnaryFunction that maps a 
&%GraphArc to the initial node of the &%GraphArc.  Note
that this is a partial function.  In particular, the function is 
undefined for &%GraphArcs that are not part of a &%DirectedGraph."}%
. instance(TerminalNodeFn, UnaryFunction)
. instance(TerminalNodeFn, PartialValuedRelation)
. domain(TerminalNodeFn, a_1, GraphArc)
. range(TerminalNodeFn, GraphNode)
%{TerminalNodeFn
"A &%UnaryFunction that maps a 
&%GraphArc to the terminal node of the &%GraphArc.  Note that this 
is a partial function.  In particular, the function is undefined 
for &%GraphArcs that are not part of a &%DirectedGraph."}%
. instance(BeginNodeFn, UnaryFunction)
. instance(BeginNodeFn, TotalValuedRelation)
. domain(BeginNodeFn, a_1, GraphPath)
. range(BeginNodeFn, GraphNode)
. relatedInternalConcept(BeginNodeFn, InitialNodeFn)
%{BeginNodeFn
"A &%UnaryFunction that maps a &%GraphPath 
to the &%GraphNode that is the beginning of the &%GraphPath.  Note that, 
unlike &%InitialNodeFn (which relates a &%GraphArc to a &%GraphNode),  
&%BeginNodeFn is a total function - every &%GraphPath has a beginning."}%
. instance(EndNodeFn, UnaryFunction)
. instance(EndNodeFn, TotalValuedRelation)
. domain(EndNodeFn, a_1, GraphPath)
. range(EndNodeFn, GraphNode)
. relatedInternalConcept(EndNodeFn, TerminalNodeFn)
%{EndNodeFn
"A &%UnaryFunction that maps a &%GraphPath 
to the &%GraphNode that is the end of the &%GraphPath.  Note that, unlike 
&%TerminalNodeFn (which relates a &%GraphArc to a &%GraphNode),  
&%EndNodeFn is a total function - every &%GraphPath has a end."}%
. instance(arcWeight, BinaryPredicate)
. instance(arcWeight, SingleValuedRelation)
. domain(arcWeight, a_1, GraphArc)
. domain(arcWeight, a_2, RealNumber)
%{arcWeight
"This predicate indicates the value of a 
&%GraphArc in a &%Graph.  This could map to the length of a road in 
a road network or the flow rate of a pipe in a plumbing system."}%
. instance(PathWeightFn, UnaryFunction)
. domain(PathWeightFn, a_1, GraphPath)
. range(PathWeightFn, RealNumber)
%{PathWeightFn
"A &%UnaryFunction that maps a 
&%GraphPath to the sum of the &%arcWeights on the &%GraphArcs in 
the &%GraphPath."}%
. PathWeightFn(vPATH) = vSUM
  /\ subGraph(vSUBPATH, vPATH)
  /\ graphPart(vARC1, vPATH)
  /\ arcWeight(vARC1, vNUMBER1)
  /\ (forall vARC2: U
          . graphPart(vARC2, vPATH) =>
                graphPart(vARC2, vSUBPATH) \/ vARC2 = vARC1) =>
      vSUM = AdditionFn(PathWeightFn(vSUBPATH), vNUMBER1)
. PathWeightFn(vPATH) = vSUM
  /\ graphPart(vARC1, vPATH)
  /\ graphPart(vARC2, vPATH)
  /\ arcWeight(vARC1, vNUMBER1)
  /\ arcWeight(vARC2, vNUMBER2)
  /\ (forall vARC3: U
          . graphPart(vARC3, vPATH) => vARC3 = vARC1 \/ vARC3 = vARC2) =>
      PathWeightFn(vPATH) = AdditionFn(vNUMBER1, vNUMBER2)
. instance(MinimalWeightedPathFn, BinaryFunction)
. domain(MinimalWeightedPathFn, a_1, GraphNode)
. domain(MinimalWeightedPathFn, a_2, GraphNode)
. range(MinimalWeightedPathFn, GraphPath)
%{MinimalWeightedPathFn
"This &%BinaryFunction assigns two 
&%GraphNodes to the &%GraphPath with the smallest sum of weighted arcs 
between the two &%GraphNodes."}%
. MinimalWeightedPathFn(vNODE1, vNODE2) = vPATH =>
      instance(vPATH, GraphPathFn(vNODE1, vNODE2))
. MinimalWeightedPathFn(vNODE1, vNODE2) = vPATH
  /\ PathWeightFn(vPATH) = vNUMBER =>
      forall vPATH2: U
          . instance(vPATH2, GraphPathFn(vNODE1, vNODE2))
            /\ PathWeightFn(vPATH2) = vNUMBER2 =>
                greaterThanOrEqualTo(vNUMBER2, vNUMBER1)
. instance(MaximalWeightedPathFn, BinaryFunction)
. domain(MaximalWeightedPathFn, a_1, GraphNode)
. domain(MaximalWeightedPathFn, a_2, GraphNode)
. range(MaximalWeightedPathFn, GraphPath)
%{MaximalWeightedPathFn
"This &%BinaryFunction assigns two 
&%GraphNodes to the &%GraphPath with the largest sum of weighted arcs 
between the two &%GraphNodes."}%
. MaximalWeightedPathFn(vNODE1, vNODE2) = vPATH =>
      instance(vPATH, GraphPathFn(vNODE1, vNODE2))
. MaximalWeightedPathFn(vNODE1, vNODE2) = vPATH
  /\ PathWeightFn(vPATH) = vNUMBER =>
      forall vPATH2: U
          . instance(vPATH2, GraphPathFn(vNODE1, vNODE2))
            /\ PathWeightFn(vPATH2) = vNUMBER2 =>
                lessThanOrEqualTo(vNUMBER2, vNUMBER1)
. instance(GraphPathFn, BinaryFunction)
. instance(GraphPathFn, TotalValuedRelation)
. domain(GraphPathFn, a_1, GraphNode)
. domain(GraphPathFn, a_2, GraphNode)
. rangeSubclass(GraphPathFn, GraphPath)
%{GraphPathFn
"A &%BinaryFunction that maps two &%GraphNodes 
to the &%Class of &%GraphPaths between those two nodes.  Note that the two 
&%GraphNodes must belong to the same &%Graph."}%
. graphPart(vPATH, vGRAPH)
  /\ not instance(vGRAPH, DirectedGraph) =>
      (GraphPathFn(vNODE1, vNODE2) = vPATH <=>
           GraphPathFn(vNODE2, vNODE1) = vPATH)
. instance(CutSetFn, UnaryFunction)
. domain(CutSetFn, a_1, Graph)
. rangeSubclass(CutSetFn, GraphPath)
%{CutSetFn
"A &%UnaryFunction that assigns a &%Graph the 
&%Class of &%GraphPaths that partition the graph into two separate 
graphs if cut.  There may be more than one cutset for a given graph."}%
. instance(MinimalCutSetFn, UnaryFunction)
. domain(MinimalCutSetFn, a_1, Graph)
. rangeSubclass(MinimalCutSetFn, GraphPath)
. relatedInternalConcept(MinimalCutSetFn, CutSetFn)
%{MinimalCutSetFn
"A &%UnaryFunction that assigns a &%Graph 
the &%Class of &%GraphPaths which comprise cutsets for the &%Graph and 
which have the least number of &%GraphArcs."}%
. instance(vGRAPH, Graph) =>
      subclass(MinimalCutSetFn(vGRAPH), CutSetFn(vGRAPH))
. MinimalCutSetFn(vGRAPH) = vPATHCLASS =>
      exists vNUMBER: U
          . forall vPATH: U
                . instance(vPATH, vPATHCLASS) => pathLength(vPATH, vNUMBER)
. not (exists vPATH1: U; vPATH2: U
           . instance(vPATH1, CutSetFn(vGRAPH))
             /\ instance(vPATH2, MinimalCutSetFn(vGRAPH))
             /\ pathLength(vPATH1, vNUMBER1)
             /\ pathLength(vPATH2, vNUMBER2)
             /\ lessThan(vNUMBER1, vNUMBER2))
. subclass(UnitOfMeasure, PhysicalQuantity)
%{UnitOfMeasure
"A standard of measurement for some dimension. 
For example, the &%Meter is a &%UnitOfMeasure for the dimension of length, 
as is the &%Inch.  There is no intrinsic property of a &%UnitOfMeasure that 
makes it primitive or fundamental; rather, a system of units (e.g. 
&%SystemeInternationalUnit) defines a set of orthogonal dimensions and 
assigns units for each."}%
. subclass(SystemeInternationalUnit, UnitOfMeasure)
%{SystemeInternationalUnit
"The &%Class of Systeme 
International (SI) units."}%
. subclass(LengthMeasure, ConstantQuantity)
%{LengthMeasure
"The &%Class of &%ConstantQuantities relating 
to length."}%
. subclass(MassMeasure, ConstantQuantity)
%{MassMeasure
"The &%Class of &%ConstantQuantities relating 
to the amount of matter in an &%Object."}%
. subclass(AreaMeasure, ConstantQuantity)
%{AreaMeasure
"Measures of the amount of space in two 
dimensions."}%
. subclass(VolumeMeasure, ConstantQuantity)
%{VolumeMeasure
"Measures of the amount of space in three 
dimensions."}%
. subclass(TemperatureMeasure, ConstantQuantity)
%{TemperatureMeasure
"Measures of temperature.  
In scientific circles, the temperature of something is understood as the 
average velocity of the atoms or molecules that make up the thing."}%
. subclass(CurrencyMeasure, ConstantQuantity)
%{CurrencyMeasure
"Includes all standard measures of monetary 
value, including &%UnitedStatesDollar, &%UnitedStatesCent, Lire, Yen, etc."}%
. subclass(AngleMeasure, ConstantQuantity)
%{AngleMeasure
"The value of an angle in a plane or in a 
solid."}%
. subclass(PlaneAngleMeasure, AngleMeasure)
%{PlaneAngleMeasure
"The value of an angle in a plane."}%
. subclass(SolidAngleMeasure, AngleMeasure)
. disjoint(SolidAngleMeasure, PlaneAngleMeasure)
%{SolidAngleMeasure
"The value of an angle in a solid."}%
. instance(MeasureFn, BinaryFunction)
. instance(MeasureFn, TotalValuedRelation)
. domain(MeasureFn, a_1, RealNumber)
. domain(MeasureFn, a_2, UnitOfMeasure)
. range(MeasureFn, ConstantQuantity)
%{MeasureFn
"This &%BinaryFunction maps a &%RealNumber and 
a &%UnitOfMeasure to that &%Number of units.  It is used for expressing 
&%ConstantQuantities.  For example, the concept of three meters is 
represented as (&%MeasureFn 3 &%Meter)."}%
. MeasureFn(vNUMBER, vUNIT) = vQUANT
  /\ subclass(vUNIT, vQUANTTYPE) =>
      instance(vQUANT, vQUANTTYPE)
. instance(vREL, RelationExtendedToQuantities)
  /\ instance(vREL, TernaryRelation)
  /\ instance(vNUMBER1, RealNumber)
  /\ instance(vNUMBER2, RealNumber)
  /\ holds(vREL, vNUMBER1, vNUMBER2, vVALUE) =>
      forall vUNIT: U
          . instance(vUNIT, UnitOfMeasure) =>
                holds(vREL, MeasureFn(vNUMBER1, vUNIT),
                      MeasureFn(vNUMBER2, vUNIT), MeasureFn(vVALUE, vUNIT))
. instance(vREL, RelationExtendedToQuantities)
  /\ instance(vREL, BinaryRelation)
  /\ instance(vNUMBER1, RealNumber)
  /\ instance(vNUMBER2, RealNumber)
  /\ holds(vREL, vNUMBER1, vNUMBER2) =>
      forall vUNIT: U
          . instance(vUNIT, UnitOfMeasure) =>
                holds(vREL, MeasureFn(vNUMBER1, vUNIT),
                      MeasureFn(vNUMBER2, vUNIT))
. instance(KiloFn, UnaryFunction)
. instance(KiloFn, TotalValuedRelation)
. domain(KiloFn, a_1, UnitOfMeasure)
. range(KiloFn, UnitOfMeasure)
%{KiloFn
"A &%UnaryFunction that maps a &%UnitOfMeasure into 
a &%UnitOfMeasure that is equal to 1,000 units of the original &%UnitOfMeasure.  
For example, (&%KiloFn &%Gram) is 1,000 &%Grams."}%
. instance(vUNIT, UnitOfMeasure) =>
      KiloFn(vUNIT) = MeasureFn(a_1_0_0_0, vUNIT)
. instance(MegaFn, UnaryFunction)
. instance(MegaFn, TotalValuedRelation)
. domain(MegaFn, a_1, UnitOfMeasure)
. range(MegaFn, UnitOfMeasure)
%{MegaFn
"A &%UnaryFunction that maps a &%UnitOfMeasure into 
a &%UnitOfMeasure that is equal to 1,000,000 units of the original 
&%UnitOfMeasure.  For example, (&%MegaFn &%Hertz) is 1,000,000 &%Hertz."}%
. instance(vUNIT, UnitOfMeasure) =>
      MegaFn(vUNIT) = MeasureFn(a_1_0_0_0_0_0_0, vUNIT)
. instance(GigaFn, UnaryFunction)
. instance(GigaFn, TotalValuedRelation)
. domain(GigaFn, a_1, UnitOfMeasure)
. range(GigaFn, UnitOfMeasure)
%{GigaFn
"A &%UnaryFunction that maps a &%UnitOfMeasure into 
a &%UnitOfMeasure that is equal to 1,000,000,000 units of the original 
&%UnitOfMeasure.  For example, (&%GigaFn &%Hertz) is 1,000,000,000 &%Hertz."}%
. instance(vUNIT, UnitOfMeasure) =>
      GigaFn(vUNIT) = MeasureFn(a_1_0_0_0_0_0_0_0_0_0, vUNIT)
. instance(TeraFn, UnaryFunction)
. instance(TeraFn, TotalValuedRelation)
. domain(TeraFn, a_1, UnitOfMeasure)
. range(TeraFn, UnitOfMeasure)
%{TeraFn
"A &%UnaryFunction that maps a &%UnitOfMeasure 
into a &%UnitOfMeasure that is equal to 1,000,000,000,000 units of the original 
&%UnitOfMeasure.  For example, (&%TeraFn &%Hertz) is 1,000,000,000,000 &%Hertz."}%
. instance(vUNIT, UnitOfMeasure) =>
      TeraFn(vUNIT) = MeasureFn(a_1_0_0_0_0_0_0_0_0_0_0_0_0, vUNIT)
. instance(MilliFn, UnaryFunction)
. instance(MilliFn, TotalValuedRelation)
. domain(MilliFn, a_1, UnitOfMeasure)
. range(MilliFn, UnitOfMeasure)
%{MilliFn
"A &%UnaryFunction that maps a &%UnitOfMeasure into 
a &%UnitOfMeasure that is equal to .001 units of the original &%UnitOfMeasure.  
For example, (&%MilliFn &%Gram) is .001 &%Grams."}%
. instance(vUNIT, UnitOfMeasure) =>
      MilliFn(vUNIT) = MeasureFn(a_0_Period_0_0_1, vUNIT)
. instance(MicroFn, UnaryFunction)
. instance(MicroFn, TotalValuedRelation)
. domain(MicroFn, a_1, UnitOfMeasure)
. range(MicroFn, UnitOfMeasure)
%{MicroFn
"A &%UnaryFunction that maps a &%UnitOfMeasure into 
a &%UnitOfMeasure that is equal to .000001 units of the original &%UnitOfMeasure.  
For example, (&%MicroFn &%Meter) is .000001 &%Meters."}%
. instance(vUNIT, UnitOfMeasure) =>
      MicroFn(vUNIT) = MeasureFn(a_0_Period_0_0_0_0_0_1, vUNIT)
. instance(NanoFn, UnaryFunction)
. instance(NanoFn, TotalValuedRelation)
. domain(NanoFn, a_1, UnitOfMeasure)
. range(NanoFn, UnitOfMeasure)
%{NanoFn
"A &%UnaryFunction that maps a &%UnitOfMeasure into 
a &%UnitOfMeasure that is equal to .000000001 units of the original 
&%UnitOfMeasure.  For example, (&%MicroFn &%SecondDuration) is .000000001 
&%SecondDurations."}%
. instance(vUNIT, UnitOfMeasure) =>
      NanoFn(vUNIT) = MeasureFn(a_0_Period_0_0_0_0_0_0_0_0_1, vUNIT)
. instance(PicoFn, UnaryFunction)
. instance(PicoFn, TotalValuedRelation)
. domain(PicoFn, a_1, UnitOfMeasure)
. range(PicoFn, UnitOfMeasure)
%{PicoFn
"A &%UnaryFunction that maps a &%UnitOfMeasure into 
a &%UnitOfMeasure that is equal to .000000000001 units of the original 
&%UnitOfMeasure.  For example, (&%PicoFn &%SecondDuration) is .000000000001 
&%SecondDurations."}%
. instance(vUNIT, UnitOfMeasure) =>
      PicoFn(vUNIT) =
          MeasureFn(a_0_Period_0_0_0_0_0_0_0_0_0_0_0_1, vUNIT)
. instance(IntervalFn, BinaryFunction)
. domain(IntervalFn, a_1, ConstantQuantity)
. domain(IntervalFn, a_2, ConstantQuantity)
. rangeSubclass(IntervalFn, ConstantQuantity)
. relatedInternalConcept(IntervalFn, RecurrentTimeIntervalFn)
%{IntervalFn
"A &%BinaryFunction that maps two &%ConstantQuantities 
to the &%Class of &%ConstantQuantities that comprise the interval from the first 
&%ConstantQuantity to the second &%ConstantQuantity.  For example, (&%IntervalFn 
(&%MeasureFn 8 &%Meter) (&%MeasureFn 14 &%Meter)) would return the &%Class of 
&%ConstantQuantities between 8 and 14 meters in length."}%
. instance(vQUANTITY, IntervalFn(vFROM, vTO)) <=>
      greaterThanOrEqualTo(vQUANTITY, vFROM)
      /\ lessThanOrEqualTo(vQUANTITY, vTO)
. instance(MagnitudeFn, UnaryFunction)
. domain(MagnitudeFn, a_1, ConstantQuantity)
. range(MagnitudeFn, RealNumber)
%{MagnitudeFn
"The magnitude of a &%ConstantQuantity is the 
numeric value for the quantity.  In other words, &%MagnitudeFn converts 
a &%ConstantQuantity with an associated &%UnitOfMeasure into an ordinary 
&%RealNumber.  For example, the magnitude of the &%ConstantQuantity 2 
&%Kilometers is the &%RealNumber 2.   Note that the magnitude of a 
quantity in a given unit times that unit is equal to the original 
quantity."}%
. instance(vNUMBER, RealNumber)
  /\ instance(vUNIT, UnitOfMeasure) =>
      MagnitudeFn(MeasureFn(vNUMBER, vUNIT)) = vNUMBER
. instance(PerFn, BinaryFunction)
. instance(PerFn, TotalValuedRelation)
. domain(PerFn, a_1, ConstantQuantity)
. domain(PerFn, a_2, ConstantQuantity)
. range(PerFn, FunctionQuantity)
%{PerFn
"&%PerFn maps two instances of &%ConstantQuantity to the &%FunctionQuantity composed of these two instances.  For example, (&%PerFn (&%MeasureFn 2 (&%MicroFn &%Gram)) (&%MeasureFn 1 (&%KiloFn &%Gram))) denotes the &%FunctionQuantity of 
2 micrograms per kiogram.  This function is useful, because it allows the knowledge 
engineer to dynamically generate instances of &%FunctionQuantity."}%
. subrelation(DensityFn, PerFn)
. instance(DensityFn, TotalValuedRelation)
. domain(DensityFn, a_1, MassMeasure)
. domain(DensityFn, a_2, VolumeMeasure)
. range(DensityFn, FunctionQuantity)
%{DensityFn
"&%DensityFn maps an instance of &%MassMeasure 
and an instance of &%VolumeMeasure to the density represented by this 
proportion of mass and volume.  For example, (&%DensityFn (&%MeasureFn 3 &%Gram) 
(&%MeasureFn 1 &%Liter)) represents the density of 3 grams per liter."}%
. subrelation(SpeedFn, PerFn)
. instance(SpeedFn, TotalValuedRelation)
. domain(SpeedFn, a_1, LengthMeasure)
. domain(SpeedFn, a_2, TimeDuration)
. range(SpeedFn, FunctionQuantity)
%{SpeedFn
"Maps an instance of &%LengthMeasure and an instance of 
&%TimeDuration to the speed represented by this proportion of distance and time.  
For example, (&%SpeedFn (&%MeasureFn 55 &%Mile)(&%MeasureFn 1 &%HourDuration)) 
represents the velocity of 55 miles per hour."}%
. instance(VelocityFn, QuaternaryFunction)
. instance(VelocityFn, TotalValuedRelation)
. domain(VelocityFn, a_1, LengthMeasure)
. domain(VelocityFn, a_2, TimeDuration)
. domain(VelocityFn, a_3, Region)
. domain(VelocityFn, a_4, DirectionalAttribute)
. range(VelocityFn, FunctionQuantity)
%{VelocityFn
"Specifies the velocity of an object, i.e. the speed 
and the direction of the speed.  For example (&%VelocityFn (&%MeasureFn 55 &%Mile) 
(&%MeasureFn 2 &%HourDuration) ?REFERENCE &%North) denotes the velocity of 55 miles 
per hour North of the given reference point ?REFERENCE."}%
. measure(vOBJECT,
          VelocityFn(vDISTANCE, vTIME, vREF, vDIRECTION)) =>
      measure(vOBJECT, SpeedFn(vDISTANCE, vTIME))
. subclass(Meter, LengthMeasure)
. instance(Meter, SystemeInternationalUnit)
%{Meter
"SI &%LengthMeasure.  Symbol:  m. It is one of the
base units in SI, and it is currently defined as follows: the &%Meter 
is the length of the path traveled by light in a vacuum during a time 
interval of 1/299792458 of a &%SecondDuration."}%
. subclass(Gram, MassMeasure)
. instance(Gram, SystemeInternationalUnit)
%{Gram
"Submultiple of kilogram.  Symbol: g. 
1 kilogram = 1000 &%Grams."}%
. subclass(SecondDuration, TimeDuration)
. instance(SecondDuration, SystemeInternationalUnit)
%{SecondDuration
"SI &%TimeDuration.  Symbol: s. 
It is one of the base units in SI, and it is currently defined as 
follows: the &%SecondDuration is the duration of 9192631770 periods of 
the radiation corresponding to the transition between the two hyperfine 
levels of the ground state of the cesium 133 atom."}%
. subclass(Ampere, FunctionQuantity)
. instance(Ampere, SystemeInternationalUnit)
%{Ampere
"SI electric current measure.  Symbol: A. It is 
one of the base units in SI. It is defined as follows: the &%Ampere is 
that constant current which, if maintained in two straight parallel 
conductors of infinite length, of negligible circular cross-section, and 
placed 1 &%Meter apart in a vacuum, would produce between these conductors 
a force equal to 2*10^(-7) &%Newton per &%Meter of length."}%
. subclass(KelvinDegree, TemperatureMeasure)
. instance(KelvinDegree, SystemeInternationalUnit)
%{KelvinDegree
"SI &%TemperatureMeasure.  Symbol: K. 
It is one of the base units in SI (it is also a unit in the ITS system). 
Kelvin differs from the Celsius scale in that the triple point of water 
is defined to be 273.16 &%KelvinDegrees while it is 0 &%CelsiusDegrees.  
The magnitudes of intervals in the two scales are the same.  By definition 
the conversion constant is 273.15."}%
. subclass(Mole, MassMeasure)
. instance(Mole, SystemeInternationalUnit)
%{Mole
"SI amount of substance unit. symbol: mol. It is one 
of the base units in SI. It is defined as follows:  the &%Mole is the 
amount of substance of a system which contains as many elementary entities 
as there are atoms in 0.012 &%Kilograms of carbon 12.  Note that, when this 
&%UnitOfMeasure is used, the elementary entities must be specified - they 
may be atoms, molecules, ions, electrons, etc. or groups of such 
particles."}%
. subclass(Candela, FunctionQuantity)
. instance(Candela, SystemeInternationalUnit)
%{Candela
"SI luminosity intensity measure.  Symbol: cd. 
It is one of the base units in SI, and it is currently defined as 
follows:  the &%Candela is the luminous intensity, in a given direction, 
of a source that emits monochromatic radiation of frequency 540*10^12 
&%Hertz and that has a radiant intensity in that direction of 1/683 
&%Watt per &%Steradian."}%
. subclass(Liter, VolumeMeasure)
. instance(Liter, UnitOfMeasure)
%{Liter
"Unit of volume in the metric system.  It is currently 
defined to be equal to one cubic decimeter (0.001 cubic meter).  Symbol: l."}%
. subclass(Centimeter, LengthMeasure)
. instance(Centimeter, UnitOfMeasure)
%{Centimeter
"Submultiple of &%Meter.  Symbol: cm. It is 
the 100th part of a &%Meter"}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, Centimeter) =
          MeasureFn(MultiplicationFn(vNUMBER, a_0_Period_0_1), Meter)
. subclass(Radian, PlaneAngleMeasure)
. instance(Radian, SystemeInternationalUnit)
%{Radian
"SI plane angle measure.  Symbol: rad.  It is the 
angle of a circle subtended by an arc equal in length to the circle's 
radius. Another definition is:  the plane angle between two radii of a 
circle which cut off on the circumference an arc equal in length to the 
radius.  &%Radian = m/m = 1."}%
. subclass(Steradian, SolidAngleMeasure)
. instance(Steradian, SystemeInternationalUnit)
%{Steradian
"SI solid angle measure.  Symbol: sr.  It is 
the solid angle of a sphere subtended by a portion of the surface whose 
area is equal to the square of the sphere's radius.  Another definition 
is: the solid angle which, having its vertex in the center of the sphere, 
cuts off an area of the surface of the sphere equal to that of a square 
with sides of length equal to the radius of the sphere.  &%Steradian = 
m^2/m^2 = 1."}%
. subclass(Hertz, TimeDependentQuantity)
. instance(Hertz, SystemeInternationalUnit)
%{Hertz
"SI frequency measure.  Symbol: Hz. It is the 
number of cycles per second.  &%Hertz = s^(-1).  Note that &%Hertz 
does not have a conversion function."}%
. subclass(Newton, FunctionQuantity)
. instance(Newton, SystemeInternationalUnit)
%{Newton
"SI force measure.  Symbol: N. It is that force 
which gives to a mass of 1 kilogram an acceleration of 1 &%Meter per 
&%SecondDuration.  &%Newton = m*kg*s^(-2)."}%
. subclass(Pascal, FunctionQuantity)
. instance(Pascal, SystemeInternationalUnit)
%{Pascal
"SI pressure measure.  Symbol:Pa. It is the 
pressure of one &%Newton per square &%Meter.  &%Pascal = N/m^2 
= m^(-1)*kg*s^(-2)."}%
. subclass(Joule, FunctionQuantity)
. instance(Joule, SystemeInternationalUnit)
%{Joule
"SI energy measure.  Symbol: J.  It is the work 
done when the point of application of 1 &%Newton is displaced a distance 
of 1 &%Meter in the direction of the force.  &%Joule = N*m = 
m^2*kg*s^(-2)."}%
. subclass(Watt, FunctionQuantity)
. instance(Watt, SystemeInternationalUnit)
%{Watt
"SI power measure.  Symbol: W.  A &%UnitOfMeasure 
that measures power, i.e. energy produced or expended divided by 
&%TimeDuration. It is the power which gives rise to the production 
of energy (or work) at the rate of one &%Joule per &%SecondDuration.  
&%Watt = J/s = m^2*kg*s^(-3)."}%
. subclass(Coulomb, TimeDependentQuantity)
. instance(Coulomb, SystemeInternationalUnit)
%{Coulomb
"SI electric charge measure.  Symbol: C. It is 
the quantity of electric charge transported through a cross section of 
a conductor in an electric circuit during each &%SecondDuration by a 
current of 1 &%Ampere.  Coulomb = s*A."}%
. subclass(Volt, FunctionQuantity)
. instance(Volt, SystemeInternationalUnit)
%{Volt
"SI electric potential measure.  Symbol: V.  It is 
the difference of electric potential between two points of a conducting 
wire carrying a constant current of 1 &%Ampere, when the power dissipated 
between these points is equal to 1 &%Watt.  &%Volt = W/A = 
m^2*kg*s^(-3)*A^(-1)."}%
. subclass(Farad, FunctionQuantity)
. instance(Farad, SystemeInternationalUnit)
%{Farad
"SI capacitance measure.  Symbol: F.  It is the 
capacitance of a capacitator between the plates of which there appears 
a difference of potential of 1 &%Volt when it is charged by a quantity 
of electricity equal to 1 Coulomb.  &%Farad = C/V = 
m^(-2)*kg(-1)*s^4*A^2."}%
. subclass(Ohm, FunctionQuantity)
. instance(Ohm, SystemeInternationalUnit)
%{Ohm
"SI electric resistance measure. It is the electric
resistance between two points of a conductor when a constant difference 
of potential of 1 &%Volt, applied between these two points,
produces in this conductor a current of 1 &%Ampere, this conductor not
being the force of any electromotive force.  &%Ohm = V/A = 
m^2*kg*s^(-3)*A^(-2)."}%
. subclass(Siemens, FunctionQuantity)
. instance(Siemens, SystemeInternationalUnit)
%{Siemens
"SI electric conductance measure.  Symbol:  S.  
In the case of direct current, the conductance in &%Siemens is the 
reciprocal of the resistance in &%Ohms; in the case of alternating current, 
it is the reciprocal of the impedance in ohms.  siemens = A/V = 
m^(-2)*kg(-1)*s^(3)*A^2."}%
. subclass(Weber, FunctionQuantity)
. instance(Weber, SystemeInternationalUnit)
%{Weber
"SI magnetic flux measure.  Symbol: Wb. It is the 
magnetic flux which, linking a circuit of one turn, produces in it an
electromotive force of 1 &%Volt as it is reduced to zero at a uniform
rate in 1 &%SecondDuration.  &%Weber = V*s = m^2*kg*s^(-2)*A^(-1)."}%
. subclass(Tesla, FunctionQuantity)
. instance(Tesla, SystemeInternationalUnit)
%{Tesla
"SI magnetic flux density measure.  Symbol:  T.
One &%Tesla equals one &%Weber per square &%Meter.  &%Tesla = Wb/m^2 = 
kg*s^(-2)*A^(-1)."}%
. subclass(Henry, FunctionQuantity)
. instance(Henry, SystemeInternationalUnit)
%{Henry
"SI inductance measure.  Symbol: H.  One &%Henry 
is equivalent to one &%Volt divided by one &%Ampere per &%SecondDuration. 
If a current changing at the rate of one &%Ampere per &%SecondDuration 
induces an electromotive force of one &%Volt, the circuit has an 
inductance of one &%Henry.  &%Henry = Wb/A = m^2*kg*s^(-2)*A^(-2)."}%
. subclass(CelsiusDegree, TemperatureMeasure)
. instance(CelsiusDegree, SystemeInternationalUnit)
%{CelsiusDegree
"A &%TemperatureMeasure.  The freezing point 
and the boiling point of water are, respectively, 0 &%CelsiusDegrees and 100 
&%CelsiusDegrees."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, CelsiusDegree) =
          MeasureFn(SubtractionFn(vNUMBER, a_2_7_3_Period_1_5), KelvinDegree)
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, CelsiusDegree) =
          MeasureFn(DivisionFn(SubtractionFn(vNUMBER, a_3_2), a_1_Period_8),
                    FahrenheitDegree)
. subclass(Lumen, FunctionQuantity)
. instance(Lumen, SystemeInternationalUnit)
%{Lumen
"SI luminous flux measure.  Symbol: lm.  It is the 
amount streaming outward through one solid angle of 1 &%Steradian from a 
uniform point source having an intensity of one &%Candela.  &%Lumen = 
cd*sr = cd * 1."}%
. subclass(Lux, FunctionQuantity)
. instance(Lux, SystemeInternationalUnit)
%{Lux
"SI illuminance measure.  Symbol: lx.  It is the 
amount of illumination provided when one &%Lumen is evenly distributed 
over an area of 1 square &%Meter. This is also equivalent to the 
illumination that would exist on a surface all points of which are one 
&%Meter from a point source of one &%Candela.  &%Lux = lm/m^2 = 
m^(-2)*cd."}%
. subclass(Becquerel, TimeDependentQuantity)
. instance(Becquerel, SystemeInternationalUnit)
%{Becquerel
"SI activity measure.  Symbol: Bq.  It measures 
the amount of radioactivity contained in a given sample of matter. It is 
that quantity of a radioactive element in which there is one atomic 
disintegration per &%SecondDuration.  &%Becquerel = s^(-1)."}%
. subclass(Gray, FunctionQuantity)
. instance(Gray, SystemeInternationalUnit)
%{Gray
"SI absorbed dose measure.  Symbol: Gy.  It measures 
the dose of radiation absorbed in living tissue. It is equal approximately 
to the absorbed dose delivered when the energy per unit mass imparted to
matter by ionizing radiation is 1 &%Joule per kilogram.  &%Gray = J/kg 
= m^2*s^(-2)."}%
. subclass(Sievert, FunctionQuantity)
. instance(Sievert, SystemeInternationalUnit)
%{Sievert
"SI dose equivalent measure.  Symbol: Sv.  It is 
a unit of biologic dose of ionizing radiation.  The &%Sievert makes it 
possible to normalize doses of different types of radiation. It takes 
into account the relative biologic effectiveness of ionizing radiation, 
since each form of such radiation--e.g., X rays, gamma rays, neutrons--
has a slightly different effect on living tissue for a given absorbed 
dose. The dose equivalent of a given type of radiation (in &%Sievert) is 
the dose of the radiation in &%Gray multiplied by a quality factor that 
is based on the relative biologic effectiveness of the radiation. 
Accordingly, one &%Sievert is generally defined as the amount of radiation 
roughly equivalent in biologic effectiveness to one &%Gray of gamma 
radiation.  &%Sievert = J/kg = m^2*s^(-2)"}%
. subclass(DayDuration, TimeDuration)
. instance(DayDuration, UnitOfMeasure)
%{DayDuration
"Time unit. 1 day = 24 hours."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, DayDuration) =
          MeasureFn(MultiplicationFn(vNUMBER, a_2_4), HourDuration)
. subclass(HourDuration, TimeDuration)
. instance(HourDuration, UnitOfMeasure)
%{HourDuration
"Time unit. 1 hour = 60 minutes."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, HourDuration) =
          MeasureFn(MultiplicationFn(vNUMBER, a_6_0), MinuteDuration)
. subclass(MinuteDuration, TimeDuration)
. instance(MinuteDuration, UnitOfMeasure)
%{MinuteDuration
"Time unit. 1 minute = 60 seconds. "}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, MinuteDuration) =
          MeasureFn(MultiplicationFn(vNUMBER, a_6_0), SecondDuration)
. subclass(WeekDuration, TimeDuration)
. instance(WeekDuration, UnitOfMeasure)
%{WeekDuration
"Time unit.  A week's duration is seven days."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, WeekDuration) =
          MeasureFn(MultiplicationFn(vNUMBER, a_7), DayDuration)
. subclass(MonthDuration, TimeDuration)
. instance(MonthDuration, UnitOfMeasure)
%{MonthDuration
"Time unit.  A month's duration is at least
28 days, and no more than 31 days.  Note that this unit is a range, rather
than an exact amount, unlike most other units."}%
. instance(vNUMBER, RealNumber) =>
      greaterThanOrEqualTo(MeasureFn(vNUMBER, MonthDuration),
                           MeasureFn(MultiplicationFn(vNUMBER, a_2_8),
                                     DayDuration))
. instance(vNUMBER, RealNumber) =>
      lessThanOrEqualTo(MeasureFn(vNUMBER, MonthDuration),
                        MeasureFn(MultiplicationFn(vNUMBER, a_3_1),
                                  DayDuration))
. subclass(YearDuration, TimeDuration)
. instance(YearDuration, UnitOfMeasure)
%{YearDuration
"Time unit. one calendar year. 1 year =
365 days = 31536000 seconds."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, YearDuration) =
          MeasureFn(MultiplicationFn(vNUMBER, a_3_6_5), DayDuration)
. subclass(Amu, MassMeasure)
. instance(Amu, UnitOfMeasure)
%{Amu
"Atomic mass unit.  Symbol: u. It is the mass of 
the twelfth part of an atom of the Carbon 12 isotope."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, Amu) =
          MeasureFn(MultiplicationFn(vNUMBER,
                                     a_1_Period_6_6_0_5_4_0_2_E_Minus_2_4),
                    Gram)
. subclass(ElectronVolt, FunctionQuantity)
. instance(ElectronVolt, UnitOfMeasure)
%{ElectronVolt
"The &%ElectronVolt is an energy measure.  
Symbol: eV.  It is the kinetic energy acquired by an electron in passing 
through a potential difference of 1 &%Volt in a vacuum."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, ElectronVolt) =
          MeasureFn(MultiplicationFn(vNUMBER,
                                     a_1_Period_6_0_2_1_7_7_3_3_E_Minus_1_9),
                    Joule)
. subclass(Angstrom, LengthMeasure)
. instance(Angstrom, UnitOfMeasure)
%{Angstrom
"The &%Angstrom is a &%LengthMeasure. 
1 &%Angstrom = 10^(-10) m"}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, Angstrom) =
          MeasureFn(MultiplicationFn(vNUMBER, a_1_Period_0_E_Minus_1_0),
                    Meter)
. subclass(FootLength, LengthMeasure)
. instance(FootLength, UnitOfMeasure)
%{FootLength
"English length unit of feet."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, FootLength) =
          MeasureFn(MultiplicationFn(vNUMBER, a_0_Period_3_0_4_8), Meter)
. subclass(Inch, LengthMeasure)
. instance(Inch, UnitOfMeasure)
%{Inch
"English length unit of inches."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, Inch) =
          MeasureFn(MultiplicationFn(vNUMBER, a_0_Period_0_2_5_4), Meter)
. subclass(Mile, LengthMeasure)
. instance(Mile, UnitOfMeasure)
%{Mile
"English length unit of miles."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, Mile) =
          MeasureFn(MultiplicationFn(vNUMBER, a_1_6_0_9_Period_3_4_4), Meter)
. subclass(UnitedStatesGallon, VolumeMeasure)
. instance(UnitedStatesGallon, UnitOfMeasure)
. relatedInternalConcept(UnitedStatesGallon, UnitedKingdomGallon)
%{UnitedStatesGallon
"Unit of volume commonly used in the 
United States."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, UnitedStatesGallon) =
          MeasureFn(MultiplicationFn(vNUMBER, a_3_Period_7_8_5_4_1_1_7_8_4),
                    Liter)
. subclass(Quart, VolumeMeasure)
. instance(Quart, UnitOfMeasure)
%{Quart
"English unit of volume equal to 1/4 of a 
&%UnitedStatesGallon."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, Quart) =
          MeasureFn(DivisionFn(vNUMBER, a_4), UnitedStatesGallon)
. subclass(Pint, VolumeMeasure)
. instance(Pint, UnitOfMeasure)
%{Pint
"English unit of volume equal to 1/2 of a 
&%Quart."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, Pint) =
          MeasureFn(DivisionFn(vNUMBER, a_2), Quart)
. subclass(Cup, VolumeMeasure)
. instance(Cup, UnitOfMeasure)
%{Cup
"English unit of volume equal to 1/2 of a 
&%Pint."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, Cup) = MeasureFn(DivisionFn(vNUMBER, a_2), Pint)
. subclass(Ounce, VolumeMeasure)
. instance(Ounce, UnitOfMeasure)
%{Ounce
"English unit of volume equal to 1/8 of a 
&%Cup."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, Ounce) =
          MeasureFn(DivisionFn(vNUMBER, a_8), Cup)
. subclass(UnitedKingdomGallon, VolumeMeasure)
. instance(UnitedKingdomGallon, UnitOfMeasure)
%{UnitedKingdomGallon
"Unit of volume commonly used in the 
United Kingdom."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, UnitedKingdomGallon) =
          MeasureFn(MultiplicationFn(vNUMBER, a_4_Period_5_4_6_0_9), Liter)
. subclass(AtomGram, MassMeasure)
. instance(AtomGram, UnitOfMeasure)
%{AtomGram
"&%MassMeasure that is also known as the gram-atom.  
Defined as the mass in grams of 1 &%Mole of pure substance.  For example, 
1 &%AtomGram of Carbon 12 will be 12 &%Grams of pure Carbon 12.  2 &%AtomGrams 
of the same substance will be 24 &%Grams of it.  This is an unusual unit in 
that it is essentially 1 &%Mole of 'stuff' measured in grams, so that the 
actual value (i.e. mass) depends on the type of substance."}%
. subclass(PoundMass, MassMeasure)
. instance(PoundMass, UnitOfMeasure)
%{PoundMass
"English mass unit of pounds."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, PoundMass) =
          MeasureFn(MultiplicationFn(vNUMBER, a_4_5_3_Period_5_9_2_3_7),
                    Gram)
. subclass(Slug, MassMeasure)
. instance(Slug, UnitOfMeasure)
%{Slug
"English mass unit of slugs."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, Slug) =
          MeasureFn(MultiplicationFn(vNUMBER, a_1_4_5_9_3_Period_9_0), Gram)
. subclass(RankineDegree, TemperatureMeasure)
. instance(RankineDegree, UnitOfMeasure)
%{RankineDegree
"A &%TemperatureMeasure.  Note 
that 0 &%RankineDegrees is the same as the absolute zero (i.e. 0 
&%KelvinDegrees)."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, RankineDegree) =
          MeasureFn(MultiplicationFn(vNUMBER, a_1_Period_8), KelvinDegree)
. subclass(FahrenheitDegree, TemperatureMeasure)
. instance(FahrenheitDegree, UnitOfMeasure)
%{FahrenheitDegree
"A &%TemperatureMeasure that is commonly 
used in the United States.  On the Fahrenheit scale, the freezing point 
of water is 32 &%FahrenheitDegrees, and the boiling point of water is 
212 &%FahrenheitDegrees."}%
. subclass(PoundForce, FunctionQuantity)
. instance(PoundForce, UnitOfMeasure)
%{PoundForce
"English pound of force. The conversion
factor depends on the local value of the acceleration of free fall. A
mean value is used in the conversion axiom associated with this 
constant."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, PoundForce) =
          MeasureFn(MultiplicationFn(vNUMBER, a_4_Period_4_4_8_2_2_2),
                    Newton)
. subclass(Calorie, FunctionQuantity)
. instance(Calorie, UnitOfMeasure)
%{Calorie
"A &%Calorie is an energy measure."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, Calorie) =
          MeasureFn(MultiplicationFn(vNUMBER, a_4_Period_1_8_6_8), Joule)
. subclass(BritishThermalUnit, FunctionQuantity)
. instance(BritishThermalUnit, UnitOfMeasure)
%{BritishThermalUnit
"An energy measure."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, BritishThermalUnit) =
          MeasureFn(MultiplicationFn(vNUMBER,
                                     a_1_0_5_5_Period_0_5_5_8_5_2_6_2),
                    Joule)
. subclass(AngularDegree, PlaneAngleMeasure)
. instance(AngularDegree, UnitOfMeasure)
%{AngularDegree
"A plane angle measure."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, AngularDegree) =
          MeasureFn(MultiplicationFn(vNUMBER, DivisionFn(Pi, a_1_8_0)),
                    Radian)
. measure(vANGLE, MeasureFn(vNUMBER, AngularDegree)) =>
      greaterThanOrEqualTo(vNUMBER, a_0)
      /\ lessThanOrEqualTo(vNUMBER, a_3_6_0)
. MeasureFn(a_0, AngularDegree) = MeasureFn(a_3_6_0, AngularDegree)
. subclass(UnitedStatesDollar, CurrencyMeasure)
. instance(UnitedStatesDollar, UnitOfMeasure)
%{UnitedStatesDollar
"A currency measure."}%
. subclass(UnitedStatesCent, CurrencyMeasure)
. instance(UnitedStatesCent, UnitOfMeasure)
%{UnitedStatesCent
"A currency measure.  1 &%UnitedStatesCent is 
equal to .01 &%UnitedStatesDollars."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, UnitedStatesCent) =
          MeasureFn(MultiplicationFn(vNUMBER, a_0_Period_0_1),
                    UnitedStatesDollar)
. subclass(EuroDollar, CurrencyMeasure)
. instance(EuroDollar, UnitOfMeasure)
%{EuroDollar
"A currency measure of most European Union countries."}%
. subclass(EuroCent, CurrencyMeasure)
. instance(EuroCent, UnitOfMeasure)
%{EuroCent
"A currency measure.  1 &%EuroCent is equal to .01 
&%EuroDollars."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, EuroCent) =
          MeasureFn(MultiplicationFn(vNUMBER, a_0_Period_0_1), EuroDollar)
. subclass(InformationMeasure, ConstantQuantity)
%{InformationMeasure
"Measures of the amount of information.  
Includes &%Bit, &%Byte, and multiples of these, e.g. &%KiloByte and 
&%MegaByte."}%
. subclass(Bit, InformationMeasure)
. instance(Bit, UnitOfMeasure)
%{Bit
"One &%Bit of information.  A one or a zero."}%
. subclass(Byte, InformationMeasure)
. instance(Byte, UnitOfMeasure)
%{Byte
"One &%Byte of information.  A &%Byte is eight 
&%Bits."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, Byte) =
          MeasureFn(MultiplicationFn(vNUMBER, a_8), Bit)
. subclass(KiloByte, InformationMeasure)
. instance(KiloByte, UnitOfMeasure)
%{KiloByte
"One &%KiloByte (KB) of information.  One 
&%KiloByte is 1024 &%Bytes.  Note that this sense of 'kilo' is 
different from the one accepted in the SI system."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, KiloByte) =
          MeasureFn(MultiplicationFn(vNUMBER, a_1_0_2_4), Byte)
. subclass(MegaByte, InformationMeasure)
. instance(MegaByte, UnitOfMeasure)
%{MegaByte
"One &%MegaByte (MB) of information.  One 
&%MegaByte is 1024 &%KiloBytes.  Note that this sense of 'mega' is 
different from the one accepted in the SI system."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, MegaByte) =
          MeasureFn(MultiplicationFn(vNUMBER, a_1_0_2_4), KiloByte)
. instance(measure, BinaryPredicate)
. instance(measure, AsymmetricRelation)
. domain(measure, a_1, Object)
. domain(measure, a_2, PhysicalQuantity)
%{measure
"A very general &%Predicate for asserting that a 
particular &%Object is measured by a particular &%ConstantQuantity.  
In general, the second argument of this &%Predicate will be an instance 
of the &%Function &%MeasureFn."}%
. instance(age, SingleValuedRelation)
. subrelation(age, measure)
. domain(age, a_2, TimeDuration)
%{age
"Simply relates an &%Object to a &%ConstantQuantity 
specifying the age of the &%Object."}%
. instance(vTIME, TimePoint)
  /\ holdsDuring(vTIME, age(vOBJ, vDURATION)) =>
      duration(TimeIntervalFn(BeginFn(WhenFn(vOBJ)), vTIME), vDURATION)
. subrelation(length, measure)
. domain(length, a_2, LengthMeasure)
%{length
"&%BinaryPredicate that is used to state the measure 
of an &%Object from one point to another point along its surface.  Note 
that the difference between the predicates &%length and &%distance is that 
the &%length is used to state the &%LengthMeasure of one of the dimensions of 
a single object, while &%distance is used to state the &%LengthMeasure that 
separates two distinct objects"}%
. instance(width, SingleValuedRelation)
. subrelation(width, length)
%{width
"&%BinaryPredicate that is used to state the measure 
of an &%Object from side to side at its widest span."}%
. subrelation(height, length)
. domain(height, a_1, SelfConnectedObject)
. domain(height, a_2, LengthMeasure)
%{height
"The height of an &%Object is the distance between 
its &%top and its &%bottom."}%
. subrelation(diameter, width)
%{diameter
"&%BinaryPredicate that is used to state the 
measure of a circular &%Object from side to side."}%
. instance(distance, SingleValuedRelation)
. instance(distance, SpatialRelation)
. instance(distance, TernaryPredicate)
. domain(distance, a_1, Physical)
. domain(distance, a_2, Physical)
. domain(distance, a_3, LengthMeasure)
%{distance
"(&%distance ?OBJ1 ?OBJ2 ?QUANT) means that the 
shortest distance between the two objects ?OBJ1 and ?OBJ2 is ?QUANT.  Note 
that the difference between the predicates &%length and &%distance is that 
the &%length is used to state the &%LengthMeasure of one of the dimensions of 
a single object, while &%distance is used to state the &%LengthMeasure that 
separates two distinct objects."}%
. distance(vOBJ1, vOBJ2, vQUANT) => distance(vOBJ2, vOBJ1, vQUANT)
. subrelation(altitude, distance)
. instance(altitude, SingleValuedRelation)
%{altitude
"A &%TernaryPredicate that is used to state the &%distance
between the &%top of an &%Object and another point that is below the &%top of the 
&%Object (often this other point will be sea level).  Note that this &%Predicate can 
be used to specify, for example, the height of geographic features, e.g. mountains, 
the altitude of aircraft, and the orbit of satellites around the Earth."}%
. altitude(vOBJ1, vOBJ2, vHEIGHT) =>
      orientation(vOBJ1, vOBJ2, Above)
. altitude(vOBJ1, vOBJ2, vHEIGHT) =>
      exists vTOP: U . top(vTOP, vOBJ1) /\ distance(vTOP, vOBJ2, vHEIGHT)
. subrelation(depth, distance)
. instance(depth, SingleValuedRelation)
%{depth
"A &%TernaryPredicate that is used to state the &%distance
between the &%top of an &%Object and another point that is above the &%top of the 
&%Object (often this other point will be sea level).  Note that this &%Predicate can 
be used to specify, for example, the depth of marine life or submarines, for example."}%
. depth(vOBJ1, vOBJ2, vDEPTH) => orientation(vOBJ1, vOBJ2, Below)
. depth(vOBJ1, vOBJ2, vDEPTH) =>
      exists vBOTTOM: U
          . bottom(vBOTTOM, vOBJ1) /\ distance(vBOTTOM, vOBJ2, vDEPTH)
. instance(larger, BinaryPredicate)
. instance(larger, SpatialRelation)
. instance(larger, TransitiveRelation)
. instance(larger, IrreflexiveRelation)
. domain(larger, a_1, Object)
. domain(larger, a_2, Object)
%{larger
"(&%larger ?OBJ1 ?OBJ2) means that ?OBJ1 is 
larger, with respect to all &%LengthMeasures, than ?OBJ2."}%
. larger(vOBJ1, vOBJ2) =>
      forall vQUANT1: U; vQUANT2: U
          . measure(vOBJ1, MeasureFn(vQUANT1, LengthMeasure))
            /\ measure(vOBJ2, MeasureFn(vQUANT2, LengthMeasure)) =>
                greaterThan(vQUANT1, vQUANT2)
. instance(smaller, BinaryPredicate)
. instance(smaller, SpatialRelation)
. instance(smaller, TransitiveRelation)
. instance(smaller, IrreflexiveRelation)
. domain(smaller, a_1, Object)
. domain(smaller, a_2, Object)
. inverse(smaller, larger)
%{smaller
"(&%smaller ?OBJ1 ?OBJ2) means that ?OBJ1 
is smaller, with respect to all &%LengthMeasures, than ?OBJ2."}%
. instance(monetaryValue, SingleValuedRelation)
. subrelation(monetaryValue, measure)
. domain(monetaryValue, a_1, Physical)
. domain(monetaryValue, a_2, CurrencyMeasure)
%{monetaryValue
"A &%BinaryPredicate that associates an 
&%Object or &%Process with its value expressed as an instance of 
&%CurrencyMeasure."}%
. instance(WealthFn, UnaryFunction)
. domain(WealthFn, a_1, Agent)
. range(WealthFn, CurrencyMeasure)
%{WealthFn
"A &%UnaryFunction that maps an &%Agent to a 
&%CurrencyMeasure specifying the value of the property owned by the &%Agent.  
Note that this &%Function is generally used in conjunction with the 
&%Function &%PropertyFn, e.g. (&%WealthFn (&%PropertyFn BillGates)) would 
return the monetary value of the sum of Bill Gates' holdings."}%
. WealthFn(vPERSON) = vAMOUNT <=>
      monetaryValue(PropertyFn(vPERSON), vAMOUNT)
. instance(PositiveInfinity, TimePoint)
%{PositiveInfinity
"The &%TimePoint that is after 
all other &%TimePoints."}%
. instance(vPOINT, TimePoint) /\ not vPOINT = PositiveInfinity =>
      before(vPOINT, PositiveInfinity)
. instance(vPOINT, TimePoint) /\ not vPOINT = PositiveInfinity =>
      exists vOTHERPOINT: U
          . temporallyBetween(vPOINT, vOTHERPOINT, PositiveInfinity)
. instance(NegativeInfinity, TimePoint)
%{NegativeInfinity
"The &%TimePoint that is before 
all other &%TimePoints."}%
. instance(vPOINT, TimePoint) /\ not vPOINT = NegativeInfinity =>
      before(NegativeInfinity, vPOINT)
. instance(vPOINT, TimePoint) /\ not vPOINT = NegativeInfinity =>
      exists vOTHERPOINT: U
          . temporallyBetween(NegativeInfinity, vOTHERPOINT, vPOINT)
. instance(duration, BinaryPredicate)
. instance(duration, AsymmetricRelation)
. instance(duration, TotalValuedRelation)
. domain(duration, a_1, TimeInterval)
. domain(duration, a_2, TimeDuration)
%{duration
"(&%duration ?POS ?TIME) means that the 
duration of the &%TimePosition ?POS is ?TIME.  Note that this 
&%Predicate can be used in conjunction with the &%Function &%WhenFn 
to specify the duration of any instance of &%Physical."}%
. instance(frequency, BinaryPredicate)
. instance(frequency, AsymmetricRelation)
. domainSubclass(frequency, a_1, Process)
. domain(frequency, a_2, TimeDuration)
%{frequency
"(&%frequency ?PROC ?TIME) means that the 
&%Process type of ?PROC recurs after every interval of ?TIME."}%
. frequency(vPROC, vTIME1) =>
      forall vTIME2: U
          . duration(vTIME2, vTIME1) =>
                exists vPOSITION: U
                    . temporalPart(vPOSITION, vTIME2)
                      /\ holdsDuring(vPOSITION,
                                     True
                                         when exists vINST: U
                                                  . instance(vINST, vPROC)
                                         else False)
. instance(temporalPart, BinaryPredicate)
. instance(temporalPart, TemporalRelation)
. instance(temporalPart, PartialOrderingRelation)
. domain(temporalPart, a_1, TimePosition)
. domain(temporalPart, a_2, TimePosition)
%{temporalPart
"The temporal analogue of the spatial &%part predicate.  
(&%temporalPart ?POS1 ?POS2) means that &%TimePosition ?POS1 is part of &%TimePosition ?POS2.  Note that since &%temporalPart is a &%ReflexiveRelation every &%TimePostion is a 
&%temporalPart of itself."}%
. instance(vPOINT, TimePoint) =>
      exists vINTERVAL: U
          . instance(vINTERVAL, TimeInterval)
            /\ temporalPart(vPOINT, vINTERVAL)
. instance(vINTERVAL, TimeInterval) =>
      exists vPOINT: U
          . instance(vPOINT, TimePoint) /\ temporalPart(vPOINT, vINTERVAL)
. holdsDuring(vTIME1, vSITUATION)
  /\ temporalPart(vTIME2, vTIME1) =>
      holdsDuring(vTIME2, vSITUATION)
. holdsDuring(vINTERVAL, holds(vREL, vINST1, vINST2))
  /\ instance(vINST1, Physical)
  /\ instance(vINST2, Physical) =>
      time(vINST1, vINTERVAL) /\ time(vINST2, vINTERVAL)
. temporalPart(vPOS, WhenFn(vTHING)) <=> time(vTHING, vPOS)
. instance(BeginFn, TemporalRelation)
. instance(BeginFn, UnaryFunction)
. instance(BeginFn, TotalValuedRelation)
. domain(BeginFn, a_1, TimeInterval)
. range(BeginFn, TimePoint)
%{BeginFn
"A &%UnaryFunction that maps a &%TimeInterval to 
the &%TimePoint at which the interval begins."}%
. origin(vPROCESS, vOBJ) =>
      located(WhereFn(vPROCESS, BeginFn(WhenFn(vPROCESS))),
              WhereFn(vOBJ, BeginFn(WhenFn(vOBJ))))
. BeginFn(vINTERVAL) = vPOINT =>
      forall vOTHERPOINT: U
          . temporalPart(vOTHERPOINT, vINTERVAL)
            /\ not vOTHERPOINT = vPOINT =>
                before(vPOINT, vOTHERPOINT)
. instance(EndFn, TemporalRelation)
. instance(EndFn, UnaryFunction)
. instance(EndFn, TotalValuedRelation)
. domain(EndFn, a_1, TimeInterval)
. range(EndFn, TimePoint)
%{EndFn
"A &%UnaryFunction that maps a &%TimeInterval to 
the &%TimePoint at which the interval ends."}%
. EndFn(vINTERVAL) = vPOINT =>
      forall vOTHERPOINT: U
          . temporalPart(vOTHERPOINT, vINTERVAL)
            /\ not vOTHERPOINT = vPOINT =>
                before(vOTHERPOINT, vPOINT)
. resource(vPROC, vOBJ)
  /\ holdsDuring(BeginFn(WhenFn(vPROC)), measure(vOBJ, vQUANT1))
  /\ holdsDuring(EndFn(WhenFn(vPROC)), measure(vOBJ, vQUANT2)) =>
      greaterThan(vQUANT1, vQUANT2)
. subrelation(starts, temporalPart)
. instance(starts, TemporalRelation)
. instance(starts, TransitiveRelation)
. instance(starts, IrreflexiveRelation)
. domain(starts, a_1, TimeInterval)
. domain(starts, a_2, TimeInterval)
%{starts
"(&%starts ?INTERVAL1 ?INTERVAL2) means that 
?INTERVAL1 and ?INTERVAL2 are both &%TimeIntervals that have the same 
initial &%TimePoint and that ?INTERVAL1 ends before ?INTERVAL2."}%
. starts(vINTERVAL1, vINTERVAL2) <=>
      BeginFn(vINTERVAL1) = BeginFn(vINTERVAL2)
      /\ before(EndFn(vINTERVAL1), EndFn(vINTERVAL2))
. subrelation(finishes, temporalPart)
. instance(finishes, TemporalRelation)
. instance(finishes, TransitiveRelation)
. instance(finishes, IrreflexiveRelation)
. domain(finishes, a_1, TimeInterval)
. domain(finishes, a_2, TimeInterval)
%{finishes
"(&%finishes ?INTERVAL1 ?INTERVAL2) means that 
?INTERVAL1 and ?INTERVAL2 are both &%TimeIntervals that have the same 
ending &%TimePoint and that ?INTERVAL2 begins before ?INTERVAL1."}%
. finishes(vINTERVAL1, vINTERVAL2) <=>
      before(BeginFn(vINTERVAL2), BeginFn(vINTERVAL1))
      /\ EndFn(vINTERVAL2) = EndFn(vINTERVAL1)
. instance(before, TemporalRelation)
. instance(before, IrreflexiveRelation)
. instance(before, TransitiveRelation)
. subrelation(before, beforeOrEqual)
. relatedInternalConcept(before, earlier)
. domain(before, a_1, TimePoint)
. domain(before, a_2, TimePoint)
%{before
"(&%before ?POINT1 ?POINT2) means that ?POINT1 
precedes ?POINT2 on the universal timeline."}%
. instance(vOBJ, Object) =>
      exists vTIME1: U; vTIME2: U
          . instance(vTIME1, TimePoint)
            /\ instance(vTIME2, TimePoint)
            /\ before(vTIME1, vTIME2)
            /\ (forall vTIME: U
                    . beforeOrEqual(vTIME1, vTIME)
                      /\ beforeOrEqual(vTIME, vTIME2) =>
                          time(vOBJ, vTIME))
. a_r_e_s_u_l_t(vPROC, vOBJ) =>
      forall vTIME: U
          . before(vTIME, BeginFn(WhenFn(vPROC))) => not time(vOBJ, vTIME)
. instance(vINTERVAL, TimeInterval) =>
      before(BeginFn(vINTERVAL), EndFn(vINTERVAL))
. instance(beforeOrEqual, BinaryPredicate)
. instance(beforeOrEqual, TemporalRelation)
. instance(beforeOrEqual, PartialOrderingRelation)
. domain(beforeOrEqual, a_1, TimePoint)
. domain(beforeOrEqual, a_2, TimePoint)
%{beforeOrEqual
"(&%beforeOrEqual ?POINT1 ?POINT2) means that ?POINT1 
is identical with ?POINT2 or occurs before it on the universal timeline."}%
. beforeOrEqual(vPOINT1, vPOINT2) =>
      before(vPOINT1, vPOINT2) \/ vPOINT1 = vPOINT2
. instance(temporallyBetween, TemporalRelation)
. instance(temporallyBetween, TernaryPredicate)
. subrelation(temporallyBetween, temporallyBetweenOrEqual)
. domain(temporallyBetween, a_1, TimePoint)
. domain(temporallyBetween, a_2, TimePoint)
. domain(temporallyBetween, a_3, TimePoint)
%{temporallyBetween
"(&%temporallyBetween ?POINT1 ?POINT2 
?POINT3) means that the &%TimePoint ?POINT2 is between the &%TimePoints 
?POINT1 and ?POINT3, i.e. ?POINT1 is before ?POINT2 and ?POINT2 is before 
?POINT3."}%
. temporallyBetween(vPOINT1, vPOINT2, vPOINT3) <=>
      before(vPOINT1, vPOINT2) /\ before(vPOINT2, vPOINT3)
. instance(temporallyBetweenOrEqual, TemporalRelation)
. instance(temporallyBetweenOrEqual, TernaryPredicate)
. domain(temporallyBetweenOrEqual, a_1, TimePoint)
. domain(temporallyBetweenOrEqual, a_2, TimePoint)
. domain(temporallyBetweenOrEqual, a_3, TimePoint)
%{temporallyBetweenOrEqual
"(&%temporallyBetweenOrEqual ?POINT1 ?POINT2 
?POINT3) means that the &%TimePoint ?POINT1 is before or equal to the 
&%TimePoint ?POINT2 and ?POINT2 is before or equal to the &%TimePoint 
?POINT3."}%
. temporallyBetweenOrEqual(vPOINT1, vPOINT2, vPOINT3) <=>
      beforeOrEqual(vPOINT1, vPOINT2) /\ beforeOrEqual(vPOINT2, vPOINT3)
. time(vPHYS, vTIME) /\ instance(vTIME, TimePoint) <=>
      temporallyBetweenOrEqual(BeginFn(WhenFn(vPHYS)), vTIME,
                               EndFn(WhenFn(vPHYS)))
. instance(overlapsTemporally, BinaryPredicate)
. instance(overlapsTemporally, TemporalRelation)
. instance(overlapsTemporally, ReflexiveRelation)
. instance(overlapsTemporally, SymmetricRelation)
. domain(overlapsTemporally, a_1, TimeInterval)
. domain(overlapsTemporally, a_2, TimeInterval)
%{overlapsTemporally
"(&%overlapsTemporally ?INTERVAL1 
?INTERVAL2) means that the &%TimeIntervals ?INTERVAL1 and ?INTERVAL2 
have a &%TimeInterval as a common part."}%
. overlapsTemporally(vINTERVAL1, vINTERVAL2) <=>
      (exists vINTERVAL3: U
           . instance(vINTERVAL3, TimeInterval)
             /\ temporalPart(vINTERVAL3, vINTERVAL1)
             /\ temporalPart(vINTERVAL3, vINTERVAL2))
. instance(vREL, SpatialRelation) /\ holds(vREL, vOBJ1, vOBJ2) =>
      overlapsTemporally(WhenFn(vOBJ1), WhenFn(vOBJ2))
. subrelation(during, temporalPart)
. instance(during, TransitiveRelation)
. instance(during, IrreflexiveRelation)
. subrelation(during, overlapsTemporally)
. domain(during, a_1, TimeInterval)
. domain(during, a_2, TimeInterval)
%{during
"(&%during ?INTERVAL1 ?INTERVAL2) means that 
?INTERVAL1 starts after and ends before ?INTERVAL2."}%
. during(vINTERVAL1, vINTERVAL2) =>
      before(EndFn(vINTERVAL1), EndFn(vINTERVAL2))
      /\ before(BeginFn(vINTERVAL2), BeginFn(vINTERVAL1))
. instance(meetsTemporally, BinaryPredicate)
. instance(meetsTemporally, TemporalRelation)
. instance(meetsTemporally, AsymmetricRelation)
. instance(meetsTemporally, IntransitiveRelation)
. domain(meetsTemporally, a_1, TimeInterval)
. domain(meetsTemporally, a_2, TimeInterval)
%{meetsTemporally
"(&%meetsTemporally ?INTERVAL1 ?INTERVAL2) 
means that the terminal point of the &%TimeInterval ?INTERVAL1 is the 
initial point of the &%TimeInterval ?INTERVAL2."}%
. meetsTemporally(vINTERVAL1, vINTERVAL2) <=>
      EndFn(vINTERVAL1) = BeginFn(vINTERVAL2)
. BeginFn(vINTERVAL1) = BeginFn(vINTERVAL2)
  /\ EndFn(vINTERVAL1) = EndFn(vINTERVAL2) =>
      vINTERVAL1 = vINTERVAL2
. instance(earlier, BinaryPredicate)
. instance(earlier, TemporalRelation)
. instance(earlier, TransitiveRelation)
. instance(earlier, IrreflexiveRelation)
. domain(earlier, a_1, TimeInterval)
. domain(earlier, a_2, TimeInterval)
%{earlier
"(&%earlier ?INTERVAL1 ?INTERVAL2) means that 
the &%TimeInterval ?INTERVAL1 ends before the &%TimeInterval ?INTERVAL2 
begins."}%
. earlier(vINTERVAL1, vINTERVAL2) <=>
      before(EndFn(vINTERVAL1), BeginFn(vINTERVAL2))
. instance(cooccur, BinaryPredicate)
. instance(cooccur, TemporalRelation)
. instance(cooccur, EquivalenceRelation)
. domain(cooccur, a_1, Physical)
. domain(cooccur, a_2, Physical)
%{cooccur
"(&%cooccur ?THING1 ?THING2) means that the 
&%Object or &%Process ?THING1 occurs at the same time as, together with, 
or jointly with the &%Object or &%Process ?THING2.  This covers the 
following temporal relations:  is co-incident with, is concurrent with, 
is contemporaneous with, and is concomitant with."}%
. cooccur(vPHYS1, vPHYS2) <=> WhenFn(vPHYS1) = WhenFn(vPHYS2)
. instance(TimeIntervalFn, BinaryFunction)
. instance(TimeIntervalFn, TemporalRelation)
. domain(TimeIntervalFn, a_1, TimePoint)
. domain(TimeIntervalFn, a_2, TimePoint)
. range(TimeIntervalFn, TimeInterval)
%{TimeIntervalFn
"A &%BinaryFunction that takes two &%TimePoints 
as arguments and returns the &%TimeInterval defined by these two &%TimePoints.  
Note that the first &%TimePoint must occur earlier than the second &%TimePoint."}%
. instance(vPOINT1, TimePoint)
  /\ instance(vPOINT2, TimePoint)
  /\ instance(vINTERVAL, TimeInterval)
  /\ TimeIntervalFn(vPOINT1, vPOINT2) = vINTERVAL =>
      BeginFn(vINTERVAL) = vPOINT1 /\ EndFn(vINTERVAL) = vPOINT2
. instance(vPOINT1, TimePoint)
  /\ instance(vPOINT2, TimePoint)
  /\ instance(vINTERVAL, TimeInterval)
  /\ TimeIntervalFn(vPOINT1, vPOINT2) = vINTERVAL =>
      forall vPOINT: U
          . temporallyBetweenOrEqual(vPOINT1, vPOINT, vPOINT2) <=>
                temporalPart(vPOINT, vINTERVAL)
. instance(RecurrentTimeIntervalFn, TemporalRelation)
. instance(RecurrentTimeIntervalFn, BinaryFunction)
. domainSubclass(RecurrentTimeIntervalFn, a_1, TimeInterval)
. domainSubclass(RecurrentTimeIntervalFn, a_2, TimeInterval)
. rangeSubclass(RecurrentTimeIntervalFn, TimeInterval)
%{RecurrentTimeIntervalFn
"A function that is useful for generating 
recurring time intervals.  For example, (&%RecurrentTimeIntervalFn (&%HourFn 6 &%Day)  
(&%HourFn 12 &%Day)) returns the &%Class of &%TimeIntervals beginning at 6 in the 
morning and ending at 12 noon.  For another example, (&%RecurrentTimeInterval 
&%Saturday &%Sunday) returns the &%Class of all weekends.  For still another example, 
(&%RecurrentTimeInterval &%June &%August) returns the &%Class containing the academic 
summer period."}%
. instance(vINTERVAL,
           RecurrentTimeIntervalFn(vTIMECLASS1, vTIMECLASS2)) =>
      exists vTIME1: U; vTIME2: U
          . instance(vTIME1, vTIMECLASS1)
            /\ instance(vTIME2, vTIMECLASS2)
            /\ starts(vTIME1, vINTERVAL)
            /\ finishes(vTIME2, vINTERVAL)
. instance(WhenFn, TemporalRelation)
. instance(WhenFn, UnaryFunction)
. instance(WhenFn, TotalValuedRelation)
. domain(WhenFn, a_1, Physical)
. range(WhenFn, TimeInterval)
%{WhenFn
"A &%UnaryFunction that maps an &%Object or 
&%Process to the exact &%TimeInterval during which it exists.  Note 
that, for every &%TimePoint ?TIME outside of the &%TimeInterval 
(WhenFn ?THING), (time ?THING ?TIME) does not hold."}%
. instance(PastFn, TemporalRelation)
. instance(PastFn, UnaryFunction)
. instance(PastFn, TotalValuedRelation)
. domain(PastFn, a_1, TimePosition)
. range(PastFn, TimeInterval)
%{PastFn
"A &%UnaryFunction that maps a &%TimePosition 
to the &%TimeInterval that meets it and that begins at 
&%NegativeInfinity."}%
. instance(vINTERVAL, TimeInterval) =>
      meetsTemporally(PastFn(vINTERVAL), vINTERVAL)
. instance(vINTERVAL, TimeInterval) =>
      PastFn(vINTERVAL) =
          TimeIntervalFn(NegativeInfinity, BeginFn(vINTERVAL))
. instance(ImmediatePastFn, TemporalRelation)
. instance(ImmediatePastFn, UnaryFunction)
. instance(ImmediatePastFn, TotalValuedRelation)
. domain(ImmediatePastFn, a_1, TimePosition)
. range(ImmediatePastFn, TimeInterval)
%{ImmediatePastFn
"A &%UnaryFunction that maps a 
&%TimePosition to a short, indeterminate &%TimeInterval that 
immediately precedes the &%TimePosition."}%
. instance(vINTERVAL, TimeInterval) =>
      finishes(ImmediatePastFn(vINTERVAL), PastFn(vINTERVAL))
. instance(FutureFn, TemporalRelation)
. instance(FutureFn, UnaryFunction)
. instance(FutureFn, TotalValuedRelation)
. domain(FutureFn, a_1, TimePosition)
. range(FutureFn, TimeInterval)
%{FutureFn
"A &%UnaryFunction that maps a &%TimePosition 
to the &%TimeInterval which it meets and which ends at 
&%PositiveInfinity."}%
. instance(vINTERVAL, TimeInterval) =>
      meetsTemporally(vINTERVAL, FutureFn(vINTERVAL))
. instance(vINTERVAL, TimeInterval) =>
      FutureFn(vINTERVAL) =
          TimeIntervalFn(EndFn(vINTERVAL), PositiveInfinity)
. instance(ImmediateFutureFn, TemporalRelation)
. instance(ImmediateFutureFn, UnaryFunction)
. instance(ImmediateFutureFn, TotalValuedRelation)
. domain(ImmediateFutureFn, a_1, TimePosition)
. range(ImmediateFutureFn, TimeInterval)
%{ImmediateFutureFn
"A &%UnaryFunction that maps a 
&%TimePosition to a short, indeterminate &%TimeInterval that 
immediately follows the &%TimePosition."}%
. instance(vINTERVAL, TimeInterval) =>
      starts(ImmediateFutureFn(vINTERVAL), FutureFn(vINTERVAL))
. instance(date, BinaryPredicate)
. instance(date, SingleValuedRelation)
. instance(date, AsymmetricRelation)
. domain(date, a_1, Physical)
. domain(date, a_2, Day)
. subrelation(date, time)
%{date
"A &%BinaryPredicate that specifies a 
&%TimePosition in absolute calendar time, at the resolution 
of one day, for a particular &%Object or &%Process."}%
. instance(YearFn, TemporalRelation)
. instance(YearFn, UnaryFunction)
. domain(YearFn, a_1, Integer)
. rangeSubclass(YearFn, Year)
%{YearFn
"A &%UnaryFunction that maps a number to the corresponding calendar 
&%Year.  For example, (&%YearFn 1912) returns the &%Class containing just one instance, 
the year of 1912.  As might be expected, positive integers return years in the Common Era, 
while negative integers return years in B.C.E.  Note that this function returns a &%Class 
as a value.  The reason for this is that the related functions, viz. &%MonthFn, &%DayFn, 
&%HourFn, &%MinuteFn, and &%SecondFn, are used to generate both specific &%TimeIntervals 
and recurrent intervals, and the only way to do this is to make the domains and ranges of 
these functions classes rather than individuals."}%
. instance(MonthFn, TemporalRelation)
. instance(MonthFn, BinaryFunction)
. domainSubclass(MonthFn, a_1, Month)
. domainSubclass(MonthFn, a_2, Year)
. rangeSubclass(MonthFn, Month)
%{MonthFn
"A &%BinaryFunction that maps a subclass of &%Month and a 
subclass of &%Year to the class containing the &%Months corresponding to thos &%Years. 
For example (&%MonthFn &%January (&%YearFn 1912)) is the class containing the eighth 
&%Month, i.e. August, of the &%Year 1912.  For another example, (&%MonthFn &%August 
&%Year) is equal to &%August, the class of all months of August.  Note that this function 
returns a &%Class as a value.  The reason for this is that the related functions, viz. 
DayFn, HourFn, MinuteFn, and SecondFn, are used to generate both specific &%TimeIntervals 
and recurrent intervals, and the only way to do this is to make the domains and ranges of 
these functions classes rather than individuals."}%
. instance(DayFn, TemporalRelation)
. instance(DayFn, BinaryFunction)
. domain(DayFn, a_1, PositiveRealNumber)
. domainSubclass(DayFn, a_2, Month)
. rangeSubclass(DayFn, Day)
%{DayFn
"A &%BinaryFunction that assigns a &%PositiveRealNumber and 
a subclass of &%Months to the &%Days within each &%Month corresponding to that 
&%PositiveRealNumber.  For example, (&%DayFn 16 &%August) is the &%Class of all 
sixteenth days of August.  For another example, (&%DayFn 9 &%Month) would return 
the class of all ninth days of any month.  For still another example, (&%DayFn 18 
(&%MonthFn &%August (&%YearFn 1912))) denotes the 18th day of August 1912."}%
. instance(vDAY, DayFn(vNUMBER, vMONTH)) =>
      lessThanOrEqualTo(vNUMBER, a_3_1)
. instance(vDAY1, DayFn(vNUMBER1, vMONTH))
  /\ instance(vDAY2, DayFn(vNUMBER2, vMONTH))
  /\ SubtractionFn(vNUMBER2, vNUMBER1) = a_1 =>
      meetsTemporally(vDAY1, vDAY2)
. instance(HourFn, TemporalRelation)
. instance(HourFn, BinaryFunction)
. domain(HourFn, a_1, PositiveRealNumber)
. domainSubclass(HourFn, a_2, Day)
. rangeSubclass(HourFn, Hour)
%{HourFn
"A &%BinaryFunction that assigns a &%PositiveRealNumber and 
a subclass of &%Days to the &%Hours within each &%Day corresponding to that 
&%PositiveRealNumber.  For example, (&%HourFn 12 &%Thursday) is the &%Class of all 
instances of noon Thursday.  For another example, (&%HourFn 24 &%Day) would return 
the class of all instances of midnight.  For still another example, (&%HourFn 14 
(&%DayFn 18 (&%MonthFn &%August (&%YearFn 1912)))) denotes 2 PM on the 18th day of 
August 1912."}%
. instance(vHOUR, HourFn(vNUMBER, vDAY)) =>
      lessThan(vNUMBER, a_2_4)
. instance(vHOUR1, HourFn(vNUMBER1, vDAY))
  /\ instance(vHOUR2, HourFn(vNUMBER2, vDAY))
  /\ SubtractionFn(vNUMBER2, vNUMBER1) = a_1 =>
      meetsTemporally(vHOUR1, vHOUR2)
. instance(MinuteFn, TemporalRelation)
. instance(MinuteFn, BinaryFunction)
. domain(MinuteFn, a_1, PositiveRealNumber)
. domainSubclass(MinuteFn, a_2, Hour)
. rangeSubclass(MinuteFn, Minute)
%{MinuteFn
"A &%BinaryFunction that assigns a &%PositiveRealNumber and 
a subclass of &%Hours to the &%Minutes within each &%Hour corresponding to that 
&%PositiveRealNumber.  For example, (&%MinuteFn 30 (&%HourFn 17 &%Day)) is the &%Class 
of all 5:30's in the afternoon.  For another example, (&%MinuteFn 15 &%Hour) would return 
the class of all instances of quarter past the hour.  For still another example, 
(&%MinuteFn 15 (&%HourFn 14 (&%DayFn 18 (&%MonthFn &%August (&%YearFn 1912))))) denotes 
15 minutes after 2 PM on the 18th day of August 1912."}%
. instance(vMINUTE, MinuteFn(vNUMBER, vHOUR)) =>
      lessThan(vNUMBER, a_6_0)
. instance(vMINUTE1, MinuteFn(vNUMBER1, vHOUR))
  /\ instance(vMINUTE2, MinuteFn(vNUMBER2, vHOUR))
  /\ SubtractionFn(vNUMBER2, vNUMBER1) = a_1 =>
      meetsTemporally(vMINUTE1, vMINUTE2)
. instance(SecondFn, TemporalRelation)
. instance(SecondFn, BinaryFunction)
. domain(SecondFn, a_1, PositiveRealNumber)
. domainSubclass(SecondFn, a_2, Minute)
. rangeSubclass(SecondFn, Second)
%{SecondFn
"A &%BinaryFunction that assigns a &%PositiveRealNumber and a 
subclass of &%Minutes to the &%Seconds within each &%Minute corresponding to that 
&%PositiveRealNumber.  For example, (&%SecondFn 4 (&%MinuteFn 5 &%Hour)) is the &%Class 
of all fourth &%Seconds of every fifth &%Minute of every hour.  For another example, 
(&%SecondFn 8 &%Minute) would return the eighth second of every minute.  For still 
another example, (&%SecondFn 9 (&%MinuteFn 15 (&%HourFn 14 (&%DayFn 18 (&%MonthFn 
&%August (&%YearFn 1912)))))) denotes 9 seconds and 15 minutes after 2 PM on the 18th 
day of August 1912."}%
. instance(vSECOND, SecondFn(vNUMBER, vMINUTE)) =>
      lessThan(vNUMBER, a_6_0)
. instance(vSECOND1, SecondFn(vNUMBER1, vMINUTE))
  /\ instance(vSECOND2, SecondFn(vNUMBER2, vMINUTE))
  /\ SubtractionFn(vNUMBER2, vNUMBER1) = a_1 =>
      meetsTemporally(vSECOND1, vSECOND2)
. subclass(Year, TimeInterval)
. relatedInternalConcept(Year, YearFn)
. relatedInternalConcept(Year, YearDuration)
%{Year
"The &%Class of all calendar &%Years."}%
. instance(vYEAR, Year) =>
      duration(vYEAR, MeasureFn(a_1, YearDuration))
. instance(vYEAR1, Year)
  /\ instance(vYEAR2, Year)
  /\ SubtractionFn(vYEAR2, vYEAR1) = a_1 =>
      meetsTemporally(vYEAR1, vYEAR2)
. subclass(LeapYear, Year)
%{LeapYear
"The &%Class of all leap years.  These are years 
which are either (i.) evenly divisible by 4 and not by 100 or (ii.) evenly 
divisible by 400 (this latter case is known as a leap century)."}%
. instance(vLEAP, LeapYear) /\ vLEAP = MeasureFn(vNUMBER, Year) =>
      (RemainderFn(vNUMBER, a_4) = a_0
       /\ not RemainderFn(vNUMBER, a_1_0_0) = a_0)
      \/ RemainderFn(vNUMBER, a_4_0_0) = a_0
. subclass(Month, TimeInterval)
. relatedInternalConcept(Month, MonthFn)
%{Month
"The &%Class of all calendar &%Months."}%
. subclass(January, Month)
%{January
"The &%Class of all &%Months which are January."}%
. instance(vMONTH, January) =>
      duration(vMONTH, MeasureFn(a_3_1, DayDuration))
. vMONTH1 = MonthFn(January, vYEAR)
  /\ vMONTH2 = MonthFn(February, vYEAR) =>
      meetsTemporally(vMONTH1, vMONTH2)
. subclass(February, Month)
%{February
"The &%Class of all &%Months which are February."}%
. MonthFn(February, vYEAR) = vMONTH
  /\ not instance(vYEAR, LeapYear) =>
      duration(vMONTH, MeasureFn(a_2_8, DayDuration))
. MonthFn(February, vYEAR) = vMONTH /\ instance(vYEAR, LeapYear) =>
      duration(vMONTH, MeasureFn(a_2_9, DayDuration))
. vMONTH1 = MonthFn(February, vYEAR)
  /\ vMONTH2 = MonthFn(March, vYEAR) =>
      meetsTemporally(vMONTH1, vMONTH2)
. subclass(March, Month)
%{March
"The &%Class of all &%Months which are March."}%
. instance(vMONTH, March) =>
      duration(vMONTH, MeasureFn(a_3_1, DayDuration))
. vMONTH1 = MonthFn(March, vYEAR)
  /\ vMONTH2 = MonthFn(April, vYEAR) =>
      meetsTemporally(vMONTH1, vMONTH2)
. subclass(April, Month)
%{April
"The &%Class of all &%Months which are April."}%
. instance(vMONTH, April) =>
      duration(vMONTH, MeasureFn(a_3_0, DayDuration))
. vMONTH1 = MonthFn(April, vYEAR)
  /\ vMONTH2 = MonthFn(May, vYEAR) =>
      meetsTemporally(vMONTH1, vMONTH2)
. subclass(May, Month)
%{May
"The &%Class of all &%Months which are May."}%
. instance(vMONTH, May) =>
      duration(vMONTH, MeasureFn(a_3_1, DayDuration))
. vMONTH1 = MonthFn(May, vYEAR)
  /\ vMONTH2 = MonthFn(June, vYEAR) =>
      meetsTemporally(vMONTH1, vMONTH2)
. subclass(June, Month)
%{June
"The &%Class of all &%Months which are June."}%
. instance(vMONTH, June) =>
      duration(vMONTH, MeasureFn(a_3_0, DayDuration))
. vMONTH1 = MonthFn(June, vYEAR)
  /\ vMONTH2 = MonthFn(July, vYEAR) =>
      meetsTemporally(vMONTH1, vMONTH2)
. subclass(July, Month)
%{July
"The &%Class of all &%Months which are July."}%
. instance(vMONTH, July) =>
      duration(vMONTH, MeasureFn(a_3_1, DayDuration))
. vMONTH1 = MonthFn(July, vYEAR)
  /\ vMONTH2 = MonthFn(August, vYEAR) =>
      meetsTemporally(vMONTH1, vMONTH2)
. subclass(August, Month)
%{August
"The &%Class of all &%Months which are August."}%
. instance(vMONTH, August) =>
      duration(vMONTH, MeasureFn(a_3_1, DayDuration))
. vMONTH1 = MonthFn(August, vYEAR)
  /\ vMONTH2 = MonthFn(September, vYEAR) =>
      meetsTemporally(vMONTH1, vMONTH2)
. subclass(September, Month)
%{September
"The &%Class of all &%Months which are September."}%
. instance(vMONTH, September) =>
      duration(vMONTH, MeasureFn(a_3_0, DayDuration))
. vMONTH1 = MonthFn(September, vYEAR)
  /\ vMONTH2 = MonthFn(October, vYEAR) =>
      meetsTemporally(vMONTH1, vMONTH2)
. subclass(October, Month)
%{October
"The &%Class of all &%Months which are October."}%
. instance(vMONTH, October) =>
      duration(vMONTH, MeasureFn(a_3_1, DayDuration))
. vMONTH1 = MonthFn(October, vYEAR)
  /\ vMONTH2 = MonthFn(November, vYEAR) =>
      meetsTemporally(vMONTH1, vMONTH2)
. subclass(November, Month)
%{November
"The &%Class of all &%Months which are November."}%
. instance(vMONTH, November) =>
      duration(vMONTH, MeasureFn(a_3_0, DayDuration))
. vMONTH1 = MonthFn(November, vYEAR)
  /\ vMONTH2 = MonthFn(December, vYEAR) =>
      meetsTemporally(vMONTH1, vMONTH2)
. subclass(December, Month)
%{December
"The &%Class of all &%Months which are December."}%
. instance(vMONTH, December) =>
      duration(vMONTH, MeasureFn(a_3_1, DayDuration))
. vMONTH1 = MonthFn(December, vYEAR1)
  /\ vMONTH2 = MonthFn(January, vYEAR2)
  /\ meetsTemporally(vYEAR1, vYEAR2) =>
      meetsTemporally(vMONTH1, vMONTH2)
. subclass(Day, TimeInterval)
. relatedInternalConcept(Day, DayFn)
. relatedInternalConcept(Day, DayDuration)
%{Day
"The &%Class of all calendar &%Days."}%
. instance(vDAY, Day) =>
      duration(vDAY, MeasureFn(a_1, DayDuration))
. subclass(Monday, Day)
%{Monday
"The &%Class of all calendar Mondays."}%
. subclass(Tuesday, Day)
%{Tuesday
"The &%Class of all calendar Tuesdays."}%
. instance(vDAY1, Monday)
  /\ instance(vDAY2, Tuesday)
  /\ instance(vWEEK, Week)
  /\ temporalPart(vDAY1, vWEEK)
  /\ temporalPart(vDAY2, vWEEK) =>
      meetsTemporally(vDAY1, vDAY2)
. subclass(Wednesday, Day)
%{Wednesday
"The &%Class of all calendar Wednesdays."}%
. instance(vDAY1, Tuesday)
  /\ instance(vDAY2, Wednesday)
  /\ instance(vWEEK, Week)
  /\ temporalPart(vDAY1, vWEEK)
  /\ temporalPart(vDAY2, vWEEK) =>
      meetsTemporally(vDAY1, vDAY2)
. subclass(Thursday, Day)
%{Thursday
"The &%Class of all calendar Thursdays."}%
. instance(vDAY1, Wednesday)
  /\ instance(vDAY2, Thursday)
  /\ instance(vWEEK, Week)
  /\ temporalPart(vDAY1, vWEEK)
  /\ temporalPart(vDAY2, vWEEK) =>
      meetsTemporally(vDAY1, vDAY2)
. subclass(Friday, Day)
%{Friday
"The &%Class of all calendar Fridays."}%
. instance(vDAY1, Thursday)
  /\ instance(vDAY2, Friday)
  /\ instance(vWEEK, Week)
  /\ temporalPart(vDAY1, vWEEK)
  /\ temporalPart(vDAY2, vWEEK) =>
      meetsTemporally(vDAY1, vDAY2)
. subclass(Saturday, Day)
%{Saturday
"The &%Class of all calendar Saturdays."}%
. instance(vDAY1, Friday)
  /\ instance(vDAY2, Saturday)
  /\ instance(vWEEK, Week)
  /\ temporalPart(vDAY1, vWEEK)
  /\ temporalPart(vDAY2, vWEEK) =>
      meetsTemporally(vDAY1, vDAY2)
. subclass(Sunday, Day)
%{Sunday
"The &%Class of all calendar Sundays."}%
. instance(vDAY1, Saturday)
  /\ instance(vDAY2, Sunday)
  /\ instance(vWEEK, Week)
  /\ temporalPart(vDAY1, vWEEK)
  /\ temporalPart(vDAY2, vWEEK) =>
      meetsTemporally(vDAY1, vDAY2)
. instance(vDAY1, Sunday)
  /\ instance(vDAY2, Monday)
  /\ instance(vWEEK1, Week)
  /\ instance(vWEEK2, Week)
  /\ temporalPart(vDAY1, vWEEK1)
  /\ temporalPart(vDAY2, vWEEK2)
  /\ meetsTemporally(vWEEK1, vWEEK2) =>
      meetsTemporally(vDAY1, vDAY2)
. subclass(Week, TimeInterval)
%{Week
"The &%Class of all calendar weeks."}%
. instance(vWEEK, Week) =>
      duration(vWEEK, MeasureFn(a_1, WeekDuration))
. subclass(Hour, TimeInterval)
. relatedInternalConcept(Hour, HourFn)
. relatedInternalConcept(Hour, HourDuration)
%{Hour
"The &%Class of all clock &%Hours."}%
. instance(vHOUR, Hour) =>
      duration(vHOUR, MeasureFn(a_1, HourDuration))
. subclass(Minute, TimeInterval)
. relatedInternalConcept(Minute, MinuteFn)
. relatedInternalConcept(Minute, MinuteDuration)
%{Minute
"The &%Class of all clock &%Minutes."}%
. instance(vMINUTE, Minute) =>
      duration(vMINUTE, MeasureFn(a_1, MinuteDuration))
. subclass(Second, TimeInterval)
. relatedInternalConcept(Second, SecondDuration)
. relatedInternalConcept(Second, SecondFn)
%{Second
"The &%Class of all clock &%Seconds."}%
. instance(vSECOND, Second) =>
      duration(vSECOND, MeasureFn(a_1, SecondDuration))
. instance(TemporalCompositionFn, TemporalRelation)
. instance(TemporalCompositionFn, BinaryFunction)
. domain(TemporalCompositionFn, a_1, TimeInterval)
. domainSubclass(TemporalCompositionFn, a_2, TimeInterval)
. rangeSubclass(TemporalCompositionFn, TimeInterval)
%{TemporalCompositionFn
"The basic &%Function for expressing 
the composition of larger &%TimeIntervals out of smaller &%TimeIntervals.  
For example, if &%ThisSeptember is an &%instance of &%September, 
(&%TemporalCompositionFn &%ThisSeptember &%Day) denotes the &%Class of 
consecutive days that make up &%ThisSeptember.  Note that one can obtain 
the number of instances of this &%Class by using the function &%CardinalityFn."}%
. TemporalCompositionFn(vINTERVAL,
                        a_v_I_N_T_E_R_V_A_L_Minus_T_Y_P_E) =
      vCLASS =>
      forall vTIME1: U; vTIME2: U
          . instance(vTIME1, a_v_I_N_T_E_R_V_A_L_Minus_T_Y_P_E)
            /\ instance(vTIME2, vCLASS) =>
                exists vDURATION: U
                    . duration(vTIME1, vDURATION) /\ duration(vTIME2, vDURATION)
. TemporalCompositionFn(vINTERVAL,
                        a_v_I_N_T_E_R_V_A_L_Minus_T_Y_P_E) =
      vCLASS =>
      forall vTIME1: U; vTIME2: U
          . instance(vTIME1, vCLASS)
            /\ instance(vTIME2, vCLASS)
            /\ not vTIME1 = vTIME2 =>
                meetsTemporally(vTIME1, vTIME2)
                \/ meetsTemporally(vTIME2, vTIME1)
                \/ earlier(vTIME1, vTIME2)
                \/ earlier(vTIME2, vTIME1)
. TemporalCompositionFn(vINTERVAL,
                        a_v_I_N_T_E_R_V_A_L_Minus_T_Y_P_E) =
      vCLASS =>
      exists vTIME: U
          . instance(vTIME, vCLASS) /\ starts(vTIME, vINTERVAL)
. TemporalCompositionFn(vINTERVAL,
                        a_v_I_N_T_E_R_V_A_L_Minus_T_Y_P_E) =
      vCLASS =>
      exists vTIME: U
          . instance(vTIME, vCLASS) /\ finishes(vTIME, vINTERVAL)
. TemporalCompositionFn(vINTERVAL,
                        a_v_I_N_T_E_R_V_A_L_Minus_T_Y_P_E) =
      vCLASS =>
      forall vTIME1: U
          . instance(vTIME1, vCLASS) /\ not finishes(vTIME1, vINTERVAL) =>
                exists vTIME2: U
                    . instance(vTIME2, vCLASS)
                      /\ meetsTemporally(vTIME1, vTIME2)
. TemporalCompositionFn(vINTERVAL,
                        a_v_I_N_T_E_R_V_A_L_Minus_T_Y_P_E) =
      vCLASS =>
      forall vTIME1: U
          . instance(vTIME1, vCLASS) /\ not starts(vTIME1, vINTERVAL) =>
                exists vTIME2: U
                    . instance(vTIME2, vCLASS)
                      /\ meetsTemporally(vTIME2, vTIME1)
. TemporalCompositionFn(vINTERVAL,
                        a_v_I_N_T_E_R_V_A_L_Minus_T_Y_P_E) =
      vCLASS =>
      forall vTIME: U
          . instance(vTIME, TimePoint) /\ temporalPart(vTIME, vINTERVAL) =>
                exists vINSTANCE: U
                    . instance(vINSTANCE, vCLASS)
                      /\ temporalPart(vTIME, vINSTANCE)
. instance(vYEAR, Year) =>
      CardinalityFn(TemporalCompositionFn(vYEAR, Month)) = a_1_2
. instance(vMONTH, Month)
  /\ duration(vMONTH, MeasureFn(vNUMBER, DayDuration)) =>
      CardinalityFn(TemporalCompositionFn(vMONTH, Day)) = vNUMBER
. instance(vWEEK, Week) =>
      CardinalityFn(TemporalCompositionFn(vWEEK, Day)) = a_7
. instance(vDAY, Day) =>
      CardinalityFn(TemporalCompositionFn(vDAY, Hour)) = a_2_4
. instance(vHOUR, Hour) =>
      CardinalityFn(TemporalCompositionFn(vHOUR, Minute)) = a_6_0
. instance(vMINUTE, Minute) =>
      CardinalityFn(TemporalCompositionFn(vMINUTE, Second)) = a_6_0
. instance(connected, BinaryPredicate)
. instance(connected, SpatialRelation)
. instance(connected, ReflexiveRelation)
. instance(connected, SymmetricRelation)
. domain(connected, a_1, Object)
. domain(connected, a_2, Object)
%{connected
"(connected ?OBJ1 ?OBJ2) means that ?OBJ1 
&%meetsSpatially ?OBJ2 or that ?OBJ1 &%overlapsSpatially ?OBJ2."}%
. connected(vOBJ1, vOBJ2) =>
      meetsSpatially(vOBJ1, vOBJ2) \/ overlapsSpatially(vOBJ1, vOBJ2)
. instance(vOBJ, SelfConnectedObject) <=>
      (forall vPART1: U; vPART2: U
           . vOBJ = MereologicalSumFn(vPART1, vPART2) =>
                 connected(vPART1, vPART2))
. instance(connects, SpatialRelation)
. instance(connects, TernaryPredicate)
. domain(connects, a_1, SelfConnectedObject)
. domain(connects, a_2, SelfConnectedObject)
. domain(connects, a_3, SelfConnectedObject)
%{connects
"The relationship between three things, when one of 
the three things connects the other two.  More formally, (&%connects ?OBJ1 
?OBJ2 ?OBJ3) means that (&%connected ?OBJ1 ?OBJ2) and (&%connected ?OBJ1 ?OBJ3) 
and not (&%connected ?OBJ2 ?OBJ3)."}%
. connects(vOBJ1, vOBJ2, vOBJ3) <=>
      connected(vOBJ1, vOBJ2)
      /\ connected(vOBJ1, vOBJ3)
      /\ not connected(vOBJ2, vOBJ3)
. subrelation(meetsSpatially, connected)
. instance(meetsSpatially, IrreflexiveRelation)
. instance(meetsSpatially, SymmetricRelation)
. disjointRelation(meetsSpatially, overlapsSpatially)
%{meetsSpatially
"(&%meetsSpatially ?OBJ1 ?OBJ2) means that 
?OBJ1 and ?OBJ2 are &%connected but that neither ?OBJ1 nor ?OBJ2 
&%overlapsSpatially the other."}%
. subrelation(overlapsSpatially, connected)
. instance(overlapsSpatially, ReflexiveRelation)
. instance(overlapsSpatially, SymmetricRelation)
%{overlapsSpatially
"(&%overlapsSpatially ?OBJ1 ?OBJ2) means 
that the &%Objects ?OBJ1 and ?OBJ2 have some parts in common.  This is a 
reflexive and symmetric (but not transitive) relation."}%
. overlapsSpatially(vOBJ1, vOBJ2) <=>
      (exists vOBJ3: U . part(vOBJ3, vOBJ1) /\ part(vOBJ3, vOBJ2))
. member(vOBJ1, vCOLL)
  /\ member(vOBJ2, vCOLL)
  /\ not vOBJ1 = vOBJ2 =>
      not overlapsSpatially(vOBJ1, vOBJ2)
. instance(vREL, CaseRole)
  /\ instance(vOBJ, Object)
  /\ holds(vREL, vPROCESS, vOBJ) =>
      exists vTIME: U . overlapsSpatially(WhereFn(vPROCESS, vTIME), vOBJ)
. instance(overlapsPartially, SymmetricRelation)
. instance(overlapsPartially, IrreflexiveRelation)
. subrelation(overlapsPartially, overlapsSpatially)
%{overlapsPartially
"(&%overlapsPartially ?OBJ1 ?OBJ2) means 
that ?OBJ1 and ?OBJ2 have part(s) in common, but neither ?OBJ1 nor ?OBJ2 
is a &%part of the other."}%
. overlapsPartially(vOBJ1, vOBJ2) <=>
      not part(vOBJ1, vOBJ2)
      /\ not part(vOBJ2, vOBJ1)
      /\ (exists vOBJ3: U . part(vOBJ3, vOBJ1) /\ part(vOBJ3, vOBJ2))
. subrelation(superficialPart, part)
. instance(superficialPart, IrreflexiveRelation)
. instance(superficialPart, TransitiveRelation)
%{superficialPart
"(&%superficialPart ?OBJ1 ?OBJ2) 
means that ?OBJ1 is a part of ?OBJ2 that has no interior parts of its own 
(or, intuitively, that only overlaps those parts of ?OBJ2 that are 
externally connected with the mereological complement of ?OBJ2). This too 
is a transitive relation closed under &%MereologicalSumFn and 
&%MereologicalProductFn."}%
. superficialPart(vOBJ1, vOBJ2) =>
      not interiorPart(vOBJ1, vOBJ2)
      /\ not (exists vOBJ3: U . interiorPart(vOBJ3, vOBJ1))
. instance(surface, AsymmetricRelation)
. subrelation(surface, superficialPart)
. domain(surface, a_1, SelfConnectedObject)
. domain(surface, a_2, SelfConnectedObject)
%{surface
"(&%surface ?OBJ1 ?OBJ2) means that ?OBJ1 
is a maximally connected &%superficialPart of ?OBJ2.  Note that some 
&%SelfConnectedObjects have more than one surface, e.g. a hollow 
object like a tennis ball has both an inner and an outer surface."}%
. surface(vOBJ1, vOBJ2) =>
      forall vOBJ3: U
          . superficialPart(vOBJ3, vOBJ2) => part(vOBJ3, vOBJ1)
. subrelation(interiorPart, part)
. instance(interiorPart, AsymmetricRelation)
. instance(interiorPart, TransitiveRelation)
%{interiorPart
"(&%interiorPart ?OBJ1 ?OBJ2) means 
that ?OBJ1 is part ?OBJ2 and there is no overlap between ?OBJ1 and 
any &%superficialPart ?OBJ2."}%
. interiorPart(vOBJ1, vOBJ2) =>
      forall vPART: U
          . superficialPart(vPART, vOBJ2) =>
                not overlapsSpatially(vOBJ1, vPART)
. subrelation(bottom, superficialPart)
. domain(bottom, a_1, SelfConnectedObject)
. domain(bottom, a_2, SelfConnectedObject)
%{bottom
"(&%bottom ?BOTTOM ?OBJECT) holds if ?BOTTOM is the 
lowest or deepest maximal superficial part of ?OBJECT."}%
. bottom(vBOTTOM, vOBJECT)
  /\ part(vPART, vOBJECT)
  /\ not connected(vPART, vBOTTOM) =>
      orientation(vPART, vBOTTOM, Above)
. subrelation(top, superficialPart)
. domain(top, a_1, SelfConnectedObject)
. domain(top, a_2, SelfConnectedObject)
%{top
"(&%top ?TOP ?OBJECT) means that ?TOP is the highest maximal 
superficial part of ?OBJECT."}%
. top(vTOP, vOBJECT)
  /\ part(vPART, vOBJECT)
  /\ not connected(vPART, vTOP) =>
      orientation(vPART, vTOP, Below)
. subrelation(side, superficialPart)
. domain(side, a_1, SelfConnectedObject)
. domain(side, a_2, SelfConnectedObject)
%{side
"(&%side ?SIDE ?OBJECT) means that ?SIDE is a side of the object, 
as opposed to the &%top or &%bottom."}%
. side(vSIDE, vOBJECT)
  /\ part(vPART, vOBJECT)
  /\ not connected(vPART, vSIDE) =>
      exists vDIRECT: U . orientation(vSIDE, vPART, vDIRECT)
. width(vOBJECT, vWIDTH) <=>
      (exists vSIDE1: U; vSIDE2: U
           . side(vSIDE1, vOBJECT)
             /\ side(vSIDE2, vOBJECT)
             /\ distance(vSIDE1, vSIDE2, vWIDTH))
. height(vOBJECT, vHEIGHT)
  /\ top(vTOP, vOBJECT)
  /\ bottom(vBOTTOM, vOBJECT) =>
      distance(vTOP, vBOTTOM, vHEIGHT)
. instance(MereologicalSumFn, SpatialRelation)
. instance(MereologicalSumFn, BinaryFunction)
. instance(MereologicalSumFn, TotalValuedRelation)
. domain(MereologicalSumFn, a_1, Object)
. domain(MereologicalSumFn, a_2, Object)
. range(MereologicalSumFn, Object)
. relatedInternalConcept(MereologicalSumFn, MereologicalProductFn)
. relatedInternalConcept(MereologicalSumFn,
                         MereologicalDifferenceFn)
%{MereologicalSumFn
"(&%MereologicalSumFn ?OBJ1 ?OBJ2) 
denotes the &%Object consisting of the parts which belong to either 
?OBJ1 or ?OBJ2."}%
. vOBJ3 = MereologicalSumFn(vOBJ1, vOBJ2) =>
      forall vPART: U
          . part(vPART, vOBJ3) <=> part(vPART, vOBJ1) \/ part(vPART, vOBJ2)
. instance(MereologicalProductFn, SpatialRelation)
. instance(MereologicalProductFn, BinaryFunction)
. instance(MereologicalProductFn, TotalValuedRelation)
. domain(MereologicalProductFn, a_1, Object)
. domain(MereologicalProductFn, a_2, Object)
. range(MereologicalProductFn, Object)
. relatedInternalConcept(MereologicalProductFn,
                         MereologicalDifferenceFn)
%{MereologicalProductFn
"(&%MereologicalProductFn ?OBJ1 ?OBJ2) 
denotes the &%Object consisting of the parts which belong to both ?OBJ1 
and ?OBJ2."}%
. vOBJ3 = MereologicalProductFn(vOBJ1, vOBJ2) =>
      forall vPART: U
          . part(vPART, vOBJ3) <=> part(vPART, vOBJ1) /\ part(vPART, vOBJ2)
. instance(MereologicalDifferenceFn, SpatialRelation)
. instance(MereologicalDifferenceFn, BinaryFunction)
. instance(MereologicalDifferenceFn, TotalValuedRelation)
. domain(MereologicalDifferenceFn, a_1, Object)
. domain(MereologicalDifferenceFn, a_2, Object)
. range(MereologicalDifferenceFn, Object)
%{MereologicalDifferenceFn
"(&%MereologicalDifferenceFn ?OBJ1 
?OBJ2) denotes the &%Object consisting of the parts which belong to ?OBJ1 
and not to ?OBJ2."}%
. vOBJ3 = MereologicalDifferenceFn(vOBJ1, vOBJ2) =>
      forall vPART: U
          . part(vPART, vOBJ3) <=>
                part(vPART, vOBJ1) /\ not part(vPART, vOBJ2)
. instance(hole, BinaryPredicate)
. instance(hole, SpatialRelation)
. instance(hole, AsymmetricRelation)
. domain(hole, a_1, Hole)
. domain(hole, a_2, SelfConnectedObject)
%{hole
"(&%hole ?HOLE ?OBJ) means that ?HOLE is a 
&%Hole in ?OBJ.  A &%Hole is a fillable body located at the 
&%surface an &%Object."}%
. subclass(Hole, Region)
%{Hole
"A hole is an immaterial body located at the surface 
of an &%Object.  Since every &%Hole is ontologically dependent on its host 
(i.e., the object in which it is a hole), being a &%Hole is defined as 
being a &%hole in something.  Note that two &%Holes may occupy the same 
region, or part of the same region, without sharing any parts.  Any two hosts of a hole have a common proper part that entirely hosts 
the hole. A common host of two holes hosts all parts of the sum of those holes.
Any object that includes the host of a hole is a host of that hole, 
unless its parts also include parts of that very hole. 
Overlapping holes have overlapping hosts. No hole is atomic. 
Holes are connected with their hosts. No hole can have a proper part that 
is externally connected with exactly the same things as the hole itself."}%
. instance(vHOLE, Hole) <=> (exists vOBJ: U . hole(vHOLE, vOBJ))
. hole(vHOLE, vOBJ) => not instance(vOBJ, Hole)
. hole(vHOLE, vOBJ) => not overlapsSpatially(vHOLE, vOBJ)
. hole(vHOLE, vOBJ1) /\ hole(vHOLE, vOBJ2) =>
      exists vOBJ3: U
          . properPart(vOBJ3, MereologicalProductFn(vOBJ1, vOBJ2))
            /\ hole(vHOLE, vOBJ3)
. hole(vHOLE1, vOBJ) /\ hole(vHOLE2, vOBJ) =>
      forall vHOLE3: U
          . part(vHOLE3, MereologicalSumFn(vHOLE1, vHOLE2)) =>
                hole(vHOLE3, vOBJ)
. hole(vHOLE, vOBJ1) /\ part(vOBJ1, vOBJ2) =>
      overlapsSpatially(vHOLE, vOBJ2) \/ hole(vHOLE, vOBJ2)
. hole(vHOLE1, vOBJ1)
  /\ hole(vHOLE2, vOBJ2)
  /\ overlapsSpatially(vHOLE1, vHOLE2) =>
      overlapsSpatially(vOBJ1, vOBJ2)
. instance(vHOLE1, Hole) =>
      exists vHOLE2: U . properPart(vHOLE2, vHOLE1)
. instance(HoleHostFn, SpatialRelation)
. instance(HoleHostFn, UnaryFunction)
. instance(HoleHostFn, TotalValuedRelation)
. instance(HoleHostFn, AsymmetricRelation)
. domain(HoleHostFn, a_1, Hole)
. range(HoleHostFn, Object)
%{HoleHostFn
"A &%UnaryFunction that maps a &%Hole to 
the &%Object which is its principal host.  The principle host of a &%Hole 
is its maximally connected host (a notion taken here to be defined only 
when the argument is a hole)."}%
. vOBJ1 = HoleHostFn(vHOLE) =>
      forall vOBJ2: U
          . overlapsSpatially(vOBJ2, vOBJ1) <=>
                (exists vOBJ3: U
                     . hole(vHOLE, vOBJ3) /\ overlapsSpatially(vOBJ2, vOBJ3))
. hole(vHOLE, vOBJ) => connected(vHOLE, vOBJ)
. instance(vHOLE1, Hole) /\ properPart(vHOLE2, vHOLE1) =>
      exists vOBJ: U
          . meetsSpatially(vHOLE1, vOBJ) /\ not meetsSpatially(vHOLE2, vOBJ)
. instance(Fillable, ShapeAttribute)
%{Fillable
"Something is &%Fillable if it can be filled by 
something else.  Note that 'filled' here means perfectly filled.
Something is fillable just in case it is part of a hole; i.e., 
fillability is an exclusive property of holes and their parts."}%
. (exists vTIME: U . holdsDuring(vTIME, fills(vOBJ, vHOLE))) =>
      attribute(vHOLE, Fillable)
. attribute(vHOLE1, Fillable) <=>
      (exists vHOLE2: U . instance(vHOLE2, Hole) /\ part(vHOLE1, vHOLE2))
. subrelation(partiallyFills, located)
. instance(partiallyFills, SpatialRelation)
. instance(partiallyFills, AsymmetricRelation)
. domain(partiallyFills, a_1, Object)
. domain(partiallyFills, a_2, Hole)
%{partiallyFills
"(&%partiallyFills ?OBJ ?HOLE) means that 
?OBJ &%completelyFills some part of ?HOLE. Note that if (&%partiallyFills 
?OBJ1 ?HOLE) and (&%part ?OBJ1 ?OBJ2), then (&%partiallyFills ?OBJ2 ?HOLE). 
Note too that a partial filler need not be wholly inside a hole (it may 
stick out), which means that every complete filler also qualifies as 
(is a limit case of) a partial one."}%
. partiallyFills(vOBJ, vHOLE1) =>
      exists vHOLE2: U
          . part(vHOLE2, vHOLE1) /\ completelyFills(vOBJ, vHOLE2)
. instance(properlyFills, AsymmetricRelation)
. subrelation(properlyFills, partiallyFills)
. domain(properlyFills, a_1, Object)
. domain(properlyFills, a_2, Hole)
%{properlyFills
"(&%properlyFills ?OBJ ?HOLE) 
means that ?HOLE is properly (though perhaps incompletely) filled by 
?OBJ, i.e. some part of ?HOLE is perfectly filled by ?OBJ.  Note that 
&%properlyFills is the dual of &%completelyFills, and is so 
related to &%partiallyFills that ?OBJ &%properlyFills ?HOLE just in 
case ?OBJ &%partiallyFills every part of ?HOLE.  (Thus, every perfect 
filler is both complete and proper in this sense). 
Every hole is connected with everything with which a proper filler 
of the hole is connected. Every proper part of a perfect filler of (a part of) a hole properly 
fills (that part of) that hole."}%
. properlyFills(vOBJ, vHOLE1) =>
      exists vHOLE2: U . part(vHOLE2, vHOLE1) /\ fills(vOBJ, vHOLE2)
. instance(completelyFills, AsymmetricRelation)
. subrelation(completelyFills, partiallyFills)
%{completelyFills
"(&%completelyFills ?OBJ ?HOLE) 
means that some &%part of the &%Object ?OBJ fills the &%Hole ?HOLE.  
Note that if (&%completelyFills ?OBJ1 ?HOLE) and (&%part 
?OBJ1 ?OBJ2), then (&%completelyFills ?OBJ2 ?HOLE). 
A complete filler of (a part of) a hole is connected with everything 
with which (that part of) the hole itself is connected. 
A perfect filler of (a part of) a hole completely fills every proper 
part of (that part of) that hole."}%
. completelyFills(vOBJ1, vHOLE) =>
      exists vOBJ2: U . part(vOBJ2, vOBJ1) /\ fills(vOBJ2, vHOLE)
. instance(fills, AsymmetricRelation)
. subrelation(fills, completelyFills)
. subrelation(fills, properlyFills)
. domain(fills, a_1, Object)
. domain(fills, a_2, Hole)
. relatedInternalConcept(fills, Fillable)
%{fills
"Holes can be filled.  (&%fills ?OBJ ?HOLE) 
means that the &%Object ?OBJ fills the &%Hole ?HOLE.  Note that 
&%fills here means perfectly filled. Perfect fillers and fillable entities have no parts in common (rather, 
they may occupy the same spatial region)."}%
. fills(vOBJ1, vHOLE) /\ attribute(vOBJ2, Fillable) =>
      not overlapsSpatially(vOBJ1, vOBJ2)
. completelyFills(vOBJ1, vHOLE) =>
      forall vOBJ2: U
          . connected(vOBJ2, vHOLE) => connected(vOBJ2, vOBJ1)
. properlyFills(vOBJ1, vHOLE) /\ connected(vOBJ2, vOBJ1) =>
      connected(vHOLE, vOBJ2)
. fills(vOBJ, vHOLE1) /\ properPart(vHOLE2, vHOLE1) =>
      completelyFills(vOBJ, vHOLE2)
. fills(vOBJ1, vHOLE) /\ properPart(vOBJ2, vOBJ1) =>
      properlyFills(vOBJ2, vHOLE)
. instance(HoleSkinFn, SpatialRelation)
. instance(HoleSkinFn, UnaryFunction)
. instance(HoleSkinFn, TotalValuedRelation)
. instance(HoleSkinFn, AsymmetricRelation)
. domain(HoleSkinFn, a_1, Hole)
. range(HoleSkinFn, Object)
%{HoleSkinFn
"A &%UnaryFunction that maps a &%Hole to the skin 
of the &%Hole.  The skin of a &%Hole is the fusion of those superficial 
parts (see &%superficialPart) of the &%Hole's principal host (see 
&%HoleHostFn) with which the &%Hole is externally connected."}%
. vOBJ1 = HoleSkinFn(vHOLE) =>
      forall vOBJ2: U
          . overlapsSpatially(vOBJ2, vOBJ1) <=>
                (exists vOBJ3: U
                     . superficialPart(vOBJ3, HoleHostFn(vHOLE))
                       /\ meetsSpatially(vHOLE, vOBJ3)
                       /\ overlapsSpatially(vOBJ2, vOBJ3))
. instance(subProcess, BinaryPredicate)
. instance(subProcess, PartialOrderingRelation)
. domain(subProcess, a_1, Process)
. domain(subProcess, a_2, Process)
%{subProcess
"(&%subProcess ?SUBPROC ?PROC) means that ?SUBPROC 
is a subprocess of ?PROC.  A subprocess is here understood as a temporally 
distinguished part (proper or not) of a &%Process."}%
. subProcess(vSUBPROC, vPROC) =>
      temporalPart(WhenFn(vSUBPROC), WhenFn(vPROC))
. subProcess(vSUBPROC, vPROC) =>
      forall vREGION: U
          . located(vPROC, vREGION) => located(vSUBPROC, vREGION)
. instance(vPROC, Process) /\ subProcess(vSUBPROC, vPROC) =>
      exists vTIME: U . time(vSUBPROC, vTIME)
. subclass(BiologicalProcess, InternalChange)
%{BiologicalProcess
"A &%Process embodied in an &%Organism."}%
. instance(vPROC, BiologicalProcess) =>
      exists vOBJ: U . instance(vOBJ, Organism) /\ located(vPROC, vOBJ)
. instance(vPROC, BiologicalProcess) /\ experiencer(vPROC, vORG) =>
      instance(vORG, Organism)
. subclass(PhysiologicProcess, BiologicalProcess)
%{PhysiologicProcess
"A normal process of an &%Organism 
or part of an &%Organism."}%
. subclass(AutonomicProcess, PhysiologicProcess)
. disjoint(AutonomicProcess, IntentionalProcess)
%{AutonomicProcess
"The class of &%PhysiologicProcesses of 
which there is not conscious awareness and control."}%
. subclass(OrganOrTissueProcess, AutonomicProcess)
. disjoint(OrganOrTissueProcess, OrganismProcess)
%{OrganOrTissueProcess
"A &%PhysiologicProcess of a 
particular &%Organ or &%Tissue."}%
. instance(vPROC, OrganOrTissueProcess) =>
      exists vTHING: U
          . located(vPROC, vTHING)
            /\ (instance(vTHING, Organ) \/ instance(vTHING, Tissue))
. subclass(OrganismProcess, PhysiologicProcess)
%{OrganismProcess
"A physiologic function of the 
&%Organism as a whole, of multiple organ systems or of multiple 
&%Organs or &%Tissues."}%
. subclass(Birth, OrganismProcess)
%{Birth
"The &%Process of being born."}%
. instance(vBIRTH, Birth) /\ experiencer(vBIRTH, vAGENT) =>
      exists vDEATH: U
          . instance(vDEATH, Death) /\ experiencer(vDEATH, vAGENT)
. subclass(Death, OrganismProcess)
%{Death
"The &%Process of dying."}%
. instance(vDEATH, Death) /\ experiencer(vDEATH, vAGENT) =>
      holdsDuring(FutureFn(WhenFn(vDEATH)), attribute(vAGENT, Dead))
. instance(vDEATH, Death)
  /\ instance(vBIRTH, Birth)
  /\ experiencer(vDEATH, vAGENT)
  /\ experiencer(vBIRTH, vAGENT) =>
      exists vTIME: U
          . meetsTemporally(WhenFn(vBIRTH), vTIME)
            /\ meetsTemporally(vTIME, WhenFn(vDEATH))
            /\ holdsDuring(vTIME, attribute(vAGENT, Living))
. subclass(Breathing, OrganismProcess)
. subclass(Breathing, AutonomicProcess)
%{Breathing
"The &%Process of respiration, by which oxygen 
is made available to an &%Animal.  This covers processes of inhalation, 
exhalation, and alternations between the two."}%
. subclass(Ingesting, OrganismProcess)
%{Ingesting
"The &%Process by which &%Food is 
taken into an &%Animal."}%
. instance(vACT, Ingesting) /\ patient(vACT, vFOOD) =>
      instance(vFOOD, Food)
. subclass(Eating, Ingesting)
%{Eating
"The &%Process by which solid &%Food is 
incorporated into an &%Animal."}%
. instance(vACT, Eating) /\ patient(vACT, vFOOD) =>
      attribute(vFOOD, Solid)
. subclass(Drinking, Ingesting)
%{Drinking
"The &%Process by which liquid &%Food, i.e. 
&%Beverages, are incorporated into an &%Animal."}%
. subclass(Digesting, OrganismProcess)
. subclass(Digesting, AutonomicProcess)
%{Digesting
"The &%Process by which &%Food that has been 
ingested is broken down into simpler chemical compounds and absorbed by 
the &%Organism."}%
. instance(vDIGEST, Digesting) /\ agent(vDIGEST, vORGANISM) =>
      exists vINGEST: U
          . instance(vINGEST, Ingesting)
            /\ agent(vINGEST, vORGANISM)
            /\ overlapsTemporally(WhenFn(vINGEST), WhenFn(vDIGEST))
. instance(vDIGEST, Digesting) =>
      exists vDECOMP: U
          . instance(vDECOMP, ChemicalDecomposition)
            /\ subProcess(vDECOMP, vDIGEST)
. subclass(Growth, AutonomicProcess)
%{Growth
"The &%Process of biological development in which 
an &%Organism or part of an &%Organism changes its form or its size."}%
. subclass(Replication, OrganismProcess)
%{Replication
"The &%Process of biological reproduction.  
This can be either a sexual or an asexual process."}%
. instance(vREP, Replication)
  /\ agent(vREP, vPARENT)
  /\ a_r_e_s_u_l_t(vREP, vCHILD) =>
      parent(vCHILD, vPARENT)
. instance(vREP, Replication) =>
      exists vBODY: U
          . instance(vBODY, ReproductiveBody) /\ a_r_e_s_u_l_t(vREP, vBODY)
. subclass(SexualReproduction, Replication)
. disjoint(SexualReproduction, AsexualReproduction)
%{SexualReproduction
"Sexual &%Processes of biological 
reproduction."}%
. instance(vREP, SexualReproduction)
  /\ a_r_e_s_u_l_t(vREP, vORGANISM) =>
      exists vMOTHER: U; vFATHER: U
          . mother(vORGANISM, vMOTHER) /\ father(vORGANISM, vFATHER)
. subclass(AsexualReproduction, Replication)
%{AsexualReproduction
"Asexual &%Processes of biological 
reproduction."}%
. instance(vREP, AsexualReproduction)
  /\ a_r_e_s_u_l_t(vREP, vORGANISM) =>
      not (exists vPARENT1: U; vPARENT2: U
               . parent(vORGANISM, vPARENT1)
                 /\ parent(vORGANISM, vPARENT2)
                 /\ not vPARENT1 = vPARENT2)
. subclass(PsychologicalProcess, BiologicalProcess)
%{PsychologicalProcess
"A &%BiologicalProcess which takes place in 
the mind or brain of an &%Organism and which may be manifested in the behavior 
of the &%Organism."}%
. instance(vPROCESS, PsychologicalProcess) =>
      exists vANIMAL: U
          . instance(vANIMAL, Animal) /\ experiencer(vPROCESS, vANIMAL)
. subclass(PathologicProcess, BiologicalProcess)
. disjoint(PathologicProcess, PhysiologicProcess)
%{PathologicProcess
"A disordered process, activity, or 
state of the &%Organism as a whole, of a body system or systems, or of 
multiple &%Organs or &%Tissues. Included here are normal responses to a 
negative stimulus as well as patholologic conditions or states that are 
less specific than a disease. Pathologic functions frequently have 
systemic effects."}%
. instance(vPATH, PathologicProcess) /\ experiencer(vPATH, vORG) =>
      exists vPART: U; vDISEASE: U
          . part(vPART, vORG)
            /\ instance(vDISEASE, DiseaseOrSyndrome)
            /\ attribute(vPART, vDISEASE)
. subclass(Injuring, PathologicProcess)
. subclass(Injuring, Damaging)
%{Injuring
"The process of creating a traumatic wound or 
injury.  Since &%Injuring is not possible without some biologic function 
of the organism being injured, it is a subclass of &%BiologicalProcess."}%
. instance(vINJ, Injuring) =>
      exists vSTRUCT: U
          . instance(vSTRUCT, AnatomicalStructure) /\ patient(vINJ, vSTRUCT)
. instance(vINJ, Injuring) <=>
      instance(vINJ, Damaging)
      /\ (exists vORGANISM: U
              . instance(vORGANISM, Organism) /\ patient(vINJ, vORGANISM))
. subclass(Poisoning, Injuring)
%{Poisoning
"A &%Poisoning is caused by an external 
substance.  Since &%Poisoning is not possible without some biologic 
function which affects the &%Organism being injured, it is a subclass 
of &%BiologicalProcess."}%
. instance(vPOISON, Poisoning) =>
      exists vTHING: U
          . patient(vPOISON, vTHING)
            /\ (instance(vTHING, Organism)
                \/ instance(vTHING, AnatomicalStructure))
. instance(vPOISON, Poisoning) =>
      exists vSUBSTANCE: U
          . instance(vSUBSTANCE, BiologicallyActiveSubstance)
            /\ instrument(vPOISON, vSUBSTANCE)
. subclass(IntentionalProcess, Process)
%{IntentionalProcess
"A &%Process that has a specific 
purpose for the &%CognitiveAgent who performs it."}%
. instance(vPROC, IntentionalProcess) /\ agent(vPROC, vAGENT) =>
      exists vPURP: U . hasPurposeForAgent(vPROC, vPURP, vAGENT)
. instance(vPROC, IntentionalProcess) =>
      exists vAGENT: U
          . instance(vAGENT, CognitiveAgent) /\ agent(vPROC, vAGENT)
. instance(vPROC, IntentionalProcess)
  /\ agent(vPROC, vHUMAN)
  /\ instance(vHUMAN, Animal) =>
      holdsDuring(WhenFn(vPROC), attribute(vHUMAN, Awake))
. subclass(IntentionalPsychologicalProcess, IntentionalProcess)
. subclass(IntentionalPsychologicalProcess, PsychologicalProcess)
%{IntentionalPsychologicalProcess
"An &%IntentionalProcess that 
can be realized entirely within the mind or brain of an &%Organism.  Thus, 
for example, &%Reasoning is a subclass of &%IntentionalPsychologicalProcess, 
because one can reason simply by exercising one's mind/brain.  On the other 
hand, &%RecreationOrExercise is not a subclass of &%IntentionalPsychologicalProcess,
because many instances of &%RecreationOrExercise necessarily have &%subProcesses 
of &%BodyMotion."}%
. subclass(RecreationOrExercise, IntentionalProcess)
%{RecreationOrExercise
"A &%Process that is carried out for 
the purpose of recreation or exercise.  Since &%RecreationOrExercise is a 
subclass of &%IntentionalProcess, the intent of a process determines whether 
or not it is an instance of the class.  Hence, if John and Bill watch the same 
program on television, and John watches it to relax while Bill watches it solely 
to satisfy an educational requirement, then John's watching the movie is an 
instance of &%RecreationOrExercise, while Bill's is not (both cases of 
watching the television program would however be in the class of &%Seeing, since 
being an instance of this latter class is not determined by intention)."}%
. subclass(OrganizationalProcess, IntentionalProcess)
%{OrganizationalProcess
"An &%IntentionalProcess that 
involves an &%Organization."}%
. instance(vACT, OrganizationalProcess) /\ agent(vACT, vAGENT) =>
      instance(vAGENT, Organization)
      \/ (exists vORG: U
              . instance(vORG, Organization) /\ member(vAGENT, vORG))
. subclass(Election, OrganizationalProcess)
%{Election
"&%Election is the class of events conducted by an 
organization, in which qualified participants vote for officers, adopt 
resolutions, or settle other issues in that &%Organization."}%
. subclass(ReligiousProcess, OrganizationalProcess)
%{ReligiousProcess
"An &%OrganizationalProcess that is 
carried out within or by a &%ReligiousOrganization."}%
. instance(vACT, ReligiousProcess) /\ agent(vACT, vAGENT) =>
      instance(vAGENT, ReligiousOrganization)
      \/ (exists vORG: U
              . member(vAGENT, vORG) /\ instance(vORG, ReligiousOrganization))
. subclass(JoiningAnOrganization, OrganizationalProcess)
%{JoiningAnOrganization
"The &%OrganizationalProcess of 
becoming a &%member of an &%Organization."}%
. instance(vJOIN, JoiningAnOrganization)
  /\ instance(vORG, Organization)
  /\ agent(vJOIN, vPERSON)
  /\ patient(vJOIN, vORG) =>
      holdsDuring(BeginFn(WhenFn(vJOIN)), a_n_o_t(member(vPERSON, vORG)))
      /\ holdsDuring(EndFn(WhenFn(vJOIN)), member(vPERSON, vORG))
. subclass(LeavingAnOrganization, OrganizationalProcess)
. disjoint(LeavingAnOrganization, JoiningAnOrganization)
%{LeavingAnOrganization
"The &%OrganizationalProcess of 
leaving an &%Organization, whether voluntarily or involuntarily."}%
. instance(vLEAVE, LeavingAnOrganization)
  /\ instance(vORG, Organization)
  /\ agent(vLEAVE, vPERSON)
  /\ patient(vLEAVE, vORG) =>
      holdsDuring(BeginFn(WhenFn(vLEAVE)), member(vPERSON, vORG))
      /\ holdsDuring(EndFn(WhenFn(vLEAVE)),
                     a_n_o_t(member(vPERSON, vORG)))
. subclass(Graduation, LeavingAnOrganization)
%{Graduation
"The &%OrganizationalProcess of graduating 
from an &%EducationalOrganization."}%
. instance(vGRAD, Graduation)
  /\ agent(vGRAD, vORG)
  /\ patient(vGRAD, vPERSON) =>
      instance(vORG, EducationalOrganization)
. subclass(Matriculation, JoiningAnOrganization)
%{Matriculation
"The &%OrganizationalProcess of joining an 
&%EducationalOrganization as a student."}%
. instance(vMAT, Matriculation)
  /\ agent(vMAT, vORG)
  /\ patient(vMAT, vPERSON) =>
      instance(vORG, EducationalOrganization)
. subclass(Hiring, JoiningAnOrganization)
%{Hiring
"&%OrganizationalProcesses where someone is made an 
employee of an &%Organization."}%
. instance(vHIRE, Hiring)
  /\ instance(vORG, Organization)
  /\ agent(vHIRE, vORG)
  /\ patient(vHIRE, vPERSON) =>
      holdsDuring(BeginFn(WhenFn(vHIRE)),
                  a_n_o_t(employs(vORG, vPERSON)))
      /\ holdsDuring(EndFn(WhenFn(vHIRE)), employs(vORG, vPERSON))
. subclass(TerminatingEmployment, LeavingAnOrganization)
%{TerminatingEmployment
"&%OrganizationalProcesses where someone 
ceases to be an employee of an &%Organization.  Note that this covers being 
laid off, being fired, and voluntarily leaving a job."}%
. instance(vFIRE, TerminatingEmployment)
  /\ instance(vORG, Organization)
  /\ agent(vFIRE, vORG)
  /\ patient(vFIRE, vPERSON) =>
      holdsDuring(BeginFn(WhenFn(vFIRE)), employs(vORG, vPERSON))
      /\ holdsDuring(EndFn(WhenFn(vFIRE)),
                     a_n_o_t(employs(vORG, vPERSON)))
. subclass(PoliticalProcess, OrganizationalProcess)
%{PoliticalProcess
"An &%OrganizationalProcess carried 
out by, for or against officially constituted governments.  Some examples 
would be voting on proposed legislation, electing a government representative, 
or even overthrowing a government in a revolution."}%
. instance(vPROC, PoliticalProcess) =>
      exists vPOL: U
          . (instance(vPOL, Government)
             \/ (exists vGOV: U
                     . instance(vGOV, Government) /\ member(vPOL, vGOV)))
            /\ (agent(vPROC, vPOL) \/ patient(vPROC, vPOL))
. subclass(JudicialProcess, PoliticalProcess)
%{JudicialProcess
"Any legal proceeding which is conducted 
by a &%JudicialOrganization.  Note that there is an important difference 
between the concepts &%LegalAction and &%JudicialProcess.  The former 
refers to legal claims that are brought by a plaintiff, e.g. law suits, 
while the second refers to trials and other sorts of judicial hearings 
where the merits of a &%LegalAction are decided."}%
. instance(vPROCESS, JudicialProcess)
  /\ agent(vPROCESS, vORG)
  /\ instance(vORG, Organization) =>
      instance(vORG, JudicialOrganization)
. subclass(LegalDecision, JudicialProcess)
. subclass(LegalDecision, Declaring)
%{LegalDecision
"A decision issued by a court with respect to 
a &%LegalAction.  Note that a &%LegalDecision is the act of &%Declaring a 
decision of a court; it is not the act of judge or jury &%Deciding the merits 
of a particular &%LegalAction."}%
. instance(vDECISION, LegalDecision) =>
      exists vACTION: U
          . instance(vACTION, LegalAction) /\ refers(vDECISION, vACTION)
. instance(vDECISION, LegalDecision) =>
      exists vDECIDE: U
          . instance(vDECIDE, Deciding)
            /\ earlier(WhenFn(vDECIDE), WhenFn(vDECISION))
. subclass(MilitaryProcess, PoliticalProcess)
%{MilitaryProcess
"Any &%Process that is carried out by a 
military organization.  Note that this class covers &%Processes, e.g. 
military operations, that are the result of careful planning, as well as 
those which are unscripted."}%
. subclass(RegulatoryProcess, Guiding)
%{RegulatoryProcess
"an &%Guiding whose aim is the enforcement 
of rules or regulations.  Note the key differences between &%RegulatoryProcess 
and the related concept &%Managing.  The latter implies a long-term relationship 
between a single manager and limited number of agents who are managed, while the 
former implies a normative standard to which the activities of the regulated are 
referred."}%
. subclass(Managing, OrganizationalProcess)
. subclass(Managing, Guiding)
%{Managing
"&%OrganizationalProcesses that involve overseeing 
the activities of others.  Note the key differences between &%RegulatoryProcess 
and its sibling &%Managing.  The latter implies a long-term relationship between 
the manager and the managed, while the former implies a normative standard to which 
the activities of the regulated are referred."}%
. subclass(Planning, IntentionalPsychologicalProcess)
%{Planning
"Specifying a set of actions in order to meet a 
set of goals or objectives."}%
. subclass(Designing, IntentionalPsychologicalProcess)
%{Designing
"The spatial analogue of &%Planning.  &%Designing a 
&%Collection of &%Objects involves determining a placement of the &%Objects 
with respect to one another and perhaps other &%Objects as well, in order to 
satisfy a particular purpose."}%
. subclass(Interpreting, IntentionalPsychologicalProcess)
%{Interpreting
"Any &%Process of assigning a &%Proposition to 
a &%Text, i.e. understanding the &%Text."}%
. instance(vINTERPRET, Interpreting)
  /\ agent(vINTERPRET, vAGENT)
  /\ patient(vINTERPRET, vCONTENT)
  /\ instance(vCONTENT, ContentBearingObject) =>
      exists vPROP: U
          . holdsDuring(EndFn(WhenFn(vINTERPRET)),
                        believes(vAGENT, containsInformation(vCONTENT, vPROP)))
. subclass(QuantityChange, InternalChange)
. partition(QuantityChange, Increasing, Decreasing)
%{QuantityChange
"Any &%InternalChange where a &%PhysicalQuantity 
associated with the &%patient is altered."}%
. subclass(Increasing, QuantityChange)
. relatedInternalConcept(Increasing, Putting)
%{Increasing
"Any &%QuantityChange where the &%PhysicalQuantity 
is increased."}%
. instance(vINCREASE, Increasing) /\ patient(vINCREASE, vOBJ) =>
      exists vUNIT: U; vQUANT1: U; vQUANT2: U
          . holdsDuring(BeginFn(WhenFn(vINCREASE)),
                        equal(MeasureFn(vOBJ, vUNIT), vQUANT1))
            /\ holdsDuring(EndFn(WhenFn(vINCREASE)),
                           equal(MeasureFn(vOBJ, vUNIT), vQUANT2))
            /\ greaterThan(vQUANT2, vQUANT1)
. subclass(Heating, Increasing)
. disjoint(Heating, Cooling)
%{Heating
"Any &%Increasing &%Process where the &%PhysicalQuantity 
increased is a &%TemperatureMeasure."}%
. instance(vHEAT, Heating) /\ patient(vHEAT, vOBJ) =>
      exists vUNIT: U; vQUANT1: U; vQUANT2: U
          . instance(vUNIT, TemperatureMeasure)
            /\ holdsDuring(BeginFn(WhenFn(vHEAT)),
                           equal(MeasureFn(vOBJ, vUNIT), vQUANT1))
            /\ holdsDuring(EndFn(WhenFn(vHEAT)),
                           equal(MeasureFn(vOBJ, vUNIT), vQUANT2))
            /\ greaterThan(vQUANT2, vQUANT1)
. subclass(Decreasing, QuantityChange)
. relatedInternalConcept(Decreasing, Removing)
%{Decreasing
"Any &%QuantityChange where the &%PhysicalQuantity 
is decreased."}%
. instance(vDECREASE, Decreasing) /\ patient(vDECREASE, vOBJ) =>
      exists vUNIT: U; vQUANT1: U; vQUANT2: U
          . holdsDuring(BeginFn(WhenFn(vDECREASE)),
                        equal(MeasureFn(vOBJ, vUNIT), vQUANT1))
            /\ holdsDuring(EndFn(WhenFn(vDECREASE)),
                           equal(MeasureFn(vOBJ, vUNIT), vQUANT2))
            /\ lessThan(vQUANT2, vQUANT1)
. subclass(Cooling, Decreasing)
%{Cooling
"Any &%Decreasing &%Process where the &%PhysicalQuantity 
decreased is a &%TemperatureMeasure."}%
. instance(vCOOL, Cooling) /\ patient(vCOOL, vOBJ) =>
      exists vUNIT: U; vQUANT1: U; vQUANT2: U
          . instance(vUNIT, TemperatureMeasure)
            /\ holdsDuring(BeginFn(WhenFn(vCOOL)),
                           equal(MeasureFn(vOBJ, vUNIT), vQUANT1))
            /\ holdsDuring(EndFn(WhenFn(vCOOL)),
                           equal(MeasureFn(vOBJ, vUNIT), vQUANT2))
            /\ lessThan(vQUANT2, vQUANT1)
. subclass(Motion, Process)
%{Motion
"Any &%Process of movement."}%
. instance(vMOTION, Motion)
  /\ patient(vMOTION, vOBJ)
  /\ origin(vMOTION, vPLACE) =>
      holdsDuring(BeginFn(WhenFn(vMOTION)), located(vOBJ, vPLACE))
. instance(vMOTION, Motion)
  /\ patient(vMOTION, vOBJ)
  /\ destination(vMOTION, vPLACE) =>
      holdsDuring(EndFn(WhenFn(vMOTION)), located(vOBJ, vPLACE))
. instance(path, CaseRole)
. domain(path, a_1, Motion)
. domain(path, a_2, Object)
%{path
"(&%path ?MOTION ?PATH) means that ?PATH is a route 
along which ?MOTION occurs.  For example, Highway 101 is the path in the 
following proposition:  the car drove up Highway 101."}%
. path(vPROCESS, vPATH1)
  /\ origin(vPROCESS, vSOURCE)
  /\ destination(vPROCESS, vDEST)
  /\ length(vPATH1, vMEASURE1)
  /\ distance(vSOURCE, vDEST, vDISTANCE)
  /\ not greaterThan(vMEASURE1, vDISTANCE) =>
      forall vOBJ: U
          . part(vOBJ, vPATH1) => between(vSOURCE, vOBJ, vDEST)
. subclass(BodyMotion, Motion)
%{BodyMotion
"Any &%Motion where the &%agent is an &%Organism 
and the &%patient is a &%BodyPart."}%
. instance(vMOTION, BodyMotion) =>
      exists vOBJ: U; vAGENT: U
          . instance(vOBJ, BodyPart)
            /\ patient(vMOTION, vOBJ)
            /\ instance(vAGENT, Organism)
            /\ agent(vMOTION, vAGENT)
. subclass(Vocalizing, RadiatingSound)
. subclass(Vocalizing, BodyMotion)
%{Vocalizing
"Any instance of &%RadiatingSound where the 
&%instrument is the &%Human vocal cords.  This covers grunts, screams, 
roars, as well as &%Speaking."}%
. instance(vVOCAL, Vocalizing) =>
      exists vHUMAN: U
          . instance(vHUMAN, Human)
            /\ agent(vVOCAL, vHUMAN)
            /\ instrument(vVOCAL, vHUMAN)
. subclass(Speaking, LinguisticCommunication)
. subclass(Speaking, Vocalizing)
%{Speaking
"Any &%LinguisticGeneration which is also a 
&%Vocalizing, i.e. any &%LinguisticCommunication by a &%Human which 
involves his/her vocal cords."}%
. subclass(Singing, Speaking)
. subclass(Singing, Music)
%{Singing
"&%Speaking that is also &%Music."}%
. subclass(Ambulating, BodyMotion)
. subclass(Ambulating, Translocation)
. partition(Ambulating, Walking, Running)
%{Ambulating
"Any &%BodyMotion which is accomplished by 
means of the legs of an &%Animal for the purpose of moving from one 
point to another."}%
. subclass(Walking, Ambulating)
%{Walking
"&%Ambulating relatively slowly, i.e. moving in such a 
way that at least one foot is always in contact with the ground."}%
. subclass(Running, Ambulating)
%{Running
"&%Ambulating relatively quickly, i.e. moving in such a 
way that, with each step, neither foot is in contact with the ground for a 
period of time."}%
. instance(vWALK, Walking)
  /\ instance(vRUN, Running)
  /\ agent(vWALK, vAGENT)
  /\ agent(vRUN, vAGENT)
  /\ holdsDuring(WhenFn(vWALK),
                 measure(vAGENT, SpeedFn(vLENGTH1, vTIME)))
  /\ holdsDuring(WhenFn(vRUN),
                 measure(vAGENT, SpeedFn(vLENGTH2, vTIME))) =>
      greaterThan(vLENGTH2, vLENGTH1)
. subclass(Swimming, BodyMotion)
%{Swimming
"Any deliberate and controlled &%BodyMotion 
through water that is accomplished by an &%Organism."}%
. instance(vSWIM, Swimming) /\ agent(vSWIM, vAGENT) =>
      exists vAREA: U
          . instance(vAREA, WaterArea) /\ located(vAGENT, vAREA)
. subclass(Dancing, BodyMotion)
%{Dancing
"Any &%BodyMotion of &%Humans which is 
deliberately coordinated with music."}%
. subclass(GeologicalProcess, Motion)
. disjoint(GeologicalProcess, IntentionalProcess)
%{GeologicalProcess
"The class of activities that 
are caused by geological forces and affect geological features, 
and which may affect the biosphere as well."}%
. subclass(WeatherProcess, Motion)
. disjoint(WeatherProcess, IntentionalProcess)
%{WeatherProcess
"&%WeatherProcess is the broadest class of 
processes that involve weather, including weather seasons (not to be confused 
with instances of &%SeasonOfYear), weather systems, and short-term weather 
events."}%
. subclass(Precipitation, WeatherProcess)
. subclass(Precipitation, WaterMotion)
. subclass(Precipitation, Falling)
%{Precipitation
"&%Precipitation is the process of 
water molecules falling from the air to the ground, in either a 
liquid or frozen state."}%
. instance(vPROCESS, Precipitation) =>
      exists vSTUFF: U
          . instance(vSTUFF, Water) /\ patient(vPROCESS, vSTUFF)
. subclass(LiquidMotion, Motion)
%{LiquidMotion
"Any &%Motion where the &%patient is a 
&%Liquid.  This class would cover, in particular, the flow of 
&%Water."}%
. instance(vMOTION, LiquidMotion) /\ patient(vMOTION, vOBJ) =>
      attribute(vOBJ, Liquid)
. subclass(WaterMotion, LiquidMotion)
%{WaterMotion
"Any &%LiquidMotion where the &%Liquid is &%Water."}%
. instance(vMOTION, WaterMotion) =>
      exists vWATER: U
          . patient(vMOTION, vWATER) /\ instance(vWATER, Water)
. subclass(GasMotion, Motion)
%{GasMotion
"Any &%Motion where the &%patient is a 
&%Gas.  This class would cover, in particular, the motion of 
&%Air, e.g. a breeze or wind."}%
. instance(vMOTION, GasMotion) /\ patient(vMOTION, vOBJ) =>
      attribute(vOBJ, Gas)
. subclass(Wind, GasMotion)
%{Wind
"Any &%Motion of &%Air."}%
. subclass(DirectionChange, Motion)
%{DirectionChange
"The act of changing the direction in 
which the &%patient of the act is oriented."}%
. instance(vPROC, DirectionChange) =>
      exists vATTR: U
          . instance(vATTR, DirectionalAttribute)
            /\ ((holdsDuring(BeginFn(WhenFn(vPROC)), manner(vPROC, vATTR))
                 /\ holdsDuring(EndFn(WhenFn(vPROC)),
                                a_n_o_t(manner(vPROC, vATTR))))
                \/ (holdsDuring(EndFn(WhenFn(vPROC)), manner(vPROC, vATTR))
                    /\ holdsDuring(BeginFn(WhenFn(vPROC)),
                                   a_n_o_t(manner(vPROC, vATTR)))))
. subclass(Transfer, Translocation)
%{Transfer
"Any &%instance of &%Translocation where the &%agent 
and the &%patient are not the same thing."}%
. instance(vTRANSFER, Transfer)
  /\ agent(vTRANSFER, vAGENT)
  /\ patient(vTRANSFER, vPATIENT) =>
      not vAGENT = vPATIENT
. subclass(Carrying, Transfer)
%{Carrying
"&%Transfer from one point to another by means of 
an &%Animal or &%Human."}%
. instance(vCARRY, Carrying) =>
      exists vANIMAL: U
          . instance(vANIMAL, Animal) /\ instrument(vCARRY, vANIMAL)
. subclass(Removing, Transfer)
%{Removing
"The &%Class of &%Processes where something is 
taken away from a location.  Note that the thing removed and the location 
are specified with the &%CaseRoles &%patient and &%origin, respectively."}%
. instance(vREMOVE, Removing)
  /\ origin(vREMOVE, vPLACE)
  /\ patient(vREMOVE, vOBJ) =>
      holdsDuring(BeginFn(WhenFn(vREMOVE)), located(vOBJ, vPLACE))
      /\ holdsDuring(EndFn(WhenFn(vREMOVE)),
                     a_n_o_t(located(vOBJ, vPLACE)))
. subclass(Uncovering, Removing)
. disjoint(Uncovering, Covering)
%{Uncovering
"The &%Class of &%Removing processes where the &%agent 
uncovers the &%patient, either completely or only partially."}%
. subclass(Putting, Transfer)
%{Putting
"The &%Class of &%Processes where something is put 
in a location.  Note that the location is specified with the &%CaseRole 
&%destination."}%
. instance(vPUT, Putting)
  /\ destination(vPUT, vPLACE)
  /\ patient(vPUT, vOBJ) =>
      holdsDuring(BeginFn(WhenFn(vPUT)), a_n_o_t(located(vOBJ, vPLACE)))
      /\ holdsDuring(EndFn(WhenFn(vPUT)), located(vOBJ, vPLACE))
. subclass(Covering, Putting)
%{Covering
"The &%Class of &%Putting processes where the &%agent 
covers the &%patient, either completely or only partially, with something 
else."}%
. subclass(Inserting, Putting)
%{Inserting
"&%Putting one thing inside of another thing."}%
. instance(vINSERT, Inserting)
  /\ patient(vINSERT, vOBJ1)
  /\ destination(vINSERT, vOBJ2) =>
      holdsDuring(BeginFn(WhenFn(vINSERT)),
                  a_n_o_t(contains(vOBJ2, vOBJ1)))
      /\ holdsDuring(EndFn(WhenFn(vINSERT)), contains(vOBJ2, vOBJ1))
. subclass(Injecting, Inserting)
%{Injecting
"&%Inserting a &%BiologicallyActiveSubstance into an 
&%Animal or a &%Human with a syringe."}%
. instance(vINJECT, Injecting) =>
      exists vSUBSTANCE: U; vANIMAL: U
          . patient(vINJECT, vSUBSTANCE)
            /\ instance(vSUBSTANCE, BiologicallyActiveSubstance)
            /\ attribute(vSUBSTANCE, Liquid)
            /\ destination(vINJECT, vANIMAL)
            /\ instance(vANIMAL, Animal)
. subclass(Substituting, Transfer)
. subclass(Substituting, DualObjectProcess)
%{Substituting
"The &%Class of &%Transfers where one thing is 
replaced with something else."}%
. instance(vSUB, Substituting) =>
      exists vPUT: U; vREMOVE: U; vOBJ1: U; vOBJ2: U; vPLACE: U
          . instance(vPUT, Putting)
            /\ instance(vREMOVE, Removing)
            /\ subProcess(vPUT, vSUB)
            /\ subProcess(vREMOVE, vSUB)
            /\ patient(vREMOVE, vOBJ1)
            /\ origin(vREMOVE, vPLACE)
            /\ patient(vPUT, vOBJ2)
            /\ destination(vPUT, vPLACE)
            /\ not vOBJ1 = vOBJ2
. subclass(Impelling, Transfer)
%{Impelling
"The &%subclass of &%Transfer where the &%patient 
travels through space by means of a sudden, forceful event.  Some examples 
would be shooting, throwing, tossing, etc."}%
. subclass(Shooting, Impelling)
%{Shooting
"The &%subclass of &%Impelling where the &%patient 
is a projectile that is fired through the air by means of some sort of 
&%Device."}%
. subclass(Touching, Transfer)
%{Touching
"Any &%Transfer where two &%Objects are 
brought into immediate physical contact with one another."}%
. instance(vTOUCH, Touching)
  /\ agent(vTOUCH, vOBJ1)
  /\ patient(vTOUCH, vOBJ2) =>
      holdsDuring(BeginFn(WhenFn(vTOUCH)),
                  a_n_o_t(connected(vOBJ1, vOBJ2)))
      /\ holdsDuring(EndFn(WhenFn(vTOUCH)), connected(vOBJ1, vOBJ2))
. subrelation(grasps, meetsSpatially)
. domain(grasps, a_1, Animal)
. domain(grasps, a_2, Object)
%{grasps
"The state of grasping an &%Object.  (&%grasps 
?ANIMAL ?OBJ) means that the &%Animal ?ANIMAL is intentionally holding 
on to the &%Object ?OBJ."}%
. subclass(Grabbing, Touching)
. subclass(Grabbing, Attaching)
%{Grabbing
"Any instance of &%Touching which results in 
a situation where the &%agent &%grasps the &%patient of the &%Touching."}%
. instance(vGRAB, Grabbing)
  /\ agent(vGRAB, vAGENT)
  /\ patient(vGRAB, vTHING) =>
      holdsDuring(BeginFn(WhenFn(vGRAB)),
                  a_n_o_t(grasps(vAGENT, vTHING)))
      /\ holdsDuring(EndFn(WhenFn(vGRAB)), grasps(vAGENT, vTHING))
. subclass(Releasing, Transfer)
%{Releasing
"Any instance of &%Transfer which results in 
a situation where it is not the case that the &%agent &%grasps something 
which he/she &%grasps previously."}%
. instance(vRELEASE, Releasing)
  /\ agent(vGRAB, vAGENT)
  /\ patient(vGRAB, vTHING) =>
      holdsDuring(BeginFn(WhenFn(vRELEASE)), grasps(vAGENT, vTHING))
      /\ holdsDuring(EndFn(WhenFn(vRELEASE)),
                     a_n_o_t(grasps(vAGENT, vTHING)))
. subclass(Impacting, Touching)
%{Impacting
"Any &%Touching where something comes into 
sudden, forceful, physical contact with something else.  Some examples 
would be striking, knocking, whipping etc."}%
. instance(vIMPACT, Impacting) /\ patient(vIMPACT, vOBJ) =>
      exists vIMPEL: U
          . instance(vIMPEL, Impelling)
            /\ patient(vIMPEL, vOBJ)
            /\ earlier(WhenFn(vIMPEL), WhenFn(vIMPACT))
. subclass(Translocation, Motion)
%{Translocation
"&%Translocation is that class of &%Motions 
in which an object moves from one place to another.  In the case of round 
trips, the &%origin and &%destination are the same, but the intervening 
motion passes through other locations.  &%Translocation represents linear 
motion, in contrast to rotation or other movement in place.  A vehicle is 
not necessary; &%Ambulating is a kind of &%Translocation."}%
. instance(vMOVEMENT, Translocation)
  /\ origin(vMOVEMENT, vPLACE1) =>
      exists vPLACE2: U; vSTAGE: U
          . instance(vPLACE2, Region)
            /\ not vPLACE1 = vPLACE2
            /\ subProcess(vSTAGE, vMOVEMENT)
            /\ located(vSTAGE, vPLACE2)
. subclass(Falling, Translocation)
%{Falling
"&%Falling is the class of events in 
which something moves from a higher location to a lower location 
under the force of gravity."}%
. instance(vDROP, Falling)
  /\ origin(vDROP, vSTART)
  /\ destination(vDROP, vFINISH) =>
      orientation(vFINISH, vSTART, Below)
. subclass(Transportation, Translocation)
. relatedInternalConcept(Transportation, TransportationDevice)
%{Transportation
"&%Motion from one point to another by means 
of a &%TransportationDevice."}%
. instance(vTRANS, Transportation) =>
      exists vDEVICE: U
          . instance(vDEVICE, TransportationDevice)
            /\ instrument(vTRANS, vDEVICE)
. subclass(Guiding, IntentionalProcess)
%{Guiding
"Any &%IntentionalProcess where the &%agent tries to 
direct the behavior of another &%Object, whether an &%Agent or not."}%
. subclass(Driving, Guiding)
%{Driving
"Controlling the direction and/or speed of a 
&%Vehicle.  This includes navigating a ship, driving a car or truck, 
operating a train, etc."}%
. instance(vDRIVE, Driving) =>
      exists vVEHICLE: U
          . instance(vVEHICLE, Vehicle) /\ patient(vDRIVE, vVEHICLE)
. subclass(EducationalProcess, Guiding)
%{EducationalProcess
"Any &%Process which is intended to result 
in &%Learning."}%
. instance(vEDUCATION, EducationalProcess)
  /\ patient(vEDUCATION, vPERSON) =>
      hasPurpose(vEDUCATION,
                 True
                     when exists vLEARN: U
                              . instance(vLEARN, Learning)
                                /\ patient(vLEARN, vPERSON)
                     else False)
. subclass(ChangeOfPossession, SocialInteraction)
. relatedInternalConcept(ChangeOfPossession, possesses)
%{ChangeOfPossession
"The &%Class of &%Processes where 
ownership of something is transferred from one &%Agent to another."}%
. instance(vCHANGE, ChangeOfPossession)
  /\ patient(vCHANGE, vOBJ)
  /\ holdsDuring(BeginFn(WhenFn(vCHANGE)), possesses(vAGENT1, vOBJ))
  /\ holdsDuring(EndFn(WhenFn(vCHANGE)), possesses(vAGENT2, vOBJ)) =>
      not vAGENT1 = vAGENT2
. instance(vCHANGE, ChangeOfPossession)
  /\ origin(vCHANGE, vAGENT1)
  /\ destination(vCHANGE, vAGENT2)
  /\ instance(vAGENT1, Agent)
  /\ instance(vAGENT2, Agent)
  /\ patient(vCHANGE, vOBJ) =>
      holdsDuring(BeginFn(WhenFn(vCHANGE)), possesses(vAGENT1, vOBJ))
      /\ holdsDuring(EndFn(WhenFn(vCHANGE)), possesses(vAGENT2, vOBJ))
. subclass(Giving, ChangeOfPossession)
%{Giving
"The &%subclass of &%ChangeOfPossession where the 
&%agent gives the &%destination something."}%
. instance(vGIVE, Giving)
  /\ agent(vGIVE, vAGENT1)
  /\ destination(vGIVE, vAGENT2)
  /\ instance(vAGENT2, Agent)
  /\ patient(vGIVE, vOBJ) =>
      exists vGET: U
          . instance(vGET, Getting)
            /\ agent(vGET, vAGENT2)
            /\ origin(vGET, vAGENT1)
            /\ patient(vGET, vOBJ)
. instance(vGIVE, Giving) /\ agent(vGIVE, vAGENT) =>
      origin(vGIVE, vAGENT)
. subclass(Funding, Giving)
%{Funding
"Any instance of &%Giving where the &%patient is an 
instance of &%Currency.  Note that this class covers both financing, e.g. 
where a firm funds a software company with venture capital with the agreement 
that a certain percentage of the profits on the investment will be returned 
to the firm, and instances of &%UnilateralGiving, e.g. providing a tuition 
waiver and/or a stipend to a student as part of scholarship or fellowship."}%
. instance(vFUND, Funding) =>
      exists vMONEY: U
          . instance(vMONEY, Currency) /\ patient(vFUND, vMONEY)
. subclass(UnilateralGiving, Giving)
%{UnilateralGiving
"Any instance of &%Giving that is not part 
of a &%Transaction.  In other words, any instance of &%Giving where nothing 
is received in return.  Some examples of &%UnilateralGiving are:  honorary 
awards, gifts, and financial grants."}%
. instance(vGIVE, UnilateralGiving) =>
      not (exists vTRANS: U
               . instance(vTRANS, Transaction) /\ subProcess(vGIVE, vTRANS))
. subclass(Lending, Giving)
%{Lending
"The &%subclass of &%Giving &%Processes where 
the &%agent gives the &%destination something for a limited period of 
time with the expectation that it will be returned later (perhaps with 
interest)."}%
. (exists vBORROW: U
       . instance(vBORROW, Borrowing)
         /\ agent(vBORROW, vAGENT1)
         /\ origin(vBORROW, vAGENT2)
         /\ patient(vBORROW, vOBJECT)) <=>
      (exists vLEND: U
           . instance(vLEND, Lending)
             /\ agent(vLEND, vAGENT2)
             /\ destination(vLEND, vAGENT1)
             /\ patient(vLEND, vOBJECT))
. subclass(GivingBack, Giving)
%{GivingBack
"Any instance of &%Giving where the &%agent gives 
something to the &%destination which was previously given to the &%agent by 
the &%destination, e.g. returing a book that was borrowed from someone."}%
. instance(vRETURN, GivingBack)
  /\ agent(vRETURN, vAGENT)
  /\ destination(vRETURN, vDEST) =>
      exists vGIVE: U
          . instance(vGIVE, Giving)
            /\ agent(vGIVE, vDEST)
            /\ destination(vGIVE, vAGENT)
            /\ earlier(WhenFn(vGIVE), WhenFn(vRETURN))
. subclass(Getting, ChangeOfPossession)
%{Getting
"The &%subclass of &%ChangeOfPossession where the
&%agent gets something.  Note that the source from which something is 
obtained is specified with the &%origin &%CaseRole."}%
. instance(vGET, Getting) /\ agent(vGET, vAGENT) =>
      destination(vGET, vAGENT)
. subclass(UnilateralGetting, Getting)
. relatedInternalConcept(UnilateralGetting, UnilateralGiving)
%{UnilateralGetting
"Any instance of &%Getting that is not part 
of a &%Transaction.  In other words, any instance of &%Getting where nothing 
is given in return.  Some examples of &%UnilateralGetting are:  appropriating, 
commandeering, stealing, etc."}%
. instance(vGET, UnilateralGetting) =>
      not (exists vTRANS: U
               . instance(vTRANS, Transaction) /\ subProcess(vGET, vTRANS))
. subclass(Borrowing, Getting)
%{Borrowing
"The &%subclass of &%Getting &%Processes where 
the &%agent gets something for a limited period of time with the expectation 
that it will be returned later (perhaps with interest)."}%
. subclass(Transaction, ChangeOfPossession)
. subclass(Transaction, DualObjectProcess)
%{Transaction
"The &%subclass of &%ChangeOfPossession where 
something is exchanged for something else."}%
. instance(vTRANS, Transaction) =>
      exists vAGENT1: U; vAGENT2: U; vGIVE1: U; vGIVE2: U; vOBJ1: U;
             vOBJ2: U
          . instance(vGIVE1, Giving)
            /\ instance(vGIVE2, Giving)
            /\ subProcess(vGIVE1, vTRANS)
            /\ subProcess(vGIVE2, vTRANS)
            /\ agent(vGIVE1, vAGENT1)
            /\ agent(vGIVE2, vAGENT2)
            /\ patient(vGIVE1, vOBJ1)
            /\ patient(vGIVE2, vOBJ2)
            /\ destination(vGIVE1, vAGENT2)
            /\ destination(vGIVE2, vAGENT1)
            /\ not vAGENT1 = vAGENT2
            /\ not vOBJ1 = vOBJ2
. subclass(FinancialTransaction, Transaction)
%{FinancialTransaction
"A &%Transaction where an instance 
of &%Currency is exchanged for something else."}%
. instance(vTRANS, FinancialTransaction) =>
      exists vOBJ: U . patient(vTRANS, vOBJ) /\ instance(vOBJ, Currency)
. instance(transactionAmount, BinaryPredicate)
. instance(transactionAmount, SingleValuedRelation)
. instance(transactionAmount, TotalValuedRelation)
. domain(transactionAmount, a_1, FinancialTransaction)
. domain(transactionAmount, a_2, CurrencyMeasure)
%{transactionAmount
"(&%transactionAmount ?TRANSACTION 
?AMOUNT) means that ?AMOUNT is an instance of &%CurrencyMeasure being 
exhanged in the &%FinancialTransaction ?TRANSACTION."}%
. transactionAmount(vTRANS, vAMOUNT) =>
      exists vOBJ: U
          . patient(vTRANS, vOBJ) /\ monetaryValue(vOBJ, vAMOUNT)
. subclass(CommercialService, FinancialTransaction)
%{CommercialService
"Any &%FinancialTransaction by a 
&%CommercialAgent where the aim is to produce a profit."}%
. instance(vBUSINESS, CommercialService) =>
      exists vAGENT: U
          . instance(vAGENT, CommercialAgent) /\ agent(vBUSINESS, vAGENT)
. subclass(Betting, FinancialTransaction)
%{Betting
"A &%FinancialTransaction where an instance of 
&%CurrencyMeasure is exchanged for the possibility of winning a larger 
instance of &%CurrencyMeasure within the context of some sort of 
&%Game."}%
. subclass(Buying, FinancialTransaction)
. relatedInternalConcept(Buying, Selling)
%{Buying
"A &%FinancialTransaction in which an instance of 
&%CurrencyMeasure is exchanged for an instance of &%Physical."}%
. instance(vBUY, Buying) /\ agent(vBUY, vAGENT) =>
      destination(vBUY, vAGENT)
. subclass(Selling, FinancialTransaction)
%{Selling
"A &%FinancialTransaction in which an instance of 
&%Physical is exchanged for an instance of &%CurrencyMeasure."}%
. (exists vBUY: U
       . instance(vBUY, Buying)
         /\ agent(vBUY, vAGENT1)
         /\ origin(vBUY, vAGENT2)
         /\ patient(vBUY, vOBJECT)) <=>
      (exists vSELL: U
           . instance(vSELL, Selling)
             /\ agent(vSELL, vAGENT2)
             /\ destination(vSELL, vAGENT1)
             /\ patient(vSELL, vOBJECT))
. instance(vSELL, Selling) /\ agent(vSELL, vAGENT) =>
      origin(vSELL, vAGENT)
. subclass(Learning, IntentionalPsychologicalProcess)
%{Learning
"The &%Class of &%Processes which relate to the 
acquisition of information."}%
. instance(vLEARN, Learning) /\ agent(vLEARN, vAGENT) =>
      instance(vAGENT, CognitiveAgent)
. instance(vLEARN, Learning)
  /\ agent(vLEARN, vAGENT)
  /\ patient(vLEARN, vPROP) =>
      holdsDuring(BeginFn(WhenFn(vLEARN)), a_n_o_t(knows(vAGENT, vPROP)))
      /\ holdsDuring(EndFn(WhenFn(vLEARN)), knows(vAGENT, vPROP))
. subclass(Discovering, IntentionalPsychologicalProcess)
%{Discovering
"Finding something that was sought.  Note that 
this class is restricted to cases of discovering something &%Physical.  
For cases involving the acquisition of knowledge, the class &%Learning 
should be used."}%
. instance(vDISCOVER, Discovering) /\ patient(vDISCOVER, vOBJ) =>
      exists vPURSUE: U
          . instance(vPURSUE, Pursuing)
            /\ meetsTemporally(WhenFn(vPURSUE), WhenFn(vDISCOVER))
. instance(vDISCOVER, Discovering)
  /\ patient(vDISCOVER, vOBJ)
  /\ holdsDuring(WhenFn(vDISCOVER), located(vOBJ, vPLACE)) =>
      exists vLEARN: U
          . instance(vLEARN, Learning)
            /\ subProcess(vLEARN, vDISCOVER)
            /\ patient(vLEARN, located(vOBJ, vPLACE))
. subclass(Classifying, IntentionalPsychologicalProcess)
%{Classifying
"The &%Class of &%IntentionalPsychologicalProcesses 
which involve attaching a name or category to a thing or set of things.  
Note that &%Classifying is distinguished from &%Learning by the fact 
that the latter covers the acquisition by a &%CognitiveAgent of any 
&%Proposition, while the former involves the assignment of a label 
or category."}%
. subclass(Reasoning, IntentionalPsychologicalProcess)
%{Reasoning
"The &%Class of &%IntentionalPsychologicalProcesses 
which involve concluding, on the basis of either deductive or inductive 
evidence, that a particular &%Proposition or &%Sentence is true."}%
. instance(vAGENT, CognitiveAgent) =>
      capability(Reasoning, agent, vAGENT)
. subclass(Selecting, IntentionalPsychologicalProcess)
%{Selecting
"The &%Class of &%IntentionalPsychologicalProcesses 
which involve opting for one or more &%Entity out of a larger set of &%Entities.  
Note that this covers all cases of judging or evaluating."}%
. subclass(Deciding, Selecting)
%{Deciding
"The subclass of &%Selecting where the &%agent 
opts for one course of action out of a set of multiple possibilities 
that are open to him/her."}%
. instance(vDECIDE, Deciding)
  /\ agent(vDECIDE, vAGENT)
  /\ patient(vDECIDE, vPROCESS) =>
      instance(vPROCESS, IntentionalProcess) /\ agent(vPROCESS, vAGENT)
. subclass(Voting, Deciding)
%{Voting
"&%Voting is the activity of voting in an 
&%Election.  Voting is typically done by individuals, while &%Elections 
are conducted by &%Organizations.  The voting process by an individual 
voter is part of an &%Election process."}%
. instance(vVOTE, Voting) =>
      exists vELECT: U
          . instance(vELECT, Election) /\ subProcess(vVOTE, vELECT)
. subclass(Judging, Selecting)
%{Judging
"The subclass of &%Selecting where the &%agent opts 
for one belief out of a set of multiple possibilities that are available to 
him/her."}%
. instance(vJUDGE, Judging)
  /\ agent(vJUDGE, vAGENT)
  /\ patient(vJUDGE, vPROPOSITION) =>
      holdsDuring(BeginFn(WhenFn(vJUDGE)),
                  a_n_o_t(believes(vAGENT, vPROPOSITION)))
      /\ holdsDuring(EndFn(WhenFn(vJUDGE)),
                     believes(vAGENT, vPROPOSITION))
. subclass(Comparing, IntentionalPsychologicalProcess)
. subclass(Comparing, DualObjectProcess)
%{Comparing
"The &%Class of &%IntentionalPsychologicalProcesses 
which involve comparing, relating, contrasting, etc. the properties of 
two or more &%Entities."}%
. subclass(Calculating, IntentionalPsychologicalProcess)
%{Calculating
"&%IntentionalPsychologicalProcesses which involve 
the consideration and/or manipulation of instances of &%Quantity."}%
. subclass(Measuring, Calculating)
%{Measuring
"The &%Class of &%Calculating &%Processes where 
the aim is to determine the &%PhysicalQuantity of some aspect of the &%patient."}%
. instance(vMEAS, Measuring)
  /\ agent(vMEAS, vAGENT)
  /\ patient(vMEAS, vOBJ) =>
      exists vQUANT: U; vUNIT: U
          . holdsDuring(EndFn(WhenFn(vMEAS)),
                        knows(vAGENT, measure(vOBJ, MeasureFn(vQUANT, vUNIT))))
. subclass(Counting, Calculating)
%{Counting
"Enumerating something.  The &%Class of &%Calculating 
&%Processes where the aim is to determine the &%Number corresponding to the 
&%patient."}%
. instance(vCOUNT, Counting)
  /\ agent(vCOUNT, vAGENT)
  /\ patient(vCOUNT, vENTITY) =>
      exists vNUMBER: U
          . knows(vAGENT, equal(CardinalityFn(vENTITY), vNUMBER))
. subclass(Predicting, IntentionalPsychologicalProcess)
%{Predicting
"The &%Class of &%IntentionalPsychologicalProcesses 
which involve the formulation of a &%Proposition about a state of affairs 
which might be realized in the future."}%
. instance(vPREDICT, Predicting) /\ patient(vPREDICT, vFORMULA) =>
      exists vTIME: U
          . holdsDuring(vTIME, vFORMULA)
            /\ (before(vTIME, WhenFn(vPREDICT))
                \/ earlier(vTIME, WhenFn(vPREDICT)))
. subclass(Remembering, PsychologicalProcess)
%{Remembering
"The &%Class of &%PsychologicalProcesses which 
involve the recollection of prior experiences and/or of knowledge 
which was previously acquired."}%
. instance(vREMEMBER, Remembering)
  /\ patient(vREMEMBER, vFORMULA) =>
      exists vTIME: U
          . holdsDuring(vTIME, vFORMULA)
            /\ (before(vTIME, WhenFn(vREMEMBER))
                \/ earlier(vTIME, WhenFn(vREMEMBER)))
. subclass(Keeping, IntentionalProcess)
%{Keeping
"The &%Class of &%Processes where the &%agent 
keeps something in a particular location for an extended period of time."}%
. instance(vKEEP, Keeping)
  /\ agent(vKEEP, vAGENT)
  /\ patient(vKEEP, vOBJ) =>
      exists vPUT: U
          . instance(vPUT, Putting)
            /\ agent(vPUT, vAGENT)
            /\ patient(vPUT, vOBJ)
            /\ earlier(WhenFn(vPUT), WhenFn(vKEEP))
. instance(vKEEP, Keeping) /\ patient(vKEEP, vOBJ) =>
      exists vPLACE: U
          . forall vTIME: U
                . temporalPart(vTIME, WhenFn(vKEEP)) =>
                      holdsDuring(vTIME, located(vOBJ, vPLACE))
. subclass(Confining, Keeping)
%{Confining
"The &%Class of &%Keeping &%Processes where the 
&%patient is a &%Human or an &%Animal and is kept involuntarily.  This covers 
caging, imprisonment, jailing, etc."}%
. instance(vCONFINE, Confining) =>
      exists vAGENT: U
          . instance(vAGENT, Animal) /\ patient(vCONFINE, vAGENT)
. instance(vCONFINE, Confining)
  /\ patient(vCONFINE, vPERSON)
  /\ instance(vPERSON, Human) =>
      not desires(vPERSON, patient(vCONFINE, vPERSON))
. subclass(Maintaining, IntentionalProcess)
%{Maintaining
"The &%Class of &%Processes where the &%agent 
cares for or maintains the &%Object."}%
. subclass(Repairing, IntentionalProcess)
. relatedInternalConcept(Repairing, Maintaining)
%{Repairing
"The &%Class of &%Processes where the &%agent 
makes a modification or series of modifications to an &%Object that is not 
functioning as intended so that it works properly."}%
. instance(vREPAIR, Repairing) /\ patient(vREPAIR, vOBJ) =>
      exists vDAMAGE: U
          . instance(vDAMAGE, Damaging)
            /\ patient(vDAMAGE, vOBJ)
            /\ earlier(WhenFn(vDAMAGE), WhenFn(vREPAIR))
. subclass(TherapeuticProcess, Repairing)
%{TherapeuticProcess
"A &%Process that is carried out 
for the purpose of curing, improving or reducing the pain associated 
with a &%DiseaseOrSyndrome."}%
. instance(vPROC, TherapeuticProcess) /\ patient(vPROC, vBIO) =>
      instance(vBIO, Organism)
      \/ (exists vORG: U . instance(vORG, Organism) /\ part(vBIO, vORG))
. subclass(Surgery, TherapeuticProcess)
%{Surgery
"Any &%TherapeuticProcess that involves making an 
incision in the &%Animal that is the &%patient of the &%TherapeuticProcess."}%
. instance(vACT, Surgery) /\ patient(vACT, vANIMAL) =>
      exists vSUBACT: U
          . instance(vSUBACT, Cutting)
            /\ instance(vANIMAL, Animal)
            /\ patient(vSUBACT, vANIMAL)
            /\ subProcess(vSUBACT, vACT)
. subclass(Damaging, InternalChange)
. disjoint(Damaging, Repairing)
%{Damaging
"The &%Class of &%Processes where the &%agent 
brings about a situation where the &%patient no longer functions normally 
or as intended."}%
. subclass(Destruction, Damaging)
%{Destruction
"The &%subclass of &%Damagings in which 
the &%patient (or an essential element of the &%patient) is destroyed.  
Note that the difference between this concept and its superclass is solely 
one of extent."}%
. instance(vPROCESS, Destruction) <=>
      (exists vPATIENT: U
           . patient(vPROCESS, vPATIENT)
             /\ time(vPATIENT, BeginFn(WhenFn(vPROCESS)))
             /\ not time(vPATIENT, EndFn(WhenFn(vPROCESS))))
. subclass(Killing, Destruction)
%{Killing
"The &%subclass of &%Destruction in which the 
death of an &%Organism is caused by an &%Organism.  Note that in cases 
of suicide the &%Organism would be the same in both cases."}%
. instance(vKILL, Killing)
  /\ agent(vKILL, vAGENT)
  /\ patient(vKILL, vPATIENT) =>
      instance(vAGENT, Organism) /\ instance(vPATIENT, Organism)
. instance(vKILL, Killing) /\ patient(vKILL, vPATIENT) =>
      holdsDuring(BeginFn(WhenFn(vKILL)), attribute(vPATIENT, Living))
      /\ holdsDuring(FutureFn(WhenFn(vKILL)), attribute(vPATIENT, Dead))
. instance(vKILL, Killing) /\ patient(vKILL, vOBJ) =>
      exists vDEATH: U
          . instance(vDEATH, Death)
            /\ experiencer(vDEATH, vOBJ)
            /\ causes(vKILL, vDEATH)
. subclass(Poking, IntentionalProcess)
%{Poking
"The &%Class of &%Processes where the &%agent
pierces the surface of the &%Object with an &%instrument."}%
. instance(vPOKE, Poking)
  /\ agent(vPOKE, vAGENT)
  /\ patient(vPOKE, vOBJ)
  /\ instrument(vPOKE, vINST) =>
      holdsDuring(WhenFn(vPOKE), connects(vINST, vAGENT, vOBJ))
. subclass(Cutting, Poking)
%{Cutting
"The &%subclass of &%Poking &%Processes which 
involve a sharp &%instrument."}%
. subclass(Attaching, DualObjectProcess)
. disjoint(Attaching, Detaching)
. relatedInternalConcept(Attaching, Putting)
%{Attaching
"A &%Process where one &%Object becomes attached 
to another &%Object.  Note that this differs from &%Putting in that two 
things which are attached may already be in the same location.  Note that 
&%Combining is different from &%Attaching in that the former applies to 
&%Substances, while the latter applies to &%CorpuscularObjects.  Note too 
that &%Attaching is different from &%Putting in that one or both of the 
two things which are attached may or may not be moved from the location 
where they were combined."}%
. instance(vATTACH, Attaching)
  /\ patient(vATTACH, vOBJ1)
  /\ patient(vATTACH, vOBJ2) =>
      holdsDuring(BeginFn(WhenFn(vATTACH)),
                  a_n_o_t(connected(vOBJ1, vOBJ2)))
      /\ holdsDuring(EndFn(WhenFn(vATTACH)), connected(vOBJ1, vOBJ2))
. instance(vATTACH, Attaching) =>
      exists vOBJ: U
          . instance(vOBJ, CorpuscularObject) /\ patient(vATTACH, vOBJ)
. subclass(Detaching, DualObjectProcess)
%{Detaching
"A &%Process where the &%agent detaches one thing 
from something else.  Note that &%Detaching is different from &%Separating 
in that the latter applies to &%Substances, while the former applies to &%CorpuscularObjects.  Note too that &%Detaching is different from &%Removing 
in that one or both of the two things which are detached may or may not be 
moved from the location where they were attached."}%
. instance(vDETACH, Detaching)
  /\ patient(vDETACH, vOBJ1)
  /\ patient(vDETACH, vOBJ2) =>
      holdsDuring(BeginFn(WhenFn(vDETACH)), connected(vOBJ1, vOBJ2))
      /\ holdsDuring(EndFn(WhenFn(vDETACH)),
                     a_n_o_t(connected(vOBJ1, vOBJ2)))
. instance(vDETACH, Detaching) =>
      exists vOBJ: U
          . instance(vOBJ, CorpuscularObject) /\ patient(vDETACH, vOBJ)
. subclass(Ungrasping, Detaching)
%{Ungrasping
"Any instance of &%Detaching which results in 
a situation where it is not the case that the &%agent &%grasps something 
which he/she &%grasps previously."}%
. instance(vRELEASE, Ungrasping)
  /\ agent(vGRAB, vAGENT)
  /\ patient(vGRAB, vTHING) =>
      holdsDuring(BeginFn(WhenFn(vRELEASE)), grasps(vAGENT, vTHING))
      /\ holdsDuring(EndFn(WhenFn(vRELEASE)),
                     a_n_o_t(grasps(vAGENT, vTHING)))
. subclass(Combining, DualObjectProcess)
%{Combining
"A &%Process where two or more &%SelfConnectedObjects 
are incorporated into a single &%SelfConnectedObject.  Note that &%Combining 
is different from &%Attaching in that the former results in one of the objects 
being &%part of the other, while &%Attaching only results in the two objects 
being &%connected with one another.  Note too that &%Combining is different 
from &%Putting in that one or both of the two things which are combined may or 
may not be moved from the location where they were combined."}%
. instance(vCOMBINE, Combining)
  /\ resource(vCOMBINE, vOBJ1)
  /\ a_r_e_s_u_l_t(vCOMBINE, vOBJ2) <=>
      holdsDuring(BeginFn(WhenFn(vCOMBINE)), a_n_o_t(part(vOBJ1, vOBJ2)))
      /\ holdsDuring(EndFn(WhenFn(vCOMBINE)), part(vOBJ1, vOBJ2))
. instance(vCOMBINE, Combining) =>
      exists vOBJ: U
          . instance(vOBJ, SelfConnectedObject) /\ patient(vCOMBINE, vOBJ)
. subclass(Separating, DualObjectProcess)
. disjoint(Separating, Combining)
%{Separating
"A &%Process where a &%SelfConnectedObject is 
separated into (some of) its &%parts.  Note that &%Separating is different 
from &%Detaching in that the latter only results in the two objects not 
being &%connected.  Note too that &%Separating is different from 
&%Removing in that one or both of the two things which are separated 
may or may not be moved from the location where they were separated."}%
. instance(vSEPARATE, Separating) =>
      exists vOBJ: U
          . instance(vOBJ, SelfConnectedObject) /\ patient(vSEPARATE, vOBJ)
. subclass(ChemicalProcess, InternalChange)
. partition(ChemicalProcess, ChemicalSynthesis,
            ChemicalDecomposition)
%{ChemicalProcess
"A &%ChemicalProcess occurs whenever 
chemical compounds (&%CompoundSubstances) are formed or decomposed.  
For example, reactants disappear as chemical change occurs, and products 
appear as chemical change occurs.  In a chemical change a chemical 
reaction takes place.  Catalysts in a &%ChemicalProcess may speed up the 
reaction, but aren't themselves produced or consumed.  Examples: rusting of 
iron and the decomposition of water, induced by an electric current, to 
gaseous hydrogen and gaseous oxygen."}%
. instance(vPROC, ChemicalProcess)
  /\ (resource(vPROC, vSTUFF) \/ a_r_e_s_u_l_t(vPROC, vSTUFF)) =>
      instance(vSTUFF, PureSubstance)
. subclass(ChemicalSynthesis, ChemicalProcess)
. subclass(ChemicalSynthesis, Combining)
%{ChemicalSynthesis
"The &%Class of &%ChemicalProcesses in 
which a &%CompoundSubstance is formed from simpler reactants."}%
. resource(vPROC, vSUBSTANCE1)
  /\ a_r_e_s_u_l_t(vPROC, vSUBSTANCE2)
  /\ instance(vSUBSTANCE1, ElementalSubstance)
  /\ instance(vSUBSTANCE2, CompoundSubstance) =>
      instance(vPROC, ChemicalSynthesis)
. instance(vCOMPOUND, CompoundSubstance) <=>
      (exists vELEMENT1: U; vELEMENT2: U; vPROCESS: U
           . instance(vELEMENT1, ElementalSubstance)
             /\ instance(vELEMENT2, ElementalSubstance)
             /\ not vELEMENT1 = vELEMENT2
             /\ instance(vPROCESS, ChemicalSynthesis)
             /\ resource(vPROCESS, vELEMENT1)
             /\ resource(vPROCESS, vELEMENT2)
             /\ a_r_e_s_u_l_t(vPROCESS, vCOMPOUND))
. subclass(ChemicalDecomposition, ChemicalProcess)
. subclass(ChemicalDecomposition, Separating)
%{ChemicalDecomposition
"The &%Class of &%ChemicalProcesses 
in which a &%CompoundSubstance breaks down into simpler products."}%
. resource(vPROC, vSUBSTANCE1)
  /\ a_r_e_s_u_l_t(vPROC, vSUBSTANCE2)
  /\ instance(vSUBSTANCE1, CompoundSubstance)
  /\ instance(vSUBSTANCE2, ElementalSubstance) =>
      instance(vPROC, ChemicalDecomposition)
. subclass(Combustion, ChemicalDecomposition)
%{Combustion
"The &%Class of &%ChemicalProcesses in which an &%Object 
reacts with oxygen and gives off heat.  This includes all &%Processes in which 
something is burning."}%
. instance(vCOMBUSTION, Combustion) =>
      exists vHEAT: U; vLIGHT: U
          . instance(vHEAT, Heating)
            /\ instance(vLIGHT, RadiatingLight)
            /\ subProcess(vHEAT, vCOMBUSTION)
            /\ subProcess(vLIGHT, vCOMBUSTION)
. subclass(InternalChange, Process)
%{InternalChange
"&%Processes which involve altering an internal 
property of an &%Object, e.g. the shape of the &%Object, its coloring, its 
structure, etc.  &%Processes that are not instances of this class include 
changes that only affect the relationship to other objects, e.g. changes in 
spatial or temporal location."}%
. instance(vCHANGE, InternalChange) /\ patient(vCHANGE, vOBJ) =>
      exists vPROPERTY: U
          . (holdsDuring(BeginFn(WhenFn(vCHANGE)),
                         attribute(vOBJ, vPROPERTY))
             /\ holdsDuring(EndFn(WhenFn(vCHANGE)),
                            a_n_o_t(attribute(vOBJ, vPROPERTY))))
            \/ (holdsDuring(BeginFn(WhenFn(vCHANGE)),
                            a_n_o_t(attribute(vOBJ, vPROPERTY)))
                /\ holdsDuring(EndFn(WhenFn(vCHANGE)),
                               attribute(vOBJ, vPROPERTY)))
. subclass(SurfaceChange, InternalChange)
%{SurfaceChange
"&%Processes which involve altering 
the properties that apply to the surface of an &%Object."}%
. instance(vALT, SurfaceChange) /\ patient(vALT, vOBJ) =>
      exists vPART: U; vPROPERTY: U
          . superficialPart(vPART, vOBJ)
            /\ ((holdsDuring(BeginFn(WhenFn(vALT)),
                             attribute(vPART, vPROPERTY))
                 /\ holdsDuring(EndFn(WhenFn(vALT)),
                                a_n_o_t(attribute(vPART, vPROPERTY))))
                \/ (holdsDuring(BeginFn(WhenFn(vALT)),
                                a_n_o_t(attribute(vPART, vPROPERTY)))
                    /\ holdsDuring(EndFn(WhenFn(vALT)),
                                   attribute(vPART, vPROPERTY))))
. subclass(Coloring, SurfaceChange)
%{Coloring
"The &%subclass of &%SurfaceChange where a 
&%ColorAttribute of the &%patient is altered.  Note that the change in
color may apply to just part of the object."}%
. instance(vCOLORING, Coloring) /\ patient(vCOLORING, vOBJ) =>
      exists vPROPERTY: U; vPART: U
          . part(vPART, vOBJ)
            /\ instance(vPROPERTY, ColorAttribute)
            /\ ((holdsDuring(BeginFn(WhenFn(vCOLORING)),
                             attribute(vPART, vPROPERTY))
                 /\ holdsDuring(EndFn(WhenFn(vCOLORING)),
                                a_n_o_t(attribute(vPART, vPROPERTY))))
                \/ (holdsDuring(BeginFn(WhenFn(vCOLORING)),
                                a_n_o_t(attribute(vPART, vPROPERTY)))
                    /\ holdsDuring(EndFn(WhenFn(vCOLORING)),
                                   attribute(vPART, vPROPERTY))))
. subclass(ShapeChange, InternalChange)
%{ShapeChange
"The &%Process of changing the shape of an &%Object."}%
. instance(vALT, ShapeChange) /\ patient(vALT, vOBJ) =>
      exists vPROPERTY: U
          . instance(vPROPERTY, ShapeAttribute)
            /\ ((holdsDuring(BeginFn(WhenFn(vALT)), attribute(vOBJ, vPROPERTY))
                 /\ holdsDuring(EndFn(WhenFn(vALT)),
                                a_n_o_t(attribute(vOBJ, vPROPERTY))))
                \/ (holdsDuring(BeginFn(WhenFn(vALT)),
                                a_n_o_t(attribute(vOBJ, vPROPERTY)))
                    /\ holdsDuring(EndFn(WhenFn(vALT)),
                                   attribute(vOBJ, vPROPERTY))))
. subclass(ContentDevelopment, IntentionalProcess)
%{ContentDevelopment
"A &%subclass of &%IntentionalProcess in 
which content is modified, its form is altered or it is created anew."}%
. instance(vDEVELOP, ContentDevelopment) =>
      exists vOBJ: U
          . instance(vOBJ, ContentBearingObject) /\ patient(vDEVELOP, vOBJ)
. subclass(Reading, ContentDevelopment)
. relatedInternalConcept(Reading, Interpreting)
%{Reading
"A &%subclass of &%ContentDevelopment in which 
content is converted from a written form into a spoken representation.  
Note that the class &%Interpreting should be used in cases where a 
&%Text is read silently."}%
. instance(vREAD, Reading) =>
      exists vTEXT: U; vPROP: U
          . instance(vTEXT, Text)
            /\ containsInformation(vTEXT, vPROP)
            /\ realization(vREAD, vPROP)
. subclass(Writing, ContentDevelopment)
%{Writing
"A &%subclass of &%ContentDevelopment in which 
content is converted from one form (e.g. uttered, written or represented 
mentally) into a written form.  Note that this class covers both 
transcription and original creation of written &%Texts."}%
. subclass(Encoding, Writing)
%{Encoding
"Converting a document or message into a formal 
language or into a code that can be understood only by a relatively small 
body of &%Agents.  Generally speaking, this hinders wide dissemination of 
the content in the original document or message."}%
. subclass(Decoding, Writing)
. disjoint(Decoding, Encoding)
%{Decoding
"Converting a document or message that has previously 
been encoded (see &%Encoding) into a &%Language that can be understood by a 
relatively large number of speakers."}%
. instance(vDECODE, Decoding) /\ patient(vDECODE, vDOC1) =>
      exists vENCODE: U; vDOC2: U; vTIME: U
          . containsInformation(vDOC2, vPROP)
            /\ containsInformation(vDOC1, vPROP)
            /\ temporalPart(vTIME, PastFn(WhenFn(vDECODE)))
            /\ holdsDuring(vTIME,
                           a_a_n_d(instance(vENCODE, Encoding),
                                   patient(vENCODE, vDOC2)))
. subclass(Translating, ContentDevelopment)
. subclass(Translating, DualObjectProcess)
%{Translating
"Converting content from one &%Language into another.  
This covers oral translation (i.e. interpreting) as well as written translation."}%
. instance(vTRANSLATE, Translating)
  /\ resource(vTRANSLATE, vEXPRESSION1)
  /\ a_r_e_s_u_l_t(vTRANSLATE, vEXPRESSION2) =>
      exists vLANGUAGE1: U; vLANGUAGE2: U; vENTITY: U
          . representsInLanguage(vEXPRESSION1, vENTITY, vLANGUAGE1)
            /\ representsInLanguage(vEXPRESSION2, vENTITY, vLANGUAGE2)
            /\ not vLANGUAGE1 = vLANGUAGE2
. subclass(Wetting, Putting)
%{Wetting
"The &%Class of &%Processes where a &%Liquid is 
added to an &%Object."}%
. instance(vWET, Wetting) /\ patient(vWET, vOBJ) =>
      holdsDuring(EndFn(WhenFn(vWET)),
                  or(attribute(vOBJ, Wet), attribute(vOBJ, Damp)))
. instance(vWET, Wetting) =>
      exists vOBJ: U . attribute(vOBJ, Liquid) /\ patient(vWET, vOBJ)
. subclass(Drying, Removing)
%{Drying
"The &%Class of &%Processes where a &%Liquid is removed 
from an &%Object."}%
. instance(vDRY, Drying) /\ patient(vDRY, vOBJ) =>
      holdsDuring(EndFn(WhenFn(vDRY)), attribute(vOBJ, Dry))
. subclass(Creation, InternalChange)
. relatedInternalConcept(Creation, Destruction)
%{Creation
"The &%subclass of &%Process in which 
something is created.  Note that the thing created is specified 
with the &%result &%CaseRole."}%
. instance(vACTION, Creation) =>
      exists vRESULT: U . a_r_e_s_u_l_t(vACTION, vRESULT)
. instance(vPROCESS, Creation) <=>
      (exists vPATIENT: U
           . patient(vPROCESS, vPATIENT)
             /\ time(vPATIENT, EndFn(WhenFn(vPROCESS)))
             /\ not time(vPATIENT, BeginFn(WhenFn(vPROCESS))))
. subclass(Making, Creation)
. subclass(Making, IntentionalProcess)
%{Making
"The &%subclass of &%Creation in which an individual 
&%Artifact or a type of &%Artifact is made."}%
. subclass(Constructing, Making)
%{Constructing
"The &%subclass of &%Making in which a 
&%StationaryArtifact is built."}%
. (exists vBUILD: U
       . instance(vBUILD, Constructing)
         /\ a_r_e_s_u_l_t(vBUILD, vARTIFACT)) <=>
      instance(vARTIFACT, StationaryArtifact)
. subclass(Manufacture, Making)
%{Manufacture
"The &%Making of &%Artifacts on a mass 
scale."}%
. subclass(Publication, Manufacture)
. subclass(Publication, ContentDevelopment)
%{Publication
"The &%Manufacture of &%Texts.  Note that 
there is no implication that the &%Texts are distributed.  Such 
distribution, when it occurs, is an instance of &%Dissemination."}%
. instance(vPUB, Publication) /\ patient(vPUB, vTEXT) =>
      subclass(vTEXT, Text)
. subclass(Cooking, Making)
%{Cooking
"The &%Making of an &%instance of &%Food.  Note 
that this can cover any preparation of &%Food, e.g. making a salad, 
cutting up fruit, etc.  It does not necessarily involve the application 
of heat."}%
. instance(vCOOK, Cooking) =>
      exists vFOOD: U
          . instance(vFOOD, Food) /\ a_r_e_s_u_l_t(vCOOK, vFOOD)
. subclass(Pursuing, IntentionalProcess)
%{Pursuing
"The class of &%IntentionalProcesses where something is 
sought.  Some examples would be hunting, shopping, trawling, and stalking."}%
. instance(vPURSUE, Pursuing) =>
      exists vOBJ: U . instance(vOBJ, Object) /\ patient(vPURSUE, vOBJ)
. instance(vPURSUE, Pursuing)
  /\ agent(vPURSUE, vAGENT)
  /\ patient(vPURSUE, vOBJ) =>
      holdsDuring(vPURSUE, wants(vAGENT, vOBJ))
. instance(vPURSUE, Pursuing)
  /\ agent(vPURSUE, vAGENT)
  /\ patient(vPURSUE, vOBJ) =>
      holdsDuring(vPURSUE, a_n_o_t(possesses(vAGENT, vOBJ)))
. subclass(Investigating, IntentionalPsychologicalProcess)
%{Investigating
"The class of &%IntentionalPsychologicalProcesses 
where the &%agent attempts to obtaina information (i.e. a &%Proposition denoted 
by a &%Formula)."}%
. instance(vINVESTIGATE, Investigating)
  /\ patient(vINVESTIGATE, vPROP) =>
      instance(vPROP, Formula)
. instance(vINVESTIGATE, Investigating)
  /\ agent(vINVESTIGATE, vAGENT)
  /\ patient(vINVESTIGATE, vPROP) =>
      holdsDuring(WhenFn(vINVESTIGATE), a_n_o_t(knows(vAGENT, vPROP)))
. subclass(Experimenting, Investigating)
%{Experimenting
"&%Investigating the truth of a &%Proposition 
by constructing and observing a trial.  Note that the trial may be either 
controlled or uncontrolled, blind or not blind."}%
. subclass(DiagnosticProcess, Investigating)
%{DiagnosticProcess
"A &%Process that is carried out for 
the purpose of determining the nature of a &%DiseaseOrSyndrome."}%
. instance(vPROC, DiagnosticProcess) /\ agent(vPROC, vAGENT) =>
      exists vCAUSE: U
          . hasPurposeForAgent(vPROC, knows(vAGENT, causes(vCAUSE, vPROC)),
                               vAGENT)
. subclass(SocialInteraction, IntentionalProcess)
%{SocialInteraction
"The &%subclass of 
&%IntentionalProcess that involves interactions between 
&%CognitiveAgents."}%
. instance(vINTERACTION, SocialInteraction) =>
      exists vAGENT1: U; vAGENT2: U
          . agent(vINTERACTION, vAGENT1)
            /\ agent(vINTERACTION, vAGENT2)
            /\ not vAGENT1 = vAGENT2
. subclass(Pretending, SocialInteraction)
%{Pretending
"Any &%SocialInteraction where a 
&%CognitiveAgent or &%Group of &%CognitiveAgents attempts to make 
another &%CognitiveAgent or &%Group of &%CognitiveAgents believe 
something that is false.  This covers deceit, affectation, 
impersonation, and entertainment productions, to give just a few 
examples."}%
. instance(vPRETEND, Pretending) =>
      exists vPERSON: U; vPROP: U
          . hasPurpose(vPRETEND, believes(vPERSON, vPROP))
            /\ a_t_r_u_e(vPROP, True)
. subclass(Communication, SocialInteraction)
. subclass(Communication, ContentBearingProcess)
. partition(Communication, Stating, Supposing, Directing,
            Committing, Expressing, Declaring)
. relatedInternalConcept(Communication, ContentDevelopment)
%{Communication
"A &%SocialInteraction that involves 
the transfer of information between two or more &%CognitiveAgents.  
Note that &%Communication is closely related to, but essentially 
different from, &%ContentDevelopment.  The latter involves the creation 
or modification of a &%ContentBearingObject, while &%Communication is 
the transfer of information for the purpose of conveying a message."}%
. instance(vCOMMUNICATE, Communication) =>
      exists vPHYS: U; vENTITY: U; vAGENT1: U; vAGENT2: U
          . refers(vPHYS, vENTITY)
            /\ patient(vCOMMUNICATE, vPHYS)
            /\ instance(vAGENT1, CognitiveAgent)
            /\ agent(vCOMMUNICATE, vAGENT1)
            /\ instance(vAGENT2, CognitiveAgent)
            /\ destination(vCOMMUNICATE, vAGENT2)
. subclass(Disseminating, Communication)
%{Disseminating
"Any &%Communication that involves a 
single &%agent and many &%destinations.  This covers the release 
of a published book, broadcasting, a theatrical performance, giving 
orders to assembled troops, delivering a public lecture, etc."}%
. instance(vDISSEMINATE, Disseminating) =>
      exists vAGENT1: U; vAGENT2: U
          . destination(vDISSEMINATE, vAGENT1)
            /\ instance(vAGENT1, CognitiveAgent)
            /\ destination(vDISSEMINATE, vAGENT2)
            /\ instance(vAGENT2, CognitiveAgent)
            /\ not vAGENT1 = vAGENT2
. subclass(Demonstrating, Disseminating)
%{Demonstrating
"Exhibiting something or a range of things 
before the public in a particular location.  This would cover software 
demos, theatrical plays, lectures, dance and music recitals, museum 
exhibitions, etc."}%
. instance(vDEMO, Demonstrating) =>
      exists vPERSON: U . attends(vDEMO, vPERSON)
. subrelation(attends, experiencer)
. domain(attends, a_1, Demonstrating)
. domain(attends, a_2, Human)
%{attends
"(&%attends ?DEMO ?PERSON) means that ?PERSON attends, 
i.e. is a member of the audience, of the performance event ?DEMO."}%
. subclass(Gesture, Communication)
. subclass(Gesture, BodyMotion)
%{Gesture
"Any &%BodyMotion, e.g. a hand wave, a nod of the 
head, a smile, which is also an instance of &%Communication."}%
. subclass(Advertising, Disseminating)
%{Advertising
"A &%Disseminating whose purpose is to 
promote the sale of an &%Object represented in a &%Text or &%Icon 
(the advertisement)."}%
. instance(vADVERT, Advertising) =>
      exists vOBJ: U
          . refers(vADVERT, vOBJ)
            /\ hasPurpose(vADVERT,
                          True
                              when exists vSALE: U
                                       . instance(vSALE, Selling)
                                         /\ patient(vSALE, vOBJ)
                              else False)
. subclass(Expressing, Communication)
%{Expressing
"Instances of this &%Class express a state of the &%agent. 
For example, Jane thanked Barbara for the present she had given her.  The thanking 
in this case expresses the gratitude of Jane towards Barbara.  Note that &%Expressing, 
unlike the other speech act types, is not a subclass of &%LinguisticCommunication.  
This is because emotions, for example, can be expressed without language, e.g. by 
smiling."}%
. instance(vEXPRESS, Expressing) /\ agent(vEXPRESS, vAGENT) =>
      exists vSTATE: U
          . instance(vSTATE, StateOfMind)
            /\ attribute(vAGENT, vSTATE)
            /\ represents(vEXPRESS, vSTATE)
. subclass(LinguisticCommunication, Communication)
%{LinguisticCommunication
"A &%Communication that involves 
the transfer of information via a &%LinguisticExpression."}%
. instance(vCOMMUNICATE, LinguisticCommunication) =>
      exists vOBJ: U
          . represents(vCOMMUNICATE, vOBJ)
            /\ instance(vOBJ, LinguisticExpression)
            /\ patient(vCOMMUNICATE, vOBJ)
. subclass(Stating, LinguisticCommunication)
%{Stating
"Instances of this &%Class commit the &%agent to some truth. 
For example, John claimed that the moon is made of green cheese."}%
. instance(vSTATE, Stating)
  /\ agent(vSTATE, vAGENT)
  /\ patient(vSTATE, vFORMULA)
  /\ instance(vFORMULA, Formula) =>
      holdsDuring(WhenFn(vSTATE), believes(vAGENT, vFORMULA))
. subclass(Disagreeing, Stating)
%{Disagreeing
"A &%Stating in which two &%Agents have
contradictory statements.  This is distinguished from &%Arguing in
that the statement in dispute may be a simple assertion, rather than
a chain of deduction, and that two entities must be disagreeing with
each other, whereas a single entity may craft an argument for a given
point of view, without the need for another agent to disagree with."}%
. instance(vDIS, Disagreeing) =>
      exists vA1: U; vA2: U; vSTATE1: U; vSTATE2: U; vSTMT1: U; vSTMT2: U
          . subProcess(vSTATE1, vDIS)
            /\ subProcess(vSTATE2, vDIS)
            /\ agent(vSTATE1, vA1)
            /\ agent(vSTATE2, vA2)
            /\ containsInformation(vSTATE1, vSTMT1)
            /\ containsInformation(vSTATE2, vSTMT2)
            /\ not consistent(vSTMT1, vSTMT2)
. subclass(Supposing, LinguisticCommunication)
%{Supposing
"Instances of this &%Class suppose, for the sake of 
argument, that a proposition is true.  For example, John considered what he 
would do if he won the lottery."}%
. subclass(Directing, LinguisticCommunication)
%{Directing
"Instances of this &%Class urge some further action 
among the receivers.  A &%Directing can be an &%Ordering, a &%Requesting or 
a &%Questioning."}%
. subclass(Ordering, Directing)
%{Ordering
"A &%Directing in which the receiver is 
commanded to realize the content of a &%ContentBearingObject.  Orders 
are injunctions, the disobedience of which involves sanctions, or 
which express an obligation upon the part of the orderee."}%
. instance(vORDER, Ordering) /\ patient(vORDER, vFORMULA) =>
      modalAttribute(vFORMULA, Obligation)
. subclass(Requesting, Directing)
%{Requesting
"A request expresses a desire that some future 
action be performed.  For example, the 5th Battalion requested air support 
from the 3rd Bomber Group.  Note that this class covers proposals, 
recommendations, suggestions, etc."}%
. instance(vREQUEST, Requesting)
  /\ agent(vREQUEST, vAGENT)
  /\ patient(vREQUEST, vFORMULA)
  /\ instance(vFORMULA, Formula) =>
      desires(vAGENT, vFORMULA)
. subclass(Questioning, Directing)
%{Questioning
"A request for information.  For example, John asked 
Bill if the President had said anything about taxes in his State of the Union 
address."}%
. instance(vQUESTION, Questioning)
  /\ agent(vQUESTION, vAGENT)
  /\ patient(vQUESTION, vFORMULA)
  /\ instance(vFORMULA, Formula) =>
      holdsDuring(WhenFn(vQUESTION), a_n_o_t(knows(vAGENT, vFORMULA)))
. subclass(Committing, LinguisticCommunication)
%{Committing
"Instances of this &%Class commit the &%agent to some 
future course.  For example, Bob promised Susan that he would be home by 11pm."}%
. instance(vCOMMIT, Committing)
  /\ patient(vCOMMIT, vFORMULA)
  /\ instance(vFORMULA, Formula) =>
      modalAttribute(vFORMULA, Promise)
. subclass(Offering, Committing)
%{Offering
"The subclass of &%Committing in which a &%CognitiveAgent offers something &%Physical to another agent. Offerings may be unconditional (in which case they are a promise to effect a &%UnilateralGiving) or conditional (in which case they are a promise to effect a &%Transaction of some sort)."}%
. subclass(Declaring, LinguisticCommunication)
%{Declaring
"The &%Class of &%LinguisticCommunications that 
effect an institutional alteration when performed by competent authority.  
Some examples are nominating, marrying, and excommunicating."}%
. instance(vDECLARE, Declaring) =>
      exists vPROP: U; vNORM: U
          . confersNorm(vDECLARE, vPROP, vNORM)
            \/ deprivesNorm(vDECLARE, vPROP, vNORM)
. subclass(Wedding, Declaring)
%{Wedding
"Any &%Declaring that leads to one person being 
the &%spouse of another."}%
. instance(vWED, Wedding) <=>
      (exists vPERSON1: U; vPERSON2: U
           . a_r_e_s_u_l_t(vWED, spouse(vPERSON1, vPERSON2)))
. subclass(Naming, Declaring)
%{Naming
"The &%Process of assigning a name to someone or something."}%
. instance(vPROCESS, Naming)
  /\ patient(vPROCESS, vTHING)
  /\ destination(vPROCESS, vNAME) =>
      holdsDuring(FutureFn(WhenFn(vPROCESS)), names(vNAME, vTHING))
. subclass(Cooperation, SocialInteraction)
%{Cooperation
"The &%subclass of &%SocialInteraction where 
the participants involved work together for the achievement of a common 
goal."}%
. instance(vCOOPERATE, Cooperation) =>
      exists vPURP: U
          . forall vAGENT: U
                . agent(vCOOPERATE, vAGENT) =>
                      hasPurposeForAgent(vCOOPERATE, vPURP, vAGENT)
. subclass(Meeting, SocialInteraction)
%{Meeting
"The coming together of two or more 
&%CognitiveAgents for the purpose of &%Communication.  This covers informal 
meetings, e.g. visits with family members, and formal meetings, e.g. a board 
of directors meeting."}%
. instance(vMEET, Meeting)
  /\ agent(vMEET, vAGENT1)
  /\ agent(vMEET, vAGENT2) =>
      holdsDuring(WhenFn(vMEET), orientation(vAGENT1, vAGENT2, Near))
. instance(vMEET, Meeting) =>
      exists vAGENT1: U; vAGENT2: U
          . agent(vMEET, vAGENT1)
            /\ agent(vMEET, vAGENT2)
            /\ hasPurpose(vMEET,
                          True
                              when exists vCOMM: U
                                       . instance(vCOMM, Communication)
                                         /\ agent(vCOMM, vAGENT1)
                                         /\ agent(vCOMM, vAGENT2)
                              else False)
. subclass(Contest, SocialInteraction)
%{Contest
"A &%SocialInteraction where the &%agent and 
&%patient are &%CognitiveAgents who are trying to defeat one another.  
Note that this concept is often applied in a metaphorical sense in natural 
language, when we speak, e.g., of the struggle of plants for space or 
sunlight, or of bacteria for food resources in some environment."}%
. instance(vCONTEST, Contest) =>
      exists vAGENT1: U; vAGENT2: U; vPURP1: U; vPURP2: U
          . agent(vCONTEST, vAGENT1)
            /\ agent(vCONTEST, vAGENT2)
            /\ hasPurposeForAgent(vCONTEST, vPURP1, vAGENT1)
            /\ hasPurposeForAgent(vCONTEST, vPURP2, vAGENT2)
            /\ not vAGENT1 = vAGENT2
            /\ not vPURP1 = vPURP2
. subclass(ViolentContest, Contest)
%{ViolentContest
"A &%Contest where one participant attempts to 
physically injure another participant."}%
. subclass(War, ViolentContest)
%{War
"A military confrontation between two or more 
&%GeopoliticalAreas or &%Organizations whose members are &%GeopoliticalAreas.  
As the corresponding axiom specifies, a &%War is made up of &%Battles."}%
. instance(vWAR, War) =>
      exists vBATTLE: U
          . instance(vBATTLE, Battle) /\ subProcess(vBATTLE, vWAR)
. instance(vWAR, War) /\ agent(vWAR, vAGENT) =>
      instance(vAGENT, GeopoliticalArea)
      \/ (instance(vAGENT, Organization)
          /\ (forall vMEMBER: U
                  . member(vMEMBER, vAGENT) =>
                        instance(vMEMBER, GeopoliticalArea)))
. subclass(Battle, ViolentContest)
%{Battle
"A &%ViolentContest between two or more military 
units within the context of a war.  Note that this does not cover the 
metaphorical sense of 'battle', which simply means a struggle of some 
sort.  This sense should be represented with the more general concept of 
&%Contest."}%
. instance(vBATTLE, Battle) =>
      exists vWAR: U . instance(vWAR, War) /\ subProcess(vBATTLE, vWAR)
. instance(vBATTLE, Battle) =>
      exists vATTACK: U
          . instance(vATTACK, ViolentContest) /\ subProcess(vATTACK, vBATTLE)
. subclass(Game, Contest)
. subclass(Game, RecreationOrExercise)
%{Game
"A &%Contest whose purpose is the 
enjoyment/stimulation of the participants or spectators of the &%Game."}%
. subclass(Sport, Game)
%{Sport
"A &%Game which requires some degree of physical 
exercion from the participants of the game."}%
. subclass(LegalAction, Contest)
%{LegalAction
"Any &%Process where a &%CognitiveAgent seeks 
to obtain something through a court of law."}%
. subclass(Maneuver, IntentionalProcess)
%{Maneuver
"An intentional move or play within a &%Contest.  
In many cases, a &%Maneuver is a realization of part of a strategy for 
winning the &%Contest, but it also may be just an arbitrary or semi-arbitrary 
division of the overarching &%Contest, e.g. innings in a baseball game."}%
. instance(vMOVE, Maneuver) =>
      exists vCONTEST: U
          . instance(vCONTEST, Contest) /\ subProcess(vMOVE, vCONTEST)
. subclass(Attack, Maneuver)
%{Attack
"A &%Maneuver in a &%ViolentContest where the 
&%agent attempts to inflict damage on the &%patient."}%
. instance(vATTACK, Attack) =>
      exists vCONTEST: U
          . instance(vCONTEST, ViolentContest)
            /\ subProcess(vATTACK, vCONTEST)
. instance(vATTACK, Attack)
  /\ agent(vATTACK, vAGENT)
  /\ patient(vATTACK, vOBJ) =>
      hasPurposeForAgent(vATTACK,
                         True
                             when exists vDAMAGE: U
                                      . instance(vDAMAGE, Damaging)
                                        /\ patient(vDAMAGE, vOBJ)
                             else False,
                         vAGENT)
. subclass(DefensiveManeuver, Maneuver)
%{DefensiveManeuver
"A &%Maneuver in a &%ViolentContest 
where the &%agent attempts to avoid being damaged."}%
. instance(vDEFENSE, DefensiveManeuver) =>
      exists vCONTEST: U
          . instance(vCONTEST, ViolentContest)
            /\ subProcess(vDEFENSE, vCONTEST)
. instance(vDEFENSE, DefensiveManeuver)
  /\ agent(vDEFENSE, vAGENT) =>
      hasPurposeForAgent(vDEFENSE,
                         a_n_o_t(True
                                     when exists vDAMAGE: U
                                              . instance(vDAMAGE, Damaging)
                                                /\ patient(vDAMAGE, vAGENT)
                                     else False),
                         vAGENT)
. instance(vMANEUVER, Maneuver)
  /\ instance(vCONTEST, ViolentContest)
  /\ subProcess(vMANEUVER, vCONTEST) =>
      instance(vMANEUVER, Attack)
      \/ instance(vMANEUVER, DefensiveManeuver)
. subclass(Perception, PsychologicalProcess)
%{Perception
"Sensing some aspect of the material world.  
Note that the &%agent of this sensing is assumed to be an &%Animal."}%
. instance(vPERCEPT, Perception) /\ agent(vPERCEPT, vAGENT) =>
      instance(vAGENT, Animal)
. instance(vAGENT, SentientAgent) =>
      capability(Perception, experiencer, vAGENT)
. subclass(Seeing, Perception)
%{Seeing
"The &%subclass of &%Perception in which the 
sensing is done by an ocular &%Organ."}%
. instance(vSEE, Seeing)
  /\ agent(vSEE, vAGENT)
  /\ patient(vSEE, vOBJ) =>
      attribute(vOBJ, Illuminated)
      /\ (exists vPROP: U
              . instance(vPROP, ColorAttribute)
                /\ knows(vAGENT, attribute(vOBJ, vPROP)))
. subclass(Looking, Seeing)
. subclass(Looking, IntentionalProcess)
%{Looking
"Any instance of &%Seeing which is intentional."}%
. subclass(Smelling, Perception)
%{Smelling
"The &%subclass of &%Perception in which the 
sensing is done by an olefactory &%Organ."}%
. instance(vSMELL, Smelling) /\ patient(vSMELL, vOBJ) =>
      exists vATTR: U
          . instance(vATTR, OlfactoryAttribute) /\ attribute(vOBJ, vATTR)
. subclass(Tasting, Perception)
%{Tasting
"The &%subclass of &%Perception in which the 
sensing is done by of an &%Organ which can discriminate various tastes."}%
. instance(vTASTE, Tasting) /\ patient(vTASTE, vOBJ) =>
      exists vATTR: U
          . instance(vATTR, TasteAttribute) /\ attribute(vOBJ, vATTR)
. subclass(Hearing, Perception)
%{Hearing
"The &%subclass of &%Perception in which the 
sensing is done by an auditory &%Organ."}%
. instance(vHEAR, Hearing) /\ patient(vHEAR, vOBJ) =>
      exists vATTR: U
          . instance(vATTR, SoundAttribute) /\ attribute(vOBJ, vATTR)
. subclass(SoundAttribute, RelationalAttribute)
%{SoundAttribute
"The volume of sound relative to a listener."}%
. instance(Audible, SoundAttribute)
%{Audible
"A sound level capable of being heard by a &%Human."}%
. instance(vSOUND, RadiatingSound)
  /\ agent(vSOUND, vOBJ)
  /\ attribute(vSOUND, Audible) =>
      exists vHUMAN: U
          . instance(vHUMAN, Human)
            /\ capability(KappaFn(vHEAR,
                                  a_a_n_d(instance(vHEAR, Hearing),
                                          agent(vHEAR, vHUMAN),
                                          destination(vHEAR, vHUMAN),
                                          origin(vHEAR, vOBJ))),
                          agent, vHUMAN)
. subclass(Listening, Hearing)
. subclass(Listening, IntentionalProcess)
%{Listening
"Any instance of &%Hearing which is intentional."}%
. subclass(TactilePerception, Perception)
%{TactilePerception
"The &%subclass of &%Perception in which 
the sensing is done by &%Touching.  Note that &%Touching need not involve 
&%TactilePerception.  For example, a person who has lost all sensation in 
both of his legs would have no &%TactilePerception of anything his legs 
were &%Touching."}%
. instance(vTACTILE, TactilePerception) =>
      exists vTOUCH: U
          . instance(vTOUCH, Touching) /\ subProcess(vTOUCH, vTACTILE)
. subclass(Radiating, Motion)
%{Radiating
"Processes in which some form of electromagnetic 
radiation, e.g. radio waves, light waves, electrical energy, etc., is given 
off or absorbed by something else."}%
. subclass(RadiatingLight, Radiating)
%{RadiatingLight
"The &%subclass of &%Radiating in which 
light is given off or absorbed.  Some examples include blinking, flashing, 
and glittering."}%
. (exists vEMIT: U
       . instance(vEMIT, RadiatingLight)
         /\ patient(vEMIT, vREGION)
         /\ instance(vREGION, Region)) <=>
      attribute(vREGION, Illuminated)
. subclass(RadiatingSound, Radiating)
%{RadiatingSound
"The &%subclass of &%Radiating in which 
sound waves are given off or absorbed.  Some examples include creaking, 
roaring, and whistling."}%
. instance(vEMIT, RadiatingSound) /\ agent(vEMIT, vSOUND) =>
      exists vATTR: U
          . instance(vATTR, SoundAttribute) /\ attribute(vSOUND, vATTR)
. subclass(Music, RadiatingSound)
%{Music
"The &%subclass of &%RadiatingSound where the 
sound is intended to be melodic and is produced deliberately."}%
. subclass(RadiatingElectromagnetic, Radiating)
%{RadiatingElectromagnetic
"&%RadiatingElectromagnetic 
is the subclass of &%Radiating processes in which electromagnetic 
radiation is transmitted or absorbed."}%
. subclass(RadiatingNuclear, Radiating)
%{RadiatingNuclear
"Releasing atomic energy, i.e. energy from 
a nuclear reaction."}%
. subclass(StateChange, InternalChange)
%{StateChange
"Any &%Process where the &%PhysicalState 
of &%part of the &%patient of the &%Process changes."}%
. instance(vPROCESS, StateChange) /\ patient(vPROCESS, vOBJ) =>
      exists vPART: U; vSTATE1: U; vSTATE2: U
          . part(vPART, vOBJ)
            /\ instance(vSTATE1, PhysicalState)
            /\ instance(vSTATE2, PhysicalState)
            /\ not vSTATE1 = vSTATE2
            /\ holdsDuring(BeginFn(WhenFn(vPROCESS)),
                           attribute(vPART, vSTATE1))
            /\ holdsDuring(EndFn(WhenFn(vPROCESS)), attribute(vPART, vSTATE2))
. subclass(Melting, StateChange)
%{Melting
"The &%Class of &%Processes where an &%Object is 
heated and converted from a &%Solid to a &%Liquid."}%
. instance(vMELT, Melting) =>
      exists vHEAT: U
          . instance(vHEAT, Heating) /\ subProcess(vHEAT, vMELT)
. instance(vMELT, Melting) /\ patient(vMELT, vOBJ) =>
      exists vPART: U
          . part(vPART, vOBJ)
            /\ holdsDuring(BeginFn(WhenFn(vMELT)), attribute(vPART, Solid))
            /\ holdsDuring(EndFn(WhenFn(vMELT)), attribute(vPART, Liquid))
. subclass(Boiling, StateChange)
%{Boiling
"The &%Class of &%Processes where an &%Object is 
heated and converted from a &%Liquid to a &%Gas."}%
. instance(vBOIL, Boiling) =>
      exists vHEAT: U
          . instance(vHEAT, Heating) /\ subProcess(vHEAT, vBOIL)
. instance(vBOIL, Boiling) /\ patient(vBOIL, vOBJ) =>
      exists vPART: U
          . part(vPART, vOBJ)
            /\ holdsDuring(BeginFn(WhenFn(vBOIL)), attribute(vPART, Liquid))
            /\ holdsDuring(EndFn(WhenFn(vBOIL)), attribute(vPART, Gas))
. subclass(Condensing, StateChange)
%{Condensing
"The &%Class of &%Processes where an &%Object is 
cooled and converted from a &%Gas to a &%Liquid."}%
. instance(vCOND, Condensing) =>
      exists vCOOL: U
          . instance(vCOOL, Cooling) /\ subProcess(vCOOL, vCOND)
. instance(vCOND, Condensing) /\ patient(vCOND, vOBJ) =>
      exists vPART: U
          . part(vPART, vOBJ)
            /\ holdsDuring(BeginFn(WhenFn(vCOND)), attribute(vPART, Gas))
            /\ holdsDuring(EndFn(WhenFn(vCOND)), attribute(vPART, Liquid))
. subclass(Freezing, StateChange)
%{Freezing
"The &%Class of &%Processes where an &%Object is 
cooled and converted from a &%Liquid to a &%Solid."}%
. instance(vFREEZE, Freezing) =>
      exists vCOOL: U
          . instance(vCOOL, Cooling) /\ subProcess(vCOOL, vFREEZE)
. instance(vFREEZE, Freezing) /\ patient(vFREEZE, vOBJ) =>
      exists vPART: U
          . part(vPART, vOBJ)
            /\ holdsDuring(BeginFn(WhenFn(vFREEZE)), attribute(vPART, Liquid))
            /\ holdsDuring(EndFn(WhenFn(vFREEZE)), attribute(vPART, Solid))
. subclass(AstronomicalBody, Region)
. disjoint(AstronomicalBody, GeographicArea)
%{AstronomicalBody
"The &%Class of all astronomical 
objects of significant size.  It includes &%SelfConnectedObjects 
like planets, stars, and asteroids, as well as &%Collections like 
nebulae, galaxies, and constellations.  Note that the planet Earth 
is an &%AstronomicalBody, but every &%Region of Earth is a 
&%GeographicArea."}%
. subclass(GeographicArea, Region)
. partition(GeographicArea, WaterArea, LandArea)
%{GeographicArea
"A geographic location, generally having 
definite boundaries.  Note that this differs from its immediate superclass 
&%Region in that a &%GeographicArea is a three-dimensional &%Region of the 
earth.  Accordingly, all astronomical objects other than earth and all 
one-dimensional and two-dimensional &%Regions are not classed under 
&%GeographicArea."}%
. instance(geographicSubregion, BinaryPredicate)
. instance(geographicSubregion, TransitiveRelation)
. instance(geographicSubregion, AsymmetricRelation)
. subrelation(geographicSubregion, properPart)
. subrelation(geographicSubregion, located)
. domain(geographicSubregion, a_1, GeographicArea)
. domain(geographicSubregion, a_2, GeographicArea)
%{geographicSubregion
"(&%geographicSubregion ?PART ?WHOLE) 
means that the &%GeographicArea ?PART is part of the &%GeographicArea 
?WHOLE."}%
. subclass(GeopoliticalArea, GeographicArea)
. subclass(GeopoliticalArea, Agent)
%{GeopoliticalArea
"Any &%GeographicArea which is associated 
with some sort of political structure.  This class includes &%Lands, 
&%Cities, districts of cities, counties, etc.  Note that the identity 
of a &%GeopoliticalArea may remain constant after a change in borders."}%
. instance(vAREA, GeopoliticalArea)
  /\ leader(GovernmentFn(vAREA), vPERSON) =>
      leader(vAREA, vPERSON)
. instance(vAREA, GeopoliticalArea) /\ leader(vAREA, vPERSON) =>
      leader(GovernmentFn(vAREA), vPERSON)
. instance(vEVENT, Election)
  /\ agent(vEVENT, vAGENT)
  /\ instance(vAGENT, GeopoliticalArea) =>
      instance(vEVENT, PoliticalProcess)
. instance(vEVENT, Election)
  /\ agent(vEVENT, vAGENT)
  /\ instance(vAREA, GeopoliticalArea)
  /\ instance(vAGENT, GovernmentFn(vAREA)) =>
      instance(vEVENT, PoliticalProcess)
. instance(geopoliticalSubdivision, AsymmetricRelation)
. instance(geopoliticalSubdivision, TransitiveRelation)
. subrelation(geopoliticalSubdivision, geographicSubregion)
. domain(geopoliticalSubdivision, a_1, GeopoliticalArea)
. domain(geopoliticalSubdivision, a_2, GeopoliticalArea)
%{geopoliticalSubdivision
"(&%geopoliticalSubdivision 
?AREA1 ?AREA2) means that ?AREA1 is any geopolitical part of ?AREA2; 
that is, ?AREA1 is an integral &%geographicSubregion of ?AREA2 (not a 
&%DependencyOrSpecialSovereigntyArea), having its own associated 
&%GovernmentOrganization which is subordinated to or constrained by 
the government of ?AREA2.  Cf. &%dependentGeopoliticalArea."}%
. geopoliticalSubdivision(vSUB, vAREA) =>
      not instance(vSUB, Nation)
. subclass(WaterArea, GeographicArea)
%{WaterArea
"A body which is made up predominantly of water, 
e.g. rivers, lakes, oceans, etc."}%
. instance(vAREA, WaterArea) =>
      exists vBED: U; vHOLE: U; vWATER: U
          . HoleHostFn(vHOLE) = vBED
            /\ instance(vWATER, Water)
            /\ properlyFills(vWATER, vHOLE)
            /\ MereologicalSumFn(vBED, vWATER) = vAREA
. subclass(SaltWaterArea, WaterArea)
. disjoint(SaltWaterArea, FreshWaterArea)
%{SaltWaterArea
"A &%WaterArea whose &%Water is saline, e.g. 
oceans and seas."}%
. subclass(FreshWaterArea, WaterArea)
%{FreshWaterArea
"A &%WaterArea whose &%Water is not saline, 
e.g. most rivers and lakes."}%
. subclass(StreamWaterArea, WaterArea)
. disjoint(StreamWaterArea, StaticWaterArea)
%{StreamWaterArea
"A relatively narrow &%WaterArea where the 
water flows constantly and in the same direction, e.g. a river, a stream, 
etc."}%
. subclass(StaticWaterArea, WaterArea)
%{StaticWaterArea
"A &%WaterArea in which water does not flow 
constantly or in the same direction, e.g. most lakes and ponds."}%
. subclass(LandArea, GeographicArea)
%{LandArea
"An area which is predominantly solid ground, 
e.g. a &%Nation, a mountain, a desert, etc.  Note that a &%LandArea may 
contain some relatively small &%WaterAreas.  For example, Australia is 
a &%LandArea even though it contains various rivers and lakes."}%
. instance(vLAND1, LandArea) =>
      exists vLAND2: U
          . part(vLAND1, vLAND2)
            /\ (instance(vLAND2, Continent) \/ instance(vLAND2, Island))
. subclass(ShoreArea, LandArea)
%{ShoreArea
"A &%ShoreArea is a &%LandArea approximately 
1-3 km wide bordering a body of water, such as an ocean, bay, river, 
or lake.  A &%ShoreArea may comprise a variety of &%LandForms, such as dunes, 
sloughs, and marshes."}%
. instance(vBANK, ShoreArea) =>
      exists vWATER: U
          . instance(vWATER, WaterArea) /\ meetsSpatially(vBANK, vWATER)
. subclass(Continent, LandArea)
%{Continent
"One of the seven largest land masses on earth, 
viz. Africa, North America, &%SouthAmerica, &%Antarctica, Europe, Asia, and 
Oceania.  Note that this naming scheme is the one used in the CIA World 
Factbook."}%
. CardinalityFn(Continent) = a_7
. subclass(Island, LandArea)
%{Island
"A &%LandArea that is completely surrounded by a &%WaterArea."}%
. instance(vISLAND, Island) =>
      not (exists vAREA: U; vPART1: U; vPART2: U
               . instance(vAREA, LandArea)
                 /\ part(vPART1, vISLAND)
                 /\ part(vPART2, vAREA)
                 /\ not part(vISLAND, vAREA)
                 /\ not part(vAREA, vISLAND)
                 /\ meetsSpatially(vPART1, vPART2))
. instance(vISLE, Island)
  /\ instance(vAREA, GeographicArea)
  /\ meetsSpatially(vISLE, vAREA) =>
      not instance(vAREA, LandArea)
. instance(vISLE, Island) =>
      exists vWATER: U
          . instance(vWATER, WaterArea) /\ meetsSpatially(vISLE, vWATER)
. subclass(Nation, GeopoliticalArea)
. subclass(Nation, LandArea)
%{Nation
"The broadest &%GeopoliticalArea, i.e. &%Nations are 
&%GeopoliticalAreas that are not part of any other overarching and 
comprehensive governance structure (excepting commonwealths and other sorts 
of loose international organizations)."}%
. subclass(StateOrProvince, GeopoliticalArea)
. subclass(StateOrProvince, LandArea)
%{StateOrProvince
"Administrative subdivisions of a 
&%Nation that are broader than any other political subdivisions that 
may exist.  This &%Class includes the states of the United States, as 
well as the provinces of Canada and European countries."}%
. instance(vSTATE, StateOrProvince) =>
      exists vLAND: U
          . instance(vLAND, Nation) /\ properPart(vSTATE, vLAND)
. subclass(City, GeopoliticalArea)
. subclass(City, LandArea)
%{City
"A &%LandArea of relatively small size, inhabited 
by a community of people, and having some sort of political structure.  
Note that this class includes both large cities and small settlements 
like towns, villages, hamlets, etc."}%
. subclass(County, GeopoliticalArea)
. subclass(County, LandArea)
%{County
"A &%GeopoliticalArea that is larger than a city,
usually encompassing several cities, and smaller than a &%StateOrProvince."}%
. instance(vSTATE, County) =>
      exists vLAND: U
          . instance(vLAND, StateOrProvince) /\ properPart(vSTATE, vLAND)
. subclass(Transitway, Region)
. subclass(Transitway, SelfConnectedObject)
%{Transitway
"&%Transitway is the broadest class 
of regions which may be passed through as a &%path in instances 
of &%Translocation.  &%Transitway includes land, air, and sea 
regions, and it includes both natural and artificial transitways."}%
. subclass(LandTransitway, Transitway)
. subclass(LandTransitway, LandArea)
%{LandTransitway
"&%LandTransitway is the subclass of 
&%Transitway that represents areas intended for motion over the ground."}%
. instance(vWAY, Transitway) =>
      hasPurpose(True
                     when exists vTRANSPORT: U
                              . instance(vTRANSPORT, Transportation)
                                /\ path(vTRANSPORT, vWAY)
                     else False)
. subclass(Roadway, LandTransitway)
%{Roadway
"&%Roadway is the subclass of &%LandTransitways 
that are areas intended for surface travel by self-powered, wheeled 
vehicles, excluding those that travel on tracks.  &%Roadways have been 
at least minimally improved to enable the passage of vehicles.  
&%Roadways include dirt and gravelled roads, paved streets, and 
expressways."}%
. subclass(Water, CompoundSubstance)
%{Water
"The &%Class of samples of the compound H20.  Note 
that this &%Class covers both pure and impure &%Water."}%
. subclass(Mineral, Substance)
%{Mineral
" Any of various naturally occurring homogeneous substances (such as stone, coal, salt, sulfur, sand, petroleum), or synthetic substances having the chemical composition and crystalline form and properties of a naturally occurring mineral."}%
. instance(developmentalForm, BinaryPredicate)
. instance(developmentalForm, AsymmetricRelation)
. instance(developmentalForm, TransitiveRelation)
. subrelation(developmentalForm, attribute)
. domain(developmentalForm, a_1, OrganicObject)
. domain(developmentalForm, a_2, DevelopmentalAttribute)
%{developmentalForm
"(&%developmentalForm ?OBJECT ?FORM) 
means that ?FORM is an earlier stage in the individual maturation of 
?OBJECT.  For example, tadpole and caterpillar are &%developmentalForms 
of frogs and butterflies, respectively."}%
. holdsDuring(vTIME1, developmentalForm(vOBJ, vATTR1))
  /\ successorAttributeClosure(vATTR2, vATTR1) =>
      exists vTIME2: U
          . earlier(vTIME2, vTIME1)
            /\ holdsDuring(vTIME2, developmentalForm(vOBJ, vATTR2))
. subclass(OrganicObject, CorpuscularObject)
. disjoint(OrganicObject, Artifact)
. partition(OrganicObject, Organism, AnatomicalStructure)
%{OrganicObject
"This class encompasses &%Organisms, 
&%CorpuscularObjects that are parts of &%Organisms, i.e. &%BodyParts, 
and &%CorpuscularObjects that are nonintentionally produced by 
&%Organisms, e.g. &%ReproductiveBodies."}%
. subclass(Organism, OrganicObject)
. subclass(Organism, Agent)
. partition(Organism, Animal, Plant, Microorganism)
%{Organism
"Generally, a living individual, including all 
&%Plants and &%Animals."}%
. instance(vORGANISM, Organism) =>
      exists vBIRTH: U
          . instance(vBIRTH, Birth) /\ experiencer(vBIRTH, vORGANISM)
. instance(inhabits, BinaryPredicate)
. instance(inhabits, AsymmetricRelation)
. domain(inhabits, a_1, Organism)
. domain(inhabits, a_2, Object)
%{inhabits
"A very basic notion of living within something 
else.  (&%inhabits ?ORGANISM ?OBJECT) means that ?OBJECT is the residence 
(either permanent or temporary), nest, etc. of ?ORGANISM."}%
. inhabits(vORGANISM, vOBJ) =>
      exists vTIME: U . holdsDuring(vTIME, located(vORGANISM, vOBJ))
. inhabits(vPERSON, vPLACE) /\ instance(vPERSON, Human) =>
      home(vPERSON, vPLACE) \/ stays(vPERSON, vPLACE)
. subrelation(home, inhabits)
. domain(home, a_1, Human)
. domain(home, a_2, PermanentResidence)
%{home
"The relation between a &%Human and a &%PermanentResidence 
of the &%Human."}%
. subrelation(stays, inhabits)
. disjointRelation(stays, home)
. domain(stays, a_1, Human)
. domain(stays, a_2, TemporaryResidence)
%{stays
"The relation between a &%Human and a &%TemporaryResidence 
of the &%Human."}%
. subclass(Plant, Organism)
%{Plant
"An &%Organism having cellulose cell walls, growing 
by synthesis of &%Substances, generally distinguished by the presence of 
chlorophyll, and lacking the power of locomotion."}%
. subclass(FloweringPlant, Plant)
%{FloweringPlant
"A &%Plant that produces seeds and flowers.  
This class includes trees, shrubs, herbs, and flowers."}%
. subclass(NonFloweringPlant, Plant)
. disjoint(NonFloweringPlant, FloweringPlant)
. disjointDecomposition(NonFloweringPlant, Alga, Fern, Fungus,
                        Moss)
%{NonFloweringPlant
"A &%Plant that reproduces with spores and 
does not produce flowers."}%
. subclass(Alga, NonFloweringPlant)
%{Alga
"A chiefly aquatic plant that contains chlorophyll, 
but does not form embryos during development and lacks vascular tissue."}%
. instance(vALGA, Alga) =>
      exists vWATER: U
          . inhabits(vALGA, vWATER) /\ instance(vWATER, Water)
. subclass(Fungus, NonFloweringPlant)
%{Fungus
"A eukaryotic &%Organism characterized by the 
absence of chlorophyll and the presence of rigid cell walls. Included 
here are both slime molds and true fungi such as yeasts, molds, mildews, 
and mushrooms."}%
. instance(vFUNGUS, Fungus) /\ inhabits(vFUNGUS, vOBJ) =>
      instance(vOBJ, Organism)
. subclass(Moss, NonFloweringPlant)
%{Moss
"A &%NonFloweringPlant without true roots and little 
if any vascular tissue."}%
. subclass(Fern, NonFloweringPlant)
%{Fern
"A &%NonFloweringPlant that contains vascular tissue.  
This class includes true ferns, as well as horsetails, club mosses, and 
whisk ferns."}%
. subclass(Animal, Organism)
. partition(Animal, Vertebrate, Invertebrate)
%{Animal
"An &%Organism with eukaryotic &%Cells, and lacking 
stiff cell walls, plastids, and photosynthetic pigments."}%
. subclass(Microorganism, Organism)
%{Microorganism
"An &%Organism that can be seen only with 
the aid of a microscope."}%
. subclass(Bacterium, Microorganism)
%{Bacterium
"A small, typically one-celled, prokaryotic 
&%Microorganism."}%
. instance(vBACTERIUM, Bacterium) =>
      exists vCELL1: U
          . component(vCELL1, vBACTERIUM)
            /\ instance(vCELL1, Cell)
            /\ (forall vCELL2: U
                    . component(vCELL2, vBACTERIUM) /\ instance(vCELL2, Cell) =>
                          vCELL1 = vCELL2)
. instance(vBACTERIUM, Bacterium) /\ inhabits(vBACTERIUM, vOBJ) =>
      instance(vOBJ, Organism)
. subclass(Virus, Microorganism)
%{Virus
"An &%Organism consisting of a core of a single 
nucleic acid enclosed in a protective coat of protein. A virus may replicate 
only inside a host living cell. A virus exhibits some but not all of the 
usual characteristics of living things."}%
. instance(vVIRUS, Virus) =>
      exists vMOL1: U
          . component(vMOL1, vVIRUS)
            /\ instance(vMOL1, Molecule)
            /\ (forall vMOL2: U
                    . component(vMOL2, vVIRUS) /\ instance(vMOL2, Molecule) =>
                          vMOL1 = vMOL2)
. instance(vVIRUS, Virus) /\ inhabits(vVIRUS, vOBJ) =>
      instance(vOBJ, Organism)
. instance(vVIRUS, Virus)
  /\ instance(vPROC, Replication)
  /\ agent(vPROC, vVIRUS) =>
      exists vCELL: U . located(vPROC, vCELL) /\ instance(vCELL, Cell)
. subclass(Vertebrate, Animal)
%{Vertebrate
"An &%Animal which has a spinal column."}%
. subclass(Invertebrate, Animal)
. disjointDecomposition(Invertebrate, Worm, Mollusk, Arthropod)
%{Invertebrate
"An &%Animal which has no spinal column."}%
. subclass(Worm, Invertebrate)
%{Worm
"Long, narrow, soft-bodied &%Invertebrates."}%
. subclass(Mollusk, Invertebrate)
%{Mollusk
"Soft-bodied &%Invertebrate that is usually 
contained in a shell.  Includes oysters, clams, mussels, snails, slugs, 
octopi, and squid."}%
. subclass(Arthropod, Invertebrate)
. disjointDecomposition(Arthropod, Arachnid, Myriapod, Insect,
                        Crustacean)
%{Arthropod
"A &%Class of &%Invertebrate that includes 
&%Arachnids and &%Insects."}%
. subclass(Arachnid, Arthropod)
%{Arachnid
"A &%Class of &%Arthropods that includes 
ticks and spiders."}%
. subclass(Myriapod, Arthropod)
%{Myriapod
"A &%Class of &%Arthropods that includes 
centipedes and millipedes."}%
. subclass(Insect, Arthropod)
%{Insect
"A &%Class of small &%Arthropods that are 
air-breathing and that are distinguished by appearance."}%
. subclass(Crustacean, Arthropod)
%{Crustacean
"A &%Class of &%Arthropods that mainly dwells 
in water and has a segmented body and a chitinous exoskeleton.  Includes 
lobsters, crabs, shrimp, and barnacles."}%
. subclass(ColdBloodedVertebrate, Vertebrate)
. disjointDecomposition(ColdBloodedVertebrate, Amphibian, Fish,
                        Reptile)
%{ColdBloodedVertebrate
"&%Vertebrates whose body temperature 
is not internally regulated."}%
. subclass(WarmBloodedVertebrate, Vertebrate)
. disjoint(WarmBloodedVertebrate, ColdBloodedVertebrate)
%{WarmBloodedVertebrate
"&%Vertebrates whose body temperature 
is internally regulated."}%
. subclass(Amphibian, ColdBloodedVertebrate)
%{Amphibian
"A cold-blooded, smooth-skinned &%Vertebrate 
which characteristically hatches as an aquatic larva, breathing by 
gills.  When mature, the &%Amphibian breathes with &%Lungs."}%
. subclass(Bird, WarmBloodedVertebrate)
. disjoint(Bird, Mammal)
%{Bird
"A &%Vertebrate having a constant body temperature 
and characterized by the presence of feathers."}%
. subclass(Fish, ColdBloodedVertebrate)
%{Fish
"A cold-blooded aquatic &%Vertebrate characterized by 
fins and breathing by gills. Included here are &%Fish having either a bony 
skeleton, such as a perch, or a cartilaginous skeleton, such as a shark.  
Also included are those &%Fish lacking a jaw, such as a lamprey or 
hagfish."}%
. instance(vFISH, Fish) =>
      exists vWATER: U
          . inhabits(vFISH, vWATER) /\ instance(vWATER, Water)
. subclass(Mammal, WarmBloodedVertebrate)
. disjointDecomposition(Mammal, AquaticMammal, HoofedMammal,
                        Marsupial, Rodent, Primate)
%{Mammal
"A &%Vertebrate having a constant body temperature 
and characterized by the presence of hair, mammary glands, and sweat 
glands."}%
. subclass(AquaticMammal, Mammal)
%{AquaticMammal
"The &%Class of &%Mammals that dwell chiefly 
in the water.  Includes whales, dolphins, manatees, seals, and walruses."}%
. subclass(HoofedMammal, Mammal)
%{HoofedMammal
"The &%Class of quadruped &%Mammals with hooves.  
Includes horses, cows, sheep, pigs, antelope, etc."}%
. subclass(Marsupial, Mammal)
%{Marsupial
"The &%Class of &%Mammals which have a pouch for 
their young."}%
. subclass(Carnivore, Mammal)
%{Carnivore
"The &%Class of flesh-eating &%Mammals.  Members 
of this &%Class typically have four or five claws on each paw.  Includes 
cats, dogs, bears, racoons, and skunks."}%
. instance(vCARNIVORE, Carnivore)
  /\ instance(vEAT, Eating)
  /\ agent(vEAT, vCARNIVORE)
  /\ patient(vEAT, vPREY) =>
      instance(vPREY, Animal)
. subclass(Canine, Carnivore)
. disjoint(Canine, Feline)
%{Canine
"The &%Class of &%Carnivores with completely 
separable toes, nonretractable claws, and long muzzles."}%
. subclass(Feline, Carnivore)
%{Feline
"The &%Class of &%Carnivores with completely
separable toes, slim bodies, and rounded heads.  All felines other than
the cheetah have retractable claws."}%
. subclass(Rodent, Mammal)
%{Rodent
"The &%Class of &%Mammals with one or two pairs 
of incisors for gnawing.  Includes rats, mice, guinea pigs, and 
rabbits."}%
. subclass(Primate, Mammal)
. disjointDecomposition(Primate, Ape, Monkey, Hominid)
%{Primate
"The &%Class of &%Mammals which are 
&%Primates."}%
. subclass(Ape, Primate)
%{Ape
"Various &%Primates with no tails or only short 
tails."}%
. subclass(Monkey, Primate)
%{Monkey
"Various &%Primates with relatively long 
tails."}%
. subclass(Hominid, Primate)
%{Hominid
"Includes &%Humans and relatively recent 
ancestors of &%Humans."}%
. subclass(Human, Hominid)
. subclass(Human, CognitiveAgent)
. partition(Human, Man, Woman)
%{Human
"Modern man, the only remaining species of the Homo 
genus."}%
. subclass(Man, Human)
%{Man
"The class of &%Male &%Humans."}%
. instance(vMAN, Man) => attribute(vMAN, Male)
. subclass(Woman, Human)
%{Woman
"The class of &%Female &%Humans."}%
. instance(vWOMAN, Woman) => attribute(vWOMAN, Female)
. subclass(Reptile, ColdBloodedVertebrate)
%{Reptile
"A &%ColdBloodedVertebrate having an external 
covering of scales or horny plates.  &%Reptiles breathe by means of 
&%Lungs and generally lay eggs."}%
. subclass(BiologicallyActiveSubstance, Substance)
%{BiologicallyActiveSubstance
"A &%Substance that is 
capable of inducing a change in the structure or functioning of an 
&%Organism.  This &%Class includes &%Substances used in the treatment, 
diagnosis, prevention or analysis of normal and abnormal body function.  
This &%Class also includes &%Substances that occur naturally in the body 
and are administered therapeutically.  Finally, &%BiologicallyActiveSubstance 
includes &%Nutrients, most drugs of abuse, and agents that require special 
handling because of their toxicity."}%
. subclass(Nutrient, BiologicallyActiveSubstance)
. disjointDecomposition(Nutrient, Protein, Carbohydrate, Vitamin)
%{Nutrient
"A &%BiologicallyActiveSubstance required by an &%Organism.  
It is generally ingested as &%Food, and it is of primary interest because of its role 
in the biologic functioning of the &%Organism."}%
. subclass(Protein, Nutrient)
%{Protein
"A &%Nutrient made up of amino acids joined by 
peptide bonds."}%
. subclass(Enzyme, Protein)
%{Enzyme
"A complex &%Protein that is produced by living 
cells and which catalyzes specific biochemical reactions. There are six 
main types of enzymes:  oxidoreductases, transferases, hydrolases, 
lyases, isomerases, and ligases."}%
. subclass(Carbohydrate, Nutrient)
%{Carbohydrate
"An element of living cells and a source of 
energy for &%Animals.  This class includes both simple &%Carbohydrates, 
i.e. sugars, and complex &%Carbohydrates, i.e. starches."}%
. subclass(Vitamin, Nutrient)
%{Vitamin
"A &%Nutrient present in natural products or made 
synthetically, which is essential in the diet of &%Humans and other higher 
&%Animals.  Included here are &%Vitamin precursors and provitamins."}%
. subclass(LiquidMixture, Mixture)
. partition(LiquidMixture, Solution, Suspension)
%{LiquidMixture
"Any &%Mixture that satisfies two conditions, 
viz. it is made up predominantly of things which are a &%Liquid and any 
component other than &%Liquid in the &%Mixture is in the form of fine particles 
which are suspended in the &%Liquid."}%
. instance(vMIX, LiquidMixture) =>
      exists vPART: U . part(vPART, vMIX) /\ attribute(vPART, Liquid)
. subclass(Solution, LiquidMixture)
%{Solution
"A liquid mixture. The most abundant component in 
a solution is called the solvent. Other components are called solutes. 
A solution, though homogeneous, may nonetheless have variable composition. 
Any amount of salt, up to a maximum limit, can be dissolved in a given 
amount of water."}%
. subclass(Suspension, LiquidMixture)
%{Suspension
"A &%LiquidMixture where at least one of the 
components of the &%Mixture is equally distributed throughout the &%Mixture 
but is not dissolved in it."}%
. subclass(GasMixture, Mixture)
. disjoint(GasMixture, LiquidMixture)
%{GasMixture
"Any &%Mixture that satisfies two conditions, 
viz. it is made up predominantly of things which are a &%Gas and any 
component other than &%Gas in the &%Mixture is in the form of fine particles 
which are suspended in the &%Gas."}%
. instance(vMIX, GasMixture) =>
      exists vPART: U . part(vPART, vMIX) /\ attribute(vPART, Gas)
. subclass(Cloud, GasMixture)
%{Cloud
"Any &%GasMixture that is visible, e.g. &%Smoke produced 
by a fire or clouds of water vapor in the sky."}%
. instance(vCLOUD, Cloud) => capability(Seeing, patient, vCLOUD)
. subclass(Smoke, Cloud)
%{Smoke
"A mixture of fine particles suspended in a gas that is 
produced by &%Combustion."}%
. instance(vSMOKE, Smoke) =>
      exists vBURNING: U
          . instance(vBURNING, Combustion) /\ a_r_e_s_u_l_t(vBURNING, vSMOKE)
. subclass(WaterCloud, Cloud)
%{WaterCloud
"Any &%Cloud that is composed primarily of water vapor."}%
. instance(vCLOUD, WaterCloud) =>
      exists vWATER: U . instance(vWATER, Water) /\ part(vWATER, vCLOUD)
. instance(vCLOUD, WaterCloud) =>
      forall vPART: U
          . part(vPART, vCLOUD) /\ not instance(vPART, Water) =>
                exists vWATER: U
                    . instance(vWATER, Water)
                      /\ part(vWATER, vCLOUD)
                      /\ measure(vWATER, vMEASURE1)
                      /\ measure(vPART, vMEASURE2)
                      /\ greaterThan(vMEASURE1, vMEASURE2)
. subclass(Air, GasMixture)
%{Air
"&%Air is the gaseous stuff that makes up the 
atmosphere surrounding Earth."}%
. instance(vWIND, Wind) =>
      exists vAIR: U . patient(vWIND, vAIR) /\ instance(vAIR, Air)
. subclass(BodySubstance, Mixture)
%{BodySubstance
"Extracellular material and mixtures of 
cells and extracellular material that are produced, excreted or accreted 
by an &%Organism.  Included here are &%Substances such as saliva, dental 
enamel, sweat, and gastric acid."}%
. subclass(AnimalSubstance, BodySubstance)
%{AnimalSubstance
"&%BodySubstances that are produced 
exclusively by &%Animals."}%
. instance(vSUBSTANCE, AnimalSubstance)
  /\ instance(vANIMAL, Organism)
  /\ part(vSUBSTANCE, vANIMAL) =>
      instance(vANIMAL, Animal)
. subclass(PlantSubstance, BodySubstance)
%{PlantSubstance
"&%BodySubstances that are produced 
exclusively by &%Plants."}%
. instance(vSUBSTANCE, PlantSubstance)
  /\ instance(vPLANT, Organism)
  /\ part(vSUBSTANCE, vPLANT) =>
      instance(vPLANT, Plant)
. subclass(Hormone, BodySubstance)
. subclass(Hormone, BiologicallyActiveSubstance)
%{Hormone
"In &%Animals, a chemical secreted by an 
endocrine gland whose products are released into the circulating fluid.  
&%Plant hormones or synthetic hormones which are used only to alter or 
control various physiologic processes, e.g., reproductive control agents, 
are assigned to the &%Class &%BiologicallyActiveSubstance. &%Hormones act as 
chemical messengers and regulate various physiologic processes such as 
growth, reproduction, metabolism, etc.  They usually fall into two broad 
categories, viz. steroid hormones and peptide hormones."}%
. instance(vHORMONE, Hormone) =>
      exists vPROCESS: U; vGLAND: U
          . instance(vGLAND, Gland)
            /\ instrument(vPROCESS, vGLAND)
            /\ a_r_e_s_u_l_t(vPROCESS, vHORMONE)
. subclass(Blood, BodySubstance)
%{Blood
"A fluid present in &%Animals that transports 
&%Nutrients to and waste products away from various &%BodyParts."}%
. subclass(Food, SelfConnectedObject)
. disjointDecomposition(Food, Meat, Beverage)
%{Food
"Any &%SelfConnectedObject containing &%Nutrients, 
such as carbohydrates, proteins, and fats, that can be ingested by a 
living &%Animal and metabolized into energy and body tissue."}%
. instance(vFOOD, Food) =>
      exists vNUTRIENT: U
          . instance(vNUTRIENT, Nutrient) /\ part(vNUTRIENT, vFOOD)
. instance(vFOOD, Food) =>
      forall vPART1: U
          . part(vPART1, vFOOD) =>
                exists vPART2: U; vANIMAL: U
                    . part(vPART1, vPART2)
                      /\ part(vPART2, vANIMAL)
                      /\ instance(vANIMAL, Animal)
. subclass(Meat, Food)
%{Meat
"Any &%Food which was originally part of an 
&%Animal and is not ingested by drinking, including eggs and animal 
blood that is eaten as food.  Note that this class covers both raw 
meat and meat that has been prepared in some way, e.g. by cooking.  
Note too that preparations involving &%Meat and &%FruitOrVegetable 
are classed directly under &%Food."}%
. instance(vMEAT, Meat) =>
      forall vPART: U
          . part(vPART, vMEAT) =>
                exists vSUBPART: U; vTIME: U; vANIMAL: U
                    . part(vSUBPART, vPART)
                      /\ holdsDuring(vTIME,
                                     a_a_n_d(instance(vANIMAL, Animal),
                                             part(vSUBPART, vANIMAL)))
. subclass(Beverage, Food)
%{Beverage
"Any &%Food that is ingested by &%Drinking.  
Note that this class is disjoint with the other subclasses of &%Food, 
i.e. &%Meat and &%FruitOrVegetable."}%
. instance(vBEV, Beverage) => attribute(vBEV, Liquid)
. instance(vDRINK, Drinking) /\ patient(vDRINK, vBEV) =>
      instance(vBEV, Beverage)
. subclass(AnatomicalStructure, OrganicObject)
. partition(AnatomicalStructure, BodyPart,
            AbnormalAnatomicalStructure)
. partition(AnatomicalStructure, AnimalAnatomicalStructure,
            PlantAnatomicalStructure)
%{AnatomicalStructure
"A normal or pathological part 
of the anatomy or structural organization of an &%Organism.  This 
class covers &%BodyParts, as well as structures that are given off 
by &%Organisms, e.g. &%ReproductiveBodies."}%
. instance(vANAT, AnatomicalStructure) =>
      exists vORGANISM: U; vTIME: U
          . instance(vORGANISM, Organism)
            /\ temporalPart(vTIME, WhenFn(vORGANISM))
            /\ holdsDuring(vTIME, part(vANAT, vORGANISM))
. instance(vPART, AnatomicalStructure) =>
      exists vCELL: U . instance(vCELL, Cell) /\ part(vCELL, vPART)
. subclass(AbnormalAnatomicalStructure, AnatomicalStructure)
%{AbnormalAnatomicalStructure
"Any &%AnatomicalStructure which 
is not normally found in the &%Organism of which it is a part, i.e. it is 
the result of a &%PathologicProcess.  This class covers tumors, birth marks, 
goiters, etc."}%
. instance(vSTRUCTURE, AbnormalAnatomicalStructure) =>
      exists vPROC: U
          . instance(vPROC, PathologicProcess)
            /\ a_r_e_s_u_l_t(vPROC, vSTRUCTURE)
. subclass(BodyPart, AnatomicalStructure)
%{BodyPart
"A collection of &%Cells and &%Tissues which 
are localized to a specific area of an &%Organism and which are not 
pathological. The instances of this &%Class range from gross structures 
to small components of complex &%Organs."}%
. instance(vPART, BodyPart) =>
      exists vORGANISM: U; vTIME: U
          . instance(vORGANISM, Organism)
            /\ temporalPart(vTIME, WhenFn(vORGANISM))
            /\ holdsDuring(vTIME, component(vPART, vORGANISM))
. instance(vPART, BodyPart) =>
      exists vPROC: U
          . instance(vPROC, PhysiologicProcess)
            /\ a_r_e_s_u_l_t(vPROC, vPART)
. subclass(AnimalAnatomicalStructure, AnatomicalStructure)
%{AnimalAnatomicalStructure
"&%AnatomicalStructures that 
are possessed exclusively by &%Animals."}%
. instance(vSTRUCTURE, AnimalAnatomicalStructure)
  /\ instance(vANIMAL, Organism)
  /\ part(vSTRUCTURE, vANIMAL) =>
      instance(vANIMAL, Animal)
. subclass(PlantAnatomicalStructure, AnatomicalStructure)
%{PlantAnatomicalStructure
"&%AnatomicalStructures that 
are possessed exclusively by &%Plants."}%
. instance(vSTRUCTURE, PlantAnatomicalStructure)
  /\ instance(vPLANT, Organism)
  /\ part(vSTRUCTURE, vPLANT) =>
      instance(vPLANT, Plant)
. subclass(ReproductiveBody, BodyPart)
%{ReproductiveBody
"Reproductive structure of &%Organisms.  
Consists of an &%Embryonic &%Object and a nutritive/protective envelope.  
Note that this class includes seeds, spores, and &%FruitOrVegetables, as 
well as the eggs produced by &%Animals."}%
. subclass(Egg, ReproductiveBody)
. subclass(Egg, AnimalAnatomicalStructure)
%{Egg
"The fertilized or unfertilized female &%ReproductiveBody 
of an &%Animal.  This includes &%Bird and &%Reptile eggs, as well as mammalian 
ova."}%
. subclass(Seed, ReproductiveBody)
. subclass(Seed, PlantAnatomicalStructure)
%{Seed
"The fertilized or unfertilized female &%ReproductiveBody 
of a &%FloweringPlant."}%
. instance(vSEED, Seed) =>
      exists vPLANT: U; vTIME: U
          . instance(vPLANT, FloweringPlant)
            /\ holdsDuring(vTIME, part(vSEED, vPLANT))
. subclass(Pollen, ReproductiveBody)
. subclass(Pollen, PlantAnatomicalStructure)
%{Pollen
"A powder produced by &%FloweringPlants that contains male 
gametes and is capable of fertilizing the seeds of &%FloweringPlants of the same 
species."}%
. subclass(FruitOrVegetable, PlantAnatomicalStructure)
. subclass(FruitOrVegetable, ReproductiveBody)
%{FruitOrVegetable
"Any fruit or vegetable, i.e. a 
ripened &%ReproductiveBody of a &%Plant.  Note that &%FruitOrVegetable 
is not a subclass of &%Food, because some fruits, e.g. poisonous 
berries, are not edible."}%
. subclass(Spore, ReproductiveBody)
. subclass(Spore, PlantAnatomicalStructure)
%{Spore
"Any &%ReproductiveBody of a &%NonFloweringPlant."}%
. instance(vSPORE, Spore) =>
      exists vPLANT: U; vTIME: U
          . instance(vPLANT, NonFloweringPlant)
            /\ holdsDuring(vTIME, part(vSPORE, vPLANT))
. subclass(BodyCovering, BodyPart)
%{BodyCovering
"Any &%BodyPart which is a covering of another 
&%BodyPart or of an entire &%Organism.  This would include the rinds of 
&%FruitOrVegetables and the skins of &%Animals."}%
. instance(vCOVER, BodyCovering) =>
      exists vBODY: U
          . superficialPart(vCOVER, vBODY)
            /\ (instance(vBODY, Organism) \/ instance(vBODY, BodyPart))
. subclass(BodyJunction, BodyPart)
%{BodyJunction
"The place where two &%BodyParts 
meet or connect."}%
. instance(vJUNCT, BodyJunction) =>
      exists vOBJ1: U; vOBJ2: U
          . instance(vOBJ1, BodyPart)
            /\ instance(vOBJ2, BodyPart)
            /\ connects(vJUNCT, vOBJ1, vOBJ2)
. subclass(BodyCavity, BodyPart)
%{BodyCavity
"Any &%BodyPart which contains an unfilled space, 
e.g. &%BodyVessels, the atria and ventricles of the heart, the lungs, etc."}%
. subclass(BodyVessel, BodyCavity)
%{BodyVessel
"Any tube-like structure which occurs naturally in 
an &%Organism and through which a &%BodySubstance can circulate."}%
. subclass(Cell, BodyPart)
%{Cell
"The fundamental structural and functional unit of 
living &%Organisms."}%
. subclass(Organ, BodyPart)
%{Organ
"A somewhat independent &%BodyPart that performs a 
specialized function.  Note that this functional definition covers bodily 
systems, e.g. the digestive system or the central nervous system."}%
. instance(vORGAN, Organ) =>
      exists vPURP: U . hasPurpose(vORGAN, vPURP)
. subclass(Gland, Organ)
%{Gland
"An &%Organ that removes &%Substances from the &%Blood, 
alters them in some way, and then releases them."}%
. subclass(Tissue, BodySubstance)
. disjointDecomposition(Tissue, Bone, Muscle, FatTissue)
%{Tissue
"An aggregation of similarly specialized &%Cells 
and the associated intercellular substance. &%Tissues are relatively 
non-localized in comparison to &%BodyParts, &%Organs or &%Organ components.  
The main features of &%Tissues are self-connectivity (see 
&%SelfConnectedObject) and being a homogeneous mass (all parts in the 
same granularity are instances of &%Tissue as well)."}%
. instance(vSTUFF, Tissue) =>
      exists vPART: U . instance(vPART, Cell) /\ part(vPART, vSTUFF)
. instance(vSTUFF, Tissue) =>
      exists vORGANISM: U
          . instance(vORGANISM, Organism) /\ part(vSTUFF, vORGANISM)
. subclass(Bone, Tissue)
. subclass(Bone, AnimalSubstance)
%{Bone
"Rigid &%Tissue composed largely of calcium that makes up 
the skeleton of &%Vertebrates.  Note that this &%Class also includes teeth."}%
. instance(vBONE, Bone) =>
      exists vVERT: U . instance(vVERT, Vertebrate) /\ part(vBONE, vVERT)
. subclass(Muscle, Tissue)
. subclass(Muscle, AnimalSubstance)
%{Muscle
"Nonrigid &%Tissue appearing only in &%Animals and 
composed largely of contractile cells."}%
. subclass(FatTissue, Tissue)
%{FatTissue
"Nonrigid &%Tissue that is composed largely of 
fat cells."}%
. subclass(Noun, Word)
. partition(Word, Noun, Verb, Adjective, Adverb, ParticleWord)
%{Noun
"One of the parts of speech.  The &%Class of &%Words 
that conventionally denote &%Objects."}%
. subclass(Verb, Word)
%{Verb
"One of the parts of speech.  The &%Class of &%Words 
that conventionally denote &%Processes."}%
. subclass(Adjective, Word)
%{Adjective
"One of the parts of speech.  The &%Class of 
&%Words that conventionally denote &%Attributes of &%Objects."}%
. subclass(Adverb, Word)
%{Adverb
"One of the parts of speech.  The &%Class of &%Words 
that conventionally denote &%Attributes of &%Processes."}%
. subclass(ParticleWord, Word)
%{ParticleWord
"An umbrella &%Class for any &%Word that does not 
fit into the other subclasses of &%Word.  A &%ParticleWord is generally a small 
term that serves a grammatical or logical function, e.g. 'and', 'of', 
'since', etc.  At some point, this class might be broken up into the 
subclasses 'Connective', 'Preposition', etc.  Note that the class &%ParticleWord 
includes both personal and possessive pronouns, e.g. 'she', 'hers', 'it', 'its', 
etc."}%
. subclass(Morpheme, LinguisticExpression)
%{Morpheme
"Part of a &%Word which cannot be subdivided 
and which expresses a meaning."}%
. instance(vMORPH, Morpheme) =>
      not (exists vOTHERMORPH: U
               . instance(vOTHERMORPH, Morpheme)
                 /\ part(vOTHERMORPH, vMORPH)
                 /\ not vOTHERMORPH = vMORPH)
. instance(vMORPH, Morpheme) =>
      exists vWORD: U . instance(vWORD, Word) /\ part(vMORPH, vWORD)
. instance(vWORD, Word) =>
      exists vPART: U . part(vPART, vWORD) /\ instance(vPART, Morpheme)
. subclass(Phrase, LinguisticExpression)
. disjointDecomposition(Phrase, VerbPhrase, NounPhrase,
                        PrepositionalPhrase)
%{Phrase
"A set of &%Words in a &%Language which form a unit, 
i.e. express a meaning in the &%Language."}%
. instance(vPHRASE, Phrase) =>
      exists vPART1: U; vPART2: U
          . part(vPART1, vPHRASE)
            /\ part(vPART2, vPHRASE)
            /\ instance(vPART1, Word)
            /\ instance(vPART2, Word)
            /\ not vPART1 = vPART2
. subclass(VerbPhrase, Phrase)
%{VerbPhrase
"A &%Phrase that has the same function as a 
&%Verb."}%
. instance(vPHRASE, VerbPhrase) =>
      exists vVERB: U . instance(vVERB, Verb) /\ part(vVERB, vPHRASE)
. subclass(NounPhrase, Phrase)
. disjoint(NounPhrase, VerbPhrase)
%{NounPhrase
"A &%Phrase that has the same function as a 
&%Noun."}%
. instance(vSENTENCE, Sentence) =>
      exists vPHRASE1: U; vPHRASE2: U
          . instance(vPHRASE1, NounPhrase)
            /\ instance(vPHRASE2, VerbPhrase)
            /\ part(vPHRASE1, vSENTENCE)
            /\ part(vPHRASE2, vSENTENCE)
. instance(vPHRASE, NounPhrase) =>
      exists vNOUN: U . instance(vNOUN, Noun) /\ part(vNOUN, vPHRASE)
. subclass(PrepositionalPhrase, Phrase)
%{PrepositionalPhrase
"A &%Phrase that begins with a 
preposition and that functions as an &%Adjective or an &%Adverb."}%
. instance(vPHRASE, PrepositionalPhrase) =>
      exists vPREP: U
          . instance(vPREP, ParticleWord) /\ part(vPREP, vPHRASE)
. subclass(Text, LinguisticExpression)
. subclass(Text, Artifact)
%{Text
"A &%LinguisticExpression or set of 
&%LinguisticExpressions that perform a specific function related 
to &%Communication, e.g. express a discourse about a particular 
topic, and that are inscribed in a &%CorpuscularObject by &%Humans."}%
. instance(vTEXT, Text) =>
      exists vPART: U
          . part(vPART, vTEXT) /\ instance(vPART, LinguisticExpression)
. instance(vTEXT, Text) =>
      exists vWRITE: U
          . instance(vWRITE, Writing) /\ a_r_e_s_u_l_t(vWRITE, vTEXT)
. subclass(FactualText, Text)
. disjoint(FactualText, FictionalText)
%{FactualText
"The class of &%Texts that purport to 
reveal facts about the world.  Such texts are often known as information 
or as non-fiction.  Note that something can be an instance of 
&%FactualText, even if it is wholly inaccurate.  Whether something 
is a &%FactualText is determined by the beliefs of the agent creating 
the text."}%
. instance(vTEXT, FactualText)
  /\ authors(vAGENT, vTEXT)
  /\ subsumesContentInstance(vTEXT, vCONTENT)
  /\ instance(vCONTENT, Formula) =>
      believes(vAGENT, vCONTENT)
. subclass(FictionalText, Text)
%{FictionalText
"The class of &%Texts that purport to 
be largely a product of the author's imagination, i.e. the author 
does not believe that most of the content conveyed by the text is 
an accurate depiction of the real world.  Note that something can 
be an instance of &%FictionalText, even if it is completely true.  
Whether something is a &%FictionalText is determined by the beliefs 
of the agent creating the text."}%
. instance(vTEXT, FactualText) /\ authors(vAGENT, vTEXT) =>
      exists vCONTENT: U
          . subsumesContentInstance(vTEXT, vCONTENT)
            /\ instance(vCONTENT, Formula)
            /\ not believes(vAGENT, vCONTENT)
. subclass(Sentence, LinguisticExpression)
%{Sentence
"A syntactically well-formed formula of a 
&%Language.  It includes, at minimum, a predicate and a subject (which 
may be explicit or implicit), and it expresses a &%Proposition."}%
. instance(vSENT, Sentence) =>
      exists vNOUN: U; vVERB: U
          . instance(vNOUN, NounPhrase)
            /\ instance(vVERB, VerbPhrase)
            /\ part(vNOUN, vSENT)
            /\ part(vVERB, vSENT)
. instance(vSENT, Sentence) =>
      exists vPROP: U
          . instance(vPROP, Proposition) /\ containsInformation(vSENT, vPROP)
. instance(authors, BinaryPredicate)
. instance(authors, AsymmetricRelation)
. domain(authors, a_1, Agent)
. domainSubclass(authors, a_2, Text)
%{authors
"(&%authors ?AGENT ?TEXT) means that ?AGENT is 
creatively responsible for ?TEXT.  For example, Agatha Christie is 
author of Murder_on_the_Orient_Express."}%
. authors(vAGENT, vTEXT) =>
      exists vPROCESS: U; vINSTANCE: U
          . agent(vPROCESS, vAGENT)
            /\ instance(vINSTANCE, vTEXT)
            /\ a_r_e_s_u_l_t(vPROCESS, vTEXT)
. instance(editor, BinaryPredicate)
. instance(editor, AsymmetricRelation)
. domain(editor, a_1, Agent)
. domainSubclass(editor, a_2, Text)
%{editor
"(&%editor ?AGENT ?TEXT) means that ?AGENT is 
an editor of ?TEXT."}%
. instance(publishes, BinaryPredicate)
. instance(publishes, AsymmetricRelation)
. domain(publishes, a_1, Organization)
. domainSubclass(publishes, a_2, Text)
%{publishes
"(&%publishes ?ORG ?TEXT) means that ?ORG 
publishes ?TEXT.  For example, Bantam Books publishes Agatha Christie's 
Murder_on_the_Orient_Express."}%
. publishes(vORG, vTEXT) <=>
      (exists vPUB: U
           . instance(vPUB, Publication)
             /\ agent(vPUB, vORG)
             /\ patient(vPUB, vTEXT))
. instance(EditionFn, BinaryFunction)
. instance(EditionFn, PartialValuedRelation)
. domainSubclass(EditionFn, a_1, ContentBearingObject)
. domain(EditionFn, a_2, PositiveInteger)
. rangeSubclass(EditionFn, ContentBearingObject)
%{EditionFn
"A &%BinaryFunction that maps a type of text 
(e.g. Agatha Christie's Murder_on_the_Orient_Express) and a number 
to the edition of the text type corresponding to the number."}%
. EditionFn(vTEXT, vINT1) = vEDITION1
  /\ EditionFn(vTEXT, vINT2) = vEDITION2
  /\ greaterThan(vINT2, vINT1)
  /\ instance(vPUB1, Publication)
  /\ instance(vPUB2, Publication)
  /\ patient(vPUB1, vEDITION1)
  /\ patient(vPUB2, vEDITION2)
  /\ date(vPUB1, vDATE1)
  /\ date(vPUB2, vDATE2) =>
      before(EndFn(vDATE1), EndFn(vDATE2))
. EditionFn(vTEXT1, vNUMBER) = vTEXT2 =>
      subsumesContentClass(vTEXT1, vTEXT2)
. instance(SeriesVolumeFn, BinaryFunction)
. instance(SeriesVolumeFn, PartialValuedRelation)
. domainSubclass(SeriesVolumeFn, a_1, Series)
. domain(SeriesVolumeFn, a_2, PositiveInteger)
. rangeSubclass(SeriesVolumeFn, Text)
%{SeriesVolumeFn
"A &%BinaryFunction that maps a type of &%Series 
(e.g. the Encyclopedia_Britannica or the Popular_Mechanics periodical) and a 
number to the volumes of the text type designated by the number."}%
. subclass(vTEXT, Periodical)
  /\ SeriesVolumeFn(vTEXT, vINT1) = vVOLUME1
  /\ SeriesVolumeFn(vTEXT, vINT2) = vVOLUME2
  /\ greaterThan(vINT2, vINT1)
  /\ instance(vPUB1, Publication)
  /\ instance(vPUB2, Publication)
  /\ patient(vPUB1, vVOLUME1)
  /\ patient(vPUB2, vVOLUME2)
  /\ date(vPUB1, vDATE1)
  /\ date(vPUB2, vDATE2) =>
      before(EndFn(vDATE1), EndFn(vDATE2))
. SeriesVolumeFn(vSERIES, vNUMBER) = vVOLUME =>
      subsumesContentClass(vSERIES, vVOLUME)
. instance(PeriodicalIssueFn, BinaryFunction)
. instance(PeriodicalIssueFn, PartialValuedRelation)
. domainSubclass(PeriodicalIssueFn, a_1, Periodical)
. domain(PeriodicalIssueFn, a_2, PositiveInteger)
. rangeSubclass(PeriodicalIssueFn, Periodical)
%{PeriodicalIssueFn
"A &%BinaryFunction that maps a subclass of 
&%Periodical and a number to all of the issues of the &%Periodical corresponding 
to the number."}%
. PeriodicalIssueFn(vPERIODICAL, vNUMBER) = vISSUE =>
      subsumesContentClass(vPERIODICAL, vISSUE)
. subclass(Book, Text)
%{Book
"A &%Text that has pages and is bound."}%
. subclass(Summary, Text)
%{Summary
"A short &%Text that is a summary of another, 
longer &%Text."}%
. instance(vTEXT, Summary) =>
      exists vTEXT2: U
          . instance(vTEXT2, Text) /\ subsumesContentInstance(vTEXT2, vTEXT)
. subclass(Series, Text)
%{Series
"A &%Text consisting of multiple self-contained units.  
Some examples are an encyclopedia containing a couple dozen volumes, a television 
series made up of many episodes, a film serial, etc."}%
. instance(vSERIES, Series) =>
      exists vBOOK1: U; vBOOK2: U
          . instance(vBOOK1, Book)
            /\ instance(vBOOK2, Book)
            /\ subsumesContentInstance(vSERIES, vBOOK1)
            /\ subsumesContentInstance(vSERIES, vBOOK2)
            /\ not vBOOK1 = vBOOK2
. subclass(Periodical, Series)
%{Periodical
"A &%Series whose elements are published separately 
and on a periodic basis."}%
. subclass(Article, Text)
. disjoint(Article, Book)
%{Article
"A relatively short &%Text that either is unbound or is 
bound with other &%Articles in a &%Book."}%
. instance(vARTICLE1, Article)
  /\ instance(vBOOK, Book)
  /\ subsumesContentInstance(vBOOK, vARTICLE1) =>
      exists vARTICLE2: U
          . instance(vARTICLE2, Article)
            /\ not vARTICLE2 = vARTICLE1
            /\ subsumesContentInstance(vBOOK, vARTICLE2)
. subclass(Certificate, Text)
%{Certificate
"A &%Text that confers a right or obligation 
on the holder of the &%Certificate.  Note that the right or obligation 
need not be a legal one, as in the case of an academic diploma that grants 
certain privileges in the professional world."}%
. instance(vDOC, Certificate) =>
      exists vPROP: U; vNORM: U
          . confersNorm(vDOC, vPROP, vNORM)
            \/ deprivesNorm(vDOC, vPROP, vNORM)
. subclass(FinancialInstrument, Certificate)
%{FinancialInstrument
"A document having monetary value 
or recording a monetary transaction"}%
. subclass(Currency, FinancialInstrument)
. partition(Currency, CurrencyBill, CurrencyCoin)
%{Currency
"Any element of the official currrency of some 
&%Nation.  This covers both &%CurrencyBills and &%CurrencyCoins."}%
. instance(vCURRENCY, Currency) =>
      exists vMEASURE: U . monetaryValue(vCURRENCY, vMEASURE)
. subclass(CurrencyBill, Currency)
%{CurrencyBill
"Any instance of &%Currency that is made 
of paper."}%
. instance(vBILL, CurrencyBill) =>
      exists vPAPER: U . instance(vPAPER, Paper) /\ part(vPAPER, vBILL)
. subclass(CurrencyCoin, Currency)
%{CurrencyCoin
"Any instance of &%Currency that is made 
of &%Metal."}%
. instance(vCOIN, CurrencyCoin) =>
      exists vMETAL: U
          . subclass(vMETAL, Metal) /\ material(vMETAL, vCOIN)
. subclass(Patent, Certificate)
%{Patent
"A &%Certificate that expresses the content of an 
invention that has been accorded legal protection by a governemental 
entity."}%
. subclass(Molecule, CompoundSubstance)
%{Molecule
"A molecule is the smallest unit of matter of a 
&%CompoundSubstance that retains all the physical and chemical properties 
of that substance, e.g., Ne, H2, H2O.  A molecule is two or more &%Atoms 
linked by a chemical bond."}%
. instance(vMOLE, Molecule) =>
      exists vATOM1: U; vATOM2: U
          . instance(vATOM1, Atom)
            /\ instance(vATOM2, Atom)
            /\ part(vATOM1, vMOLE)
            /\ part(vATOM2, vMOLE)
            /\ not vATOM1 = vATOM2
. subclass(Artifact, CorpuscularObject)
%{Artifact
"A &%CorpuscularObject that is the product of a 
&%Making."}%
. instance(vARTIFACT, Artifact) <=>
      (exists vMAKING: U
           . instance(vMAKING, Making) /\ a_r_e_s_u_l_t(vMAKING, vARTIFACT))
. subclass(Product, Artifact)
%{Product
"An &%Artifact that is produced by &%Manufacture."}%
. instance(vPRODUCT, Product) =>
      exists vMANUFACTURE: U
          . instance(vMANUFACTURE, Manufacture)
            /\ a_r_e_s_u_l_t(vMANUFACTURE, vPRODUCT)
. instance(a_v_e_r_s_i_o_n, BinaryPredicate)
. instance(a_v_e_r_s_i_o_n, AsymmetricRelation)
. instance(a_v_e_r_s_i_o_n, TransitiveRelation)
. domainSubclass(a_v_e_r_s_i_o_n, a_1, Artifact)
. domainSubclass(a_v_e_r_s_i_o_n, a_2, Artifact)
%{version
"Some &%Artifacts have a life cycle with discrete 
stages or versions.  (&%version ARTIFACT1 ARTIFACT2) means that ARTIFACT1 
is a version of ARTIFACT2.  Note that this &%Predicate relates subclasses of 
&%Artifact and not instances."}%
. a_v_e_r_s_i_o_n(vARTIFACT1, vARTIFACT2) =>
      subclass(vARTIFACT1, vARTIFACT2)
. subclass(StationaryArtifact, Artifact)
%{StationaryArtifact
"A &%StationaryArtifact is an &%Artifact 
that has a fixed spatial location.  Most instances of this &%Class are 
architectural works, e.g. the Eiffel Tower, the Great Pyramids, office towers, 
single-family houses, etc."}%
. instance(vARTIFACT, StationaryArtifact) =>
      exists vPLACE: U
          . holdsDuring(WhenFn(vARTIFACT), located(vARTIFACT, vPLACE))
. subclass(Building, StationaryArtifact)
%{Building
"The Class of &%StationaryArtifacts which are 
intended to house &%Humans and their activities."}%
. instance(vBUILDING, Building) =>
      exists vHUMAN: U
          . instance(vHUMAN, Human)
            /\ (inhabits(vHUMAN, vBUILDING)
                \/ (exists vACT: U
                        . agent(vACT, vHUMAN) /\ located(vACT, vBUILDING)))
. subclass(Room, StationaryArtifact)
. disjoint(Room, Building)
%{Room
"A &%properPart of a &%Building which is separated from 
the exterior of the &%Building and/or other &%Rooms of the &%Building by walls. 
Some &%Rooms may have a specific purpose, e.g. sleeping, bathing, cooking, 
entertainment, etc."}%
. instance(vROOM, Room) =>
      exists vBUILD: U
          . instance(vBUILD, Building) /\ properPart(vROOM, vBUILD)
. subclass(Residence, StationaryArtifact)
. partition(Residence, PermanentResidence, TemporaryResidence)
%{Residence
"A &%Building or part of a &%Building which provides 
some accomodation for sleeping."}%
. instance(vRESIDENCE, Residence) =>
      instance(vRESIDENCE, House)
      \/ (exists vBUILDING: U
              . instance(vBUILDING, ResidentialBuilding)
                /\ part(vRESIDENCE, vBUILDING))
. subclass(PermanentResidence, Residence)
%{PermanentResidence
"A &%Residence where people live, i.e. 
where people have a &%home."}%
. instance(vRESIDENCE, PermanentResidence) =>
      exists vPERSON: U . home(vPERSON, vRESIDENCE)
. subclass(TemporaryResidence, Residence)
%{TemporaryResidence
"A &%Residence which is strictly temporary, 
i.e. where no one makes his/her &%home."}%
. instance(vRESIDENCE, TemporaryResidence) =>
      not (exists vPERSON: U . home(vPERSON, vHOTEL))
. subclass(ResidentialBuilding, Building)
. subclass(ResidentialBuilding, Residence)
%{ResidentialBuilding
"A &%Building which provides some 
accomodation for sleeping.  Note that this class does not cover just 
permanent residences, e.g. &%Houses and condominium and apartment buildings, 
but also temporary residences, e.g. hotels and dormitories.  
&%ResidentialBuildings are also distinguished from &%CommercialBuildings, 
which are intended to serve an organizational rather than a residential 
function."}%
. subclass(Hotel, ResidentialBuilding)
. subclass(Hotel, TemporaryResidence)
. subclass(Hotel, CommercialAgent)
%{Hotel
"A &%ResidentialBuilding which provides temporary 
accommodations to guests in exchange for money."}%
. subclass(SingleFamilyResidence, PermanentResidence)
%{SingleFamilyResidence
"A &%PermanentResidence which is 
intended to be the &%home of a single &%SocialUnit.  This class covers 
&%Houses, &%ApartmentUnits, and &%CondominiumUnits."}%
. instance(vRESIDENCE, SingleFamilyResidence) =>
      hasPurpose(vRESIDENCE,
                 True
                     when forall vAGENT1: U; vAGENT2: U
                              . home(vAGENT1, vRESIDENCE)
                                /\ home(vAGENT2, vRESIDENCE) =>
                                    exists vUNIT: U
                                        . instance(vUNIT, SocialUnit)
                                          /\ member(vAGENT1, vUNIT)
                                          /\ member(vAGENT2, vUNIT)
                     else False)
. subclass(ArtWork, Artifact)
%{ArtWork
"&%Artifacts that are created primarily for 
aesthetic appreciation.  Note that this &%Class does not include 
most examples of architecture, which belong under &%StationaryArtifact."}%
. subclass(RepresentationalArtWork, ArtWork)
. subclass(RepresentationalArtWork, Icon)
%{RepresentationalArtWork
"Any &%ArtWork that represents 
something &%Physical."}%
. subclass(Fabric, Artifact)
. disjoint(Fabric, StationaryArtifact)
%{Fabric
"&%Artifacts that are created by weaving together 
natural or synthetic fibers or by treating the skins of certain sorts of 
&%Animals.  Note that this &%Class includes articles that are created by 
stitching together various types of fabrics, e.g. bedspreads.  On the other 
hand, &%Clothing is not a &%subclass of &%Fabric, because many clothing items 
contain elements that are not fabrics."}%
. subclass(Clothing, Artifact)
. disjoint(Clothing, StationaryArtifact)
%{Clothing
"&%Artifact made out of fabrics and possibly other 
materials that are used to cover the bodies of &%Humans."}%
. instance(vCLOTHING, Clothing) =>
      exists vFABRIC: U
          . instance(vFABRIC, Fabric) /\ part(vFABRIC, vCLOTHING)
. instance(wears, BinaryPredicate)
. domain(wears, a_1, Animal)
. domain(wears, a_2, Clothing)
%{wears
"(&%wears ?AGENT ?CLOTHING) means that ?AGENT is wearing 
the item of &%Clothing ?CLOTHING."}%
. wears(vAGENT, vCLOTHING) => located(vCLOTHING, vAGENT)
. subclass(Device, Artifact)
%{Device
"A &%Device is an &%Artifact whose purpose is to 
serve as an &%instrument in a specific subclass of &%Process."}%
. instance(vDEVICE, Device) =>
      exists vPROC: U . capability(vPROC, instrument, vDEVICE)
. instance(vDEVICE, Device) =>
      exists vPROC: U
          . hasPurpose(vDEVICE,
                       True
                           when exists vINST: U
                                    . instance(vINST, vPROC)
                                      /\ instrument(vINST, vDEVICE)
                           else False)
. subclass(MusicalInstrument, Device)
%{MusicalInstrument
"A &%Device which is manipulated by a &%Human 
and whose purpose is to produce &%Music."}%
. instance(vINSTRUMENT, MusicalInstrument) =>
      capability(Music, instrument, vINSTRUMENT)
. subclass(TransportationDevice, Device)
%{TransportationDevice
"A &%TransportationDevice is a &%Device 
which serves as the &%instrument in a &%Transportation &%Process which carries 
the &%patient of the &%Process from one point to another."}%
. instance(vDEVICE, TransportationDevice) =>
      capability(Transportation, instrument, vDEVICE)
. subclass(Vehicle, TransportationDevice)
%{Vehicle
"&%Vehicle is the subclass of 
&%TransportationDevices that transport passengers or goods 
from one place to another by moving from one place to the other 
with them, e.g., cars, trucks, ferries, and airplanes.  Contrast 
with devices such as pipelines, escalators, or supermarket 
checkout belts, which carry items from one place to another by means 
of a moving part, without the device removing from the origin to 
the destination."}%
. instance(vTRANSPORT, Vehicle)
  /\ instance(vMOVE, Translocation)
  /\ instrument(vMOVE, vTRANSPORT)
  /\ origin(vMOVE, vFROM) =>
      holdsDuring(BeginFn(WhenFn(vMOVE)), located(vTRANSPORT, vFROM))
. instance(vTRANSPORT, Vehicle)
  /\ instance(vMOVE, Translocation)
  /\ instrument(vMOVE, vTRANSPORT)
  /\ destination(vMOVE, vTO) =>
      holdsDuring(BeginFn(WhenFn(vMOVE)), located(vTRANSPORT, vTO))
. subclass(MeasuringDevice, Device)
%{MeasuringDevice
"Any &%Device whose purpose is to measure a 
&%PhysicalQuantity."}%
. instance(vDEVICE, MeasuringDevice) =>
      hasPurpose(vDEVICE,
                 True
                     when exists vMEASURE: U
                              . instance(vMEASURE, Measuring)
                                /\ instrument(vMEASURE, vDEVICE)
                     else False)
. subclass(AttachingDevice, Device)
%{AttachingDevice
"A &%Device whose purpose is to attach one thing 
to something else, e.g. nails, screws, buttons, etc."}%
. instance(vDEVICE, AttachingDevice) =>
      exists vATTACH: U
          . instance(vATTACH, Attaching) /\ instrument(vATTACH, vDEVICE)
. subclass(Weapon, Device)
%{Weapon
"The &%Class of &%Devices that are designed 
primarily to damage or destroy &%Humans/&%Animals, &%StationaryArtifacts or 
the places inhabited by &%Humans/&%Animals."}%
. instance(vWEAPON, Weapon) =>
      capability(Damaging, instrument, vWEAPON)
. instance(vWEAPON, Weapon) =>
      hasPurpose(vWEAPON,
                 True
                     when exists vDEST: U; vPATIENT: U
                              . instance(vDEST, Damaging)
                                /\ patient(vDEST, vPATIENT)
                                /\ (instance(vPATIENT, StationaryArtifact)
                                    \/ instance(vPATIENT, Animal)
                                    \/ (exists vANIMAL: U
                                            . instance(vANIMAL, Animal)
                                              /\ inhabits(vANIMAL, vPATIENT)))
                     else False)
. subclass(Machine, Device)
%{Machine
"&%Machines are &%Devices that that have a 
well-defined &%resource and &%result and that automatically convert 
the &%resource into the &%result."}%
. instance(vMACHINE, Machine) =>
      forall vPROC: U
          . instrument(vPROC, vMACHINE) =>
                exists vRESOURCE: U; vRESULT: U
                    . resource(vPROC, vRESOURCE)
                      /\ a_r_e_s_u_l_t(vPROC, vRESULT)
. subclass(EngineeringComponent, Device)
%{EngineeringComponent
"A fundamental concept that applies 
in many engineering domains.  An &%EngineeringComponent is an element of 
a &%Device that is a physically whole object, such as one might 
see listed as standard parts in a catalog.  The main difference betweeen 
&%EngineeringComponents and arbitrary globs of matter is that 
&%EngineeringComponents are object-like in a modeling sense.  Thus, an 
&%EngineeringComponent is not an arbtrary subregion, but a part of a 
system with a stable identity."}%
. instance(vCOMP, EngineeringComponent) =>
      exists vDEVICE: U
          . instance(vDEVICE, Device) /\ component(vCOMP, vDEVICE)
. instance(vMACHINE, Machine) =>
      exists vCOMP1: U; vCOMP2: U
          . instance(vCOMP1, EngineeringComponent)
            /\ instance(vCOMP2, EngineeringComponent)
            /\ not vCOMP1 = vCOMP2
            /\ part(vCOMP1, vMACHINE)
            /\ part(vCOMP2, vMACHINE)
. subrelation(engineeringSubcomponent, properPart)
. domain(engineeringSubcomponent, a_1, EngineeringComponent)
. domain(engineeringSubcomponent, a_2, EngineeringComponent)
%{engineeringSubcomponent
"(&%engineeringSubcomponent ?SUB 
?SUPER) means that the &%EngineeringComponent ?SUB is structurally a 
&%properPart of ?SUPER.  This relation is an &%AsymmetricRelation, since 
two &%EngineeringComponents cannot be subcomponents of each other."}%
. instance(connectedEngineeringComponents, SymmetricRelation)
. instance(connectedEngineeringComponents, IrreflexiveRelation)
. subrelation(connectedEngineeringComponents, connected)
. domain(connectedEngineeringComponents, a_1, EngineeringComponent)
. domain(connectedEngineeringComponents, a_2, EngineeringComponent)
%{connectedEngineeringComponents
"This is the most general 
connection relation between &%EngineeringComponents.  If 
(&%connectedEngineeringComponents ?COMP1 ?COMP2), then neither ?COMP1 nor 
?COMP2 can be an &%engineeringSubcomponent of the other.  The relation 
&%connectedEngineeringComponents is a &%SymmetricRelation; there is no 
information in the direction of connection between two components.  It is 
also an &%IrreflexiveRelation; no &%EngineeringComponent bears this relation 
to itself.  Note that this relation does not associate a name or type 
with the connection."}%
. connectedEngineeringComponents(vCOMP1, vCOMP2) =>
      not engineeringSubcomponent(vCOMP1, vCOMP2)
      /\ not engineeringSubcomponent(vCOMP2, vCOMP1)
. subclass(EngineeringConnection, EngineeringComponent)
%{EngineeringConnection
"An &%EngineeringConnection is an 
&%EngineeringComponent that represents a connection relationship between 
two other &%EngineeringComponents.  It is a reification of the 
&%Predicate &%connectedEngineeringComponents.  That means that whenever 
this &%Predicate holds between two &%EngineeringComponents, there exists an 
&%EngineeringConnection.  The practical reason for reifying a relationship 
is to be able to attach other information about it. For example, one
might want to say that a particular connection is associated with some 
shared parameters, or that it is of a particular type.  
&%EngineeringConnections are &%EngineeringComponents and can therefore be 
an &%engineeringSubcomponent of other &%EngineeringComponents.  However, 
to provide for modular regularity in component systems, 
&%EngineeringConnections cannot be connected.  For each pair of 
&%EngineeringComponents related by &%connectedEngineeringComponents, there 
exists at least one &%EngineeringConnection.  However, that object may not 
be unique, and the same &%EngineeringConnection may be associated with 
several pairs of &%EngineeringComponents."}%
. instance(vCONNECTION, EngineeringConnection) =>
      exists vCOMP1: U; vCOMP2: U
          . connectsEngineeringComponents(vCONNECTION, vCOMP1, vCOMP2)
. connectedEngineeringComponents(vCOMP1, vCOMP2) =>
      not (instance(vCOMP1, EngineeringConnection)
           \/ instance(vCOMP2, EngineeringConnection))
. connectedEngineeringComponents(vCOMP1, vCOMP2) <=>
      (exists vCONNECTION: U
           . connectsEngineeringComponents(vCONNECTION, vCOMP1, vCOMP2))
. subrelation(connectsEngineeringComponents, connects)
. domain(connectsEngineeringComponents, a_1, EngineeringConnection)
. domain(connectsEngineeringComponents, a_2, EngineeringComponent)
. domain(connectsEngineeringComponents, a_3, EngineeringComponent)
%{connectsEngineeringComponents
"&%connectsEngineeringComponents 
is a &%TernaryPredicate that maps from an &%EngineeringConnection to the 
&%EngineeringComponents it connects.  Since &%EngineeringComponents cannot 
be connected to themselves and there cannot be an &%EngineeringConnection 
without a &%connectedEngineeringComponents &%Predicate, the second and third 
arguments of any &%connectsEngineeringComponents relationship will always be 
distinct for any given first argument."}%
. subclass(CommercialAgent, Agent)
%{CommercialAgent
"An &%Agent that provides products and/or 
services for a fee with the aim of making a profit."}%
. subclass(Corporation, CommercialAgent)
. subclass(Corporation, Organization)
%{Corporation
"An &%Organization that has a special legal status 
that allows a group of persons to act as a &%CommercialAgent and that insulates 
the owners (shareholders) from many liabilities that might result from the 
corporation's operation."}%
. subclass(Manufacturer, Corporation)
%{Manufacturer
"Any &%Corporation which manufactures &%Products."}%
. instance(vORG, Manufacturer) =>
      hasPurpose(True
                     when exists vMANUFACTURE: U
                              . instance(vMANUFACTURE, Manufacture)
                                /\ instance(vMANUFACTURE, CommercialService)
                                /\ agent(vMANUFACTURE, vORG)
                     else False)
. subclass(MercantileOrganization, Corporation)
%{MercantileOrganization
"Any &%Corporation which sells 
goods or services to customers for a profit."}%
. instance(vORG, MercantileOrganization) =>
      hasPurpose(True
                     when exists vSELL: U
                              . instance(vSELL, Selling)
                                /\ instance(vSELL, CommercialService)
                                /\ agent(vSELL, vORG)
                     else False)
. subclass(Group, Collection)
. subclass(Group, Agent)
%{Group
"A &%Collection of &%Agents, e.g. a flock 
of sheep, a herd of goats, or the local Boy Scout troop."}%
. instance(vGROUP, Group) /\ member(vMEMB, vGROUP) =>
      instance(vMEMB, Agent)
. subclass(GroupOfPeople, Group)
%{GroupOfPeople
"Any &%Group whose &%members are 
exclusively &%Humans."}%
. instance(vGROUP, GroupOfPeople) /\ member(vMEMBER, vGROUP) =>
      instance(vMEMBER, Human)
. subclass(AgeGroup, GroupOfPeople)
%{AgeGroup
"A &%GroupOfPeople whose &%members all have the 
same &%age."}%
. instance(vGROUP, AgeGroup) =>
      forall vMEMB1: U; vMEMB2: U; vAGE1: U; vAGE2: U
          . member(vMEMB1, vGROUP)
            /\ member(vMEMB2, vGROUP)
            /\ age(vMEMB1, vAGE1)
            /\ age(vMEMB2, vAGE2) =>
                vAGE1 = vAGE2
. subclass(FamilyGroup, GroupOfPeople)
%{FamilyGroup
"A &%GroupOfPeople whose &%members bear 
&%familyRelations to one another."}%
. instance(vGROUP, FamilyGroup) =>
      forall vMEMB1: U; vMEMB2: U
          . member(vMEMB1, vGROUP) /\ member(vMEMB2, vGROUP) =>
                familyRelation(vMEMB1, vMEMB2)
. subclass(SocialUnit, GroupOfPeople)
%{SocialUnit
"A &%GroupOfPeople who all have the same &%home."}%
. instance(vUNIT, SocialUnit) =>
      exists vHOME: U . member(vMEMBER, vUNIT) => home(vMEMBER, vHOME)
. instance(ImmediateFamilyFn, UnaryFunction)
. domain(ImmediateFamilyFn, a_1, Human)
. range(ImmediateFamilyFn, FamilyGroup)
%{ImmediateFamilyFn
"(&%ImmediateFamilyFn ?PERSON) denotes the 
immediate family of ?PERSON, i.e. the &%Group consisting of the &%parents of 
?PERSON and anyone of whom ?PERSON is a &%parent."}%
. instance(vPERSON, Human)
  /\ ImmediateFamilyFn(vPERSON) = vFAMILY =>
      forall vMEMBER: U
          . member(vMEMBER, vFAMILY) <=>
                parent(vMEMBER, vPERSON) \/ parent(vPERSON, vMEMBER)
. instance(familyRelation, BinaryPredicate)
. instance(familyRelation, EquivalenceRelation)
. domain(familyRelation, a_1, Organism)
. domain(familyRelation, a_2, Organism)
%{familyRelation
"A very general &%Predicate for biological 
relationships. (&%familyRelation ?ORGANISM1 ?ORGANISM2) means that 
?ORGANISM1 and ?ORGANISM2 are biologically derived from a common ancestor."}%
. familyRelation(vORGANISM1, vORGANISM2) =>
      exists vORGANISM3: U
          . ancestor(vORGANISM3, vORGANISM1)
            /\ ancestor(vORGANISM3, vORGANISM2)
. subrelation(ancestor, familyRelation)
. instance(ancestor, TransitiveRelation)
. instance(ancestor, IrreflexiveRelation)
. domain(ancestor, a_1, Organism)
. domain(ancestor, a_2, Organism)
%{ancestor
"The transitive closure of the &%parent predicate.  
(&%ancestor ?DESCENDANT ?ANCESTOR) means that ?ANCESTOR is either the 
&%parent of ?DESCENDANT or the &%parent of the &%parent of &%DESCENDANT or 
etc."}%
. parent(vPARENT, vCHILD) => ancestor(vPARENT, vCHILD)
. instance(parent, BinaryPredicate)
. subrelation(parent, familyRelation)
. instance(parent, AsymmetricRelation)
. instance(parent, IntransitiveRelation)
. domain(parent, a_1, Organism)
. domain(parent, a_2, Organism)
%{parent
"The general relationship of parenthood.  
(&%parent ?CHILD ?PARENT) means that ?PARENT is a biological parent 
of ?CHILD."}%
. parent(vCHILD, vPARENT) =>
      before(BeginFn(WhenFn(vPARENT)), BeginFn(WhenFn(vCHILD)))
. parent(vCHILD, vPARENT)
  /\ subclass(vCLASS, Organism)
  /\ instance(vPARENT, vCLASS) =>
      instance(vCHILD, vCLASS)
. parent(vCHILD, vPARENT) =>
      mother(vCHILD, vPARENT) \/ father(vCHILD, vPARENT)
. instance(vORGANISM, Organism) =>
      exists vPARENT: U . parent(vORGANISM, vPARENT)
. instance(mother, SingleValuedRelation)
. subrelation(mother, parent)
. domain(mother, a_1, Organism)
. domain(mother, a_2, Organism)
%{mother
"The general relationship of motherhood.  
(&%mother ?CHILD ?MOTHER) means that ?MOTHER is the biological mother 
of ?CHILD."}%
. mother(vCHILD, vMOTHER) => attribute(vMOTHER, Female)
. instance(father, SingleValuedRelation)
. subrelation(father, parent)
. domain(father, a_1, Organism)
. domain(father, a_2, Organism)
%{father
"The general relationship of fatherhood.  
(&%father ?CHILD ?FATHER) means that ?FATHER is the biological father
of ?CHILD."}%
. father(vCHILD, vFATHER) => attribute(vFATHER, Male)
. subrelation(daughter, parent)
. domain(daughter, a_1, Woman)
. domain(daughter, a_2, Human)
%{daughter
"The general relationship of daughterhood.  
(&%daughter ?CHILD ?PARENT) means that ?CHILD is the biological daughter
of ?PARENT."}%
. subrelation(son, parent)
. domain(son, a_1, Man)
. domain(son, a_2, Human)
%{son
"The general relationship of being a son.  
(&%son ?CHILD ?PARENT) means that ?CHILD is the biological 
son of ?PARENT."}%
. instance(sibling, BinaryPredicate)
. subrelation(sibling, familyRelation)
. instance(sibling, SymmetricRelation)
. instance(sibling, IrreflexiveRelation)
. domain(sibling, a_1, Organism)
. domain(sibling, a_2, Organism)
%{sibling
"The relationship between two &%Organisms that 
have the same &%mother and &%father.  Note that this relationship does 
not hold between half-brothers, half-sisters, etc."}%
. sibling(vANIMAL1, vANIMAL2) <=>
      not vANIMAL1 = vANIMAL2
      /\ (exists vFATHER: U; vMOTHER: U
              . father(vANIMAL1, vFATHER)
                /\ father(vANIMAL2, vFATHER)
                /\ mother(vANIMAL1, vMOTHER)
                /\ mother(vANIMAL2, vMOTHER))
. subrelation(brother, sibling)
. instance(brother, IrreflexiveRelation)
. instance(brother, TransitiveRelation)
. domain(brother, a_1, Man)
. domain(brother, a_2, Human)
%{brother
"The general relationship of being a brother.  
(&%brother ?MAN ?PERSON) means that ?MAN is the brother of ?PERSON."}%
. subrelation(sister, sibling)
. instance(sister, IrreflexiveRelation)
. instance(sister, TransitiveRelation)
. domain(sister, a_1, Woman)
. domain(sister, a_2, Human)
%{sister
"The general relationship of being a sister.  
(&%sister ?WOMAN ?PERSON) means that ?WOMAN is the sister of ?PERSON."}%
. instance(legalRelation, BinaryPredicate)
. instance(legalRelation, SymmetricRelation)
. domain(legalRelation, a_1, CognitiveAgent)
. domain(legalRelation, a_2, CognitiveAgent)
%{legalRelation
"(&%legalRelation ?AGENT1 ?AGENT2) means 
that ?AGENT1 and ?AGENT2 are relatives by virtue of a legal relationship.  
Some examples include marriage, adoption, etc."}%
. legalRelation(vAGENT1, vAGENT2) =>
      exists vDECLARE: U; vOBLIGATION: U
          . instance(vDECLARE, Declaring)
            /\ confersObligation(vOBLIGATION, vDECLARE, vAGENT1)
            /\ confersObligation(vOBLIGATION, vDECLARE, vAGENT2)
. subrelation(spouse, legalRelation)
. instance(spouse, IrreflexiveRelation)
. instance(spouse, SymmetricRelation)
. domain(spouse, a_1, Human)
. domain(spouse, a_2, Human)
%{spouse
"The relationship of marriage between two &%Humans."}%
. subrelation(husband, spouse)
. instance(husband, AsymmetricRelation)
. instance(husband, IrreflexiveRelation)
. domain(husband, a_1, Man)
. domain(husband, a_2, Woman)
. inverse(husband, wife)
%{husband
"(&%husband ?MAN ?WOMAN) means that ?MAN is the 
husband of ?WOMAN."}%
. subrelation(wife, spouse)
. instance(wife, AsymmetricRelation)
. instance(wife, IrreflexiveRelation)
. domain(wife, a_1, Woman)
. domain(wife, a_2, Man)
%{wife
"(&%wife ?WOMAN ?MAN) means that ?WOMAN is the wife of 
?MAN."}%
. subclass(EthnicGroup, GroupOfPeople)
%{EthnicGroup
"A &%GroupOfPeople whose &%members originate 
from the same &%GeographicArea or share the same &%Language and/or cultural 
practices."}%
. subclass(BeliefGroup, GroupOfPeople)
%{BeliefGroup
"A &%GroupOfPeople whose &%members share a belief 
or set of beliefs."}%
. instance(vGROUP, BeliefGroup) =>
      exists vBELIEF: U
          . forall vMEMB: U
                . member(vMEMB, vGROUP) => believes(vMEMB, vBELIEF)
. subclass(Organization, Group)
. subclass(Organization, CognitiveAgent)
%{Organization
"An &%Organization is a corporate or similar 
institution. The &%members of an &%Organization typically have a common 
purpose or function. Note that this class also covers divisions, departments, 
etc. of organizations.  For example, both the Shell Corporation and the 
accounting department at Shell would both be instances of &%Organization.  
Note too that the existence of an &%Organization is dependent on the existence 
of at least one &%member (since &%Organization is a subclass of &%Collection).  
Accordingly, in cases of purely legal organizations, a fictitious &%member 
should be assumed."}%
. instance(vORG, Organization) =>
      exists vPURP: U
          . forall vMEMBER: U
                . member(vMEMBER, vORG) => hasPurpose(vMEMBER, vPURP)
. instance(vORG, Organization) /\ member(vAGENT, vORG) =>
      instance(vAGENT, Agent)
. instance(employs, BinaryPredicate)
. domain(employs, a_1, Organization)
. domain(employs, a_2, CognitiveAgent)
%{employs
"(&%employs ?ORG ?PERSON) means that ?ORG has 
hired ?PERSON and currently retains ?PERSON, on a salaried, hourly 
or contractual basis, to provide services in exchange for monetary 
compensation."}%
. subclass(PoliticalOrganization, Organization)
%{PoliticalOrganization
"An &%Organization that is a &%subOrganization 
of a &%Government, or an &%Organization that is attempting to bring about some sort 
of political change."}%
. instance(vPOL, PoliticalOrganization) =>
      exists vPROC: U
          . instance(vPROC, PoliticalProcess) /\ agent(vPROC, vPOL)
. subclass(MilitaryForce, PoliticalOrganization)
%{MilitaryForce
"&%MilitaryForce is the subclass of 
&%Organizations that are organized along military lines and for the 
purpose of either defensive or offensive combat, whether or not 
the force is an official &%GovernmentOrganization."}%
. instance(vORG, MilitaryForce) =>
      capability(ViolentContest, agent, vORG)
. subclass(MilitaryOrganization, MilitaryForce)
. subclass(MilitaryOrganization, GovernmentOrganization)
%{MilitaryOrganization
"Any heavily armed &%Organization 
that is part of a &%Government and that is charged with representing the 
&%Government in international conflicts."}%
. subclass(ParamilitaryOrganization, MilitaryForce)
. disjoint(ParamilitaryOrganization, GovernmentOrganization)
%{ParamilitaryOrganization
"An &%Organization which is much like 
a &%MilitaryOrganization, e.g. it is made up of armed fighters, except that it 
is not associated with a &%Government."}%
. subclass(GovernmentOrganization, Organization)
%{GovernmentOrganization
"&%GovernmentOrganization is the 
class of official &%Organizations that are concerned with the government 
of a &%GeopoliticalArea at some level.  They may be a &%subOrganization 
of a government."}%
. instance(vORG, GovernmentOrganization) <=>
      (exists vGOV: U
           . instance(vGOV, Government) /\ subOrganization(vORG, vGOV))
. subOrganization(vORG, vGOV)
  /\ instance(vGOV, GovernmentOrganization) =>
      instance(vORG, GovernmentOrganization)
. subclass(Government, GovernmentOrganization)
%{Government
"The ruling body of a &%GeopoliticalArea."}%
. instance(GovernmentFn, UnaryFunction)
. domain(GovernmentFn, a_1, GeopoliticalArea)
. range(GovernmentFn, Government)
%{GovernmentFn
"(&%GovernmentFn ?AREA) denotes the 
&%Government of the &%GeopoliticalArea ?AREA.  For example, 
(&%GovernmentFn &%UnitedStates) denotes the Federal-level government of 
the United States; (&%GovernmentFn &%PuertoRico) denotes the government of 
the Commonwealth of Puerto Rico."}%
. subclass(PoliceOrganization, GovernmentOrganization)
%{PoliceOrganization
"Any &%GovernmentOrganization  
that is charged with domestic enforcement of the laws of the &%Government."}%
. subclass(JudicialOrganization, Organization)
%{JudicialOrganization
"&%JudicialOrganization is the class 
of &%Organizations whose primary purpose is to render judgments according 
to the statutes or regulations of a government or other organization.  
Judicial bodies are not necessarily government organizations, for example, 
those associated with sporting associations."}%
. subclass(EducationalOrganization, Organization)
%{EducationalOrganization
"A &%EducationalOrganization is 
an institution of learning. Some examples are public and private K-12 
schools, and colleges and universities."}%
. subclass(ReligiousOrganization, Organization)
. subclass(ReligiousOrganization, BeliefGroup)
%{ReligiousOrganization
"An &%Organization whose members 
share a set of religious beliefs."}%
. subrelation(subOrganization, subCollection)
. instance(subOrganization, PartialOrderingRelation)
. domain(subOrganization, a_1, Organization)
. domain(subOrganization, a_2, Organization)
%{subOrganization
"(&%subOrganization ?ORG1 ?ORG2) means 
that ?ORG1 is an &%Organization which is a part of the &%Organization 
?ORG2.  Note that &%subOrganization is a &%ReflexiveRelation, so every 
&%Organization is a &%subOrganization of itself."}%
. instance(citizen, BinaryPredicate)
. instance(citizen, AsymmetricRelation)
. domain(citizen, a_1, Human)
. domain(citizen, a_2, Nation)
%{citizen
"(&%citizen ?PERSON ?NATION) means that the 
&%Human ?PERSON is a citizen of &%Nation ?NATION."}%
. subclass(FieldOfStudy, Proposition)
%{FieldOfStudy
"An academic or applied discipline with 
recognized experts and with a core of accepted theory or practice.  Note 
that &%FieldOfStudy is a &%subclass of &%Proposition, because a 
&%FieldOfStudy is understood to be a body of abstract, informational 
content, with varying degrees of certainty attached to each element of 
this content."}%
. subclass(Procedure, Proposition)
%{Procedure
"A sequence-dependent specification.  Some 
examples are &%ComputerPrograms, finite-state machines, cooking recipes, 
musical scores, conference schedules, driving directions, and the scripts 
of plays and movies."}%
. subclass(ComputerProgram, Procedure)
%{ComputerProgram
"A set of instructions in a computer 
programming language that can be executed by a computer."}%
. subclass(Plan, Procedure)
%{Plan
"A specification of a sequence of &%Processes which 
is intended to satisfy a specified purpose at some future time."}%
. instance(vPLAN, Plan)
  /\ instance(vOBJ, ContentBearingObject)
  /\ containsInformation(vOBJ, vPLAN) =>
      exists vPLANNING: U
          . instance(vPLANNING, Planning) /\ a_r_e_s_u_l_t(vPLANNING, vOBJ)
. instance(vPLAN, Plan) =>
      exists vPURP: U . hasPurpose(vPLAN, vPURP)
. subclass(Argument, Proposition)
. partition(Argument, DeductiveArgument, InductiveArgument)
%{Argument
"Any proposition which has the form of a deductive 
or inductive argument, i.e. a set of premises which, it is claimed, imply 
a conclusion."}%
. instance(vREASON, Reasoning) =>
      exists vARGUMENT: U
          . instance(vARGUMENT, Argument) /\ realization(vREASON, vARGUMENT)
. instance(vARGUMENT, Argument) =>
      exists vPREMISES: U; vCONCLUSION: U
          . PremisesFn(vARGUMENT) = vPREMISES
            /\ conclusion(vCONCLUSION, vARGUMENT)
. subclass(DeductiveArgument, Argument)
. partition(DeductiveArgument, ValidDeductiveArgument,
            InvalidDeductiveArgument)
%{DeductiveArgument
"An &%Argument which has the form of a 
deduction, i.e. it is claimed that the set of &%premises &%entails the 
&%conclusion."}%
. subclass(ValidDeductiveArgument, DeductiveArgument)
%{ValidDeductiveArgument
"A &%DeductiveArgument which is 
valid, i.e. the set of &%premises in fact &%entails the &%conclusion."}%
. instance(vARGUMENT, ValidDeductiveArgument)
  /\ vPREMISES = PremisesFn(vARGUMENT)
  /\ conclusion(vCONCLUSION, vARGUMENT) =>
      exists vFORMULA1: U; vFORMULA2: U
          . containsInformation(vFORMULA1, vPREMISES)
            /\ containsInformation(vFORMULA2, vCONCLUSION)
            /\ entails(vPREMISES, vCONCLUSION)
. subclass(InvalidDeductiveArgument, DeductiveArgument)
%{InvalidDeductiveArgument
"&%DeductiveArguments that are not 
&%ValidDeductiveArguments, i.e. it is not the case that the set of &%premises 
in fact &%entails the &%conclusion."}%
. subclass(Explanation, DeductiveArgument)
%{Explanation
"An &%Argument where the conclusion is an 
observed fact and the premises are other facts which collectively imply 
the conclusion.  Note that this is the they hypothetico-deductive model 
of explanation."}%
. subclass(InductiveArgument, Argument)
%{InductiveArgument
"An &%Argument which is inductive, i.e. it is 
claimed that a set of specific cases makes the &%conclusion, which generalizes 
these cases, more likely to be true."}%
. instance(premise, BinaryPredicate)
. instance(premise, TotalValuedRelation)
. domain(premise, a_1, Argument)
. domain(premise, a_2, Proposition)
%{premise
"(&%premise ?ARGUMENT ?PROPOSITION) means that the 
&%Proposition ?PROPOSITION is an explicit assumption of the &%Argument 
?ARGUMENT."}%
. instance(PremisesFn, UnaryFunction)
. domain(PremisesFn, a_1, Argument)
. range(PremisesFn, Proposition)
%{PremisesFn
"(&%PremisesFn ?ARGUMENT) returns the complete 
set of &%premises of the &%Argument ?ARGUMENT."}%
. instance(vARGUMENT, Argument)
  /\ vPREMISES = PremisesFn(vARGUMENT) =>
      (subProposition(vPROPOSITION, vPREMISES) <=>
           premise(vARGUMENT, vPROPOSITION))
. instance(conclusion, BinaryPredicate)
. instance(conclusion, SingleValuedRelation)
. instance(conclusion, TotalValuedRelation)
. domain(conclusion, a_1, Argument)
. domain(conclusion, a_2, Proposition)
%{conclusion
"(&%conclusion ?ARGUMENT ?PROPOSITION) means that
the &%Proposition ?PROPOSITION is the conclusion explicitly drawn from the 
&%Argument ?ARGUMENT.  Note that it may or may not be the case that ?ARGUMENT 
&%entails ?PROPOSITION."}%
. instance(consistent, BinaryPredicate)
. instance(consistent, SymmetricRelation)
. domain(consistent, a_1, Proposition)
. domain(consistent, a_2, Proposition)
%{consistent
"(&%consistent ?PROP1 ?PROP2) means that the two 
&%Propositions ?PROP1 and ?PROP2 are consistent with one another, i.e. it 
is possible for both of them to be true at the same time."}%
. instance(orientation, SpatialRelation)
. instance(orientation, TernaryPredicate)
. domain(orientation, a_1, Object)
. domain(orientation, a_2, Object)
. domain(orientation, a_3, PositionalAttribute)
%{orientation
"A general &%Predicate for indicating how two 
&%Objects are oriented with respect to one another.  For example, 
(orientation ?OBJ1 ?OBJ2 North) means that ?OBJ1 is north of ?OBJ2, and 
(orientation ?OBJ1 ?OBJ2 Vertical) means that ?OBJ1 is positioned 
vertically with respect to ?OBJ2."}%
. orientation(vOBJ1, vOBJ2, vATTR1)
  /\ contraryAttribute(a_At_R_O_W)
  /\ inList(vATTR1, ListFn(a_At_R_O_W))
  /\ inList(vATTR2, ListFn(a_At_R_O_W))
  /\ not vATTR1 = vATTR2 =>
      not orientation(vOBJ1, vOBJ2, vATTR2)
. instance(direction, CaseRole)
. domain(direction, a_1, Process)
. domain(direction, a_2, DirectionalAttribute)
%{direction
"(&%direction ?PROC ?ATTR) means that the 
&%Process ?PROC is moving in the direction ?ATTR.  For example, one 
would use this &%Predicate to represent the fact that Max is moving 
&%North."}%
. holdsDuring(vTIME, direction(vPROC, vATTR1)) =>
      forall vATTR2: U
          . holdsDuring(vTIME, direction(vPROC, vATTR2)) => vATTR2 = vATTR1
. instance(faces, BinaryPredicate)
. domain(faces, a_1, Object)
. domain(faces, a_2, DirectionalAttribute)
%{faces
"(&%faces ?OBJ ?DIRECTION) means that the front of 
?OBJ (see &%FrontFn) is positioned towards the compass direction ?DIRECTION.  
More precisely, it means that if a line were extended from the center of 
?DIRECTION, the line would intersect with the front of ?OBJ before it 
intersected with its back (see &%BackFn)."}%
. holdsDuring(vTIME, faces(vPROC, vATTR1)) =>
      forall vATTR2: U
          . holdsDuring(vTIME, faces(vPROC, vATTR2)) => vATTR2 = vATTR1
. subclass(TruthValue, RelationalAttribute)
%{TruthValue
"The &%Class of truth values, e.g. &%True and 
&%False.  These are &%Attributes of &%Sentences and &%Propositions."}%
. property(vITEM, vVALUE) /\ instance(vVALUE, TruthValue) =>
      instance(vITEM, Sentence) \/ instance(vITEM, Proposition)
. instance(True, TruthValue)
%{True
"The &%TruthValue of being true."}%
. instance(False, TruthValue)
. contraryAttribute(False, True)
%{False
"The &%TruthValue of being false."}%
. subrelation(a_t_r_u_e, property)
. domain(a_t_r_u_e, a_1, Sentence)
. domain(a_t_r_u_e, a_2, TruthValue)
%{true
"The &%BinaryPredicate that relates a &%Sentence 
to its &%TruthValue."}%
. subclass(PositionalAttribute, RelationalAttribute)
%{PositionalAttribute
"&%Attributes characterizing the 
orientation of an &%Object, e.g. &%Vertical versus &%Horizontal, &%Left 
versus &%Right etc."}%
. subclass(DirectionalAttribute, PositionalAttribute)
%{DirectionalAttribute
"The subclass of &%PositionalAttributes 
that concern compass directions."}%
. orientation(vOBJ1, vOBJ2, vATTR1)
  /\ instance(vATTR1, DirectionalAttribute)
  /\ instance(vATTR2, DirectionalAttribute)
  /\ not vATTR1 = vATTR2 =>
      not orientation(vOBJ1, vOBJ2, vATTR2)
. instance(vDIRECT, DirectionalAttribute)
  /\ orientation(vOBJ1, vOBJ2, vDIRECT)
  /\ orientation(vOBJ2, vOBJ3, vDIRECT) =>
      between(vOBJ1, vOBJ2, vOBJ3)
. instance(North, DirectionalAttribute)
. contraryAttribute(North, South, East, West)
%{North
"The compass direction of &%North."}%
. instance(South, DirectionalAttribute)
%{South
"The compass direction of &%South."}%
. orientation(vOBJ1, vOBJ2, North) <=>
      orientation(vOBJ2, vOBJ1, South)
. instance(East, DirectionalAttribute)
%{East
"The compass direction of &%East."}%
. instance(West, DirectionalAttribute)
%{West
"The compass direction of &%West."}%
. orientation(vOBJ1, vOBJ2, East) <=>
      orientation(vOBJ2, vOBJ1, West)
. instance(Vertical, PositionalAttribute)
%{Vertical
"Attribute used to indicate that an &%Object 
is positioned height-wise with respect to another &%Object."}%
. orientation(vOBJ1, vOBJ2, Vertical) <=>
      orientation(vOBJ2, vOBJ1, Vertical)
. instance(Horizontal, PositionalAttribute)
. contraryAttribute(Horizontal, Vertical)
%{Horizontal
"Attribute used to indicate that an &%Object 
is positioned width-wise with respect to another &%Object."}%
. orientation(vOBJ1, vOBJ2, Horizontal) <=>
      orientation(vOBJ2, vOBJ1, Horizontal)
. instance(Above, PositionalAttribute)
. contraryAttribute(Above, Below)
%{Above
"This is a &%PositionalAttribute derived from the 
up/down schema and not involving contact.  Note that this means directly 
above, i.e., if one object is &%Above another object, then the projections 
of the two objects overlap."}%
. orientation(vOBJ1, vOBJ2, Above) => not connected(vOBJ1, vOBJ2)
. instance(Below, PositionalAttribute)
%{Below
"This &%PositionalAttribute is derived from the 
up/down schema and may or may not involve contact.  Note that this means 
directly below, i.e., if one object is &%Below another object, then the 
projections of the two objects overlap."}%
. orientation(vOBJ1, vOBJ2, Below) <=>
      orientation(vOBJ2, vOBJ1, On) \/ orientation(vOBJ2, vOBJ1, Above)
. instance(Adjacent, PositionalAttribute)
%{Adjacent
"Used to assert that an object ?OBJ1 is close 
to, near or abutting ?OBJ2.  This &%PositionalAttribute covers the 
following common sense notions:  adjoins, abuts, is contiguous to, 
is juxtaposed, and is close to."}%
. orientation(vOBJ1, vOBJ2, Adjacent) <=>
      orientation(vOBJ1, vOBJ2, Near) \/ connected(vOBJ1, vOBJ2)
. instance(Left, PositionalAttribute)
%{Left
"This &%PositionalAttribute is derived from the 
left/right schema.  Note that this means directly to the left, so that, 
if one object is to the left of another, then the projections of the 
two objects overlap."}%
. instance(Right, PositionalAttribute)
. contraryAttribute(Right, Left)
%{Right
"This &%PositionalAttribute is derived from the 
left/right schema.  Note that this means directly to the right, so that, 
if one object is to the right of another, then the projections of the 
two objects overlap."}%
. orientation(vOBJ1, vOBJ2, Right) <=>
      orientation(vOBJ2, vOBJ1, Left)
. instance(Near, PositionalAttribute)
%{Near
"The relation of common sense adjacency.  Note that, if 
an object is &%Near another object, then the objects are not &%connected."}%
. orientation(vOBJ1, vOBJ2, Near) => not connected(vOBJ1, vOBJ2)
. orientation(vOBJ1, vOBJ2, Near) =>
      orientation(vOBJ2, vOBJ1, Near)
. instance(On, PositionalAttribute)
%{On
"This is used to assert that an object is on top of 
another object, and it is derived from the up/down schema and involves 
contact."}%
. orientation(vOBJ1, vOBJ2, On) => connected(vOBJ1, vOBJ2)
. orientation(vOBJ1, vOBJ2, On) => located(vOBJ1, vOBJ2)
. orientation(vOBJ1, vOBJ2, On) =>
      not orientation(vOBJ2, vOBJ1, On)
. subclass(TimeZone, RelationalAttribute)
%{TimeZone
"An &%Attribute which is used to specify coordinates 
in which time measures are uniform, i.e. all time devices are synchronized to 
the same &%TimePositions."}%
. instance(CoordinatedUniversalTimeZone, TimeZone)
%{CoordinatedUniversalTimeZone
"A &%TimeZone which functions 
as the standard time zone.  It is also known as Zulu time (in the military), 
Greenwich Mean Time, and the Western European time zone.  Note that whenever 
a &%TimeZone is not specified, the &%TimePosition is understood to be with 
respect to the &%CoordinatedUniversalTimeZone."}%
. instance(PacificTimeZone, TimeZone)
%{PacificTimeZone
"A &%TimeZone that covers much of the 
western part of the United States."}%
. RelativeTimeFn(vTIME1, PacificTimeZone) = vTIME2 =>
      vTIME2 = AdditionFn(vTIME1, a_8)
. instance(MountainTimeZone, TimeZone)
%{MountainTimeZone
"A &%TimeZone that covers much of the 
Rocky Mountain region of the United States."}%
. RelativeTimeFn(vTIME1, MountainTimeZone) = vTIME2 =>
      vTIME2 = AdditionFn(vTIME1, a_7)
. instance(CentralTimeZone, TimeZone)
%{CentralTimeZone
"A &%TimeZone that covers much of the 
midwestern United States."}%
. RelativeTimeFn(vTIME1, CentralTimeZone) = vTIME2 =>
      vTIME2 = AdditionFn(vTIME1, a_6)
. instance(EasternTimeZone, TimeZone)
%{EasternTimeZone
"A &%TimeZone that covers much of the 
eastern United States."}%
. RelativeTimeFn(vTIME1, EasternTimeZone) = vTIME2 =>
      vTIME2 = AdditionFn(vTIME1, a_5)
. instance(RelativeTimeFn, BinaryFunction)
. instance(RelativeTimeFn, TemporalRelation)
. instance(RelativeTimeFn, TotalValuedRelation)
. domain(RelativeTimeFn, a_1, TimePosition)
. domain(RelativeTimeFn, a_2, TimeZone)
. range(RelativeTimeFn, TimePosition)
%{RelativeTimeFn
"A means of converting &%TimePositions 
between different &%TimeZones.  (&%RelativeTimeFn ?TIME ?ZONE) 
denotes the &%TimePosition in &%CoordinatedUniversalTime that is 
contemporaneous with the &%TimePosition ?TIME in &%TimeZone ?ZONE.
For example, (&%RelativeTimeFn (&%MeasureFn 14 &%Hour) &%EasternTimeZone) 
would return the value (&%MeasureFn 19 &%Hour)."}%
. subclass(SocialRole, RelationalAttribute)
%{SocialRole
"The &%Class of all &%Attributes that 
specify the position or status of a &%CognitiveAgent within an 
&%Organization or other &%Group."}%
. attribute(vPERSON, vATTRIBUTE)
  /\ instance(vATTRIBUTE, SocialRole) =>
      instance(vPERSON, Human)
. instance(Unemployed, SocialRole)
%{Unemployed
"The &%Attribute of a &%CognitiveAgent when 
he/she is unemployed."}%
. instance(vPERSON, Human)
  /\ (forall vORG: U . not employs(vORG, vPERSON)) <=>
      attribute(vPERSON, Unemployed)
. subclass(Position, SocialRole)
%{Position
"A formal position of reponsibility within an 
&%Organization. Examples of &%Positions include president, laboratory 
director, senior researcher, sales representative, etc."}%
. instance(occupiesPosition, TernaryPredicate)
. domain(occupiesPosition, a_1, Human)
. domain(occupiesPosition, a_2, Position)
. domain(occupiesPosition, a_3, Organization)
%{occupiesPosition
"(&%occupiesPosition ?PERSON ?POSITION ?ORG) 
means that ?PERSON holds the &%Position ?POSITION at &%Organization ?ORG. 
For example, (&%occupiesPosition &%TomSmith &%ResearchDirector 
&%AcmeLaboratory) means that &%TomSmith is a research director at Acme Labs."}%
. occupiesPosition(vAGENT, vPOSITION, vORG) =>
      attribute(vAGENT, vPOSITION)
. employs(vORG, vPERSON) =>
      exists vPOSITION: U . occupiesPosition(vPERSON, vPOSITION, vORG)
. occupiesPosition(vPERSON, vPOSITION, vORGANIZATION) =>
      member(vPERSON, vORGANIZATION)
. subclass(NormativeAttribute, RelationalAttribute)
%{NormativeAttribute
"A &%Class containing all of the 
&%Attributes that are specific to morality, legality, aesthetics, 
etiquette, etc.  Many of these attributes express a judgement that 
something ought or ought not to be the case."}%
. instance(modalAttribute, BinaryPredicate)
. instance(modalAttribute, AsymmetricRelation)
. instance(modalAttribute, IrreflexiveRelation)
. subrelation(modalAttribute, property)
. domain(modalAttribute, a_1, Formula)
. domain(modalAttribute, a_2, NormativeAttribute)
%{modalAttribute
"A &%BinaryRelation that is used to state the 
normative force of a &%Proposition.  (&%modalAttribute ?FORMULA ?PROP) means 
that the &%Proposition expressed by ?FORMULA has the &%NormativeAttribute 
?PROP.  For example, (&%modalAttribute (&%exists (?ACT ?OBJ) (&%and 
(&%instance ?ACT &%Giving) (&%agent ?ACT John) (&%patient ?ACT ?OBJ) 
(&%destination ?ACT Tom))) &%Obligation) means that John is obligated to give 
Tom something."}%
. modalAttribute(vFORMULA1, vPROP)
  /\ entails(vFORMULA1, vFORMULA2) =>
      modalAttribute(vFORMULA2, vPROP)
. modalAttribute(vFORMULA, Permission) =>
      modalAttribute(vFORMULA, Possibility)
. subclass(SubjectiveAssessmentAttribute, NormativeAttribute)
. disjoint(SubjectiveAssessmentAttribute, ObjectiveNorm)
%{SubjectiveAssessmentAttribute
"The &%Class of &%NormativeAttributes
which lack an objective criterion for their attribution, i.e. the attribution of 
these &%Attributes varies from subject to subject and even with respect to the 
same subject over time.  This &%Class is, generally speaking, only used when 
mapping external knowledge sources to the SUMO.  If a term from such a knowledge 
source seems to lack objective criteria for its attribution, it is assigned to 
this &%Class."}%
. subclass(ObjectiveNorm, NormativeAttribute)
%{ObjectiveNorm
"The &%Class of &%NormativeAttributes that are 
associated with an objective criterion for their attribution, i.e. there is 
broad consensus about the cases where these attributes are applicable."}%
. subclass(ContestAttribute, ObjectiveNorm)
%{ContestAttribute
"A &%Class containing &%Attributes that are 
specific to participants in a &%Contest.  In particular, these &%Attributes 
indicate the position of one of the &%agents in the &%Contest with respect 
to other &%agent(s) in the &%Contest.   Some examples of these &%Attributes 
are winning, losing, won, lost, etc."}%
. property(vTHING, vATTR) /\ instance(vATTR, ContestAttribute) =>
      exists vCONTEST: U
          . instance(vCONTEST, Contest)
            /\ (agent(vCONTEST, vTHING)
                \/ patient(vCONTEST, vTHING)
                \/ subProcess(vTHING, vCONTEST))
. subclass(AlethicAttribute, ObjectiveNorm)
%{AlethicAttribute
"A &%Class containing all of the &%Attributes 
relating to the notions of possibility and necessity."}%
. instance(Possibility, AlethicAttribute)
%{Possibility
"Attribute that applies to &%Propositions that are 
possible, i.e. true in at least one possible world."}%
. instance(Necessity, AlethicAttribute)
%{Necessity
"Attribute that applies to &%Propositions that are 
necessary, i.e. true in every possible world."}%
. modalAttribute(vFORMULA, Necessity) <=>
      not modalAttribute(a_n_o_t(vFORMULA), Possibility)
. modalAttribute(vFORMULA, Necessity) =>
      modalAttribute(vFORMULA, Possibility)
. instance(holdsRight, BinaryPredicate)
. instance(holdsRight, AsymmetricRelation)
. domain(holdsRight, a_1, Formula)
. domain(holdsRight, a_2, CognitiveAgent)
%{holdsRight
"Expresses a relationship between a &%Formula 
and a &%CognitiveAgent whereby the &%CognitiveAgent has the right to 
bring it about that the &%Formula is true."}%
. instance(confersRight, TernaryPredicate)
. domain(confersRight, a_1, Formula)
. domain(confersRight, a_2, Entity)
. domain(confersRight, a_3, CognitiveAgent)
%{confersRight
"Expresses the relationship between a &%Formula, 
an &%Entity, and a &%CognitiveAgent when the &%Entity authorizes the 
&%CognitiveAgent to bring it about that the &%Formula is true."}%
. confersRight(vFORMULA, vAGENT1, vAGENT2) =>
      holdsRight(vFORMULA, vAGENT2)
. instance(holdsObligation, BinaryPredicate)
. instance(holdsObligation, AsymmetricRelation)
. domain(holdsObligation, a_1, Formula)
. domain(holdsObligation, a_2, CognitiveAgent)
. relatedInternalConcept(holdsObligation, holdsRight)
%{holdsObligation
"Expresses a relationship between a 
&%Formula and a &%CognitiveAgent whereby the &%CognitiveAgent has 
the obligation to bring it about that the &%Formula is true."}%
. instance(confersObligation, TernaryPredicate)
. domain(confersObligation, a_1, Formula)
. domain(confersObligation, a_2, Entity)
. domain(confersObligation, a_3, CognitiveAgent)
. relatedInternalConcept(confersObligation, confersRight)
%{confersObligation
"Expresses the relationship between a 
a &%Formula, an &%Entity, and a &%CognitiveAgent when the &%Entity 
obligates the &%CognitiveAgent to bring it about that the &%Formula is 
true."}%
. confersObligation(vFORMULA, vAGENT1, vAGENT2) =>
      holdsObligation(vFORMULA, vAGENT2)
. subclass(DeonticAttribute, ObjectiveNorm)
%{DeonticAttribute
"A &%Class containing all of the &%Attributes 
relating to the notions of permission, obligation, and prohibition."}%
. instance(Permission, DeonticAttribute)
%{Permission
"&%Attribute that applies to &%Propositions that an 
&%Agent is permitted, by some authority, to make true."}%
. instance(Obligation, DeonticAttribute)
%{Obligation
"&%Attribute that applies to &%Propositions that an 
&%Agent is required, by some authority, to make true."}%
. modalAttribute(vFORMULA, Obligation) <=>
      not modalAttribute(a_n_o_t(vFORMULA), Permission)
. modalAttribute(vFORMULA, Obligation) =>
      modalAttribute(vFORMULA, Permission)
. subAttribute(Law, Obligation)
%{Law
"&%Attribute that applies to &%Propositions that are 
required by a government or a branch of the government and that are enforced 
with penalties for noncompliance.  These &%Propositions may be codified as 
legislation or they may be more informal, as in the case of government policy."}%
. subAttribute(Promise, Obligation)
%{Promise
"&%Attribute that applies to &%Propositions that 
an &%Agent promises to make true.  &%Promises may be implicit or explicit.  
They may be expressed in a written or verbal or gestural manner."}%
. property(vENTITY, Promise) =>
      property(vENTITY, Contract) \/ property(vENTITY, NakedPromise)
. subAttribute(Contract, Promise)
%{Contract
"&%Attribute that applies to &%Propositions where 
something is promised in return, i.e. a reciprocal promise."}%
. subAttribute(PurchaseContract, Contract)
%{PurchaseContract
"A &%Contract between two &%Agents in 
which one &%Agent agrees to render the other some good or service in 
exchange for currency."}%
. subAttribute(ServiceContract, Contract)
%{ServiceContract
"A &%Contract where an &%Agent agrees to 
perform a service for another &%Agent (usually for a price)."}%
. subAttribute(Warranty, ServiceContract)
%{Warranty
"A &%Contract that states the cirumstances 
under which defects in the product will be corrected for no charge.  
A &%Warranty is usually limited to a length of time that is specified 
in the &%Warranty itself.  A &%Warranty also includes information about 
what is not covered and actions that invalidate the &%Warranty."}%
. subAttribute(NakedPromise, Promise)
. contraryAttribute(NakedPromise, Contract)
%{NakedPromise
"A &%Promise where nothing is promised in return, 
i.e. a nudum pactum."}%
. instance(Prohibition, DeonticAttribute)
%{Prohibition
"&%Prohibition is the &%DeonticAttribute that 
applies to &%Formulas that an &%Agent is forbidden, by some authority, 
to make true."}%
. modalAttribute(vFORMULA, Prohibition) <=>
      not modalAttribute(vFORMULA, Permission)
. subclass(ProbabilityAttribute, ObjectiveNorm)
%{ProbabilityAttribute
"A class containing all of the &%Attributes 
relating to objective, qualitative assessments of probability, e.g. &%Likely and 
&%Unlikely."}%
. instance(Likely, ProbabilityAttribute)
. contraryAttribute(Likely, Unlikely)
%{Likely
"The &%ProbabilityAttribute of being probable, i.e. more 
likely than not to be &%True."}%
. modalAttribute(vFORMULA, Likely) =>
      greaterThan(ProbabilityFn(a_t_r_u_e(vFORMULA, True)),
                  ProbabilityFn(a_t_r_u_e(vFORMULA, False)))
. instance(Unlikely, ProbabilityAttribute)
%{Unlikely
"The &%ProbabilityAttribute of being improbable, i.e. more 
likely than not to be &%False."}%
. modalAttribute(vFORMULA, Unlikely) =>
      greaterThan(ProbabilityFn(a_t_r_u_e(vFORMULA, False)),
                  ProbabilityFn(a_t_r_u_e(vFORMULA, True)))
. subclass(PhysicalState, InternalAttribute)
. contraryAttribute(Solid, Liquid, Gas, Plasma)
. exhaustiveAttribute(PhysicalState, Solid, Fluid, Liquid, Gas,
                      Plasma)
%{PhysicalState
"The physical state of an &%Object.  There 
are three reified instances of this &%Class:  &%Solid, &%Liquid, and &%Gas.  
Physical changes are not characterized by the transformation of one 
substance into another, but rather by the change of the form (physical 
states) of a given substance.  For example, melting an iron nail yields a 
substance still called iron."}%
. instance(Solid, PhysicalState)
%{Solid
"An &%Object has the &%Attribute of &%Solid if it 
has a fixed shape and a fixed volume."}%
. instance(Fluid, PhysicalState)
%{Fluid
"&%Fluid is the &%PhysicalState attribute of an 
&%Object that does not have a fixed shape and thus tends to flow or to 
conform to the shape of a container."}%
. instance(Liquid, PhysicalState)
. subAttribute(Liquid, Fluid)
%{Liquid
"An &%Object has the &%Attribute of &%Liquid if 
it has a fixed volume but not a fixed shape."}%
. instance(vOBJ, Solution) => attribute(vOBJ, Liquid)
. instance(Gas, PhysicalState)
. subAttribute(Gas, Fluid)
%{Gas
"An &%Object has the &%Attribute of &%Gas if it has 
neither a fixed volume nor a fixed shape."}%
. instance(vOBJ, Substance) <=>
      (exists vATTR: U
           . instance(vATTR, PhysicalState) /\ attribute(vOBJ, vATTR))
. instance(Plasma, PhysicalState)
. subAttribute(Plasma, Fluid)
%{Plasma
"An extremely energetic &%PhysicalState that consists 
of atomic nuclei stripped of electrons.  That is, a plasma is composed of 
positive ions and free electrons.  &%Plasma behaves differently enough from 
&%Gas that it is referred to as the fourth state of matter."}%
. subclass(PerceptualAttribute, InternalAttribute)
%{PerceptualAttribute
"Any &%Attribute whose presence is detected 
by an act of &%Perception."}%
. instance(vPERCEPTION, Perception)
  /\ patient(vPERCEPTION, vOBJ) =>
      exists vPROP: U
          . instance(vPROP, PerceptualAttribute) /\ attribute(vOBJ, vPROP)
. subclass(TasteAttribute, PerceptualAttribute)
%{TasteAttribute
"The &%Class of &%Attributes relating to 
the taste of &%Objects."}%
. instance(vOBJ, Food) =>
      exists vATTR: U
          . instance(vATTR, TasteAttribute) /\ attribute(vOBJ, vATTR)
. subclass(OlfactoryAttribute, PerceptualAttribute)
%{OlfactoryAttribute
"The &%Class of properties that are 
detectable by smell."}%
. subclass(VisualAttribute, PerceptualAttribute)
%{VisualAttribute
"The &%Class of visually discernible 
properties."}%
. instance(Illuminated, VisualAttribute)
%{Illuminated
"The &%Attribute of &%Regions that are 
illuminated to some degree, i.e. in which some shapes are visually 
discernable."}%
. instance(Unilluminated, VisualAttribute)
. contraryAttribute(Unilluminated, Illuminated)
%{Unilluminated
"The &%Attribute of &%Regions that are 
unilluminated, i.e in which no shapes are visually discernable."}%
. subclass(ColorAttribute, InternalAttribute)
%{ColorAttribute
"The &%Class of &%Attributes relating to the 
color of &%Objects."}%
. subclass(PrimaryColor, ColorAttribute)
%{PrimaryColor
"Colors which can be blended to form any 
color and which cannot be derived from any other colors."}%
. instance(Red, PrimaryColor)
%{Red
"The &%Attribute of redness."}%
. instance(Blue, PrimaryColor)
%{Blue
"The &%Attribute of being blue in color."}%
. instance(Yellow, PrimaryColor)
%{Yellow
"The &%Attribute of being yellow in color."}%
. instance(White, PrimaryColor)
%{White
"The &%Attribute of being white in color."}%
. instance(Black, PrimaryColor)
%{Black
"The &%Attribute of being black in color."}%
. instance(Monochromatic, ColorAttribute)
%{Monochromatic
"An &%Object with this &%Attribute has 
the same color on every part of its surface."}%
. attribute(vOBJ, Monochromatic)
  /\ superficialPart(vPART, vOBJ)
  /\ attribute(vPART, vCOLOR)
  /\ instance(vCOLOR, PrimaryColor) =>
      forall vELEMENT: U
          . superficialPart(vELEMENT, vOBJ) => attribute(vELEMENT, vCOLOR)
. instance(vOBJ, Object) =>
      attribute(vOBJ, Monochromatic) \/ attribute(vOBJ, Polychromatic)
. instance(Polychromatic, ColorAttribute)
. contraryAttribute(Polychromatic, Monochromatic)
%{Polychromatic
"An &%Object with this &%Attribute has 
different colors on different parts of its surface."}%
. attribute(vOBJ, Polychromatic) =>
      exists vPART1: U; vPART2: U; vCOLOR1: U; vCOLOR2: U
          . superficialPart(vPART1, vOBJ)
            /\ superficialPart(vPART2, vOBJ)
            /\ attribute(vPART1, vCOLOR1)
            /\ attribute(vPART2, vCOLOR2)
            /\ instance(vCOLOR1, ColorAttribute)
            /\ instance(vCOLOR2, ColorAttribute)
            /\ not vCOLOR1 = vCOLOR2
. subclass(ShapeAttribute, InternalAttribute)
%{ShapeAttribute
"Any &%Attribute that relates to the 
shape of an &%Object."}%
. instance(vATTRIBUTE, ShapeAttribute)
  /\ attribute(vOBJ, vATTRIBUTE)
  /\ surface(vSURFACE, vOBJ) =>
      attribute(vSURFACE, vATTRIBUTE)
. instance(Pliable, InternalAttribute)
%{Pliable
"The shape of an &%Object with this &%Attribute 
can easily be altered."}%
. (exists vCHANGE: U
       . instance(vCHANGE, ShapeChange) /\ patient(vCHANGE, vOBJ)) =>
      attribute(vOBJ, Pliable)
. instance(Rigid, InternalAttribute)
. contraryAttribute(Rigid, Pliable)
%{Rigid
"The shape of an &%Object with this &%Attribute 
cannot be altered without breaking."}%
. subclass(TextureAttribute, PerceptualAttribute)
%{TextureAttribute
"Any &%Attribute that characterizes the 
texture of an &%Object."}%
. instance(vATTRIBUTE, TextureAttribute)
  /\ attribute(vOBJ, vATTRIBUTE)
  /\ surface(vSURFACE, vOBJ) =>
      attribute(vSURFACE, vATTRIBUTE)
. instance(Smooth, TextureAttribute)
%{Smooth
"An &%Object with this &%Attribute has a smooth 
surface."}%
. instance(Rough, TextureAttribute)
. contraryAttribute(Smooth, Rough)
%{Rough
"An &%Object with this &%Attribute has a rough 
surface."}%
. subclass(GeometricFigure, ShapeAttribute)
. partition(GeometricFigure, GeometricPoint, OneDimensionalFigure,
            TwoDimensionalFigure, ThreeDimensionalFigure)
%{GeometricFigure
"The class of all geometric figures, i.e. the 
class of all abstract, spatial representations.  The instances of this class 
are &%GeometricPoints, &%TwoDimensionalFigures or &%ThreeDimensionalFigures."}%
. subclass(GeometricPoint, GeometricFigure)
%{GeometricPoint
"The class of zero-dimensional 
&%GeometricFigures, i.e. the class of &%GeometricFigures that have position 
but lack extension in any dimension."}%
. subclass(OneDimensionalFigure, GeometricFigure)
%{OneDimensionalFigure
"The class of &%GeometricFigures that 
have position and an extension along a single dimension, viz. straight lines."}%
. subclass(TwoDimensionalFigure, GeometricFigure)
. partition(TwoDimensionalFigure, OpenTwoDimensionalFigure,
            ClosedTwoDimensionalFigure)
%{TwoDimensionalFigure
"The class of &%GeometricFigures that 
have position and an extension along two dimensions, viz. plane figures 
like circles and polygons."}%
. subclass(OpenTwoDimensionalFigure, TwoDimensionalFigure)
%{OpenTwoDimensionalFigure
"The class of &%TwoDimensionalFigures that 
are not &%ClosedTwoDimensionalFigures."}%
. subclass(TwoDimensionalAngle, OpenTwoDimensionalFigure)
%{TwoDimensionalAngle
"Any two &%OneDimensionalFigures (i.e. 
straight lines) meeting at a single &%GeometricPoint."}%
. subclass(ClosedTwoDimensionalFigure, TwoDimensionalFigure)
%{ClosedTwoDimensionalFigure
"Any &%TwoDimensionalFigure which 
has a well defined interior and exterior."}%
. subclass(ThreeDimensionalFigure, GeometricFigure)
%{ThreeDimensionalFigure
"The class of &%GeometricFigures that 
have position and an extension along three dimensions, viz. geometric solids 
like polyhedrons and cylinders."}%
. instance(geometricPart, BinaryPredicate)
. instance(geometricPart, PartialOrderingRelation)
. domain(geometricPart, a_1, GeometricFigure)
. domain(geometricPart, a_2, GeometricFigure)
%{geometricPart
"(&%geometricPart ?PART ?WHOLE) means that the 
&%GeometricFigure ?PART is part of the &%GeometricFigure ?WHOLE."}%
. subrelation(pointOfFigure, geometricPart)
. domain(pointOfFigure, a_1, GeometricPoint)
. domain(pointOfFigure, a_2, GeometricFigure)
%{pointOfFigure
"(&%pointOfFigure ?POINT ?FIGURE) means that 
the &%GeometricPoint ?POINT is part of the &%GeometricFigure ?FIGURE."}%
. subrelation(angleOfFigure, geometricPart)
. domain(angleOfFigure, a_1, TwoDimensionalAngle)
. domain(angleOfFigure, a_2, GeometricFigure)
%{angleOfFigure
"(&%angleOfFigure ?ANGLE ?FIGURE) means that 
the &%TwoDimensionalAngle ?ANGLE is part of the &%GeometricFigure ?FIGURE."}%
. instance(pointOfIntersection, TernaryPredicate)
. domain(pointOfIntersection, a_1, OneDimensionalFigure)
. domain(pointOfIntersection, a_2, OneDimensionalFigure)
. domain(pointOfIntersection, a_3, GeometricPoint)
%{pointOfIntersection
"(&%pointOfIntersection ?FIGURE1 ?FIGURE2 
?POINT) means that the two straight lines ?FIGURE1 and ?FIGURE2 meet at the 
point ?POINT."}%
. pointOfIntersection(vFIGURE1, vFIGURE2, vPOINT) =>
      pointOfFigure(vPOINT, vFIGURE1) /\ pointOfFigure(vPOINT, vFIGURE2)
. instance(parallel, BinaryPredicate)
. domain(parallel, a_1, OneDimensionalFigure)
. domain(parallel, a_2, OneDimensionalFigure)
%{parallel
"(&%parallel ?LINE1 ?LINE2) means that the 
&%OneDimensionalFigures ?LINE1 and ?LINE2 are parallel to one another, 
i.e. they are equidistant from one another at every point."}%
. parallel(vLINE1, vLINE2) =>
      not (exists vPOINT: U
               . pointOfIntersection(vLINE1, vLINE2, vPOINT))
. instance(angularMeasure, BinaryPredicate)
. instance(angularMeasure, TotalValuedRelation)
. domain(angularMeasure, a_1, TwoDimensionalAngle)
. domain(angularMeasure, a_2, PlaneAngleMeasure)
%{angularMeasure
"(&%angularMeasure ?ANGLE ?MEASURE) means that 
the two-dimensional geometric angle ?ANGLE has the &%PlaneAngleMeasure of 
?MEASURE."}%
. instance(lineMeasure, BinaryPredicate)
. instance(lineMeasure, TotalValuedRelation)
. domain(lineMeasure, a_1, OneDimensionalFigure)
. domain(lineMeasure, a_2, LengthMeasure)
%{lineMeasure
"(&%lineMeasure ?LINE ?MEASURE) means that the 
straight line ?LINE has the &%LengthMeasure of ?MEASURE."}%
. instance(geometricDistance, TernaryPredicate)
. instance(geometricDistance, SingleValuedRelation)
. instance(geometricDistance, TotalValuedRelation)
. domain(geometricDistance, a_1, GeometricPoint)
. domain(geometricDistance, a_2, GeometricPoint)
. domain(geometricDistance, a_3, LengthMeasure)
%{geometricDistance
"(&%geometricDistance ?POINT1 ?POINT2 
?LENGTH) means that ?LENGTH is the distance between the two 
&%GeometricPoints ?POINT1 and ?POINT2."}%
. geometricDistance(vPOINT1, vPOINT2, vLENGTH) =>
      geometricDistance(vPOINT2, vPOINT1, vLENGTH)
. subclass(SaturationAttribute, InternalAttribute)
%{SaturationAttribute
"A &%Class of &%Attributes that specify, in 
a qualitative manner, the extent of the presence of one kind of &%Object in 
another kind of &%Object."}%
. instance(Dry, SaturationAttribute)
. contraryAttribute(Dry, Damp)
%{Dry
"An &%Attribute which indicates that the associated 
&%Object contains no &%Liquid."}%
. attribute(vOBJ, Dry) =>
      not (exists vSUBOBJ: U
               . part(vSUBOBJ, vOBJ) /\ attribute(vSUBOBJ, Liquid))
. instance(Damp, SaturationAttribute)
%{Damp
"An &%Attribute which indicates that the associated 
&%Object contains some &%Liquid."}%
. instance(Wet, SaturationAttribute)
. subAttribute(Wet, Damp)
%{Wet
"An &%Attribute which indicates that the 
associated &%Object is fully saturated with a &%Liquid, i.e. 
every part of the &%Object has a subpart which is a &%Liquid."}%
. attribute(vOBJ, Wet) =>
      forall vPART: U
          . part(vPART, vOBJ) =>
                exists vSUBPART: U
                    . part(vSUBPART, vPART) /\ attribute(vSUBPART, Liquid)
. subclass(BiologicalAttribute, InternalAttribute)
%{BiologicalAttribute
"&%Attributes that apply specifically 
to instances of &%Organism."}%
. attribute(vORG, vATT) /\ instance(vATT, BiologicalAttribute) =>
      instance(vORG, Organism)
. subclass(BodyPosition, BiologicalAttribute)
%{BodyPosition
"The class of &%Attributes expressing 
configurations of bodies or parts of bodies of animals or humans, 
e.g. standing, sitting, kneeling, lying down, etc."}%
. instance(vANIMAL, Animal) =>
      (exists vMOTION: U
           . instance(vMOTION, BodyMotion) /\ agent(vMOTION, vANIMAL))
      \/ (exists vATTR: U
              . instance(vATTR, BodyPosition) /\ attribute(vANIMAL, vATTR))
. instance(Standing, BodyPosition)
%{Standing
"The &%BodyPosition of being upright, i.e. being 
fully extended and supported by nothing other than one's own feet."}%
. instance(vAMBULATE, Ambulating) /\ agent(vAMBULATE, vAGENT) =>
      attribute(vAGENT, Standing)
. instance(Sitting, BodyPosition)
%{Sitting
"The &%BodyPosition of being recumbent, i.e. 
knees bent and back side supported."}%
. instance(Prostrate, BodyPosition)
%{Prostrate
"The &%BodyPosition of lying down, being in a 
horizontal position."}%
. subclass(AnimacyAttribute, BiologicalAttribute)
. exhaustiveAttribute(AnimacyAttribute, Living, Dead)
%{AnimacyAttribute
"&%Attributes that indicate whether an 
&%Organism is alive or not."}%
. instance(Living, AnimacyAttribute)
%{Living
"This &%Attribute applies to &%Organisms that are 
alive."}%
. instance(vORGANISM, Organism) /\ agent(vPROCESS, vORGANISM) =>
      holdsDuring(WhenFn(vPROCESS), attribute(vORGANISM, Living))
. instance(Dead, AnimacyAttribute)
. subAttribute(Dead, Unconscious)
. contraryAttribute(Dead, Living)
%{Dead
"This &%Attribute applies to &%Organisms that are 
not alive."}%
. instance(vORG, Organism) =>
      exists vATTR: U
          . instance(vATTR, AnimacyAttribute) /\ attribute(vORG, vATTR)
. subclass(SexAttribute, BiologicalAttribute)
. exhaustiveAttribute(SexAttribute, Female, Male)
%{SexAttribute
"&%Attributes that indicate the sex of an 
&%Organism."}%
. instance(Female, SexAttribute)
%{Female
"An &%Attribute indicating that an &%Organism is 
female in nature."}%
. instance(vBODY, ReproductiveBody)
  /\ part(vBODY, vORG)
  /\ instance(vORG, Organism) =>
      attribute(vORG, Female)
. instance(Male, SexAttribute)
. contraryAttribute(Male, Female)
%{Male
"An &%Attribute indicating that an &%Organism is 
male in nature."}%
. instance(vANIMAL, Animal) =>
      exists vATTR: U
          . instance(vATTR, SexAttribute) /\ attribute(vANIMAL, vATTR)
. subclass(DevelopmentalAttribute, BiologicalAttribute)
. exhaustiveAttribute(DevelopmentalAttribute, FullyFormed,
                      NonFullyFormed)
%{DevelopmentalAttribute
"&%Attributes that indicate the 
stage of development of an &%Organism."}%
. instance(FullyFormed, DevelopmentalAttribute)
%{FullyFormed
"The stage of an &%Organism when it has reached 
the end of its growth phase."}%
. attribute(vOBJ, FullyFormed) =>
      exists vGROWTH: U
          . instance(vGROWTH, Growth)
            /\ experiencer(vGROWTH, vOBJ)
            /\ holdsDuring(BeginFn(WhenFn(vOBJ)),
                           attribute(vOBJ, NonFullyFormed))
. instance(NonFullyFormed, DevelopmentalAttribute)
. contraryAttribute(NonFullyFormed, FullyFormed)
. successorAttribute(NonFullyFormed, FullyFormed)
%{NonFullyFormed
"The stage of an &%Organism before it is 
&%FullyFormed."}%
. instance(vORG, Organism) =>
      exists vATTR: U
          . instance(vATTR, DevelopmentalAttribute) /\ attribute(vORG, vATTR)
. subAttribute(Larval, NonFullyFormed)
%{Larval
"Form of most &%Invertebrates, &%Amphibians, and 
&%Fish immediately after they hatch.  This form is fundamentally unlike 
the adult form, and metamorphosis is required to reach the latter form."}%
. holdsDuring(vTIME, attribute(vORG, Larval)) =>
      holdsDuring(PastFn(vTIME),
                  True
                      when exists vBIRTH: U
                               . instance(vBIRTH, Birth)
                                 /\ experiencer(vBIRTH, vORG)
                      else False)
. subAttribute(Embryonic, NonFullyFormed)
. contraryAttribute(Embryonic, Larval)
%{Embryonic
"The stage of an &%Organism or an 
&%AnatomicalStructure that exists only before the &%Organism is born.  
&%Mammals, for example, have this &%Attribute only prior to 
their birth."}%
. attribute(vORG, Embryonic) =>
      exists vBODY: U
          . instance(vBODY, ReproductiveBody) /\ located(vORG, vBODY)
. holdsDuring(vTIME, attribute(vORG, Embryonic)) =>
      holdsDuring(vTIME,
                  a_n_o_t(True
                              when exists vBIRTH: U
                                       . instance(vBIRTH, Birth)
                                         /\ experiencer(vBIRTH, vORG)
                              else False))
. subclass(DiseaseOrSyndrome, BiologicalAttribute)
%{DiseaseOrSyndrome
"A &%BiologicalAttribute which qualifies 
something that alters or interferes with a normal process, state or activity 
of an &%Organism.  It is usually characterized by the abnormal functioning of 
one or more of the host's systems, parts, or &%Organs."}%
. subclass(PsychologicalAttribute, BiologicalAttribute)
. partition(PsychologicalAttribute, StateOfMind, TraitAttribute)
%{PsychologicalAttribute
"&%Attributes that characterize the mental 
or behavioral life of an &%Organism."}%
. instance(vATTR, PsychologicalAttribute) =>
      holdsDuring(vTIME, attribute(vORGANISM, vATTR)) =>
          holdsDuring(vTIME, attribute(vORGANISM, Living))
. instance(vATTR, PsychologicalAttribute)
  /\ attribute(vAGENT, vATTR) =>
      instance(vAGENT, SentientAgent)
. subclass(StateOfMind, PsychologicalAttribute)
%{StateOfMind
"The class &%StateOfMind is distinguished from 
its complement &%TraitAttribute by the fact that instances of the former are 
transient while instances of the latter are persistent features of a creature's behavioral/psychological make-up."}%
. subclass(EmotionalState, StateOfMind)
%{EmotionalState
"The &%Class of &%Attributes that denote emotional 
states of &%Organisms."}%
. subclass(ConsciousnessAttribute, StateOfMind)
%{ConsciousnessAttribute
"&%Attributes that indicate whether 
an &%Organism is conscious or the qualitative degree of consciousness of 
an &%Organism."}%
. instance(vAGENT, SentientAgent) /\ attribute(vAGENT, Living) <=>
      (exists vATTR: U
           . instance(vATTR, ConsciousnessAttribute)
             /\ attribute(vAGENT, vATTR))
. instance(Asleep, ConsciousnessAttribute)
%{Asleep
"&%Attribute that applies to &%Organisms that are 
sleeping."}%
. instance(Unconscious, ConsciousnessAttribute)
. contraryAttribute(Unconscious, Awake)
%{Unconscious
"&%Attribute that applies to &%Organisms that 
are unconscious.  An &%Organism may be &%Unconscious because it is &%Dead 
or because of a blow to the head, a drug, etc."}%
. instance(Awake, ConsciousnessAttribute)
%{Awake
"&%Attribute that applies to &%Organisms that are 
neither &%Unconscious nor &%Asleep."}%
. attribute(vAGENT, Asleep) \/ attribute(vAGENT, Awake) =>
      attribute(vAGENT, Living)
. subclass(TraitAttribute, PsychologicalAttribute)
%{TraitAttribute
"&%Attributes that indicate the the 
behavior/personality traits of an &%Organism."}%
. subclass(PsychologicalDysfunction, PsychologicalAttribute)
. subclass(PsychologicalDysfunction, DiseaseOrSyndrome)
%{PsychologicalDysfunction
"A clinically significant 
dysfunction whose major manifestation is behavioral or psychological.  
These dysfunctions may have identified or presumed biological etiologies 
or manifestations."}%

sort U
ops AbnormalAnatomicalStructure, Aborting, Above, AcademicDegree,
    Accelerating, Accountant, Accrediting, Acre, AcuteAngle, Address,
    Aerating, Aerator, AerobicExerciseDevice, Afternoon, Agency, Agent,
    Agriculture, Air, AirForce, AirTransportation, Aircraft, Alcohol,
    AlcoholicBeverage, Alkaloid, AlphabeticCharacter, Alveolus,
    Ambassador, Ambulating, Ambush, AmericanState, AminoAcid,
    Amphibian, Anaconda, AnaerobicExerciseDevice, Anchor, Anger,
    AngularDegree, Animal, AnimalAnatomicalStructure, AnimalController,
    AnimalPoweredDevice, AnimalResidence, AnimalShell, AnimalSubstance,
    AnimalTeam, Ankle, Announcement, Answering, AntInsect,
    AnteMeridiem, Antelope, Antenna, Anthropology, Antibiotic,
    Antibody, Antigen, AntigenA, AntigenB, Antisemitism, Anxiety,
    ApartmentBuilding, ApartmentUnit, Apple, Application, Appointing,
    Apron, Architecture, AreaMeasure, Arguing, Argument, Arm, Army,
    Arriving, ArrowFigure, ArrowIcon, ArrowProjectile, Arson,
    ArtCritic, ArtPainting, ArtSchool, ArtStudio, ArtWork, Artery,
    Article, Artifact, ArtilleryGun, Asleep, AstronomicalBody,
    AsymmetricRelation, AtmosphericPressureMeasure, AtmosphericRegion,
    Atom, AtomicGroup, Atrophy, Attaching, AttachingDevice, Attack,
    Attorney, AttorneyGeneral, AudioRecording, Auditorium,
    AuditoriumSeat, AutomaticGun, Automobile, AutonomicProcess,
    Avocado, Awake, Axle, BacterialDisease, Bag, Baking, Ball,
    BallisticMissile, Ballot, Bandage, Banker, Baptizing, BargainSale,
    Barking, Barn, Baseball, BaseballBase, BaseballBat, BaseballDugout,
    BaseballField, BaseballHit, BaseballInning, BaseballManeuver,
    BaseballRun, BaseballSingle, BaseballSteal, BaseballStrike,
    BaseballTeam, BaseballWalk, Basement, Basketball, Bathing,
    BathingDevice, Bathroom, Baton, Battery, Battle, BecomingDrunk,
    Bed, Bedroom, Bee, Beef, Beer, BeforeCommonEra,
    BeginningOperations, BeliefGroup, Bell, Below, Belt, Bequeathing,
    Beverage, Bicycle, BinaryFunction, BinaryPredicate, BinaryRelation,
    BiochemicalAgent, BiochemicalAttack, BiochemicalWeapon, Biography,
    BiologicalAgent, BiologicalAttribute, BiologicalConception,
    BiologicalProcess, BiologicalSpecies, BiologicalWeapon,
    BiologicallyActiveSubstance, Biology, Biopsy, Bird, BirdEgg, Birth,
    BirthControlDevice, Biting, Blanket, Bleeding, Blind, Bloating,
    Blockade, Blood, BloodCell, BloodTypeA, BloodTypeAB, BloodTypeB,
    BloodTypeO, BloodVessel, Blueprint, Blushing, BoardOrBlock,
    Boarding, BoatDeck, BodyCovering, BodyJoint, BodyJunction,
    BodyMotion, BodyOfWater, BodyPart, BodyPosition, BodySubstance,
    BodyVessel, Bodybuilding, Bomb, Bomber, Bombinb, Bombing, Bone,
    Book, Borrowing, BotanicalTree, Bottle, Bowing, Box, Boxing, Boy,
    Brain, Brandy, Brass, BreadOrBiscuit, BreakabilityAttribute,
    Breast, Breathing, Brick, BrigadierGeneral, BroadcastNetwork,
    BroadcastProgram, Broadcasting, BroadcastingStation, BronchialDuct,
    Brood, Broom, Brown, BrushOrComb, Bubble, Buffalo, Bugle, Building,
    BuildingLevel, Bull, Bullet, BumbleBee, Burrow, Burying, Bus,
    BusStop, BusinessCompetition, BusinessPerson, Butter, Button,
    Cafeteria, Calculating, Calf, Camera, Camp, Campground, Cancer,
    Candle, Canine, Capillary, CaptainOfficer, CarBombing,
    Carbohydrate, Carbon, CareOrganization, Carnivore, Carpenter,
    Carrying, CaseRole, Catching, CausingHappiness, CausingPain,
    CausingUnhappiness, CavalryUnit, Cave, CeasingOperations, Ceiling,
    Celebrity, Cell, CellNucleus, Cellulose, CelsiusDegree, Cement,
    Cemetery, CenterOfCircleFn, CentrifugalMotion, CentripetalMotion,
    Century, CerealGrain, Certificate, Chair, ChangeOfPossession,
    ChangingClothing, Chapter, Character, Chart, Checkpoint,
    ChemicalAcid, ChemicalAgent, ChemicalAttack, ChemicalBase,
    ChemicalDecomposition, ChemicalEquilibrium, ChemicalProcess,
    ChemicalReduction, ChemicalSalt, ChemicalSynthesis, ChemicalWeapon,
    Chemistry, ChestOrCabinet, Chewing, Chicken, ChickenMeat, Chimney,
    Chin, Chlorine, Cholesterol, Choreographing, ChristianBible,
    ChristianGospel, ChristianService, Christianity, Chromatography,
    CigarOrCigarette, Circle, CircleSector, CitizenryFn, City,
    CityBlock, CityDistrict, CityGovernment, CivilWar, Civilan,
    Civilian, Clamp, Clapping, Class, Classroom, Clay, Cleric,
    ClericalSecretary, Cloak, Clock, ClosedTwoDimensionalFigure,
    Closet, Closing, ClosingContract, ClosingEyes, Clothing,
    ClothingSuit, Coach, CoastGuard, Coat, Coconut, Coffee, Coffin,
    CognitiveAgent, Collage, Collar, Collection, College,
    CollegeFreshman, CollegeJunior, CollegeSenior, CollegeSophomore,
    CollegeStudentPosition, Colonel, ColorAttribute, Coloring,
    Combining, Combustion, Comedian, CommercialAgent,
    CommercialBuilding, CommercialService, CommercialShipping,
    CommercialUnit, Commission, Committing, CommonEra, Communication,
    CommunicationDevice, CommunicationOrganization,
    CommunicationSystem, CommunistParty, Compartment, Compass,
    Composing, ComposingMusic, CompoundSubstance, Concealing,
    Concentrating, CondominiumBuilding, CondominiumUnit, Cone,
    ConfederateSoldier, ConfederateStatesOfAmerica, Confining,
    Congratulating, ConjugatedSubstance, ConsciousnessAttribute,
    Consonant, ConstantQuantity, ConstrictorSnake, Constructing,
    Container, ContainerEmpty, ContainerFull, ContentBearingObject,
    ContentDevelopment, Contest, ContestAttribute, ContraceptiveDevice,
    Contract, Convoy, Cooking, CoolingDevice, Copper, Copying, Corn,
    Coroner, Corporal, Corporation, CorpuscularObject, Corresponding,
    Cotton, CottonFabric, CourtRoom, Covering, Cow, Crane, CreditUnion,
    Creek, CriminalAction, CriminalGang, CultivatedLandArea, Cup, Curb,
    CurrencyMeasure, Curtain, Cutting, CuttingDevice, Cylinder,
    Damaging, DateFruit, Day, DaySchool, DayTime, Deacon, Dead, Deaf,
    Death, Debating, Deboarding, Decade, Decelerating, Deciding,
    Declaring, Decreasing, DemocraticParty, Demonstrating, Dentist,
    DeonticAttribute, Depressant, Deputy, DescendantsFn, Desk,
    Destruction, Detaching, Detergent, Device, DeviceAttribute,
    DeviceClosed, DeviceOff, DeviceOn, DeviceOpen,
    DeviceStateAttribute, DiagnosticProcess, Dialysis, DiameterFn,
    Diamond, Diarrhea, Dictionary, DieselEngine, Diet, Digesting,
    Digging, DigitAppendage, DigitCharacter, Diluting, DiningRoom,
    Diplomat, DiplomaticAgent, Discovering, DiseaseOrSyndrome, Dish,
    Dismounting, DisplayArtifact, DisplayBoard, Disseminating,
    Dissident, DistilledAlcoholicBeverage, Divorcing, Documentary,
    Dodging, DomesticAnimal, DomesticCat, DomesticDog, Donkey, Door,
    Doorway, Dormitory, Dough, Downstairs, Downtown, DramaticActing,
    DramaticCast, DramaticDirecting, DramaticPerformance, DramaticPlay,
    Drawing, Dreaming, Dress, Dressing, DressingRoom, Drilling,
    Dripping, DriveComponent, DriversLicense, Driveway, DrugStore,
    Drugged, Drum, Drunk, Duck, Ducking, DutyTax, Ear, EarthTremor,
    Eating, Echoing, EconomicAttribute, EconomicRelation, Economics,
    EducationalCourse, EducationalFacility, EducationalOrganization,
    EducationalProcess, EducationalProgram, Egg, Elbow,
    ElectoralCollegeElection, ElectricDevice, ElectricMotor,
    ElectricalSignalling, ElectrifiedRailwayCar, Electron,
    ElectronicSignalling, Electronics, Elephant, Elevator, Embassy,
    Embracing, EmotionalState, Emphysema, EmploymentFiring, Engine,
    Engineering, EngineeringComponent, EnglishLanguage,
    EntertainmentBuilding, EntertainmentCompany,
    EntertainmentProfession, Entity, Entombing, Envelope, Escaping,
    Espionage, EuropeanNation, Excitement, Execution,
    ExecutiveResidence, Exhaling, Experimenting, Explosion,
    ExplosiveDevice, ExplosiveMine, ExplosiveSubstance, Expressing,
    ExpressingApproval, ExpressingDisapproval, ExpressingFarewell,
    ExpressingInLanguage, Eye, EyeGlass, EyeMotion, Eyelid, Fabric,
    Face, FacialExpression, FacialHair, Fact, Factory, FactualText,
    FallSeason, Falling, FallingAsleep, Fallout, False, FamilyBusiness,
    FamilyGroup, FanDevice, Farm, FarmBuilding, FarmHand, Farming,
    Feather, Feeding, Feline, Female, FemaleCow, Fence, Fever,
    FictionalText, Field, FieldOfLaw, FieldOfStudy, Fighter,
    FileDevice, FilmDirector, FilmMaking, FilmMakingProfession,
    FilmProducer, Filter, FinancialAccount, FinancialBill,
    FinancialCompany, FinancialService, FinancialText,
    FinancialTransaction, Financing, Finger, Fingerprint,
    FiniteQuantity, Firearm, Fireplace, FirstFn, FishMeat, Fist, Flag,
    Flooding, Floor, Florida, Flour, Flower, FloweringPlant, Fluid,
    FluidContainer, FlyInsect, Flying, Focusing, Fodder, Fog, Folding,
    Food, Foot, FootLength, Football, FootballManeuver, FootballPass,
    FootballTeam, FootballTouchdown, ForeignServicePosition, Form,
    FormOfGovernment, FormText, FormalMeeting, Formula, FossilFuel,
    Foul, Founding, Fox, Fragile, FreeAtom, FrenchLanguage,
    FreshWaterArea, Frightening, Frowning, FruitOrVegetable, Fuel,
    FullTimePosition, FunctionQuantity, Functioning, Funding, Funeral,
    Furniture, GainingConsciousness, Game, GameArtifact, GameAttribute,
    GameBoard, GameCall, GameDie, GameGoal, GamePiece, GameReferee,
    GameShot, Garage, GasolineEngine, Gastropod, GeneralElection,
    GeographicArea, GeometricFigure, GeometricPoint, GeopoliticalArea,
    GermanLanguage, Gesture, Getting, Girl, Giving, Gland, Glass,
    Glove, Glue, Goiter, Golf, GolfHole, GolfManeuver, Goose,
    Government, GovernmentBuilding, GovernmentOfficer,
    GovernmentOrganization, GovernmentPerson, GovernmentSecretary,
    Governor, Grabbing, GraduateSchool, Graduation, Graph,
    GraphDiagram, Grass, Grasshopper, Gray, GrayColor, GreekLanguage,
    Green, Greeting, GroceryStore, Group, GroupOfAnimals,
    GroupOfPeople, Guiding, Guitar, Gun, GunBarrel, GunPowder,
    GunStock, GunTrigger, Gymnastics, Hair, HairRemoval, Hammer, Hand,
    HandGesture, HandGrenade, HandgrenadeAttack, Handle, Handstand,
    Hanging, Happiness, Harvesting, Hat, Hay, Head, Headache,
    Headlight, Hearing, Heart, Heating, HeatingDevice, Helicopter, Hen,
    Herbivore, HighSchool, Hijacking, Hinge, HistoricalAccount,
    History, HoistingDevice, Holder, Hole, HolidayCard, Holster,
    HolyBible, HomeBase, HomeRun, Honey, Hoof, HoofedMammal, Hormone,
    HormoneTSH, Horn, HornInstrument, Horse, HorseRiding, Horsepower,
    Hospital, HostageTaking, Hotel, House, Housewife, Human,
    HumanAdult, HumanBaby, HumanChild, HumanCorpse, HumanSlave,
    HumanYouth, Hungry, Hunting, Hydrocarbon, Hydrogen, Hypothalamus,
    Ice, Icon, Illegal, IlluminationDevice, Imagining, Immigrating,
    Impacting, Impelling, Imprisoning, IncendiaryDeviceAttack,
    Inclining, IncomeTax, Increasing, Indicating, IndustrialPlant,
    Industry, InfantryUnit, InfectiousDisease, Infiltration,
    InfiniteQuantity, InformationMeasure, Inhaling, Inheriting,
    Injuring, Insect, Inserting, Installing, InstrumentalMusic,
    Insulin, InsuranceCompany, InsurancePolicy, Integer,
    IntentionalProcess, InteriorDesign, InternalAttribute,
    InternalChange, InternalCombustionEngine, InternationalLaw,
    Interviewing, Intestine, Investigating, Ion, Iron,
    IrreflexiveRelation, Ivory, Janitor, JoiningAnOrganization,
    Journalist, Judaism, Judge, JudicialProcess, Jumping,
    JuniorCollege, Jury, Keeping, Key, Kicking, Kidnapping, Kidney,
    Killing, Kissing, Kitchen, Knee, Kneeling, Knife, KnifeAttack,
    Knight, Knuckle, Label, LaborStriking, Laboratory, Ladder, Lamb,
    LandArea, LandTransportation, LandVehicle, Landing, Language,
    LastFn, LatinLanguage, Laughing, Law, LawEnforcement, Lawn,
    LayingEggs, Leader, Learning, Leather, Leaving, Lecture, Leg,
    Legal, LegalAction, LegalAppeal, LegalAquittal, LegalAward,
    LegalCharge, LegalConviction, LegalDecision, LegalDismissal,
    LegalOpinion, LegalSummons, LegislativeBill,
    LegislativeOrganization, LemonFruit, LengthMeasure, Lengthening,
    Lens, Lesion, Letter, LetterBombAttack, LevelShape, Library,
    License, Licking, Lieutenant, LieutenantGovernor, LightFixture,
    Lightning, LilacFlower, Limb, LineFormation, LinguisticAttribute,
    LinguisticCommunication, Linguistics, Lip, LiquefiedPetroleumGas,
    Liquid, LiquidBodySubstance, LiquidMotion, LiquorShot, List,
    LiteracyAttribute, Literature, Liver, LoadingWeapon, Lock,
    LosingConsciousness, Lost, Lung, LyingDown, Lynching, Lyrics,
    Magazine, Magnetism, Maid, Mailbox, Mailing, Maintaining,
    MajorGeneral, Making, Malfunctioning, Mammal, Man, Managing,
    Maneuver, Manifold, ManualLabor, Manufacture, Map, Marble,
    Marketplace, MarriageContract, Marshal, MassMeasure, Massaging,
    Mast, MatchDevice, MaterialHandlingEquipment, Mathematics, Mating,
    Matriculation, Mayor, Measuring, MeasuringDevice, Meat,
    MediaOrganization, MedicalClinic, MedicalDoctor, MedicalSchool,
    MedicalScience, Medicine, Meeting, Memorizing, Menstruation,
    MercantileOrganization, Message, Messaging, Metal, MetallicAlloy,
    Meteorite, Meteoroid, MetricTon, Microorganism, Microphone,
    Microscope, Militant, MilitaryAircraft, MilitaryArtifact,
    MilitaryBrigade, MilitaryCompany, MilitaryCorps, MilitaryDivision,
    MilitaryFront, MilitaryGeneral, MilitaryInfiltration,
    MilitaryInstallation, MilitaryManeuver, MilitaryOfficer,
    MilitaryOrganization, MilitaryPerson, MilitaryPlatoon,
    MilitaryPrivate, MilitaryProcess, MilitaryRegiment,
    MilitaryReserveForce, MilitaryScience, MilitaryService,
    MilitaryShip, MilitarySquad, MilitarySurplus, MilitaryTank,
    MilitaryUnit, MilitaryVehicle, MilitaryWatercraft, Milk,
    Millennium, Mine, MineOrWell, Mineral, Mirror, Missile,
    MissionOrganization, Mixture, MobileResidence, ModellingPosition,
    ModernMilitaryOrganization, Molecule, Mollusk, MonophonicMusic,
    Monument, Morning, Mortar, MortarAttack, MortarGun, Moth, Motion,
    MotionDownward, MotionPicture, MotionPictureScene,
    MotionPictureShot, MotionUpward, Motorcycle, MotorizedRailwayCar,
    Mounting, Mouse, Mouth, MovingResidence, Mule, Murder, Museum,
    Music, MusicalComposition, MusicalInstrument, MusicalPerformance,
    MysteryStory, Nail, NailDigit, NarrativeText, Nation, NationalFlag,
    NaturalLanguage, NaturalSubstance, NaziParty, Near, Neck, Nectar,
    Negotiating, NerveCell, NervousSystem, Nest, Neurosis,
    NewTestament, NewsProgram, NewsReporter, Newspaper, NightTime,
    Nodding, NonFullyFormed, NonprofitOrganization, NonspecificDisease,
    Nose, Nostril, NounPhrase, Novel, NuclearWeapon, Number, OakWood,
    Oar, Object, ObjectAttitude, ObjectiveNorm, ObliqueAngle,
    OccupationFn, OccupationalRole, OccupationalTrade, Offering,
    OfferingForSale, OfferingToPurchase, OfficeBuilding, Oil, OilPaint,
    OilPicture, OldTestament, OlympicGames, OneDimensionalFigure,
    Opening, OpeningEyes, Opera, Opium, OpticalDevice, OrangeColor,
    OrangeFruit, Orchestra, OrchestralConducting, Order, Ordering,
    Organ, OrganOrTissueProcess, OrganicCompound, OrganicObject,
    Organification, Organism, OrganismProcess, Organization,
    OrganizationalBoard, OrganizationalMerging, OrganizationalProcess,
    Orthography, Ossification, OutdoorClothing, OuterSpaceRegion,
    Outside, Oval, Oven, Owl, Oxidation, Oxygen, Page, Pain, Paint,
    PaintedPicture, Painting, Pancreas, Paper, Paragraph, Park,
    ParkingLot, PartTimePosition, Partnership, PartyPlatform,
    PassCertificate, PassingABill, Passport, PathologicProcess, Pea,
    PeaceKeepingMission, PearFruit, Peeling, Pencil, PensionPlan,
    PerCapitaFn, PercussionInstrument, Performance, PerformanceAct,
    PerformanceProgram, PerformanceStage, PerformanceStageWing,
    Periodical, PeriodicalPublisher, PermanentResidence, Permission,
    PetroleumProduct, Pharmacist, Philosophy, Photograph,
    PhotographicFilm, Photographing, Phrase, Physical,
    PhysicalQuantity, Physics, Physiology, Piano, PictureFrame, Pigeon,
    Pillow, Pink, Pipeline, Pistol, PitchersMound, Pitching,
    PituitaryGland, PlaceOfCommerce, PlaceOfWorship, Plan, PlanetEarth,
    Planning, PlantAnatomicalStructure, PlantBranch, PlantLeaf,
    PlantRoot, PlantSubstance, PlayingCard, Pleading, Pliable, Plug,
    Plumber, Pocket, PoliceCaptain, PoliceDetective, PoliceFacility,
    PoliceOfficer, PoliceOrganization, PolicePerson, PoliceSergeant,
    PoliticalCrime, PoliticalFigure, PoliticalOrganization,
    PoliticalParty, PoliticalProcess, PoliticalRevolution,
    PoliticalScience, PoliticoEconomicAttribute, Polling, Polygon,
    PolyphonicMusic, Pope, PopularElection, Porch, Pork, Portrait,
    Position, PositionalAttribute, PositiveInteger, PostMeridiem,
    PostSecondarySchool, PotOrPan, Potter, Pottery, PoundMass, Pouring,
    Powder, PoweredVehicle, Praying, Pregnant, PreparedFood,
    PresidentOfTheUnitedStates, PressureMeasuringDevice, Pretending,
    PrimaryColor, Primate, Prison, PrivateDetective, PrivateSchool,
    Procedure, Process, Proclaiming, Product, Profession, Professor,
    ProfitSharingPlan, Prohibition, Projectile, ProjectileLauncher,
    ProjectileShell, ProjectionScreen, PropositionalAttitude,
    Proprietorship, Prostrate, Protein, Proton, Protozoa,
    PsychologicalDysfunction, PsychologicalProcess, Psychology,
    Psychosis, Puberty, PublicDefender, PublicLibrary, PublicPark,
    PublicProsecutor, PublicSchool, Publication, Publisher, Pulling,
    PulmonaryArtery, PulmonaryVein, Pump, Punching, Punishing,
    PureSubstance, Purple, Pursuing, Putting, PuttingOnClothing,
    Quadrilateral, Quantity, QuantityChange, QuaternaryFunction,
    QuaternaryPredicate, QueenInsect, Question, Questioning, Rabbit,
    Racing, Radar, RadarOrSonar, Radiating, RadiatingElectromagnetic,
    RadiatingInfrared, RadiatingLight, RadiatingNuclear,
    RadiatingSound, RadiatingSoundUltrasonic, RadiatingUltraviolet,
    RadiatingVisibleLight, Radio, RadioBroadcasting, RadioEmission,
    RadioReceiver, RadioactiveWeapon, RadiologicalWeapon, Radish,
    RadiusFn, RailTransportationSystem, RailroadCompany, Ramp, Raping,
    Rat, RationalNumber, Rattlesnake, RawFood, Reading, RealNumber,
    RearWindow, ReceiverDevice, Reciting, RecordAlbum,
    RecoveringFromIllness, RecreationOrExercise,
    RecreationOrExerciseDevice, Rectangle, RedBloodCell,
    RedcoatSoldier, ReferenceBook, ReferenceText,
    RefinedPetroleumProduct, Reflecting, ReflectingLight,
    ReflexiveProcess, Refrigerator, Region, Registering, Regretting,
    RegulatoryProcess, RelationalAttribute, RelievingPain,
    ReligiousBuilding, ReligiousFigure, ReligiousOrganization,
    ReligiousPosition, ReligiousProcess, ReligiousService, Remembering,
    Reminding, Removing, RemovingClothing, Renting, Replication,
    Report, Reptile, RepublicanParty, Request, Requesting, Researcher,
    Residence, ResidentFn, ResidentialBuilding, Resigning, Resistor,
    Resolution, Restaurant, RetailStore, Retina, Retired, Retiring,
    Returning, Reversing, RevolverGun, Rice, Rifle, RightAngle,
    RightTriangle, Ringing, River, Road, RoadTransportationSystem,
    RoadVehicle, Roadway, Robbing, Rock, Rocket, RocketMissileAttack,
    Rodent, RollingStock, Roof, Room, Rooster, Rotating, Rotor, Rowing,
    Rubber, Rug, RussianLanguage, Saddle, SafeContainer, Sailor, Sales,
    SalesPosition, SalineSolution, Sandwich, Satisfaction, Saturday,
    Saving, SavingsAndLoan, Scar, Scholarship, School, Science, Score,
    Screw, Sculpture, SeasonOfYear, Seat, Seating, SecondaryColor,
    SecondarySchool, SecretaryOfTheInterior, SecretaryOfTheTreasury,
    SecurityAlarm, SecurityDevice, SecurityUnit, Seed, Seeing,
    SeizingProperty, SelfConnectedObject, SelfPoweredDevice,
    SelfPoweredRoadVehicle, Selling, Sentence, Sentencing,
    SentientAgent, Separating, Sergeant, Series, Sermon, Serum,
    ServiceOrganization, ServicePosition, Serving, SewageSystem,
    Sewing, SexualReproduction, ShapeAttribute, ShapeChange, Sharing,
    Sheep, Shelf, Sheriff, Shield, Ship, ShipCaptain, ShipMate,
    ShipOfficer, Shipping, Shirt, Shoe, Shooting, ShoppingMall,
    ShortStory, Shortening, ShotBall, Shoulder, Shrugging, Sidewalk,
    Signalling, Silk, Singing, SingleFamilyResidence,
    SingleValuedRelation, Sinking, Sitting, SittingDown, Skeleton,
    Sketch, SkilledOccupation, Skin, Skull, Skylight, Sleeve, Smelling,
    Smiling, Smoking, SmokingDevice, SmokingPipe, Smuggling, Snake,
    Sober, SoberingUp, SocialParty, SocialRole, SocialScience, Sock,
    Sodium, SodiumChloride, Sofa, Soil, Soldering, Soldier, Solid,
    Solution, Somersaulting, Song, SoundAttribute, SoundRecording,
    SoupStock, SpaceRegion, SpaceTransportation, Spacecraft,
    SpanishLanguage, Speaking, Spear, Sphere, SpinalColumn, SpinalCord,
    Spitting, Spleen, Splitting, SpokenHumanLanguage, Sport,
    SportAttribute, SportServe, SportsAttribute, SportsFacility,
    SportsGround, SportsLeague, SportsOut, SportsPlay, SportsPosition,
    SportsTeam, Spraying, SpringSeason, Square, SquareMile, SquareYard,
    Squatting, Squirrel, StageCoach, Stairway, StandardBearer,
    Standing, StandingUp, Starch, StartFn, Starving, StateGovernment,
    StateOrProvince, Statement, StaticWaterArea, Stating, StatingALie,
    StationaryArtifact, Stealing, SteamEngine, Steel, Steeple,
    SteeringWheel, Stepping, Steps, Steroid, Stimulant, Stirring,
    Stock, Stomach, Stoning, StopFn, Store, StoreOwner, StormFront,
    Stove, Strangling, StreamWaterArea, StreetAddressFn, Streetcar,
    Stressed, Stretching, String, StringInstrument, Student, Submarine,
    Substance, Subway, SubwaySystem, Suffocating, Sugar, Suicide,
    SuicideBombing, SummerSeason, Sunday, Sunlight, Sunrise, Sunset,
    Supposing, Supposition, SurfaceChange, Surfactant, Surgeon,
    Surprise, Swamp, Sweat, Sweeping, SwimmingPool, SwitchDevice,
    Sword, Syllable, SymbolicString, SymmetricRelation, SymmetricShape,
    Table, Tableware, Tail, Taillight, TakingIll, TakingOff, Tape,
    Tavern, Tax, TaxReturn, Taxicab, Tea, Teacher, TeamSport,
    TearSubstance, Teenager, Telegraph, Telephone, TelephoneLine,
    Telephoning, Television, TelevisionBroadcasting,
    TelevisionReceiver, TellingALie, TemperatureMeasure,
    TemporalRelation, TemporaryResidence, Tendon, Tent,
    TerminatingEmployment, TerroristOrganization, TestForm, Testament,
    Testifying, Text, Thanking, TheaterProfession, Theology,
    TherapeuticProcess, Thermometer, Threatening,
    ThreeDimensionalFigure, Throat, Throwing, Thumb, Thunder,
    ThyroidGland, ThyroidHormone, Ticket, TieClothing, TieScore,
    Tilling, TimeDuration, TimeInterval, TimeMeasure, Tissue, Toad,
    Tobacco, Toe, Toilet, Tomb, TonMass, TonalLanguage, Tongue, Tooth,
    Torso, TotalValuedRelation, Touching, Tourist, TouristSite,
    Tracing, TractorTrailer, Trailer, Train, TraitAttribute,
    Tranquility, Transducer, Transfer, TransferringPosition,
    TransitiveRelation, Transitway, Translocation, Transportation,
    TransportationCompany, TransportationDevice, TransportationSystem,
    TrapOrCage, TravelContainer, Tray, Treasurer, Treaty, TreeBranch,
    TreeGraph, Trembling, Tremor, Trespassing, Triangle, Trousers,
    Truck, TruckTractor, TruckTrailer, True, Tube, Tuberculosis, Tumor,
    Turbine, TurningOffDevice, TurningOnDevice, TwoDimensionalAngle,
    Tying, UnaryFunction, Unbreakable, Uncovering, Unemployed,
    Unhappiness, UnilateralGetting, UnilateralGiving,
    UnionOrganization, UnionSoldier, UnionStatesOfAmerica,
    UnitOfMeasure, UnitedKingdomOfGreatBritainAndNorthernIreland,
    UnitedStates, UnitedStatesCongress,
    UnitedStatesDepartmentOfAgriculture,
    UnitedStatesDepartmentOfDefense, UnitedStatesDepartmentOfInterior,
    UnitedStatesDepartmentOfState, UnitedStatesHouseOfRepresentatives,
    UnitedStatesPostalService, UnitedStatesSenate, University,
    UnskilledOccupation, Untying, Upstairs, Urea, Vacationing,
    Vandalism, Vehicle, VehicleAttack, VehicleBrake, VehicleController,
    VehicleLight, VehicleThrottle, VehicleTire, VehicleWheel,
    VehicleWindow, Vein, VendingDevice, Vertebrate, Veteran,
    ViolentContest, Violin, ViralDisease, VocalMusic, Vocalizing,
    VocationalSchool, VolumeMeasure, VotingPoll, Vowel, Vulture,
    Wading, Wagon, WakingUp, Walking, WalkingCane, Wall, Wallpaper,
    War, Warehouse, WashBasin, Washing, WashingDevice, Wastebasket,
    WatchClock, Water, WaterArea, WaterCloud, WaterMotion,
    WaterTransportation, WaterWave, WatercolorPaint, WatercolorPicture,
    Watercraft, Waving, Wax, Weapon, WeaponOfMassDestruction,
    WeatherProcess, Week, Weekend, Weeping, Welfare, Wheat, Wheel,
    Whip, Whiskey, WhiteBloodCell, WholesaleStore, Widowed, WillowTree,
    WindInstrument, Windmill, Window, WindowCovering, Windshield, Wine,
    Wing, WingDevice, Winking, WinterSeason, Wire, WireLine,
    WireSpring, Woman, Won, Wood, WoodArtifact, Wool, Word,
    WorkerInsect, Working, Workshop, Wrist, Writing, WritingDevice,
    WrittenCommunication, XRayRadiation, YardLength, YearDuration,
    Zinc, a_0, a_1, a_1_0, a_1_0_0, a_1_0_0_0, a_1_2, a_1_4, a_1_8,
    a_2, a_2_0, a_2_0_0_0, a_3, a_4, a_6, a_9_0,
    a_C_y_c_l_e_Minus_T_r_a_n_s_p_o_r_t_a_t_i_o_n_D_e_v_i_c_e,
    a_Quot_N_a_C_l_Quot, a_Quot_s_a_l_t_Quot,
    a_m_e_m_b_e_r_s_Minus_C_o_u_n_t, a_r_e_s_u_l_t, address,
    affiliatedOrganization, agent, agentOperatesInArea,
    agreementMember, allegiance, ancestorOrganization, anniversary,
    aunt, believes, birthday, birthplace, brandName, capacity, causes,
    cityAddress, component, conjugate, contestParticipant, cousin,
    customer, defendant, dependentGeopoliticalArea, desires,
    destination, detainee, deviceState, diameter, direction,
    disapproves, dislikes, doubts, electronNumber, enjoys,
    equipmentType, expects, experiencer, experimentalControl,
    familyRelation, fears, financialAccount, financialAsset,
    formerName, geometricPart, grammaticalRelation, grandfather,
    grandmother, groupMember, half, hasExpertise, hasOccupation,
    headquartersOfOrganization, hopes, hostileForces, humanCapacity,
    ideologicalAffiliationOfOrganization, inScopeOfInterest,
    instrument, intelligenceQuotient, inventory, involvedInEvent,
    lacks, landlord, lastName, legalRelation, localLongName,
    localShortName, located, loss, measure, measurementReading,
    medicalPatient, member, middleName, monetaryWage, most,
    multiplicativeFactor, names, needs, neighbor, nephew, niece,
    occupation, older, onboard, parasite, part, path, pathInSystem,
    patient, patientMedical, placeOfDeath, plaintiff, possesses,
    postalBoxNumber, postalCode, potentialOfHydrogen, powerPlant,
    primaryGeopoliticalSubdivision, protonNumber, quarter, radius,
    reactant, reagent, refers, registeredItem, relatedEvent,
    religiousAffiliationOfOrganization, resource, routeInSystem,
    secretesSubstance, sententialObject, sententialSubject,
    sideOfFigure, speaksLanguage, stepfather, stepmother, stockHolder,
    streetAddress, streetNumber, student, subField, subOrganization,
    subProposition, subRegion, tangent, targetInAttack, teacher,
    telephoneNumber, tenant, third, titles, uncle, uniqueIdentifier,
    unitNumber, wants, wavelength, yearOfFounding
        : U;
    BeginFn, BorderFn, CardinalityFn, CitizenryFn, ComplementFn,
    DescendantsFn, EndFn, FirstFn, FutureFn, GovernmentFn,
    ImmediatePastFn, LastFn, ListLengthFn, PastFn, ResidentFn, WhenFn,
    a_n_o_t
        : U -> U;
    AdditionFn, DivisionFn, HourFn, ImmediatePastFn, KappaFn,
    ListOrderFn, MeasureFn, MereologicalSumFn, MultiplicationFn,
    PerCapitaFn, SeriesVolumeFn, SpeedFn, a_a_n_d, a_r_e_s_u_l_t,
    a_t_r_u_e, agent, attribute, believes, bottom, desires,
    destination, electronNumber, expects, grasps, holdsDuring, hole,
    home, instance, knows, lacks, located, measure, meetsSpatially,
    member, members, modalAttribute, part, patient, possesses,
    resource, side, sideOfFigure, spouse, top, wants, wears
        : U * U -> U;
    or, price : U * U * U -> U;
    StreetAddressFn : U * U * U * U -> U
preds hasPurpose, holdsDuring, holdsObligation : U;
      a_m_e_m_b_e_r_s_Minus_C_o_u_n_t, a_r_e_s_u_l_t, a_t_r_u_e, address,
      age, agent, agreementMember, ancestor, angleOfFigure,
      angularMeasure, attribute, authors, believes, bottom, capacity,
      causes, completelyFills, component, conclusion, conjugate,
      connected, consistent, contains, containsInformation,
      contestParticipant, contraryAttribute, cooccur, copy, customer,
      desires, destination, diameter, disapproves, disjoint,
      disjointRelation, dislikes, doubts, duration, earlier,
      electronNumber, employs, enjoys, experiencer, father, fears,
      finishes, geometricPart, geopoliticalSubdivision, greaterThan,
      greaterThanOrEqualTo, half, hasExpertise, hasOccupation,
      hasPurpose, holdsDuring, holdsRight, home, hopes,
      immediateInstance, inhabits, instance, instrument, knows, leader,
      lessThan, lessThanOrEqualTo, lineMeasure, located, location,
      material, measure, medicalPatient, meetsSpatially, meetsTemporally,
      member, modalAttribute, monetaryValue, most, mother, names,
      neighbor, origin, overlapsSpatially, overlapsTemporally, part,
      path, patient, patientMedical, pointOfFigure, possesses,
      properPart, property, protonNumber, radius, range, rangeSubclass,
      realization, refers, relatedInternalConcept, represents, resource,
      sibling, sideOfFigure, starts, student, subAttribute, subField,
      subOrganization, subPlan, subProcess, subclass, subrelation,
      subsumesContentClass, subsumesContentInstance, surface, tangent,
      teacher, temporalPart, time, top, transactionAmount, wants, wears,
      width : U * U;
      between, capability, chiefOfState, confersRight, connects,
      disjointDecomposition, domain, domainSubclass, geometricDistance,
      occupiesPosition, orientation, partition : U * U * U;
      disjointDecomposition, monetaryWage, partition : U * U * U * U;
      partition : U * U * U * U * U;
      disjointDecomposition : U * U * U * U * U * U
vars vA, vACCELERATE, vACCOUNT, vACT, vACTION, vADULT, vAERATOR,
     vAFTERNOON, vAGENT, vAGENT1, vAGENT2, vAIR, vAIR1, vAIR2, vALCOHOL,
     vALLOY, vAMBULATE, vAMOUNT, vANGLE, vANIMAL, vANSWER, vANTENNA,
     vANTI, vAPP, vAREA, vARGUE, vARGUMENT, vARM, vARRIVE, vARTERY,
     vARTIFACT, vATOM, vATTACH, vATTR, vATTRIBUTE, vAUDITORIUM, vAUTO,
     vAUTUMN, vAWARD, vAutomobile, vBABY, vBALL, vBARN, vBASEBALL,
     vBASEMENT, vBATTLE, vBED, vBEFORE, vBEVERAGE, vBIRTH, vBITE,
     vBLANKET, vBLEED, vBLOOD, vBOARD, vBODY, vBOMB, vBONE, vBOOK,
     vBOTTLE, vBOTTOM, vBOX, vBRAIN, vBRASS, vBREATHE, vBROADCAST,
     vBROOD, vBUILDING, vBURN, vC, vCALCULATE, vCALL, vCAMERA, vCAMP,
     vCAR, vCARBON, vCAST, vCATCH, vCELL, vCENTURY, vCHAIR, vCHAPTER,
     vCHARGE, vCHART, vCHEM, vCHEW, vCHICKEN, vCHILD, vCHIN, vCHLORINE,
     vCIGAR, vCIRCLE, vCITIZENRY, vCITY, vCLASS, vCLAY, vCLOCK, vCLOSE,
     vCLOTHING, vCOLL, vCOLLECTION, vCOLLEGE, vCOLOR, vCOMBINE,
     vCOMMISSION, vCOMMIT, vCOMMUNICATE, vCOMP, vCOMPANY, vCOMPOSE,
     vCOMPOUND, vCOMPOUND1, vCOMPOUND2, vCONDUCT, vCONFINE, vCONTAINER,
     vCONTAINER1, vCONTAINER2, vCONTENT, vCONTEST, vCONTRACT, vCOOK,
     vCOPPER, vCOPY, vCORP, vCORPSE, vCOUNTRY, vCOURSE, vCOURSE1,
     vCOURSE2, vCOW, vCRAFT, vCRIME, vCULTURE, vCUP, vCUSTOMER, vD,
     vDAY, vDAY1, vDAY2, vDEATH, vDECADE, vDECISION, vDEGREE, vDEMO,
     vDESCENDANTS, vDEST, vDETERGENT, vDEVICE, vDIALYSIS, vDIRECT,
     vDISCOVER, vDISEASE, vDISSEMINATE, vDISTRICT, vDOCTOR, vDONKEY,
     vDOOR, vDRAW, vDREAM, vDRESS, vDRILL, vDUCT, vE, vEAR, vEAT, vEGOV,
     vELECTRIC, vELECTRON, vEMP, vENTER, vEPISODE, vESCAPE, vEV, vEVENT,
     vEXPERIMENT, vEXPLOSION, vEXPRESS, vEYE, vFABRIC, vFACE, vFACT,
     vFALL, vFARM, vFARMER, vFARMING, vFEED, vFIELD, vFILTER, vFINGER,
     vFINISH, vFIXTURE, vFLAG, vFLOOR, vFLOWER, vFLY, vFLYING, vFOG,
     vFOOD, vFOOT, vFORMULA, vFOUND, vFRIGHTEN, vFRONT, vFROWN, vG,
     vGAME, vGARAGE, vGCHART, vGET, vGIVE, vGLAND, vGLUE, vGO, vGOAL,
     vGOV, vGOVERNMENT, vGRAD, vGRASS, vGREATER, vGROUND, vGROUP, vGUN,
     vHAIR, vHALF, vHAND, vHAT, vHAY, vHEAD, vHEART, vHEAT, vHEIR, vHEN,
     vHG, vHOLE, vHOME1, vHOME2, vHORMONE, vHORSE, vHOUR, vHUMAN,
     vHYDROGEN, vHYPO, vICE, vIMPACT, vINDUSTRY, vINFO, vINHERIT,
     vINJURY, vINNING, vINSECT, vINST, vINSTALL, vINSTANCE, vINSTRUMENT,
     vINVESTIGATE, vIRON, vISSUE, vITEM, vITEM1, vITEM2, vJOIN, vJURY,
     vKEEP, vKEY, vKICK, vKISS, vKNEE, vLAB, vLABEL, vLAND, vLAUGH,
     vLAW, vLAWN, vLEARN, vLEATHER, vLEAVE, vLEG, vLENGTH, vLENGTH1,
     vLENGTH2, vLEVEL, vLEVEL1, vLEVEL2, vLIE, vLIMB, vLINE, vLIP,
     vLIP1, vLIP2, vLIQUID, vLIST, vLOC, vLOC1, vLOC2, vLOCK, vLOWER,
     vLUNG, vLYRIC, vMA, vMAID, vMAINTAIN, vMAKE, vMAMMAL, vMANAGE,
     vMANUFACTURE, vMEAS, vMEASURE, vMEAT, vMEETING, vMEM, vMEMB1,
     vMEMB2, vMEMBER, vMEMBER1, vMEMBER2, vMETAL1, vMETAL2, vMILK,
     vMINE, vMINERAL, vMIX, vMONEY, vMORNING, vMOST, vMOTION, vMOUTH,
     vMOVE, vMULE, vMURDER, vMUSIC, vN, vNATION, vNECK, vNEGOTIATE,
     vNEST, vNIGHT, vNIGHT1, vNIGHT2, vNOD, vNOSE, vNOW, vNUCLEUS, vNUM,
     vNUMBER, vNUMBER1, vNUMBER2, vOBJ, vOBJ1, vOBJ2, vOBJECT,
     vOCCUPATION, vOFF, vOFFICE, vOFFICER, vOIL, vOP, vOPERA, vOPINION,
     vORCHESTRA, vORDER, vORG, vOTHER, vOTHERGOV, vOUTSIDE, vOWN,
     vOXIDATE, vOXYGEN, vP, vPAINT, vPAPER, vPARK, vPART, vPART1,
     vPART2, vPARTY, vPASS, vPATIENT, vPAY, vPCLASS, vPERF,
     vPERFORMANCE, vPERSON, vPERSON1, vPERSON2, vPHOTO, vPICTURE,
     vPIECE, vPINST, vPITCH, vPLACE, vPLAINTIFF, vPLAN, vPLANNING,
     vPLANT, vPLATFORM, vPLAY, vPLUG, vPOCKET, vPOINT, vPOINT1, vPOINT2,
     vPOLYGON, vPOPULATION, vPORCH, vPOSITION, vPOTTERY, vPOUR, vPOWDER,
     vPRICE1, vPRICE2, vPRIMARY1, vPRIMARY2, vPRIMATE, vPROC, vPROC1,
     vPROC2, vPROCESS, vPROCESS1, vPROCESS2, vPROF, vPROGRAM,
     vPROJECTILE, vPROP, vPROPERTY, vPROPOSITION, vPROTON, vPUBLICATION,
     vPULL, vPUNISH, vPURPOSE, vPUT, vQUAD, vQUANTITY, vQUANTITY1,
     vQUANTITY2, vQUESTION, vRADAR, vRADIO, vRADIUS, vRATIO, vREAD,
     vREC, vRECORD, vRECTANGLE, vREG, vREGION, vREGISTER, vREL,
     vREMEMBER, vREMIND, vREMOVE, vREPORT, vREQUEST, vRESIDENCE,
     vRESOLUTION, vRESOURCE, vRESOURCE1, vRESOURCE2, vRESULT, vRETURN,
     vREVERSE, vRIDE, vRISE, vROAD, vROLE, vROOF, vROOM, vROTATE,
     vSADDLE, vSALE, vSALT, vSATURDAY, vSCHOOL, vSCORE, vSEAT, vSEE,
     vSELL, vSENTENCE, vSERMON, vSERVE, vSERVICE, vSET, vSHARE, vSHELL,
     vSHIRT, vSHOE, vSHOOT, vSHOT, vSHOULDER, vSHRUG, vSIDE, vSING,
     vSIT, vSKELETON, vSKETCH, vSKIN, vSLAVE, vSMILE, vSMOKE, vSMOKING,
     vSNAKE, vSODIUM, vSOIL, vSOLUTION, vSOUND, vSPECIES, vSPINE, vSPIT,
     vSPORT, vSPOUSE, vSPRING, vSQUARE, vST, vSTAGE, vSTAND, vSTART,
     vSTATE, vSTATEMENT, vSTATMENT, vSTEAL, vSTEEL, vSTEEPLE, vSTEPS,
     vSTOCK, vSTOMACH, vSTORE, vSTRIKE, vSTUDENT, vSTUDIO, vSTUDY,
     vSTUFF, vSUB, vSUBSTANCE, vSUBSTANCE1, vSUBSTANCE2, vSUIT, vSUMMER,
     vSUNDAY, vSUPPOSE, vSURF, vSURFACE, vSWEAT, vSYLLABLE, vSYLLABLE2,
     vSYNTHESIS, vSpring, vT, vTANK, vTAPE, vTAX, vTEAM, vTEEN, vTEL,
     vTELEVISION, vTENT, vTESTIFY, vTEXT, vTHANK, vTHERMOMETER, vTHING,
     vTHING1, vTHING2, vTHREATEN, vTHROAT, vTHROW, vTILL, vTIME, vTIME1,
     vTIME2, vTOE, vTONGUE, vTOOTH, vTOP, vTORSO, vTRAIN, vTRAINING,
     vTRANSFER, vTRANSPORT, vTREE, vTRIANGLE, vTUMOR, vTYPE, vUNIT,
     vUNIT1, vUNIT2, vV, vVACATION, vVALUE, vVEH, vVEHICLE, vVERT,
     vVERTEBRATE, vVESSEL, vVICTIM, vWAKE, vWALK, vWALL, vWAR, vWATER,
     vWAVE, vWAY, vWEEK, vWEEKEND, vWEEP, vWHEEL, vWHOLE, vWIDTH1,
     vWIDTH2, vWINTER, vWIRE, vWORD, vWORK, vWRITE, vX, vYOUTH, vZINC: U
. subclass(HumanCorpse, Human)
%{HumanCorpse
"A &%Human which is &%Dead."}%
. instance(vCORPSE, HumanCorpse) <=>
      instance(vCORPSE, Human) /\ attribute(vCORPSE, Dead)
. subclass(HumanSlave, Human)
%{HumanSlave
"A &%Human who is owned by someone else."}%
. instance(vSLAVE, HumanSlave) =>
      exists vPERSON: U
          . instance(vPERSON, Human)
            /\ not vPERSON = vSLAVE
            /\ possesses(vPERSON, vSLAVE)
. subclass(HumanAdult, Human)
%{HumanAdult
"The class of &%Humans that are 18 years of 
age or older."}%
. instance(vADULT, HumanAdult)
  /\ age(vADULT, MeasureFn(vNUMBER, YearDuration)) =>
      greaterThanOrEqualTo(vNUMBER, a_1_8)
. subclass(HumanYouth, Human)
%{HumanYouth
"The class of &%Humans that are younger than 
18 years of age."}%
. instance(vYOUTH, HumanYouth)
  /\ age(vYOUTH, MeasureFn(vNUMBER, YearDuration)) =>
      lessThan(vNUMBER, a_1_8)
. subclass(HumanChild, HumanYouth)
%{HumanChild
"A &%HumanYouth between birth and puberty, i.e a 
&%Human who is &%NonFullyFormed."}%
. instance(vCHILD, HumanChild) => attribute(vCHILD, NonFullyFormed)
. instance(vCHILD, HumanChild)
  /\ age(vCHILD, MeasureFn(vNUMBER, YearDuration)) =>
      lessThanOrEqualTo(vNUMBER, a_1_4)
. subclass(Teenager, HumanYouth)
%{Teenager
"A &%HumanYouth between puberty and the age of 20."}%
. instance(vTEEN, Teenager)
  /\ age(vTEEN, MeasureFn(vNUMBER, YearDuration)) =>
      greaterThan(vNUMBER, a_1_2) /\ lessThan(vNUMBER, a_2_0)
. subclass(Boy, HumanChild)
. subclass(Boy, Man)
%{Boy
"A &%HumanChild who is &%Male."}%
. subclass(Girl, HumanChild)
. subclass(Girl, Woman)
%{Girl
"A &%HumanChild who is &%Female."}%
. subclass(HumanBaby, HumanChild)
%{HumanBaby
"A &%Human between birth and the first year of age."}%
. instance(vBABY, HumanBaby)
  /\ age(vCHILD, MeasureFn(vNUMBER, YearDuration)) =>
      lessThanOrEqualTo(vNUMBER, a_1)
. subclass(Stepping, BodyMotion)
%{Stepping
"The &%BodyMotion of extending one foot forward 
and then bringing the other foot to the same lateral position as the 
first leg."}%
. instance(vAMBULATE, Ambulating) =>
      exists vSUB: U
          . subclass(vSUB, Stepping)
            /\ (forall vINST: U
                    . instance(vINST, vSUB) <=> subProcess(vINST, vAMBULATE))
. subclass(ReflectingLight, RadiatingLight)
%{ReflectingLight
"Those instances of &%RadiatingLight where the 
&%instrument is not a light source, but is simply a surface which bends light 
waves that come in contact with it."}%
. subclass(Lyrics, Text)
%{Lyrics
"Any &%Text which is intended to be sung."}%
. instance(vLYRIC, Lyrics) =>
      hasPurpose(vLYRIC,
                 True
                     when exists vSING: U
                              . instance(vSING, Singing)
                                /\ patient(vSING, vLYRIC)
                     else False)
. subclass(InstrumentalMusic, Music)
%{InstrumentalMusic
"&%Music which is produced (at least in part) 
by a &%MusicalInstrument."}%
. instance(vMUSIC, InstrumentalMusic) =>
      exists vINSTRUMENT: U
          . instance(vINSTRUMENT, MusicalInstrument)
            /\ instrument(vMUSIC, vINSTRUMENT)
. subclass(Piano, MusicalInstrument)
%{Piano
"A &%MusicalInstrument with keys that, when pressed down, 
activate hammers that, in turn, strike strings."}%
. partition(Music, MonophonicMusic, PolyphonicMusic)
. subclass(MonophonicMusic, Music)
%{MonophonicMusic
"&%Music which has a single part, i.e. &%Music 
which cannot be divided into two or more contemporaneous &%subProcesses which 
are also instances of &%Music."}%
. subclass(PolyphonicMusic, Music)
%{PolyphonicMusic
"&%Music which has two or more parts, i.e. &%Music 
which can be divided into two or more contemporaneous &%subProcesses which are 
also instances of &%Music."}%
. instance(vMUSIC, PolyphonicMusic) <=>
      (exists vPART1: U; vPART2: U
           . instance(vMUSIC, Music)
             /\ instance(vPART1, Music)
             /\ instance(vPART2, Music)
             /\ subProcess(vPART1, vMUSIC)
             /\ subProcess(vPART2, vMUSIC)
             /\ not vPART1 = vPART2
             /\ cooccur(vPART1, vMUSIC)
             /\ cooccur(vPART2, vMUSIC))
. subclass(WrittenCommunication, LinguisticCommunication)
%{WrittenCommunication
"Any &%LinguisticCommunication where the 
&%instrument is a &%Text, e.g. a letter, an email, a memo, etc."}%
. instance(vCOMMUNICATE, WrittenCommunication) =>
      exists vWRITE: U; vREAD: U; vTEXT: U
          . instance(vWRITE, Writing)
            /\ instance(vREAD, Reading)
            /\ instance(vTEXT, Text)
            /\ instrument(vCOMMUNICATE, vTEXT)
            /\ a_r_e_s_u_l_t(vWRITE, vTEXT)
            /\ patient(vREAD, vTEXT)
            /\ subProcess(vWRITE, vCOMMUNICATE)
            /\ subProcess(vREAD, vCOMMUNICATE)
. subclass(Reminding, Requesting)
%{Reminding
"Any &%Requesting that is intended to cause a 
&%Remembering of something."}%
. instance(vREMIND, Reminding) =>
      exists vREMEMBER: U
          . instance(vREMEMBER, Remembering) /\ causes(vREMIND, vREMEMBER)
. subclass(Threatening, Committing)
%{Threatening
"Any &%Committing where the thing promised 
is something that is deemed undesirable by the &%destination of the 
&%Committing."}%
. instance(vTHREATEN, Threatening)
  /\ agent(vTHREATEN, vAGENT)
  /\ patient(vTHREATEN, vPROP)
  /\ destination(vTHREATEN, vDEST) =>
      not desires(vDEST, vPROP)
. subclass(Punishing, OrganizationalProcess)
%{Punishing
"Any &%OrganizationalProcess where the &%agent 
does something to the &%destination that the &%agent knows is undesirable 
for the &%destination."}%
. instance(vPUNISH, Punishing)
  /\ agent(vPUNISH, vAGENT)
  /\ patient(vPUNISH, vPROP)
  /\ destination(vPUNISH, vDEST) =>
      knows(vAGENT, a_n_o_t(desires(vDEST, vPROP)))
. subclass(Registering, Stating)
. subclass(Registering, PoliticalProcess)
%{Registering
"Submitting official paperwork in a government 
agency, e.g. filing for divorce, making a legal claim against someone."}%
. instance(vACTION, LegalAction) =>
      exists vREGISTER: U
          . instance(vREGISTER, Registering)
            /\ subProcess(vREGISTER, vACTION)
. subclass(Answering, Stating)
%{Answering
"Responding to a &%Questioning, i.e. trying to answer 
someone's question."}%
. instance(vANSWER, Answering) =>
      exists vQUESTION: U
          . instance(vQUESTION, Questioning)
            /\ refers(vANSWER, vQUESTION)
            /\ earlier(WhenFn(vQUESTION), WhenFn(vANSWER))
. subclass(Arguing, Stating)
%{Arguing
"Any &%Stating which has the form of an &%Argument."}%
. instance(vARGUE, Arguing) =>
      exists vSTATEMENT: U; vARGUMENT: U
          . patient(vARGUE, vSTATEMENT)
            /\ instance(vSTATEMENT, Statement)
            /\ containsInformation(vSTATEMENT, vARGUMENT)
            /\ instance(vARGUMENT, Argument)
. subclass(StatingALie, Stating)
%{StatingALie
"Any &%Stating which is both &%False and believed 
to be &%False by the &%agent of the &%Stating."}%
. instance(vSTATE, StatingALie)
  /\ agent(vSTATE, vAGENT)
  /\ patient(vSTATE, vSTATEMENT) =>
      a_t_r_u_e(vSTATMENT, False)
      /\ believes(vAGENT, a_t_r_u_e(vSTATEMENT, False))
. subclass(Founding, Declaring)
. subclass(Founding, OrganizationalProcess)
%{Founding
"Setting up an &%Organization."}%
. instance(vFOUND, Founding) =>
      exists vORG: U
          . instance(vORG, Organization) /\ a_r_e_s_u_l_t(vFOUND, vORG)
. subclass(Indicating, Communication)
. subclass(Indicating, BodyMotion)
%{Indicating
"Pointing out a person, place or thing with 
one's hand or with an &%Artifact."}%
. subclass(Projectile, Weapon)
%{Projectile
"A missile, bullet, etc. that is fired from 
a &%Weapon."}%
. instance(vPROJECTILE, Projectile) =>
      capability(Shooting, patient, vPROJECTILE)
. subclass(ProjectileShell, Container)
%{ProjectileShell
"The outer casing of a &%Projectile."}%
. instance(vPROJECTILE, Projectile) =>
      exists vSHELL: U
          . instance(vSHELL, ProjectileShell) /\ part(vSHELL, vPROJECTILE)
. subclass(Gun, Weapon)
. partition(Gun, ArtilleryGun, Firearm)
%{Gun
"A &%Weapon that shoots a &%Projectile."}%
. instance(vGUN, Gun) => capability(Shooting, instrument, vGUN)
. instance(vSHOOT, Shooting) =>
      exists vPROJECTILE: U; vGUN: U
          . instance(vPROJECTILE, Projectile)
            /\ patient(vSHOOT, vPROJECTILE)
            /\ instance(vGUN, Gun)
            /\ instrument(vSHOOT, vGUN)
. subclass(GunStock, EngineeringComponent)
%{GunStock
"The part of a &%Gun that is placed against the 
shoulder to absorb some of the recoil action when it is fired."}%
. instance(vSTOCK, GunStock) =>
      exists vGUN: U . instance(vGUN, Gun) /\ part(vSTOCK, vGUN)
. subclass(ArtilleryGun, Gun)
%{ArtilleryGun
"A &%Gun that is too large to be carried and fired 
by a single &%Human.  Typically, &%ArtilleryGuns are on wheels."}%
. subclass(Firearm, Gun)
. partition(Firearm, Rifle, Pistol)
%{Firearm
"A &%Gun that is small enough to be carried and fired by 
a single &%Human."}%
. subclass(Rifle, Firearm)
%{Rifle
"A &%Firearm with a long barrel that is intended to be fired 
from the shoulder."}%
. subclass(Pistol, Firearm)
%{Pistol
"A &%Firearm that is intended to be aimed and fired with a 
single hand."}%
. subclass(Manifold, EngineeringComponent)
%{Manifold
"A pipe which has several outlets for other pipes that flow 
into or out of it."}%
. subclass(BirthControlDevice, Device)
%{BirthControlDevice
"&%Devices which permit sexual intercourse but 
which reduce the likelihood of conception."}%
. subclass(SwitchDevice, Device)
%{SwitchDevice
"A &%Device which is capable of turning an 
&%ElectricDevice on and off."}%
. instance(vDEVICE, SwitchDevice) =>
      exists vPROC1: U; vPROC2: U; vELECTRIC: U
          . instrument(vPROC1, vDEVICE)
            /\ causes(vPROC1, vPROC2)
            /\ instrument(vPROC2, vELECTRIC)
            /\ instance(vELECTRIC, ElectricDevice)
. subclass(Aerator, Device)
%{Aerator
"A &%Device whose purpose is to mix &%Substances with 
&%Air."}%
. instance(vAERATOR, Aerator) =>
      hasPurpose(vAERATOR,
                 True
                     when exists vCOMBINE: U; vAIR: U
                              . instance(vCOMBINE, Combining)
                                /\ resource(vCOMBINE, vAIR)
                                /\ instance(vAIR, Air)
                                /\ instrument(vCOMBINE, vAERATOR)
                     else False)
. subclass(Filter, Device)
%{Filter
"A &%Device whose purpose is to remove part of a 
&%Solution that is passed through the &%Filter."}%
. instance(vFILTER, Filter) =>
      hasPurpose(vFILTER,
                 True
                     when exists vREMOVE: U; vSOLUTION: U
                              . instance(vREMOVE, Removing)
                                /\ origin(vREMOVE, vSOLUTION)
                                /\ instance(vSOLUTION, Solution)
                                /\ instrument(vREMOVE, vFILTER)
                     else False)
. subclass(FileDevice, Device)
%{FileDevice
"A &%Device whose purpose is to make something 
smoother.  For example, a nail file is used to even out the tips of one's 
finger nails."}%
. instance(vDEVICE, FileDevice) =>
      capability(SurfaceChange, instrument, vDEVICE)
. subclass(ElectricDevice, Device)
%{ElectricDevice
"Any &%Device that is powered by electricity."}%
. subclass(Radar, ElectricDevice)
%{Radar
"An &%ElectricDevice that emits and receives microwave 
radiation for the purpose of locating and tracking distant objects."}%
. instance(vRADAR, Radar) =>
      hasPurpose(vRADAR,
                 True
                     when exists vDISCOVER: U
                              . instance(vDISCOVER, Discovering)
                                /\ instrument(vDISCOVER, vRADAR)
                     else False)
. subclass(SecurityDevice, Device)
%{SecurityDevice
"A &%Device whose purpose is to protect people or 
property from kidnappers and/or thieves."}%
. subclass(Lock, SecurityDevice)
%{Lock
"A &%Device, which, through a &%Key or a combination prevents 
access to a &%Container or &%StationaryArtifact."}%
. subclass(Key, SecurityDevice)
%{Key
"A &%Device which opens and closes a &%Lock."}%
. instance(vKEY, Key) =>
      exists vLOCK: U
          . instance(vLOCK, Lock)
            /\ capability(Opening, instrument, vLOCK)
            /\ capability(Closing, instrument, vLOCK)
. subclass(SecurityAlarm, SecurityDevice)
. subclass(SecurityAlarm, ElectricDevice)
%{SecurityAlarm
"A &%SecurityDevice that detects intrusions to 
a &%StationaryArtifact and issues a warning of some sort."}%
. partition(Quantity, FiniteQuantity, InfiniteQuantity)
. subclass(FiniteQuantity, Quantity)
%{FiniteQuantity
"Any &%Quantity that is limited or bounded in 
magnitude."}%
. subclass(InfiniteQuantity, Quantity)
%{InfiniteQuantity
"Any &%Quantity that is not limited or bounded 
in magnitude."}%
. subclass(Clock, MeasuringDevice)
%{Clock
"Any &%Device that measures and represents &%TimeDuration 
or &%TimePosition."}%
. instance(vMEASURE, Measuring)
  /\ a_r_e_s_u_l_t(vMEASURE, vQUANTITY)
  /\ instrument(vMEASURE, vCLOCK)
  /\ instance(vCLOCK, Clock) =>
      instance(vQUANTITY, TimeMeasure)
. subclass(Thermometer, MeasuringDevice)
%{Thermometer
"Any &%Device that measures and represents 
&%TemperatureMeasure."}%
. instance(vMEASURE, Measuring)
  /\ a_r_e_s_u_l_t(vMEASURE, vQUANTITY)
  /\ instrument(vMEASURE, vTHERMOMETER)
  /\ instance(vTHERMOMETER, Thermometer) =>
      instance(vQUANTITY, TemperatureMeasure)
. subclass(Telephone, ElectricDevice)
. subclass(Telephone, CommunicationDevice)
%{Telephone
"A &%Device that permits &%LinguisticCommunication 
between remote points by converting sound into electrical signals that are 
then transmitted.  When the signals are received, they are converted back 
into sound."}%
. subrelation(telephoneNumber, uniqueIdentifier)
. domain(telephoneNumber, a_1, SymbolicString)
. domain(telephoneNumber, a_2, Agent)
. relatedInternalConcept(telephoneNumber, address)
%{telephoneNumber
"(&%telephoneNumber ?NUMBER ?AGENT) means 
that ?NUMBER is a telephone number at which ?AGENT can be regularly contacted."}%
. subclass(LightFixture, Device)
%{LightFixture
"Any &%Device whose purpose is to be a source of 
visible light."}%
. instance(vFIXTURE, LightFixture) =>
      capability(RadiatingLight, instrument, vFIXTURE)
. subclass(PaintedPicture, ArtWork)
%{PaintedPicture
"Any &%ArtWork which is produced by &%Painting."}%
. subclass(Sketch, ArtWork)
%{Sketch
"Any &%ArtWork which is produced by a pencil or 
piece of charcoal."}%
. subclass(Collage, ArtWork)
%{Collage
"Any abstract &%ArtWork that is produced by arranging 
bits of paper or photographs."}%
. subclass(Painting, Covering)
. subclass(Painting, Coloring)
%{Painting
"The application of &%Paint to a &%surface.  Note that 
this class covers both &%ArtPainting (the creation of &%PaintedPictures), as 
well as painting one's kitchen, for example."}%
. instance(vPAINT, Painting)
  /\ patient(vPAINT, vSURFACE)
  /\ instrument(vPAINT, vSTUFF) =>
      exists vOBJ: U . surface(vSURFACE, vOBJ) /\ instance(vSTUFF, Paint)
. subclass(Paint, Solution)
%{Paint
"Any &%Solution which is capable of &%Coloring something."}%
. instance(vPAINT, Paint) =>
      capability(Coloring, instrument, vPAINT)
. subclass(ArtPainting, ContentDevelopment)
. subclass(ArtPainting, Painting)
%{ArtPainting
"Any &%ContentDevelopment that results in a 
&%PaintedPicture."}%
. instance(vPAINT, ArtPainting) =>
      exists vPICTURE: U
          . instance(vPICTURE, PaintedPicture)
            /\ a_r_e_s_u_l_t(vPAINT, vPICTURE)
. subclass(Drawing, ContentDevelopment)
. subclass(Drawing, SurfaceChange)
%{Drawing
"Any &%ContentDevelopment that results in a &%Sketch."}%
. instance(vDRAW, Drawing) =>
      exists vSKETCH: U
          . instance(vSKETCH, Sketch) /\ a_r_e_s_u_l_t(vDRAW, vSKETCH)
. subclass(DisplayBoard, Artifact)
%{DisplayBoard
"A large board for posting information so 
that it can be disseminated to the public."}%
. instance(vBOARD, DisplayBoard) =>
      hasPurpose(vBOARD,
                 True
                     when exists vPUT: U; vDISSEMINATE: U; vINFO: U
                              . instance(vPUT, Putting)
                                /\ instance(vDISSEMINATE, Disseminating)
                                /\ instance(vINFO, ContentBearingObject)
                                /\ patient(vPUT, vINFO)
                                /\ patient(vDISSEMINATE, vINFO)
                                /\ destination(vPUT, vBOARD)
                     else False)
. subclass(Wheel, Artifact)
%{Wheel
"A circular &%Artifact which is a component of 
&%LandVehicles and of some &%Devices."}%
. instance(vVEHICLE, LandVehicle) =>
      exists vWHEEL: U
          . instance(vWHEEL, Wheel) /\ part(vWHEEL, vVEHICLE)
. subclass(Paper, Artifact)
%{Paper
"An &%Artifact made of cellulose pulp that is intended 
to contain a &%Text."}%
. instance(vPAPER, Paper) =>
      hasPurpose(vPAPER,
                 True
                     when exists vTEXT: U
                              . instance(vTEXT, Text) /\ part(vTEXT, vPAPER)
                     else False)
. subclass(Wire, Artifact)
%{Wire
"A long, thin strand of &%Metal that is used in a wide 
range of applications, including the wiring of electrical systems, creating 
bundles and the construction of cages."}%
. instance(vWIRE, Wire) => material(Metal, vWIRE)
. subclass(Plug, Artifact)
%{Plug
"An &%Artifact which is designed to fit snugly within 
a &%Hole."}%
. instance(vPLUG, Plug) =>
      exists vHOLE: U . completelyFills(vPLUG, vHOLE)
. subclass(CigarOrCigarette, Artifact)
%{CigarOrCigarette
"A tube of thin paper containing finely ground tobacco 
that is smoked."}%
. subclass(Pottery, Artifact)
%{Pottery
"Household &%Artifacts that are made out of baked &%Clay."}%
. instance(vPOTTERY, Pottery) =>
      exists vCLAY: U . instance(vCLAY, Clay) /\ part(vCLAY, vPOTTERY)
. subclass(Furniture, Artifact)
. disjoint(Furniture, Device)
%{Furniture
"Any free-standing &%Artifacts which are not 
&%Devices and which are used in day-to-day living."}%
. subclass(Seat, Furniture)
%{Seat
"Any instance of &%Furniture which is designed to 
accommodate &%Humans who are &%Sitting."}%
. instance(vSEAT, Seat) =>
      hasPurpose(vSEAT,
                 True
                     when exists vPERSON: U
                              . instance(vPERSON, Human)
                                /\ located(vPERSON, vSEAT)
                                /\ attribute(vPERSON, Sitting)
                     else False)
. subclass(Chair, Seat)
%{Chair
"A &%Seat that is designed to accommodate a single 
&%Human."}%
. instance(vCHAIR, Chair) =>
      not (exists vPERSON1: U; vPERSON2: U
               . instance(vPERSON1, Human)
                 /\ instance(vPERSON2, Human)
                 /\ attribute(vPERSON1, Sitting)
                 /\ attribute(vPERSON2, Sitting)
                 /\ located(vPERSON1, vCHAIR)
                 /\ located(vPERSON2, vCHAIR)
                 /\ not vPERSON1 = vPERSON2)
. subclass(Bed, Furniture)
%{Bed
"A piece of &%Furniture which is primarily for sleeping."}%
. instance(vBED, Bed) =>
      hasPurpose(vBED,
                 True
                     when exists vPERSON: U
                              . attribute(vPERSON, Asleep)
                                /\ located(vPERSON, vBED)
                     else False)
. subclass(Table, Furniture)
%{Table
"A piece of &%Furniture with four legs and a flat top.  
It is used either for eating, paperwork or meetings."}%
. subclass(Desk, Table)
%{Desk
"A &%Table for a single person which is intended to be 
used for paperwork."}%
. subclass(Screw, AttachingDevice)
%{Screw
"An &%AttachingDevice which contains a spiral of grooves to 
hold it in place and which is fastened with a screwdriver."}%
. subclass(Tape, AttachingDevice)
%{Tape
"A thin strip of &%Fabric or &%Paper that is used to attach 
two things."}%
. instance(vTAPE, Tape) =>
      exists vPART: U
          . part(vPART, vTAPE)
            /\ (instance(vPART, Paper) \/ instance(vPART, Fabric))
. subclass(Holder, Device)
%{Holder
"A large class of &%Devices whose purpose is to hold 
something else, i.e. be the &%instrument of a &%Keeping."}%
. instance(vDEVICE, Holder) =>
      capability(Keeping, instrument, vDEVICE)
. subclass(Saddle, Holder)
%{Saddle
"A &%Device which allows a &%Human to ride on a 
&%Horse."}%
. instance(vSADDLE, Saddle) =>
      capability(KappaFn(vRIDE,
                         True
                             when exists vHUMAN: U; vHORSE: U
                                      . instance(vRIDE, Carrying)
                                        /\ patient(vRIDE, vHUMAN)
                                        /\ instance(vHUMAN, Human)
                                        /\ agent(vRIDE, vHORSE)
                                        /\ instance(vHORSE, Horse)
                             else False),
                 instrument, vSADDLE)
. subclass(Tray, Holder)
%{Tray
"A &%Holder that is designed for &%Food, dishes, and 
flatware."}%
. subclass(Container, Holder)
%{Container
"Any &%Holder whose purpose is to contain 
something else.  Note that &%Container is more specific in meaning 
than &%Holder, because a &%Container must have a &%Hole that is at 
least partially filled by the thing contained."}%
. instance(vCONTAINER, Container) =>
      hasPurpose(vCONTAINER,
                 True
                     when exists vOBJ: U . contains(vCONTAINER, vOBJ)
                     else False)
. subclass(Box, Container)
%{Box
"Any six-sided &%Container whose sides are 
rectangular in shape."}%
. instance(vBOX, Box) =>
      CardinalityFn(KappaFn(vSIDE,
                            or(top(vSIDE, vBOX), bottom(vSIDE, vBOX),
                               side(vSIDE, vBOX)))) =
          a_6
. subclass(TravelContainer, Container)
%{TravelContainer
"Any &%Container which is intended to be 
used for carrying clothing, toiletries, and other personal effects that 
would be needed on a overnight trip."}%
. subclass(FluidContainer, Container)
%{FluidContainer
"A &%Container which is used to store &%Fluids,  
i.e. &%Liquids and &%Gases."}%
. instance(vTANK, FluidContainer) /\ contains(vTANK, vSTUFF) =>
      attribute(vSTUFF, Fluid)
. subclass(Bottle, FluidContainer)
%{Bottle
"A &%Container whose top is narrower than its bottom, which 
has no handle, and which is intended to store &%Liquids."}%
. instance(vBOTTLE, Bottle) /\ contains(vBOTTLE, vSTUFF) =>
      attribute(vSTUFF, Liquid)
. instance(vBOTTLE, Bottle)
  /\ bottom(vBOTTOM, vBOTTLE)
  /\ top(vTOP, vBOTTLE)
  /\ width(vBOTTOM, vWIDTH1)
  /\ width(vTOP, vWIDTH2) =>
      lessThan(vWIDTH2, vWIDTH1)
. subclass(Cup, FluidContainer)
%{Cup
"An open &%FluidContainer that is intended to serve a &%Beverage 
to a single person.  Note that this class includes both cups with handles and 
drinking glasses."}%
. instance(vCUP, Cup) /\ contains(vCUP, vSTUFF) =>
      instance(vSTUFF, Beverage)
. subclass(BoardOrBlock, Artifact)
%{BoardOrBlock
"A piece of material with flat, rectangular sides.  
Note that boards and blocks are lumped into a single concept, because the 
difference between these notions cannot be precisely defined."}%
. instance(vBOARD, BoardOrBlock) =>
      capability(Constructing, resource, vBOARD)
. subclass(Nest, CorpuscularObject)
%{Nest
"Any structure which is created by nonhuman &%Animals for 
the purpose of giving birth to their offspring."}%
. instance(vNEST, Nest) =>
      hasPurpose(vNEST,
                 True
                     when exists vBIRTH: U
                              . instance(vBIRTH, Birth)
                                /\ located(vBIRTH, vNEST)
                     else False)
. subclass(OutdoorClothing, Clothing)
%{OutdoorClothing
"&%Clothing that is intended to be worn 
outdoors."}%
. instance(vCLOTHING, OutdoorClothing)
  /\ holdsDuring(vTIME, wears(vPERSON, vCLOTHING)) =>
      not (exists vBUILDING: U
               . instance(vBUILDING, Building)
                 /\ holdsDuring(vTIME, located(vPERSON, vBUILDING)))
. subclass(Hat, OutdoorClothing)
%{Hat
"A type of &%Clothing that is worn on the &%Head.  Note 
that this class covers caps, bonnets, berets, etc."}%
. wears(vPERSON, vHAT) /\ instance(vHAT, Hat) =>
      exists vHEAD: U
          . instance(vHEAD, Head)
            /\ part(vHEAD, vPERSON)
            /\ meetsSpatially(vHAT, vHEAD)
. subclass(Coat, OutdoorClothing)
%{Coat
"&%Clothing that has sleeves and covers from the neck 
down.  &%Coats are intended to be worn outdoors."}%
. subclass(Shoe, Clothing)
%{Shoe
"&%Clothing that is intended to be worn on the &%Foot.  
It consists of an upper, a sole, and a heel."}%
. wears(vPERSON, vSHOE) /\ instance(vSHOE, Shoe) =>
      exists vFOOT: U
          . instance(vFOOT, Foot)
            /\ part(vFOOT, vPERSON)
            /\ meetsSpatially(vSHOE, vFOOT)
. subclass(Shirt, Clothing)
%{Shirt
"An item of &%Clothing which covers the upper body of a 
&%Human."}%
. instance(vSHIRT, Shirt) /\ wears(vPERSON, vSHIRT) =>
      instance(vPERSON, Human)
. subclass(Dress, Clothing)
%{Dress
"An item of &%Clothing which covers the lower body of a 
&%Woman."}%
. instance(vDRESS, Dress) /\ wears(vPERSON, vDRESS) =>
      instance(vPERSON, Woman)
. subclass(ClothingSuit, Collection)
%{ClothingSuit
"A &%Collection of instances of &%Clothing that 
are designed to be worn together."}%
. instance(vSUIT, ClothingSuit)
  /\ member(vITEM1, vSUIT)
  /\ holdsDuring(vTIME, wears(vPERSON, vITEM1)) =>
      forall vITEM2: U
          . member(vITEM2, vSUIT) =>
                holdsDuring(vTIME, wears(vPERSON, vITEM2))
. subclass(Leather, Fabric)
%{Leather
"A &%Fabric that is the result of tanning an &%Animal 
&%Skin."}%
. instance(vLEATHER, Leather) =>
      exists vMAKE: U; vSKIN: U
          . instance(vMAKE, Making)
            /\ resource(vMAKE, vSKIN)
            /\ instance(vSKIN, Skin)
            /\ a_r_e_s_u_l_t(vMAKE, vLEATHER)
. subclass(Pocket, Fabric)
%{Pocket
"A pouch of &%Fabric in an instance of &%Clothing where 
something can be kept."}%
. instance(vPOCKET, Pocket) =>
      exists vCLOTHING: U
          . instance(vCLOTHING, Clothing) /\ part(vPOCKET, vCLOTHING)
. instance(vPOCKET, Pocket) =>
      capability(Keeping, instrument, vPOCKET)
. subclass(Blanket, Fabric)
%{Blanket
"A piece of &%Fabric whose purpose is to keep a sleeping 
person warm."}%
. instance(vBLANKET, Blanket) =>
      hasPurpose(vBLANKET,
                 True
                     when exists vHEAT: U; vPERSON: U; vBED: U
                              . instance(vHEAT, Heating)
                                /\ patient(vHEAT, vPERSON)
                                /\ instance(vPERSON, Human)
                                /\ located(vPERSON, vBED)
                                /\ instance(vBED, Bed)
                     else False)
. subclass(Dressing, Putting)
%{Dressing
"The &%Process of putting on &%Clothing."}%
. instance(vDRESS, Dressing)
  /\ agent(vDRESS, vAGENT)
  /\ patient(vDRESS, vCLOTHING) =>
      instance(vCLOTHING, Clothing)
      /\ holdsDuring(BeginFn(WhenFn(vDRESS)),
                     a_n_o_t(wears(vAGENT, vCLOTHING)))
      /\ holdsDuring(EndFn(WhenFn(vDRESS)), wears(vAGENT, vCLOTHING))
. subclass(Tying, Attaching)
%{Tying
"The &%Process of tying two things, or two strands of 
the same thing, together."}%
. subclass(Untying, Detaching)
. disjoint(Untying, Tying)
%{Untying
"The &%Process of untying two things, or two strands 
of the same thing."}%
. instance(patientMedical, BinaryPredicate)
. domain(patientMedical, a_1, Human)
. domain(patientMedical, a_2, CognitiveAgent)
%{patientMedical
"The relation of receiving medical care 
from a recognized medical practitioner.  (&%patientMedical ?PATIENT 
?DOCTOR) means that ?PATIENT is the patient of ?DOCTOR.  Note that 
argument type restriction on the second argument is &%CognitiveAgent 
to allow for cases where someone is the patient of an &%Organization, 
viz. a &%CareOrganization."}%
. patientMedical(vPATIENT, vDOCTOR) =>
      exists vPROCESS: U
          . patient(vPROCESS, vPATIENT)
            /\ agent(vPROCESS, vDOCTOR)
            /\ (instance(vPROCESS, DiagnosticProcess)
                \/ instance(vPROCESS, TherapeuticProcess))
. subclass(NonspecificDisease, DiseaseOrSyndrome)
%{NonspecificDisease
"The class of &%DiseaseOrSyndromes that are not 
caused by a single type of &%Microorganism."}%
. instance(vDISEASE, NonspecificDisease) =>
      not (exists vAGENT: U
               . instance(vAGENT, Microorganism)
                 /\ (forall vVICTIM: U
                         . attribute(vVICTIM, vDISEASE) =>
                               located(vAGENT, vVICTIM)))
. instance(Cancer, DiseaseOrSyndrome)
%{Cancer
"A &%DiseaseOrSyndrome characterized by pathologic and 
uncontrolled cell division that results in a &%Tumor."}%
. attribute(vPERSON, Cancer) =>
      exists vTUMOR: U . instance(vTUMOR, Tumor) /\ part(vTUMOR, vPERSON)
. instance(conjugate, BinaryPredicate)
. instance(conjugate, IrreflexiveRelation)
. instance(conjugate, SymmetricRelation)
. instance(conjugate, TransitiveRelation)
. domain(conjugate, a_1, CompoundSubstance)
. domain(conjugate, a_2, CompoundSubstance)
%{conjugate
"(&%conjugate ?COMPOUND1 ?COMPOUND2) means that 
?COMPOUND1 and ?COMPOUND2 are identical &%CompoundSubstances except that 
one has one more &%Proton than the other."}%
. conjugate(vCOMPOUND1, vCOMPOUND2) =>
      exists vNUMBER1: U; vNUMBER2: U
          . protonNumber(vCOMPOUND1, vNUMBER1)
            /\ protonNumber(vCOMPOUND2, vNUMBER2)
            /\ (vNUMBER1 = AdditionFn(vNUMBER2, a_1)
                \/ vNUMBER2 = AdditionFn(vNUMBER1, a_1))
. subclass(Biting, Grabbing)
%{Biting
"Any instance of &%Grabbing where the &%instrument is 
the &%Mouth of the &%agent."}%
. instance(vBITE, Biting) /\ agent(vBITE, vANIMAL) =>
      exists vMOUTH: U
          . instance(vMOUTH, Mouth)
            /\ part(vMOUTH, vANIMAL)
            /\ instrument(vBITE, vMOUTH)
. subclass(Spitting, Impelling)
%{Spitting
"Any instance of &%Impelling where the &%origin is 
the &%Mouth of the &%agent."}%
. instance(vSPIT, Spitting) /\ agent(vSPIT, vANIMAL) =>
      exists vMOUTH: U
          . instance(vMOUTH, Mouth)
            /\ part(vMOUTH, vANIMAL)
            /\ origin(vSPIT, vMOUTH)
. subclass(Kicking, Impelling)
%{Kicking
"Any instance of &%Impelling where the &%instrument 
is a &%Foot of the &%agent."}%
. instance(vKICK, Kicking) /\ agent(vKICK, vANIMAL) =>
      exists vFOOT: U
          . instance(vFOOT, Foot)
            /\ part(vFOOT, vANIMAL)
            /\ instrument(vKICK, vFOOT)
. subclass(Mailing, Transfer)
%{Mailing
"Any instance of &%Transfer where a postal system is 
used to move the &%patient, either a letter or a package."}%
. instance(neighbor, BinaryPredicate)
. instance(neighbor, SymmetricRelation)
. instance(neighbor, IrreflexiveRelation)
. domain(neighbor, a_1, Human)
. domain(neighbor, a_2, Human)
%{neighbor
"(&%neighbor ?PERSON1 ?PERSON2) means that ?PERSON1 is 
a neighbor of ?PERSON2, i.e. ?PERSON1 and ?PERSON2 have their &%homes &%Near 
one another."}%
. neighbor(vPERSON1, vPERSON2) =>
      exists vHOME1: U; vHOME2: U
          . home(vPERSON1, vHOME1)
            /\ home(vPERSON2, vHOME2)
            /\ not vHOME1 = vHOME2
            /\ orientation(vHOME1, vHOME2, Near)
. instance(capacity, BinaryPredicate)
. domain(capacity, a_1, SelfConnectedObject)
. domain(capacity, a_2, ConstantQuantity)
. relatedInternalConcept(capacity, humanCapacity)
%{capacity
"(&%capacity ?OBJ ?QUANTITY) means that ?OBJ can contain 
something that has the &%measure of ?QUANTITY.  This predicate denotes maximal 
capacity, i.e. ?OBJ can hold no more than ?QUANTITY.  Note, however, that this 
does not mean that &%capacity is a &%SingleValuedRelation, since an object may 
have various maximal capacities across different dimensions, e.g. a particular 
box may have a &%capacity of 3 pounds and a &%capacity of 1 liter."}%
. measure(vOBJ1, vMEAS) /\ contains(vOBJ2, vOBJ1) =>
      capacity(vOBJ2, vMEAS)
. instance(humanCapacity, BinaryPredicate)
. instance(humanCapacity, SingleValuedRelation)
. domain(humanCapacity, a_1, StationaryArtifact)
. domain(humanCapacity, a_2, PositiveInteger)
%{humanCapacity
"(&%humanCapacity ?CONSTRUCT ?NUMBER) means that the 
&%StationaryArtifact ?CONSTRUCT, e.g. a &%Building or a &%Room, can hold a maximum 
of ?NUMBER &%Humans without crowding."}%
. instance(LastFn, UnaryFunction)
. domain(LastFn, a_1, List)
. domain(LastFn, a_2, Entity)
%{LastFn
"(&%LastFn ?LIST) returns the last item in the 
&%List ?LIST.  For example, (&%LastFn (&%ListFn &%Monday &%Tuesday 
&%Wednesday)) would return the value of &%Wednesday."}%
. instance(vLIST, List) /\ LastFn(vLIST) = vITEM <=>
      (exists vNUMBER: U
           . ListLengthFn(vLIST) = vNUMBER
             /\ ListOrderFn(vLIST, vNUMBER) = vITEM)
. instance(FirstFn, UnaryFunction)
. domain(FirstFn, a_1, List)
. domain(FirstFn, a_2, Entity)
%{FirstFn
"(&%FirstFn ?LIST) returns the first item in 
the &%List ?LIST.  For example, (&%FirstFn (&%ListFn &%Monday &%Tuesday 
&%Wednesday)) would return the value of &%Monday."}%
. instance(vLIST, List) => FirstFn(vLIST) = ListOrderFn(vLIST, a_1)
. instance(address, BinaryPredicate)
. domain(address, a_1, Agent)
. domain(address, a_2, Address)
%{address
"(&%address ?AGENT ?ADDRESS) means that ?ADDRESS 
is an address or part of an address for the &%Agent ?AGENT."}%
. subclass(Address, RelationalAttribute)
%{Address
"A &%RelationalAttribute that indicates an address 
where an &%Agent can regularly be contacted."}%
. subrelation(postalCode, uniqueIdentifier)
. domain(postalCode, a_1, PositiveInteger)
. domain(postalCode, a_2, Address)
%{postalCode
"(&%postalCode ?NUMBER ?ADDRESS) means that the 
the postal code, e.g. zip code, ?NUMBER is part of the address ?ADDRESS."}%
. subrelation(postalBoxNumber, uniqueIdentifier)
. domain(postalBoxNumber, a_1, PositiveInteger)
. domain(postalBoxNumber, a_2, Address)
%{postalBoxNumber
"(&%postalBoxNumber ?NUMBER ?ADDRESS) means 
that the post office box ?NUMBER is part of the address ?ADDRESS."}%
. subrelation(cityAddress, address)
. domain(cityAddress, a_1, City)
. domain(cityAddress, a_2, Address)
%{cityAddress
"(&%cityAddress ?CITY ?ADDRESS) means that the 
&%City ?CITY is part of the address ?ADDRESS."}%
. subrelation(streetAddress, address)
. domain(streetAddress, a_1, Roadway)
. domain(streetAddress, a_2, Address)
%{streetAddress
"(&%streetAddress ?STREET ?ADDRESS) means 
that the &%Roadway ?STREET is part of the address ?ADDRESS."}%
. subrelation(streetNumber, address)
. domain(streetNumber, a_1, Building)
. domain(streetNumber, a_2, Address)
%{streetNumber
"(&%streetNumber ?BUILDING ?ADDRESS) means 
that the &%Building ?BUILDING is part of the address ?ADDRESS."}%
. subrelation(unitNumber, address)
. domain(unitNumber, a_1, StationaryArtifact)
. domain(unitNumber, a_2, Address)
%{unitNumber
"(&%unitNumber ?UNIT ?ADDRESS) means that the 
&%StationaryArtifact ?UNIT is part of the address ?ADDRESS."}%
. instance(StreetAddressFn, QuaternaryFunction)
. domain(StreetAddressFn, a_1, StationaryArtifact)
. domain(StreetAddressFn, a_2, Roadway)
. domain(StreetAddressFn, a_3, City)
. domain(StreetAddressFn, a_4, Nation)
. range(StreetAddressFn, Agent)
%{StreetAddressFn
"(&%StreetAddressFn ?BUILDING ?ROAD ?CITY 
?COUNTRY) returns the &%Agent, e.g. a family, an organization, a person, 
etc. that resides or conducts business at the corresponding &%address."}%
. StreetAddressFn(vPLACE, vROAD, vCITY, vCOUNTRY) = vAGENT =>
      address(vAGENT, vPLACE)
. StreetAddressFn(vPLACE, vROAD, vCITY, vCOUNTRY) = vAGENT =>
      exists vBUILDING: U
          . instance(vBUILDING, Building) /\ part(vPLACE, vBUILDING)
. subclass(ArtStudio, StationaryArtifact)
%{ArtStudio
"A &%Room, suite of &%Rooms or &%Building which is 
devoted to the creation of &%ArtWorks."}%
. instance(vSTUDIO, ArtStudio) =>
      hasPurpose(vSTUDIO,
                 True
                     when exists vMAKE: U; vWORK: U
                              . instance(vMAKE, Making)
                                /\ a_r_e_s_u_l_t(vMAKE, vWORK)
                                /\ instance(vWORK, ArtWork)
                     else False)
. subclass(Mine, StationaryArtifact)
%{Mine
"An construction in the earth from which &%Minerals are removed, 
either in pure form or as part of ores."}%
. instance(vMINE, Mine) =>
      hasPurpose(vMINE,
                 True
                     when exists vREMOVE: U; vMINERAL: U
                              . instance(vREMOVE, Removing)
                                /\ patient(vREMOVE, vMINERAL)
                                /\ instance(vMINERAL, Mineral)
                                /\ origin(vREMOVE, vMINE)
                     else False)
. subclass(MobileResidence, Artifact)
. disjoint(MobileResidence, Residence)
%{MobileResidence
"Anything which serves to house people but 
which changes its location from time to time, e.g. a motorhome, a mobile 
home, a camp, etc.  Note that &%MobileResidence is disjoint from &%Residence, 
because the latter is a subclass of &%StationaryArtifact."}%
. subclass(Camp, MobileResidence)
%{Camp
"A &%MobileResidence consisting of tents and other temporary 
living quarters that is constructed on an undeveloped &%LandArea."}%
. instance(vCAMP, Camp) =>
      exists vTENT: U . instance(vTENT, Tent) /\ part(vTENT, vCAMP)
. subclass(Tent, MobileResidence)
%{Tent
"A &%MobileResidence that is made of &%Fabric and poles and 
can be easily assembled and disassembled."}%
. instance(vTENT, Tent) =>
      exists vFABRIC: U
          . instance(vFABRIC, Fabric) /\ part(vFABRIC, vTENT)
. subclass(ExecutiveResidence, PermanentResidence)
%{ExecutiveResidence
"A &%Residence of a &%chiefOfState, e.g. 
the White House, a state governor's mansion, Buckingham Palace, etc."}%
. instance(vRESIDENCE, ExecutiveResidence) =>
      exists vAREA: U; vPOSITION: U; vPERSON: U
          . located(vRESIDENCE, vAREA)
            /\ home(vPERSON, vRESIDENCE)
            /\ chiefOfState(vAREA, vPOSITION, vPERSON)
. subclass(ApartmentUnit, SingleFamilyResidence)
%{ApartmentUnit
"A &%SingleFamilyResidence that is not owned 
by any member of the &%SocialUnit that lives there."}%
. instance(vUNIT, ApartmentUnit) /\ home(vPERSON, vUNIT) =>
      not possesses(vPERSON, vUNIT)
. instance(vUNIT, ApartmentUnit) =>
      exists vBUILDING: U
          . instance(vBUILDING, ApartmentBuilding) /\ part(vUNIT, vBUILDING)
. subclass(CondominiumUnit, SingleFamilyResidence)
%{CondominiumUnit
"A &%SingleFamilyResidence that may be owned 
by a member of the &%SocialUnit that lives there."}%
. instance(vUNIT, SingleFamilyResidence)
  /\ home(vPERSON, vUNIT)
  /\ possesses(vPERSON, vUNIT)
  /\ not instance(vUNIT, Building) =>
      instance(vUNIT, CondominiumUnit)
. instance(vUNIT, CondominiumUnit) =>
      exists vBUILDING: U
          . instance(vBUILDING, CondominiumBuilding)
            /\ part(vUNIT, vBUILDING)
. subclass(House, ResidentialBuilding)
. subclass(House, SingleFamilyResidence)
%{House
"A &%ResidentialBuilding which is intended to be 
inhabited by members of the same &%SocialUnit.  &%Houses are distinguished 
from temporary housing like hotels and multi-family dwellings like condominium 
and apartment buildings."}%
. subclass(ApartmentBuilding, ResidentialBuilding)
. disjoint(ApartmentBuilding, SingleFamilyResidence)
%{ApartmentBuilding
"A &%ResidentialBuilding containing 
&%ApartmentUnits."}%
. instance(vBUILDING, ApartmentBuilding) =>
      exists vUNIT1: U; vUNIT2: U
          . instance(vUNIT1, ApartmentUnit)
            /\ instance(vUNIT2, ApartmentUnit)
            /\ part(vUNIT1, vBUILDING)
            /\ part(vUNIT2, vBUILDING)
            /\ not vUNIT1 = vUNIT2
. subclass(CondominiumBuilding, ResidentialBuilding)
. disjoint(CondominiumBuilding, SingleFamilyResidence)
%{CondominiumBuilding
"A &%ResidentialBuilding containing 
&%CondominiumUnits."}%
. instance(vBUILDING, CondominiumBuilding) =>
      exists vUNIT1: U; vUNIT2: U
          . instance(vUNIT1, CondominiumUnit)
            /\ instance(vUNIT2, CondominiumUnit)
            /\ part(vUNIT1, vBUILDING)
            /\ part(vUNIT2, vBUILDING)
            /\ not vUNIT1 = vUNIT2
. subclass(AnimalResidence, Artifact)
%{AnimalResidence
"An &%Artifact which is intended to house 
&%Animals and not &%Humans.  Note that an &%AnimalResidence may or may not 
be a &%StationaryArtifact, e.g. a horse stall is stationary while a doghouse 
generally is not."}%
. instance(vRESIDENCE, AnimalResidence) =>
      hasPurpose(vRESIDENCE,
                 True
                     when exists vANIMAL: U
                              . instance(vANIMAL, Animal)
                                /\ not instance(vANIMAL, Human)
                                /\ inhabits(vANIMAL, vRESIDENCE)
                     else False)
. subclass(PlaceOfCommerce, StationaryArtifact)
. partition(PlaceOfCommerce, CommercialBuilding, CommercialUnit)
%{PlaceOfCommerce
"A &%Building or part of a &%Building which is 
intended for organizational activities, e.g. retail or wholesale selling, 
manufacturing, office work, etc."}%
. instance(vOFFICE, PlaceOfCommerce) =>
      instance(vOFFICE, CommercialBuilding)
      \/ (exists vBUILDING: U
              . instance(vBUILDING, CommercialBuilding)
                /\ part(vOFFICE, vBUILDING))
. subclass(CommercialBuilding, Building)
. subclass(CommercialBuilding, PlaceOfCommerce)
%{CommercialBuilding
"A &%Building which is intended for 
organizational activities, e.g. retail or wholesale selling, manufacturing, 
office work, etc."}%
. subclass(CommercialUnit, PlaceOfCommerce)
%{CommercialUnit
"A &%Room or suite of &%Rooms intended for 
clerical and/or professional work of a single &%Organization."}%
. instance(vUNIT, CommercialUnit)
  /\ instance(vORG, Organization)
  /\ located(vORG, vUNIT) =>
      not (exists vOTHER: U
               . instance(vOTHER, Organization)
                 /\ located(vOTHER, vUNIT)
                 /\ not vOTHER = vORG)
. subclass(Auditorium, Building)
%{Auditorium
"Any &%Building whose purpose is to hold concerts, 
sports events, plays, etc. before an audience.  This class includes theaters, 
sports stadiums, university auditoriums, etc."}%
. instance(vAUDITORIUM, Auditorium) =>
      hasPurpose(vAUDITORIUM,
                 True
                     when exists vDEMO: U
                              . instance(vDEMO, Demonstrating)
                                /\ located(vDEMO, vAUDITORIUM)
                     else False)
. instance(vAUDITORIUM, Auditorium) =>
      exists vSTAGE: U
          . instance(vSTAGE, PerformanceStage) /\ part(vSTAGE, vAUDITORIUM)
. subclass(AuditoriumSeat, Seat)
%{AuditoriumSeat
"A &%Seat within an &%Auditorium from which one 
can observe the &%PerformanceStage."}%
. instance(vSEAT, AuditoriumSeat) =>
      exists vAUDITORIUM: U
          . instance(vAUDITORIUM, Auditorium) /\ part(vSEAT, vAUDITORIUM)
. instance(vSEAT, AuditoriumSeat)
  /\ part(vSEAT, vAUDITORIUM)
  /\ part(vSTAGE, vAUDITORIUM)
  /\ instance(vAUDITORIUM, Auditorium)
  /\ instance(vSTAGE, PerformanceStage)
  /\ located(vPERSON, vSEAT)
  /\ instance(vPERSON, Human)
  /\ subclass(vSEE, Seeing)
  /\ (forall vINST: U
          . instance(vINST, vSEE) => patient(vINST, vSTAGE)) =>
      capability(vSEE, agent, vPERSON)
. subrelation(enjoys, inScopeOfInterest)
. domain(enjoys, a_1, CognitiveAgent)
. domainSubclass(enjoys, a_2, IntentionalProcess)
%{enjoys
"(&%enjoys ?AGENT ?PROCESS) means that the 
&%CognitiveAgent ?AGENT tends to enjoy actions of type ?PROCESS, 
i.e. tends to enjoy being the &%agent or &%experiencer of such 
actions."}%
. enjoys(vAGENT, vPROCESS) =>
      desires(vAGENT,
              True
                  when exists vINSTANCE: U
                           . instance(vINSTANCE, vPROCESS)
                             /\ (agent(vINSTANCE, vAGENT)
                                 \/ experiencer(vINSTANCE, vAGENT))
                  else False)
. subrelation(expects, believes)
%{expects
"Any belief about the future.  (&%expects 
?AGENT ?BELIEF) means that (&%believes ?AGENT ?BELIEF) and, if 
?BELIEF happens, it will happen in the future, i.e. after the 
expectation."}%
. holdsDuring(vTIME1, expects(vAGENT, vFORMULA))
  /\ holdsDuring(vTIME2, a_t_r_u_e(vFORMULA, True)) =>
      earlier(vTIME1, vTIME2)
. subrelation(fears, expects)
%{fears
"(&%fears ?AGENT ?FORMULA) means that ?AGENT fears that 
the proposition ?FORMULA will be true, i.e. he/she believes that it will 
come to pass in the future and that it will be undesirable for ?AGENT."}%
. fears(vAGENT, vFORMULA) => not desires(vAGENT, vFORMULA)
. subrelation(hopes, expects)
%{hopes
"(&%hopes ?AGENT ?FORMULA) means that ?AGENT hopes that 
the proposition ?FORMULA will be true, i.e. he/she believes that it will 
come to pass in the future and that it will be desirable for ?AGENT."}%
. hopes(vAGENT, vFORMULA) => desires(vAGENT, vFORMULA)
. instance(doubts, PropositionalAttitude)
. domain(doubts, a_1, CognitiveAgent)
. domain(doubts, a_2, Formula)
%{doubts
"(&%doubts ?AGENT ?FORMULA) means that ?AGENT is unsure 
about the truth of ?FORMULA, in particular ?AGENT does not believe that 
?FORMULA is true."}%
. doubts(vAGENT, vFORMULA) => not believes(vAGENT, vFORMULA)
. instance(dislikes, ObjectAttitude)
. subrelation(dislikes, inScopeOfInterest)
. disjointRelation(dislikes, wants)
. relatedInternalConcept(dislikes, disapproves)
. domain(dislikes, a_1, CognitiveAgent)
. domain(dislikes, a_2, Object)
%{dislikes
"(&%dislikes ?AGENT ?OBJECT) means that ?AGENT has a 
feeling of antipathy to ?OBJECT, i.e. ?AGENT believes that ?OBJECT will 
thwart one of his/her goals.  Note that there is no implication that what 
is hated by an agent is not already possessed by the agent."}%
. dislikes(vAGENT, vOBJECT) =>
      desires(vAGENT, a_n_o_t(possesses(vAGENT, vOBJECT)))
. instance(disapproves, PropositionalAttitude)
. subrelation(disapproves, inScopeOfInterest)
. disjointRelation(disapproves, desires)
. domain(disapproves, a_1, CognitiveAgent)
. domain(disapproves, a_2, Formula)
%{disapproves
"(&%disapproves ?AGENT ?FORMULA) means that 
?AGENT has a feeling of antipathy to the state of affairs represented by 
?FORMULA, i.e. ?AGENT believes that the realization of ?FORMULA will 
thwart one of his/her goals.  Note that there is no implication that what 
is disapproved of by an agent is not already true."}%
. subrelation(lacks, needs)
%{lacks
"(&%lacks ?AGENT ?OBJECT) means that ?AGENT &%needs 
?OBJECT and it is not currently the case that ?AGENT &%possesses ?OBJECT."}%
. holdsDuring(vTIME, lacks(vAGENT, vOBJECT)) =>
      holdsDuring(vTIME, a_n_o_t(possesses(vAGENT, vOBJECT)))
. instance(Antisemitism, BeliefGroup)
%{Antisemitism
"The &%BeliefGroup that is characterized by a 
dislike for &%Judaism."}%
. member(vMEMBER, Antisemitism) => dislikes(vMEMBER, Judaism)
. instance(DescendantsFn, UnaryFunction)
. domain(DescendantsFn, a_1, Human)
. range(DescendantsFn, FamilyGroup)
%{DescendantsFn
"(&%DescendantsFn ?PERSON) denotes all and only 
the descendants of ?PERSON, i.e. the &%Group consisting of ?OFFSPRING who 
satisfy the following formula:  (&%ancestor ?OFFSPRING ?PERSON)."}%
. instance(vPERSON, Human)
  /\ DescendantsFn(vPERSON) = vDESCENDANTS =>
      forall vMEMBER: U
          . member(vMEMBER, vDESCENDANTS) <=> ancestor(vMEMBER, vPERSON)
. subclass(GroupOfAnimals, Group)
%{GroupOfAnimals
"Any &%Group which contains exclusively 
non-human &%members."}%
. instance(vGROUP, GroupOfAnimals) =>
      forall vMEMBER: U
          . member(vMEMBER, vGROUP) =>
                instance(vMEMBER, Animal) /\ not instance(vMEMBER, Human)
. subclass(Brood, GroupOfAnimals)
%{Brood
"A &%GroupOfAnimals that are all born at the same time 
and to the same parents."}%
. instance(vBROOD, Brood) =>
      forall vMEMBER1: U; vMEMBER2: U
          . member(vMEMBER1, vBROOD) /\ member(vMEMBER2, vBROOD) =>
                sibling(vMEMBER1, vMEMBER2)
. instance(vBROOD, Brood) =>
      exists vTIME: U
          . forall vMEMBER: U
                . member(vMEMBER, vBROOD) =>
                      exists vBIRTH: U
                          . instance(vBIRTH, Birth)
                            /\ experiencer(vBIRTH, vMEMBER)
                            /\ vTIME = WhenFn(vBIRTH)
. subclass(SportsTeam, GroupOfPeople)
%{SportsTeam
"A &%GroupOfPeople who habitually play a &%Sport 
together, either as an occupation or as a leisure activity."}%
. instance(vTEAM, SportsTeam) =>
      exists vSPORT: U
          . subclass(vSPORT, Sport) /\ capability(vSPORT, agent, vTEAM)
. subrelation(groupMember, member)
. domain(groupMember, a_1, Human)
. domain(groupMember, a_2, GroupOfPeople)
%{groupMember
"A &%subrelation of &%member, &%groupMember 
is used to relate a &%Human to a &%GroupOfPeople of which he/she is a 
&%member."}%
. subclass(CareOrganization, Organization)
. partition(CareOrganization, Hospital, MedicalClinic)
%{CareOrganization
"Any &%Organization whose purpose is to 
provide medical care for for &%Humans who reside there, either permanently 
or temporarily."}%
. instance(medicalPatient, BinaryPredicate)
%{medicalPatient
"A relation between a &%Human and a 
&%CareOrganization that treats the patient."}%
. domain(medicalPatient, a_1, Human)
. domain(medicalPatient, a_2, CareOrganization)
. instance(vORG, CareOrganization) =>
      hasPurpose(vORG,
                 True
                     when exists vPATIENT: U . medicalPatient(vPATIENT, vORG)
                     else False)
. subclass(Hospital, CareOrganization)
. subclass(Hospital, TemporaryResidence)
%{Hospital
"A &%CareOrganization where patients reside for a 
short period of time while they undergo treatment for a disease or disorder."}%
. subclass(MedicalClinic, CareOrganization)
. subclass(MedicalClinic, ComplementFn(Residence))
%{MedicalClinic
"A &%CareOrganization which provides medical care 
on an out-patient basis only, i.e. there are no rooms where patients may take 
up residence for a period of time while they receive care."}%
. subclass(Proprietorship, Corporation)
%{Proprietorship
"A &%Corporation that is owned by a single person."}%
. instance(vCORP, Proprietorship) =>
      exists vHUMAN: U
          . instance(vHUMAN, Human)
            /\ possesses(vHUMAN, vCORP)
            /\ (forall vPERSON: U
                    . possesses(vPERSON, vCORP) => vPERSON = vHUMAN)
. subclass(Restaurant, Corporation)
%{Restaurant
"Any &%Corporation whose services include selling 
&%Food to customers which is intended to be eaten on the premises."}%
. instance(vCOMPANY, Restaurant) =>
      exists vSERVICE: U; vFOOD: U
          . instance(vSERVICE, CommercialService)
            /\ agent(vSERVICE, vCOMPANY)
            /\ instance(vSERVICE, Selling)
            /\ patient(vSERVICE, vFOOD)
            /\ instance(vFOOD, Food)
. subclass(Cafeteria, Restaurant)
%{Cafeteria
"Any &%Restaurant which does not offer table service.  
&%Food is selected and purchased at a central counter."}%
. subclass(Tavern, Restaurant)
%{Tavern
"A &%Restaurant whose primary service is selling 
&%AlcoholicBeverages to customers."}%
. instance(vCOMPANY, Tavern) =>
      exists vSERVICE: U; vBEVERAGE: U
          . instance(vSERVICE, CommercialService)
            /\ agent(vSERVICE, vCOMPANY)
            /\ instance(vSERVICE, Selling)
            /\ patient(vSERVICE, vBEVERAGE)
            /\ instance(vBEVERAGE, Beverage)
. subclass(TransportationCompany, Corporation)
%{TransportationCompany
"Any &%Corporation whose services 
include &%Transportation, e.g. a &%RailroadCompany, an airline, a cruise 
ship line, etc."}%
. instance(vCOMPANY, TransportationCompany) =>
      exists vSERVICE: U
          . instance(vSERVICE, CommercialService)
            /\ agent(vSERVICE, vCOMPANY)
            /\ instance(vSERVICE, Transportation)
. subclass(RailroadCompany, TransportationCompany)
%{RailroadCompany
"Any &%TransportationCompany whose services 
include &%Transportation by &%Train."}%
. instance(vCOMPANY, RailroadCompany) =>
      exists vSERVICE: U; vTRAIN: U
          . instance(vSERVICE, CommercialService)
            /\ agent(vSERVICE, vCOMPANY)
            /\ instance(vSERVICE, Transportation)
            /\ instrument(vSERVICE, vTRAIN)
            /\ instance(vTRAIN, Train)
. subclass(WholesaleStore, MercantileOrganization)
%{WholesaleStore
"A &%MercantileOrganization that sells its 
goods exclusively to &%Corporations."}%
. instance(vSTORE, WholesaleStore)
  /\ customer(vCUSTOMER, vSTORE) =>
      instance(vCUSTOMER, Corporation)
. subclass(RetailStore, MercantileOrganization)
. disjoint(RetailStore, WholesaleStore)
%{RetailStore
"A &%Store where individuals who are not
representing an &%Organization purchase items.  This distinguishes
retail stores from wholesale establishments, where the purchasers
are businesses or their representatives, as well as mail order or
office buildings where transactions are facillitated but the consumer
does not take possession of the item on the premises.  More succinctly,
the complement of &%WholesaleStore, i.e. 
&%MercantileOrganizations that sell their goods to the general public."}%
. instance(vX, RetailStore) =>
      capability(Selling, located, vX)
      /\ (exists vLOC: U; vEV: U
              . instance(vEV, Selling)
                /\ destination(vEV, vP)
                /\ instance(vP, Human))
. subclass(GroceryStore, RetailStore)
%{GroceryStore
"A &%RetailStore that sells &%Food, and perhaps 
other items as well."}%
. instance(vSTORE, GroceryStore) =>
      exists vSELL: U; vFOOD: U
          . instance(vSELL, Selling)
            /\ agent(vSELL, vSTORE)
            /\ patient(vSELL, vFOOD)
            /\ instance(vFOOD, Food)
. subclass(OfferingForSale, Offering)
%{OfferingForSale
"&%Offering to sell something to someone."}%
. instance(vSALE, OfferingForSale) /\ agent(vSALE, vAGENT) =>
      patient(vSALE,
              True
                  when exists vSELL: U; vOBJ: U
                           . instance(vSELL, Selling)
                             /\ patient(vSELL, vOBJ)
                             /\ agent(vSELL, vAGENT)
                  else False)
. subclass(BargainSale, Offering)
%{BargainSale
"&%Offering to sell something to someone at a 
reduced price."}%
. instance(vSALE, BargainSale)
  /\ patient(vSALE, vOBJ)
  /\ instance(vOBJ, Object) =>
      exists vPRICE1: U; vPRICE2: U; vAGENT1: U; vAGENT2: U
          . holdsDuring(ImmediatePastFn(WhenFn(vSALE)),
                        price(vOBJ, vPRICE1, vAGENT1))
            /\ holdsDuring(WhenFn(vSALE), price(vOBJ, vPRICE2, vAGENT2))
            /\ lessThan(vPRICE2, vPRICE1)
. subclass(HolyBible, Book)
%{HolyBible
"Any instance of the collection of writings which is 
regarded as scripture by those who embrace &%Christianity."}%
. subclass(MissionOrganization, ReligiousOrganization)
%{MissionOrganization
"The class of &%ReligiousOrganizations 
that send members to foreign countries with the aim of coverting citizens 
of those countries to the beliefs of the &%ReligiousOrganization."}%
. subclass(ReligiousBuilding, Building)
%{ReligiousBuilding
"A &%Building which is intended to be 
used for religious worship.  This class covers churches, temples, 
religious shrines, etc."}%
. instance(vBUILDING, ReligiousBuilding) =>
      hasPurpose(vBUILDING,
                 True
                     when exists vSERVICE: U
                              . instance(vSERVICE, ReligiousService)
                                /\ located(vSERVICE, vBUILDING)
                     else False)
. subclass(Steeple, StationaryArtifact)
%{Steeple
"A component of a &%ReligiousBuilding that is tall 
and narrow and symbolizes the connection between humanity and a deity."}%
. instance(vSTEEPLE, Steeple) =>
      exists vBUILDING: U
          . instance(vBUILDING, Building) /\ part(vSTEEPLE, vBUILDING)
. subclass(ReligiousService, ReligiousProcess)
. subclass(ReligiousService, Demonstrating)
%{ReligiousService
"A formal process of public worship which is 
typically carried out in a church, temple or other sanctified building and 
which typically accords with a prescribed set of rules."}%
. subclass(ChristianService, ReligiousService)
%{ChristianService
"Any &%ReligiousService that is conducted by 
&%members of &%Christianity."}%
. instance(vSERVICE, ChristianService)
  /\ agent(vSERVICE, vPERSON)
  /\ instance(vPERSON, Human) =>
      member(vPERSON, Christianity)
. subclass(Praying, ReligiousProcess)
. subclass(Praying, Requesting)
%{Praying
"A formal or informal process of private worship which 
may or may not be carried out in a &%ReligiousBuilding."}%
. subclass(PartyPlatform, FactualText)
%{PartyPlatform
"A &%Text which is authored by a &%PoliticalParty 
and which contains the core goals and principles of the &%PoliticalParty for a 
particular year or election cycle."}%
. subclass(vPLATFORM, PartyPlatform)
  /\ authors(vPARTY, vPLATFORM)
  /\ instance(vPARTY, Organization) =>
      instance(vPARTY, PoliticalParty)
. subclass(vPLATFORM, PartyPlatform)
  /\ authors(vPARTY, vPLATFORM)
  /\ instance(vPARTY, PoliticalParty)
  /\ instance(vINST, vPLATFORM)
  /\ containsInformation(vINST, vPROP) =>
      believes(vPARTY, vPROP)
. instance(ResidentFn, UnaryFunction)
. domain(ResidentFn, a_1, GeopoliticalArea)
. range(ResidentFn, GroupOfPeople)
%{ResidentFn
"(&%ResidentFn ?AREA) denotes the 
&%GroupOfPeople who have their &%home in ?AREA."}%
. member(vPERSON, ResidentFn(vAREA)) => home(vPERSON, vAREA)
. subrelation(CitizenryFn, ResidentFn)
. domain(CitizenryFn, a_1, GeopoliticalArea)
. range(CitizenryFn, GroupOfPeople)
%{CitizenryFn
"(&%CitizenryFn ?AREA) denotes the 
&%GroupOfPeople who are legal and permanent residents of the 
&%GeopoliticalArea ?AREA."}%
. instance(vAREA, GeopoliticalArea)
  /\ vCITIZENRY = CitizenryFn(vAREA)
  /\ vPOPULATION = ResidentFn(vAREA) =>
      greaterThanOrEqualTo(vPOPULATION, vCITIZENRY)
. instance(PerCapitaFn, BinaryFunction)
. domain(PerCapitaFn, a_1, Quantity)
. domain(PerCapitaFn, a_2, GeopoliticalArea)
. range(PerCapitaFn, Quantity)
%{PerCapitaFn
"(&%PerCapitaFn ?AREA ?QUANTITY) denotes the 
average amount of ?QUANTITY possessed by a resident of &%GeopoliticalArea 
?AREA."}%
. PerCapitaFn(vAREA, vQUANTITY1) = vQUANTITY2 =>
      exists vPOPULATION: U
          . vPOPULATION = CardinalityFn(ResidentFn(vAREA))
            /\ vQUANTITY2 = DivisionFn(vQUANTITY1, vPOPULATION)
. subclass(CityDistrict, GeopoliticalArea)
%{CityDistrict
"Any &%geopoliticalSubdivision of a &%City."}%
. instance(vDISTRICT, CityDistrict) <=>
      (exists vCITY: U
           . instance(vCITY, City)
             /\ geopoliticalSubdivision(vDISTRICT, vCITY))
. subclass(Downtown, CityDistrict)
%{Downtown
"The commercial center of a &%City.  The part of the 
&%City that contains more shops and offices than any other part."}%
. subclass(Park, LandArea)
%{Park
"A publicly owned &%LandArea which is intended to be used 
for recreation and/or exercise."}%
. instance(vPARK, Park) =>
      exists vGOV: U
          . instance(vGOV, Government) /\ possesses(vGOV, vPARK)
. instance(vPARK, Park) =>
      hasPurpose(vPARK,
                 True
                     when exists vREC: U
                              . instance(vREC, RecreationOrExercise)
                                /\ located(vREC, vPARK)
                     else False)
. instance(UnitedStatesDepartmentOfState, GovernmentOrganization)
. subOrganization(UnitedStatesDepartmentOfState,
                  GovernmentFn(UnitedStates))
%{UnitedStatesDepartmentOfState
"The &%subOrganization of the US 
government that sets and enforces foreign policy."}%
. instance(UnitedStatesDepartmentOfInterior,
           GovernmentOrganization)
. subOrganization(UnitedStatesDepartmentOfInterior,
                  GovernmentFn(UnitedStates))
%{UnitedStatesDepartmentOfInterior
"Manages and preserves public lands 
and natural resources in the &%UnitedStates."}%
. subclass(GovernmentSecretary, Position)
%{GovernmentSecretary
"The class of &%Positions where the position holder 
is head of an adminstrative department of &%Government."}%
. instance(SecretaryOfTheInterior, GovernmentSecretary)
%{SecretaryOfTheInterior
"The head of the &%UnitedStatesDepartmentOfInterior."}%
. occupiesPosition(vPERSON, SecretaryOfTheInterior,
                   UnitedStatesDepartmentOfInterior) =>
      leader(UnitedStatesDepartmentOfInterior, vPERSON)
. instance(SecretaryOfTheTreasury, GovernmentSecretary)
%{SecretaryOfTheTreasury
"The head of the United States Treasury Department."}%
. subclass(StateGovernment, Government)
%{StateGovernment
"The class of &%Governments whose 
jurisdictions are &%StateOrProvinces."}%
. instance(vGOVERNMENT, StateGovernment) =>
      exists vSTATE: U
          . instance(vSTATE, StateOrProvince)
            /\ GovernmentFn(vSTATE) = vGOVERNMENT
. instance(UnitedStatesCongress, LegislativeOrganization)
. subOrganization(UnitedStatesCongress, GovernmentFn(UnitedStates))
%{UnitedStatesCongress
"The legislative branch of the government 
of the &%UnitedStates."}%
. subclass(MilitaryService, MilitaryOrganization)
%{MilitaryService
"A branch of the armed forces of a &%Nation.  
For example, there are five military services in the United States, the army, 
the navy, the air force, the marines, and the coast guard."}%
. subclass(Army, MilitaryService)
%{Army
"&%MilitaryServices that are land forces."}%
. subclass(MilitaryUnit, MilitaryOrganization)
%{MilitaryUnit
"Any &%MilitaryOrganization that can be dispatched 
to an area of operations."}%
. subclass(InfantryUnit, MilitaryUnit)
%{InfantryUnit
"A &%MilitaryUnit composed primarily of &%Soldiers 
who fight on foot, i.e. without the use of heavy artillery."}%
. subclass(MilitaryDivision, MilitaryUnit)
%{MilitaryDivision
"Any &%MilitaryUnit with the rank of 
division."}%
. subclass(MilitaryBrigade, MilitaryUnit)
%{MilitaryBrigade
"Any &%MilitaryUnit with the rank of 
brigade."}%
. subclass(MilitaryCompany, MilitaryUnit)
%{MilitaryCompany
"Any &%MilitaryUnit with the rank of 
company."}%
. subclass(MilitaryRegiment, MilitaryUnit)
%{MilitaryRegiment
"Any &%MilitaryUnit with the rank of 
regiment."}%
. subclass(Commission, Organization)
%{Commission
"A small, temporary &%Organization whose purpose 
is to investigate some issue."}%
. instance(vCOMMISSION, Commission) =>
      hasPurpose(vCOMMISSION,
                 True
                     when exists vINVESTIGATE: U; vISSUE: U
                              . instance(vINVESTIGATE, Investigating)
                                /\ patient(vINVESTIGATE, vISSUE)
                                /\ agent(vINVESTIGATE, vCOMMISSION)
                     else False)
. subclass(ServiceOrganization, Organization)
%{ServiceOrganization
"An &%Organization that performs 
a public service and is regulated by the &%Government."}%
. instance(vORG, ServiceOrganization) =>
      exists vPROC: U; vGOV: U
          . instance(vPROC, RegulatoryProcess)
            /\ patient(vPROC, vORG)
            /\ agent(vPROC, vGOV)
            /\ instance(vGOV, Government)
. subclass(OrganizationalBoard, Organization)
%{OrganizationalBoard
"Part of an &%Organization that 
is responsible for managing the &%Organization."}%
. instance(vBOARD, OrganizationalBoard) =>
      exists vORG: U; vMANAGE: U
          . subOrganization(vBOARD, vORG)
            /\ instance(vMANAGE, Managing)
            /\ agent(vMANAGE, vBOARD)
            /\ patient(vMANAGE, vORG)
. subclass(SecurityUnit, Organization)
%{SecurityUnit
"The &%Organization that is charged with 
ensuring the security of members of the overall &%Organization and the 
property of the &%Organization."}%
. instance(vUNIT, SecurityUnit) /\ subOrganization(vUNIT, vORG) =>
      holdsObligation(True
                          when exists vMAINTAIN: U
                                   . instance(vMAINTAIN, Maintaining)
                                     /\ agent(vMAINTAIN, vUNIT)
                                     /\ patient(vMAINTAIN, vORG)
                          else False)
. subclass(UnionOrganization, Organization)
%{UnionOrganization
"An &%Organization comprised of workers from 
the same &%Corporation or &%Industry.  The purpose of the &%UnionOrganization 
is to strengthen its representation in bargaining with the &%Corporation or 
&%Industry."}%
. instance(vORG, UnionOrganization) =>
      exists vCOLL: U
          . member(vMEMBER, vORG) =>
                (instance(vCOLL, Corporation) /\ employs(vCOLL, vMEMBER))
                \/ (exists vCORP: U
                        . instance(vCOLL, Industry)
                          /\ member(vCORP, vCOLL)
                          /\ employs(vCORP, vMEMBER))
. subclass(OrganicCompound, CompoundSubstance)
%{OrganicCompound
"Any &%CompoundSubstance that has a &%Carbon 
base."}%
. instance(vCOMPOUND, OrganicCompound)
  /\ instance(vCOMPOUND, Molecule) =>
      exists vCARBON: U
          . instance(vCARBON, Carbon) /\ part(vCARBON, vCOMPOUND)
. subclass(Alcohol, OrganicCompound)
%{Alcohol
"&%OrganicCompounds that are produced from hydrocarbons 
by distillation."}%
. subclass(SodiumChloride, CompoundSubstance)
. names(a_Quot_s_a_l_t_Quot, SodiumChloride)
. names(a_Quot_N_a_C_l_Quot, SodiumChloride)
%{SodiumChloride
"&%SodiumChloride is the compound of &%Sodium and &%Chloride,
which may appear in crystalline form or in solution with water or other substances.
It is a compound found in solution in significant quantities in sea water."}%
. instance(vSALT, SodiumChloride) =>
      exists vSYNTHESIS: U; vSODIUM: U; vCHLORINE: U
          . instance(vSYNTHESIS, ChemicalSynthesis)
            /\ resource(vSYNTHESIS, vSODIUM)
            /\ instance(vSODIUM, Sodium)
            /\ resource(vSYNTHESIS, vCHLORINE)
            /\ instance(vCHLORINE, Chlorine)
            /\ a_r_e_s_u_l_t(vSYNTHESIS, vSALT)
. subclass(SalineSolution, Solution)
%{SalineSolution
"A &%Solution consisting of &%SodiumChloride and 
&%Water."}%
. instance(vSOLUTION, SalineSolution) /\ part(vPART, vSOLUTION) =>
      instance(vPART, SodiumChloride) \/ instance(vPART, Water)
. instance(vWATER, Water) =>
      exists vSYNTHESIS: U; vHYDROGEN: U; vOXYGEN: U
          . instance(vSYNTHESIS, ChemicalSynthesis)
            /\ resource(vSYNTHESIS, vHYDROGEN)
            /\ instance(vHYDROGEN, Hydrogen)
            /\ resource(vSYNTHESIS, vOXYGEN)
            /\ instance(vOXYGEN, Oxygen)
            /\ a_r_e_s_u_l_t(vSYNTHESIS, vWATER)
. subclass(Oil, Solution)
%{Oil
"A greasy, viscous &%Solution that cannot be mixed with &%Water.  
Note that this general class covers petroleum oil, vegetable oil, animal fat, etc."}%
. instance(vOIL, Oil) =>
      not (exists vMIX: U; vWATER: U
               . instance(vMIX, Mixture)
                 /\ part(vWATER, vMIX)
                 /\ instance(vWATER, Water)
                 /\ part(vOIL, vMIX))
. subclass(Surfactant, Substance)
%{Surfactant
"Surfactants, also known as wetting agents, 
lower the surface tension of a &%Liquid, allowing easier spreading.  The 
term surfactant is a compression of 'Surface active agent'.  Surfactants 
are usually organic compounds that contain both hydrophobic and 
hydrophilic groups, and are thus semi-soluble in both organic and aqueous 
solvents."}%
. subclass(Detergent, Surfactant)
%{Detergent
"A detergent is a compound, or a mixture of 
compounds, whose molecules have two distinct regions: one that is 
hydrophilic, and dissolves easily in water, and another region that is 
hydrophobic, with little (if any) affinity for water.  As a consequence, 
these compounds can aid in the solubilization of hydrophobic compounds in 
water, and usually are optimized for this property.  Though &%Soap also has 
these properties, soaps in general are not considered detergents.  &%Soap is 
a particular type of surfactant that is derived from oils and fats.  They 
are created through the saponification process whereby the ester linkage 
in a vegetable oil or fat is hydrolytically cleaved, creating a sodium or 
potassium salt of a fatty acid (i.e.  soap).  Both detergents and soaps 
are considered to be surfactants.  Surfactants that are not soaps are 
considered to be detergents.  Detergents are also commonly known as any 
cleaning mixture containing surfactants.  (from Wikipedia)"}%
. instance(vDETERGENT, Detergent) =>
      hasPurpose(vDETERGENT,
                 True
                     when exists vREMOVE: U; vSUBSTANCE: U; vSURFACE: U;
                                 vOBJECT: U
                              . instance(vREMOVE, Removing)
                                /\ instance(vSUBSTANCE, Substance)
                                /\ patient(vREMOVE, vSUBSTANCE)
                                /\ origin(vREMOVE, vSURFACE)
                                /\ surface(vSURFACE, vOBJECT)
                     else False)
. subclass(Glue, Mixture)
%{Glue
"Any &%Mixture whose purpose is to be used as the &%instrument 
of &%Attaching one thing to another."}%
. instance(vGLUE, Glue) =>
      hasPurpose(vGLUE,
                 True
                     when exists vATTACH: U
                              . instance(vATTACH, Attaching)
                                /\ instrument(vATTACH, vGLUE)
                     else False)
. subclass(Glass, Mixture)
%{Glass
"A transparent or translucent &%Mixture of silicates."}%
. subclass(MetallicAlloy, Mixture)
%{MetallicAlloy
"A &%Mixture of two or more &%Metals, and possibly 
nonmetallic elements as well.  For example, steel is an alloy containing iron 
and manganese."}%
. instance(vALLOY, MetallicAlloy) =>
      exists vMETAL1: U; vMETAL2: U
          . instance(vMETAL1, Metal)
            /\ instance(vMETAL2, Metal)
            /\ not vMETAL1 = vMETAL2
            /\ part(vMETAL1, vALLOY)
            /\ part(vMETAL2, vALLOY)
. subclass(Steel, MetallicAlloy)
%{Steel
"A &%MetallicAlloy made from &%Iron and other elements."}%
. instance(vSTEEL, Steel) =>
      exists vIRON: U . instance(vIRON, Iron) /\ part(vIRON, vSTEEL)
. subclass(Brass, MetallicAlloy)
%{Brass
"A &%MetallicAlloy made from &%Copper and &%Zinc."}%
. instance(vBRASS, Brass) =>
      exists vCOPPER: U; vZINC: U
          . instance(vCOPPER, Copper)
            /\ instance(vZINC, Zinc)
            /\ part(vCOPPER, vBRASS)
            /\ part(vZINC, vBRASS)
. subclass(Powder, Substance)
%{Powder
"Any &%Solid &%Substance which consists of loose, 
identical, and very small particles."}%
. instance(vPOWDER, Powder) => attribute(vPOWDER, Solid)
. subclass(Fallout, Powder)
%{Fallout
"Radioactive powder that is typically dispersed by 
the explosion of a nuclear weapon."}%
. instance(vPOWDER, Fallout) =>
      capability(RadiatingNuclear, instrument, vPOWDER)
. subclass(Fog, WaterCloud)
%{"Any &%WaterCloud that is in contact with the ground."}%
. instance(vFOG, Fog) =>
      exists vLAND: U
          . instance(vLAND, LandArea) /\ meetsSpatially(vFOG, vLAND)
. subclass(Ice, Water)
%{Ice
"&%Water that has the &%PhysicalState of &%Solid."}%
. instance(vICE, Ice) <=>
      instance(vICE, Water) /\ attribute(vICE, Solid)
. instance(vICE, Ice)
  /\ measure(vICE, MeasureFn(vNUMBER, CelsiusDegree)) =>
      lessThanOrEqualTo(vNUMBER, a_0)
. subclass(Field, LandArea)
%{Field
"A &%LandArea that has been cleared of &%BotanicalTrees.  
Note that a &%Field is not necessarily used for the cultivation of crops and 
that a &%Field may be very small, e.g. &%Lawn is a subclass of &%Field."}%
. instance(vFIELD, Field) =>
      not (exists vTREE: U
               . instance(vTREE, BotanicalTree) /\ located(vTREE, vFIELD))
. subclass(Lawn, Field)
%{Lawn
"A &%Field of cultivated and mowed &%Grass."}%
. instance(vLAWN, Lawn) =>
      exists vGRASS: U
          . instance(vGRASS, Grass) /\ located(vGRASS, vLAWN)
. subclass(MilitaryFront, GeographicArea)
%{MilitaryFront
"A &%GeographicArea along which opposing military 
forces confront one another in a &%Battle."}%
. holdsDuring(vTIME, instance(vAREA, MilitaryFront)) =>
      exists vBATTLE: U
          . instance(vBATTLE, Battle)
            /\ located(vBATTLE, vAREA)
            /\ temporalPart(vTIME, vBATTLE)
. partition(Region, GeographicArea, SpaceRegion)
. subclass(SpaceRegion, Region)
. disjoint(SpaceRegion, GeographicArea)
. partition(SpaceRegion, AtmosphericRegion, OuterSpaceRegion)
%{SpaceRegion
"The class of all &%Regions which are not 
&%GeographicAreas."}%
. subclass(OuterSpaceRegion, SpaceRegion)
%{OuterSpaceRegion
"The class of all &%Regions which are 
neither &%GeographicAreas nor &%AtmosphericRegions."}%
. subclass(StormFront, AtmosphericRegion)
%{StormFront
"The &%Region where two or more unstable air 
masses meet."}%
. instance(vFRONT, StormFront) =>
      exists vAIR1: U; vAIR2: U
          . instance(vAIR1, Air)
            /\ instance(vAIR2, Air)
            /\ between(vAIR1, vFRONT, vAIR2)
. instance(Outside, Region)
%{Outside
"Any &%Region which is not enclosed by a &%Building 
or part of a &%Building."}%
. instance(vOUTSIDE, Outside) =>
      not (exists vBUILDING: U; vTHING: U
               . instance(vBUILDING, Building)
                 /\ located(vTHING, vBUILDING)
                 /\ located(vTHING, vOUTSIDE))
. subclass(BiologicalSpecies, Class)
%{BiologicalSpecies
"The &%Class of all biological species, i.e. 
the class of all classes of &%Organism whose instances can interbreed."}%
. instance(vSPECIES, BiologicalSpecies) =>
      subclass(vSPECIES, Organism)
. subclass(Wood, Tissue)
. subclass(Wood, PlantSubstance)
%{Wood
"&%Tissue that comprises the inner trunk of &%Trees.  
It is often used in constructing &%Buildings and other &%Artifacts.
Wood is the principal substance making up a tree, and is distinguished from the
bark, roots, flowers, seeds, fruit and leaves."}%
. subclass(Opium, BiologicallyActiveSubstance)
. subclass(Opium, PlantSubstance)
%{Opium
"A substance harvested from the seed capsules of the 
opium poppy that contains various powerful alkaloids."}%
. subclass(Grass, FloweringPlant)
%{Grass
"&%FloweringPlants with green, narrow leaves that are 
used for lawns and &%Fields. &%Grass includes any plant of the family 
Gramineae, a widely distributed group of mostly annual and perennial 
herbs."}%
. subclass(Tumor, AbnormalAnatomicalStructure)
%{Tumor
"Any &%AbnormalAnatomicalStructure which consists of a 
mass of &%Tissue.  Note that this class covers both malignant (i.e. cancerous) 
and benign tumors."}%
. instance(vTUMOR, Tumor) =>
      forall vPART: U . part(vPART, vTUMOR) => instance(vPART, Tissue)
. subclass(Sweat, AnimalSubstance)
%{Sweat
"An &%AnimalSubstance that contains &%SodiumChloride 
and is produced by the sweat glands."}%
. instance(vSWEAT, Sweat) =>
      exists vPART: U
          . instance(vPART, SodiumChloride) /\ part(vPART, vSWEAT)
. subclass(PlantLeaf, PlantAnatomicalStructure)
. subclass(PlantLeaf, Organ)
%{PlantLeaf
"An &%Organ of &%Plants whose main purpose is 
photosynthesis."}%
. subclass(PlantBranch, PlantAnatomicalStructure)
. subclass(PlantBranch, BodyPart)
%{PlantBranch
"The stem of a &%Plant or any shoot arising from 
the stem of a &%Plant."}%
. subclass(PlantRoot, PlantAnatomicalStructure)
. subclass(PlantRoot, Organ)
%{PlantRoot
"An &%Organ of &%Plants whose main purpose is 
twofold, viz. to absorb nutrients from the ground and to anchor the &%Plant 
in place."}%
. subclass(Flower, PlantAnatomicalStructure)
. subclass(Flower, Organ)
%{Flower
"The reproductive organ of &%FloweringPlants."}%
. instance(vFLOWER, Flower) =>
      exists vPLANT: U
          . instance(vPLANT, FloweringPlant) /\ part(vFLOWER, vPLANT)
. subclass(Antibody, Protein)
%{Antibody
"An immunoglobulin which is produced by the body 
and which has the ability to neutralize &%Antigens."}%
. instance(vBODY, Antibody) =>
      hasPurpose(vBODY,
                 True
                     when exists vDEST: U; vANTI: U
                              . instance(vDEST, Destruction)
                                /\ agent(vDEST, vBODY)
                                /\ patient(vDEST, vANTI)
                                /\ instance(vANTI, Antigen)
                     else False)
. subclass(Antigen, BiologicallyActiveSubstance)
%{Antigen
"Any &%BiologicallyActiveSubstance that has the 
capacity to stimulate the production of &%Antibodies."}%
. subclass(LiquidBodySubstance, BodySubstance)
%{LiquidBodySubstance
"Any &%BodySubstance which is &%Liquid 
under normal circumstances."}%
. instance(vSUBSTANCE, LiquidBodySubstance) =>
      attribute(vSUBSTANCE, Liquid)
. subclass(Serum, LiquidBodySubstance)
. disjoint(Serum, Blood)
%{Serum
"Any &%LiquidBodySubstance other than &%Blood."}%
. subclass(Milk, LiquidBodySubstance)
. subclass(Milk, Beverage)
%{Milk
"A nutritious &%BodySubstance produced by &%Mammals."}%
. instance(vMILK, Milk) =>
      exists vPROCESS: U; vMAMMAL: U
          . instance(vMAMMAL, Mammal)
            /\ instrument(vPROCESS, vMAMMAL)
            /\ a_r_e_s_u_l_t(vPROCESS, vMILK)
. subclass(CellNucleus, OrganicObject)
%{CellNucleus
"The part of the &%Cell that contains DNA and 
RNA."}%
. instance(vNUCLEUS, CellNucleus) =>
      exists vCELL: U . instance(vCELL, Cell) /\ part(vNUCLEUS, vCELL)
. subclass(AlcoholicBeverage, Beverage)
%{AlcoholicBeverage
"Any &%Beverage that contains &%Alcohol."}%
. instance(vBEVERAGE, AlcoholicBeverage) =>
      exists vALCOHOL: U
          . instance(vALCOHOL, Alcohol) /\ part(vALCOHOL, vBEVERAGE)
. subclass(DistilledAlcoholicBeverage, AlcoholicBeverage)
%{DistilledAlcoholicBeverage
"An &%AlcoholicBeverage that has 
had some part of its &%Water content removed by distillation.  This class 
covers drinks of unmixed, hard liquor."}%
. instance(vBEVERAGE, DistilledAlcoholicBeverage) =>
      exists vREMOVE: U; vWATER: U
          . instance(vREMOVE, Removing)
            /\ patient(vREMOVE, vWATER)
            /\ instance(vWATER, Water)
            /\ origin(vREMOVE, vBEVERAGE)
. subclass(Whiskey, DistilledAlcoholicBeverage)
%{Whiskey
"A &%DistilledAlcoholicBeverage that is prepared by 
distilling fermented grain mash."}%
. subclass(Beer, AlcoholicBeverage)
%{Beer
"An &%AlcoholicBeverage that is prepared by fermenting 
malt and hops."}%
. subclass(SpinalColumn, Organ)
. subclass(SpinalColumn, AnimalAnatomicalStructure)
%{SpinalColumn
"A flexible column made out of bones called 
vertebrae. The main function of the &%SpinalColumn is to protect the 
spinal cord."}%
. instance(vVERT, Vertebrate) <=>
      (exists vSPINE: U
           . instance(vVERT, Animal)
             /\ component(vSPINE, vVERT)
             /\ instance(vSPINE, SpinalColumn))
. subclass(Skin, BodyCovering)
. subclass(Skin, AnimalAnatomicalStructure)
%{Skin
"A BodyCovering that comprises part of the surface 
of &%Animals."}%
. instance(vSKIN, Skin) =>
      exists vSURFACE: U; vANIMAL: U
          . surface(vSURFACE, vANIMAL)
            /\ part(vSKIN, vANIMAL)
            /\ instance(vANIMAL, Animal)
            /\ overlapsSpatially(vSKIN, vSURFACE)
. subclass(BronchialDuct, BodyVessel)
. subclass(BronchialDuct, AnimalAnatomicalStructure)
%{BronchialDuct
"Any &%BodyVessel which is located in a 
&%Lung and which carries oxygen from the trachea to the alveoli."}%
. instance(vDUCT, BronchialDuct) =>
      exists vLUNG: U . instance(vLUNG, Lung) /\ located(vDUCT, vLUNG)
. subclass(BloodVessel, BodyVessel)
. subclass(BloodVessel, AnimalAnatomicalStructure)
%{BloodVessel
"Any &%BodyVessel which is used to circulate 
&%Blood from one part of the body to another."}%
. instance(vVESSEL, BloodVessel) =>
      exists vBLOOD: U; vTRANSFER: U
          . instance(vBLOOD, Blood)
            /\ instance(vTRANSFER, Transfer)
            /\ patient(vTRANSFER, vBLOOD)
            /\ instrument(vTRANSFER, vVESSEL)
. subclass(Artery, BloodVessel)
%{Artery
"Any &%BloodVessel which transfers &%Blood from 
the &%Heart to the extremities of the body."}%
. instance(vARTERY, Artery)
  /\ instance(vTRANSFER, Transfer)
  /\ patient(vTRANSFER, vBLOOD)
  /\ instrument(vTRANSFER, vARTERY)
  /\ instance(vBLOOD, Blood) =>
      exists vHEART: U
          . instance(vHEART, Heart) /\ origin(vTRANSFER, vHEART)
. subclass(PulmonaryArtery, Artery)
%{PulmonaryArtery
"An &%Artery that carries &%Blood from 
the &%Heart to a &%Lung."}%
. instance(vARTERY, PulmonaryArtery)
  /\ instance(vTRANSFER, Transfer)
  /\ patient(vTRANSFER, vBLOOD)
  /\ instrument(vTRANSFER, vARTERY)
  /\ instance(vBLOOD, Blood) =>
      exists vLUNG: U
          . instance(vLUNG, Lung) /\ destination(vTRANSFER, vLUNG)
. subclass(Lung, Organ)
. subclass(Lung, AnimalAnatomicalStructure)
%{Lung
"A respiratory organ of &%Vertebrates.  Its function is 
to furnish the blood with oxygen and to remove carbon dioxide."}%
. instance(vVERT, Vertebrate) =>
      exists vLUNG: U . component(vLUNG, vVERT) /\ instance(vLUNG, Lung)
. capability(Breathing, experiencer, vANIMAL) =>
      exists vLUNG: U
          . component(vLUNG, vANIMAL) /\ instance(vLUNG, Lung)
. subclass(Heart, Organ)
. subclass(Heart, AnimalAnatomicalStructure)
%{Heart
"The &%Organ that pumps &%Blood throughout the body."}%
. instance(vHEART, Heart) =>
      exists vTRANSFER: U; vBLOOD: U
          . instance(vTRANSFER, Transfer)
            /\ instance(vBLOOD, Blood)
            /\ instrument(vTRANSFER, vHEART)
            /\ patient(vTRANSFER, vBLOOD)
. subclass(Liver, Organ)
. subclass(Liver, AnimalAnatomicalStructure)
%{Liver
"An &%Organ that secretes bile and serves metabolic 
functions."}%
. subclass(Mouth, AnimalAnatomicalStructure)
. subclass(Mouth, BodyPart)
%{Mouth
"Part of the &%Face, used for &%Ingesting &%Food 
and &%Vocalizing."}%
. instance(vMOUTH, Mouth) =>
      exists vFACE: U . instance(vFACE, Face) /\ part(vFACE, vMOUTH)
. subclass(Tongue, AnimalAnatomicalStructure)
. subclass(Tongue, BodyPart)
%{Tongue
"Part of the &%Mouth, used for &%Tasting &%Food, 
&%Vocalizing, and the initial stage of &%Digesting."}%
. instance(vTONGUE, Tongue) =>
      exists vMOUTH: U . instance(vMOUTH, Mouth) /\ part(vTONGUE, vMOUTH)
. subclass(Tooth, Bone)
%{Tooth
"Part of the &%Mouth, used for biting and chewing."}%
. instance(vTOOTH, Tooth) =>
      exists vMOUTH: U . instance(vMOUTH, Mouth) /\ part(vTOOTH, vMOUTH)
. subclass(Chewing, BodyMotion)
%{Chewing
"Breaking up or mashing &%Food with one's teeth."}%
. instance(vCHEW, Chewing) /\ resource(vCHEW, vFOOD) =>
      instance(vFOOD, Food)
. instance(vCHEW, Chewing) /\ instrument(vCHEW, vTOOTH) =>
      instance(vTOOTH, Tooth)
. instance(vCHEW, Chewing) =>
      exists vEAT: U . instance(vEAT, Eating) /\ subProcess(vCHEW, vEAT)
. subclass(Lip, AnimalAnatomicalStructure)
. subclass(Lip, BodyPart)
%{Lip
"Folds of &%Tissue surrounding the mouths of some 
&%Vertebrates."}%
. instance(vLIP, Lip) =>
      exists vMOUTH: U . instance(vMOUTH, Mouth) /\ part(vLIP, vMOUTH)
. subclass(Kissing, Touching)
%{Kissing
"The class of &%Touching processes where the lips 
of two persons are brought into contact with each other."}%
. instance(vKISS, Kissing) =>
      exists vPERSON1: U; vPERSON2: U; vLIP1: U; vLIP2: U
          . agent(vKISS, vPERSON1)
            /\ agent(vKISS, vPERSON2)
            /\ instance(vPERSON1, Human)
            /\ instance(vPERSON2, Human)
            /\ not vPERSON1 = vPERSON2
            /\ instance(vLIP1, Lip)
            /\ instance(vLIP2, Lip)
            /\ part(vLIP1, vPERSON1)
            /\ part(vLIP2, vPERSON2)
            /\ holdsDuring(BeginFn(WhenFn(vKISS)),
                           a_n_o_t(meetsSpatially(vLIP1, vLIP2)))
            /\ holdsDuring(EndFn(WhenFn(vKISS)), meetsSpatially(vLIP1, vLIP2))
. subclass(Skeleton, AnimalAnatomicalStructure)
. subclass(Skeleton, BodyPart)
%{Skeleton
"The system of &%Bones that make up the supporting structure 
of &%Vertebrates."}%
. instance(vANIMAL, Animal)
  /\ instance(vSKELETON, Skeleton)
  /\ part(vSKELETON, vANIMAL) =>
      instance(vANIMAL, Vertebrate)
. instance(vBONE, Bone) <=>
      (exists vSKELETON: U
           . instance(vSKELETON, Skeleton) /\ part(vBONE, vSKELETON))
. subclass(Throat, AnimalAnatomicalStructure)
. subclass(Throat, BodyVessel)
%{Throat
"A &%BodyVessel which connects the &%Mouth to the 
lungs and stomach."}%
. instance(vTHROAT, Throat) =>
      exists vMOUTH: U
          . instance(vMOUTH, Mouth) /\ connected(vTHROAT, vMOUTH)
. subclass(Hair, AnimalAnatomicalStructure)
%{Hair
"A filament that covers part of the body of many 
&%Mammals."}%
. instance(vHAIR, Hair) =>
      exists vMAMMAL: U; vTIME: U
          . instance(vMAMMAL, Mammal)
            /\ holdsDuring(vTIME, part(vHAIR, vMAMMAL))
. subclass(HairRemoval, Removing)
%{HairRemoval
"&%Removing (some or all) the &%Hair from the 
body of an &%Animal.  Note that this covers shaving hair, cutting hair, 
pulling hair out by the roots, etc."}%
. instance(vREMOVE, HairRemoval) /\ resource(vREMOVE, vHAIR) =>
      instance(vHAIR, Hair)
. subclass(Brain, Organ)
. subclass(Brain, AnimalAnatomicalStructure)
%{Brain
"The seat of the central nervous system."}%
. subclass(Stomach, Organ)
. subclass(Stomach, AnimalAnatomicalStructure)
%{Stomach
"A muscular sac that is the principal organ of 
digestion."}%
. instance(vSTOMACH, Stomach) =>
      capability(Digesting, instrument, vSTOMACH)
. subclass(Hypothalamus, BodyPart)
. subclass(Hypothalamus, AnimalAnatomicalStructure)
%{Hypothalamus
"The part of the &%Brain lying below the 
thalamus that serves to regulate &%AutonomicProcesses."}%
. instance(vHYPO, Hypothalamus) =>
      exists vBRAIN: U . instance(vBRAIN, Brain) /\ part(vHYPO, vBRAIN)
. subclass(Eye, Organ)
. subclass(Eye, AnimalAnatomicalStructure)
%{Eye
"The &%Organ of sight."}%
. instance(vEYE, Eye) => capability(Seeing, instrument, vEYE)
. instance(vEYE, Eye) =>
      exists vHEAD: U . instance(vHEAD, Head) /\ part(vEYE, vHEAD)
. subclass(Ear, Organ)
. subclass(Ear, AnimalAnatomicalStructure)
%{Ear
"The &%Organ of hearing."}%
. instance(vEAR, Ear) => capability(Hearing, instrument, vEAR)
. instance(vEAR, Ear) =>
      exists vHEAD: U . instance(vHEAD, Head) /\ part(vEAR, vHEAD)
. subclass(Nose, Organ)
. subclass(Nose, AnimalAnatomicalStructure)
%{Nose
"The &%Organ of &%Smelling."}%
. instance(vNOSE, Nose) => capability(Smelling, instrument, vNOSE)
. instance(vNOSE, Nose) =>
      exists vFACE: U . instance(vFACE, Face) /\ part(vNOSE, vFACE)
. subclass(ThyroidGland, Gland)
%{ThyroidGland
"A &%Gland in the neck that produces 
&%HormoneTSH, which regulates body weight, metabolic rate, etc."}%
. subclass(HormoneTSH, Hormone)
%{HormoneTSH
"A &%Hormone secreted by the &%ThyroidGland."}%
. instance(vHORMONE, HormoneTSH) =>
      exists vPROC: U; vGLAND: U
          . instance(vGLAND, ThyroidGland)
            /\ instrument(vPROC, vGLAND)
            /\ a_r_e_s_u_l_t(vPROC, vHORMONE)
. subclass(Arm, Limb)
%{Arm
"The upper &%Limbs of a &%Primate."}%
. instance(vARM, Arm) =>
      exists vPRIMATE: U
          . instance(vPRIMATE, Primate) /\ part(vARM, vPRIMATE)
. subclass(Hand, AnimalAnatomicalStructure)
. subclass(Hand, BodyPart)
%{Hand
"The grasping, fingered part of an upper limb of a 
&%Primate."}%
. instance(vHAND, Hand) =>
      exists vARM: U . instance(vARM, Arm) /\ part(vHAND, vARM)
. subclass(Finger, DigitAppendage)
%{Finger
"The five extremities of &%Hands."}%
. instance(vFINGER, Finger) =>
      exists vHAND: U . instance(vHAND, Hand) /\ part(vFINGER, vHAND)
. subclass(Limb, AnimalAnatomicalStructure)
. subclass(Limb, BodyPart)
%{Limb
"Any of the limbs of a &%Vertebrate.
Animal Appendages with joints that are used for movement 
and grasping."}%
. instance(vLIMB, Limb) =>
      exists vVERTEBRATE: U
          . instance(vVERTEBRATE, Vertebrate) /\ part(vLIMB, vVERTEBRATE)
. subclass(Snake, Reptile)
%{Snake
"A long and narrow &%Reptile which lacks &%Limbs."}%
. instance(vSNAKE, Snake) =>
      not (exists vLIMB: U
               . instance(vLIMB, Limb) /\ part(vLIMB, vSNAKE))
. subclass(ConstrictorSnake, Snake)
%{ConstrictorSnake
"A &%Snake that lacks venom and kills its 
prey by crushing it to death."}%
. subclass(Anaconda, ConstrictorSnake)
%{Anaconda
"A very large Boa that is found in South America."}%
. subclass(Bee, Insect)
%{Bee
"A hairy &%Insect, some species of which produce honey 
and/or sting."}%
. subclass(BumbleBee, Bee)
%{BumbleBee
"A large &%Bee which lacks a stinger."}%
. subclass(QueenInsect, Insect)
%{QueenInsect
"A &%Female &%Insect which is the sole member of 
her colony with the capability to reproduce."}%
. instance(vINSECT, QueenInsect) =>
      attribute(vINSECT, Female)
      /\ capability(Replication, agent, vINSECT)
. instance(vINSECT, QueenInsect) =>
      exists vGROUP: U
          . instance(vGROUP, Group)
            /\ member(vINSECT, vGROUP)
            /\ not (exists vMEMBER: U
                        . member(vMEMBER, vGROUP)
                          /\ capability(Replication, agent, vMEMBER)
                          /\ not vMEMBER = vINSECT)
. subclass(Leg, Limb)
%{Leg
"The lower &%Limbs of &%Primates."}%
. instance(vLEG, Leg) =>
      exists vPRIMATE: U
          . instance(vPRIMATE, Primate) /\ part(vLEG, vPRIMATE)
. subclass(Foot, AnimalAnatomicalStructure)
. subclass(Foot, BodyPart)
%{Foot
"The lower part of a &%Limb, the part which makes contact 
with the ground in locomotion of the &%Animal."}%
. instance(vFOOT, Foot) =>
      exists vLIMB: U . instance(vLIMB, Leg) /\ part(vFOOT, vLIMB)
. subclass(Toe, AnimalAnatomicalStructure)
. subclass(Toe, BodyPart)
. subclass(Toe, DigitAppendage)
%{Toe
"The five extremities of a &%Foot."}%
. instance(vTOE, Toe) =>
      exists vFOOT: U . instance(vFOOT, Foot) /\ part(vTOE, vFOOT)
. subclass(Knee, BodyJoint)
%{Knee
"The joint in the &%Leg connecting the tibia and fibula 
with the femur."}%
. instance(vKNEE, Knee) =>
      exists vLEG: U . instance(vLEG, Leg) /\ part(vKNEE, vLEG)
. subclass(Shoulder, AnimalAnatomicalStructure)
. subclass(Shoulder, BodyPart)
%{Shoulder
"The part of a &%Primate between the &%Arm and 
the neck."}%
. instance(vSHOULDER, Shoulder) =>
      exists vPRIMATE: U
          . instance(vPRIMATE, Primate) /\ part(vSHOULDER, vPRIMATE)
. subclass(Torso, AnimalAnatomicalStructure)
. subclass(Torso, BodyPart)
%{Torso
"The body of a &%Primate excluding its &%Limbs."}%
. instance(vTORSO, Torso) /\ instance(vLIMB, Limb) =>
      not overlapsSpatially(vTORSO, vLIMB)
. subclass(Head, AnimalAnatomicalStructure)
. subclass(Head, BodyPart)
%{Head
"The part of the body containing the sense organs and 
the brain."}%
. subclass(Neck, AnimalAnatomicalStructure)
. subclass(Neck, BodyPart)
%{Neck
"The part of the body that connects the &%Head to the 
rest of the body."}%
. instance(vNECK, Neck) =>
      exists vHEAD: U . instance(vHEAD, Head) /\ connected(vNECK, vHEAD)
. subclass(Face, AnimalAnatomicalStructure)
. subclass(Face, BodyPart)
%{Face
"The part of the &%Head from forehead to chin and 
from ear to ear."}%
. instance(vFACE, Face) =>
      exists vHEAD: U . instance(vHEAD, Head) /\ part(vFACE, vHEAD)
. instance(vFACE, Face) =>
      exists vVERTEBRATE: U
          . instance(vVERTEBRATE, Vertebrate) /\ part(vFACE, vVERTEBRATE)
. subclass(Chin, AnimalAnatomicalStructure)
. subclass(Chin, BodyPart)
%{Chin
"A part of the &%Face which protrudes slightly and which 
is lower than all other parts of the &%Face."}%
. instance(vCHIN, Chin) =>
      exists vFACE: U . instance(vFACE, Face) /\ part(vCHIN, vFACE)
. instance(vCHIN, Chin) =>
      forall vPART: U
          . part(vPART, vFACE) /\ not part(vPART, vCHIN) =>
                orientation(vPART, vCHIN, Below)
. partition(Expressing, Gesture, ExpressingInLanguage)
. disjointDecomposition(Expressing, ExpressingApproval,
                        ExpressingDisapproval)
. subclass(ExpressingApproval, Expressing)
%{ExpressingApproval
"&%Expressing favor about a physical thing 
or a state of affairs."}%
. instance(vEXPRESS, ExpressingApproval)
  /\ agent(vEXPRESS, vAGENT)
  /\ patient(vEXPRESS, vTHING) =>
      wants(vAGENT, vTHING) \/ desires(vAGENT, vTHING)
. subclass(ExpressingDisapproval, Expressing)
%{ExpressingDisapproval
"&%Expressing disfavor about a physical 
thing or a state of affairs."}%
. instance(vEXPRESS, ExpressingDisapproval)
  /\ agent(vEXPRESS, vAGENT)
  /\ patient(vEXPRESS, vTHING) =>
      dislikes(vAGENT, vTHING) \/ disapproves(vAGENT, vTHING)
. subclass(FacialExpression, Gesture)
%{FacialExpression
"Any &%Gesture whose &%instrument is the &%Face."}%
. instance(vEXPRESS, FacialExpression)
  /\ agent(vEXPRESS, vAGENT) =>
      exists vFACE: U
          . part(vFACE, vAGENT)
            /\ instance(vFACE, Face)
            /\ instrument(vEXPRESS, vFACE)
. subclass(Smiling, FacialExpression)
%{Smiling
"Spreading the lips in such a way as to convey 
happiness."}%
. instance(vSMILE, Smiling) /\ agent(vSMILE, vAGENT) =>
      holdsDuring(WhenFn(vSMILE), attribute(vAGENT, Happiness))
. subclass(Frowning, FacialExpression)
%{Frowning
"Furrowing the forehead in such a way as to convey 
unhappiness."}%
. instance(vFROWN, Frowning) /\ agent(vFROWN, vAGENT) =>
      holdsDuring(WhenFn(vFROWN), attribute(vAGENT, Unhappiness))
. subclass(Laughing, Vocalizing)
. subclass(Laughing, FacialExpression)
%{Laughing
"Expressing happiness by &%Vocalizing in a 
certain way."}%
. instance(vLAUGH, Laughing) =>
      exists vSMILE: U
          . instance(vSMILE, Smiling) /\ subProcess(vSMILE, vLAUGH)
. subclass(Weeping, FacialExpression)
%{Weeping
"&%Expressing unhappiness by shedding tears."}%
. instance(vWEEP, Weeping) /\ agent(vWEEP, vAGENT) =>
      holdsDuring(WhenFn(vWEEP), attribute(vAGENT, Unhappiness))
. subclass(Nodding, Gesture)
%{Nodding
"Moving the &%Head up and down or side to side 
to indicate approval or disapproval."}%
. instance(vNOD, Nodding) /\ patient(vNOD, vHEAD) =>
      instance(vHEAD, Head)
. subclass(Waving, HandGesture)
%{Waving
"Moving a &%Hand to indicate a greeting, farewell, 
recognition, goodwill, etc."}%
. instance(vWAVE, Waving) /\ patient(vWAVE, vHAND) =>
      instance(vHAND, Hand)
. subclass(Bowing, Gesture)
. subclass(Bowing, MotionDownward)
%{Bowing
"Any downward motion of the body that indicates respect 
for or submission to another &%Agent."}%
. subclass(Ducking, IntentionalProcess)
. subclass(Ducking, BodyMotion)
. subclass(Ducking, MotionDownward)
%{Ducking
"Purposely moving one's body downward in such a way as 
to avoid being hit by something."}%
. instance(vMOTION, Ducking) /\ agent(vMOTION, vAGENT) =>
      hasPurpose(vMOTION,
                 a_n_o_t(True
                             when exists vIMPACT: U
                                      . instance(vIMPACT, Impacting)
                                        /\ patient(vIMPACT, vAGENT)
                             else False))
. subclass(ExpressingInLanguage, Expressing)
. subclass(ExpressingInLanguage, LinguisticCommunication)
%{ExpressingInLanguage
"Any instance of &%Expressing that is also an 
instance of &%LinguisticCommunication, e.g. thanking someone, expressing condolence, 
expressing disapproval with an utterance rather than a &%Gesture, etc."}%
. subclass(Thanking, ExpressingInLanguage)
%{Thanking
"Any &%ExpressingInLanguage of appreciation to a person 
for something that the person did in the past."}%
. instance(vTHANK, Thanking)
  /\ agent(vTHANK, vAGENT)
  /\ patient(vTHANK, vTHING)
  /\ destination(vTHANK, vPERSON) =>
      instance(vPERSON, Human)
      /\ (holdsDuring(WhenFn(vTHANK), wants(vAGENT, vTHING))
          \/ holdsDuring(WhenFn(vTHANK), desires(vAGENT, vTHING)))
. subclass(Greeting, Expressing)
%{Greeting
"Any instance of &%Expressing an acknowledgment of a 
person's arrival.  Note that this class is not a subclass of &%ExpressingInLanguage, 
because it covers gestures of greeting, e.g. &%Waving and &%Nodding in certain 
circumstances."}%
. subrelation(half, part)
%{half
"(&%half ?HALF ?WHOLE) means that ?HALF is one half 
of ?WHOLE."}%
. half(vHALF, vWHOLE) =>
      exists vOTHER: U
          . half(vOTHER, vWHOLE)
            /\ not vOTHER = vHALF
            /\ vWHOLE = MereologicalSumFn(vHALF, vOTHER)
. subrelation(most, part)
%{most
"(&%most ?MOST ?WHOLE) means that ?MOST is a &%part 
of ?WHOLE that is greater than &%half of ?WHOLE."}%
. most(vMOST, vWHOLE) =>
      exists vHALF: U; vNUMBER1: U; vNUMBER2: U; vUNIT: U
          . half(vHALF, vWHOLE)
            /\ measure(vHALF, MeasureFn(vNUMBER1, vUNIT))
            /\ measure(vMOST, MeasureFn(vNUMBER2, vUNIT))
            /\ greaterThan(vNUMBER2, vNUMBER1)
. subclass(Blueprint, Icon)
%{Blueprint
"An &%Icon which is a scale model of an &%Artifact, 
whether the &%Artifact actually exists or not."}%
. instance(vPLAN, Blueprint) =>
      exists vARTIFACT: U
          . instance(vARTIFACT, Artifact) /\ represents(vPLAN, vARTIFACT)
. subclass(Chart, Icon)
%{Chart
"An &%Icon which depicts one or more quantities."}%
. instance(vCHART, Chart) =>
      exists vQUANTITY: U
          . instance(vQUANTITY, PhysicalQuantity)
            /\ refers(vGCHART, vQUANTITY)
. subclass(Flag, Icon)
%{Flag
"An &%Icon made of &%Fabric that refers to a particular 
&%GeopoliticalArea."}%
. instance(vFLAG, Flag) =>
      exists vFABRIC: U
          . instance(vFABRIC, Fabric) /\ part(vFABRIC, vFLAG)
. instance(vFLAG, Flag) =>
      exists vAREA: U
          . instance(vAREA, GeopoliticalArea) /\ refers(vFLAG, vAREA)
. subclass(ArrowIcon, Icon)
%{ArrowIcon
"An &%Icon which has the shape of an arrow and which 
is used to indicate direction or a relationship betwee two things."}%
. subclass(Photograph, Icon)
%{Photograph
"An &%Icon that is the result of a process of 
&%Photographing."}%
. subclass(Photographing, ContentDevelopment)
%{Photographing
"&%ContentDevelopment where the &%instrument 
is a camera and the &%result is a &%Photograph."}%
. instance(vSHOOT, Photographing) =>
      exists vPHOTO: U; vCAMERA: U
          . instance(vPHOTO, Photograph)
            /\ a_r_e_s_u_l_t(vSHOOT, vPHOTO)
            /\ instrument(vSHOOT, vCAMERA)
            /\ instance(vCAMERA, Camera)
. subclass(Camera, Device)
%{Camera
"A &%Device which is capable of &%Photographing."}%
. instance(vCAMERA, Camera) =>
      capability(Photographing, instrument, vCAMERA)
. subclass(Composing, ContentDevelopment)
%{Composing
"&%ContentDevelopment which results in a 
&%MusicalComposition."}%
. instance(vCOMPOSE, Composing) =>
      exists vMUSIC: U
          . instance(vMUSIC, MusicalComposition)
            /\ a_r_e_s_u_l_t(vCOMPOSE, vMUSIC)
. subclass(TonMass, MassMeasure)
. instance(TonMass, UnitOfMeasure)
%{TonMass
"English mass unit that is equal to 2000 pounds."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, TonMass) =
          MeasureFn(MultiplicationFn(vNUMBER, a_2_0_0_0), PoundMass)
. subclass(Page, InformationMeasure)
. instance(Page, UnitOfMeasure)
%{Page
"A single page of &%Text."}%
. subclass(LiquorShot, VolumeMeasure)
. instance(LiquorShot, UnitOfMeasure)
%{LiquorShot
"A &%UnitOfMeasure used in preparing &%AlcoholicBeverages."}%
. subclass(Acre, AreaMeasure)
. instance(Acre, UnitOfMeasure)
%{Acre
"A &%UnitOfMeasure equal to 4840 square yards."}%
. subclass(MusicalComposition, Text)
%{MusicalComposition
"A &%Text that expresses the notes, 
words, etc. of a song or other sort of &%Music."}%
. instance(vCOMP, MusicalComposition)
  /\ containsInformation(vCOMP, vINFO)
  /\ realization(vMUSIC, vINFO) =>
      instance(vMUSIC, Music)
. subclass(DeviceAttribute, ObjectiveNorm)
%{DeviceAttribute
"This class contains two &%Attributes to 
indicate whether a &%Device is or is not behaving as it is intended to 
behave, &%Functioning and &%Malfunctioning."}%
. attribute(vDEVICE, vATTRIBUTE)
  /\ instance(vATTRIBUTE, DeviceAttribute) =>
      instance(vDEVICE, Device)
. instance(Functioning, DeviceAttribute)
. contraryAttribute(Functioning, Malfunctioning)
%{Functioning
"Indicates that a &%Device is performing its 
intended function."}%
. attribute(vDEVICE, Functioning) /\ hasPurpose(vDEVICE, vPROP) =>
      a_t_r_u_e(vPROP, True)
. instance(Malfunctioning, DeviceAttribute)
%{Malfunctioning
"Indicates that a &%Device is not performing 
its intended function."}%
. attribute(vDEVICE, Malfunctioning)
  /\ hasPurpose(vDEVICE, vPROP) =>
      a_t_r_u_e(vPROP, False)
. instance(LegislativeBill, DeonticAttribute)
%{LegislativeBill
"The &%Attribute of being a proposed law, 
i.e. being under consideration by a legislative body of &%Government."}%
. holdsDuring(vTIME1, modalAttribute(vTEXT, Law)) =>
      exists vTIME2: U
          . holdsDuring(vTIME2, attribute(vTEXT, LegislativeBill))
            /\ earlier(vTIME2, vTIME1)
. subclass(PassingABill, PoliticalProcess)
. subclass(PassingABill, Declaring)
%{PassingABill
"The &%Process of converting a &%LegislativeBill 
into &%Law by a duly authorized legislative body of &%Government."}%
. instance(vORG, LegislativeOrganization) =>
      capability(PassingABill, agent, vORG)
. instance(vPASS, PassingABill) /\ patient(vPASS, vTEXT) =>
      holdsDuring(BeginFn(WhenFn(vPASS)),
                  attribute(vTEXT, LegislativeBill))
      /\ holdsDuring(EndFn(WhenFn(vPASS)), attribute(vTEXT, Law))
. subAttribute(InternationalLaw, Law)
%{InternationalLaw
"An &%Attribute that applies to &%Propositions 
that express &%Laws concerning the relations between &%Nations."}%
. subclass(CriminalAction, IntentionalProcess)
%{CriminalAction
"Any &%IntentionalProcess that violates a &%Law."}%
. instance(vACTION, CriminalAction) =>
      exists vLAW: U; vCONTENT: U; vCRIME: U
          . modalAttribute(vLAW, Law)
            /\ containsInformation(vLAW, vCONTENT)
            /\ realization(vACTION, vCRIME)
            /\ not consistent(vCONTENT, vCRIME)
. disjointDecomposition(Sentence, Statement, Supposition, Question,
                        Request, Order)
. subclass(Statement, Sentence)
%{Statement
"A &%Sentence that is stated to be true."}%
. instance(vSTATE, Stating)
  /\ a_r_e_s_u_l_t(vSTATE, vSENTENCE)
  /\ instance(vSENTENCE, Sentence) =>
      instance(vSENTENCE, Statement)
. subclass(Fact, Statement)
%{Fact
"The class of &%Statements that are &%True."}%
. instance(vFACT, Fact) => a_t_r_u_e(vFACT, True)
. subclass(Question, Sentence)
%{Question
"An interrogative &%Sentence, a &%Sentence that 
poses a question."}%
. instance(vQUESTION, Questioning)
  /\ a_r_e_s_u_l_t(vQUESTION, vSENTENCE)
  /\ instance(vSENTENCE, Sentence) =>
      instance(vSENTENCE, Question)
. subclass(Supposition, Sentence)
%{Supposition
"A &%Sentence that is assumed to be true, possibly 
just for the sake of argument."}%
. instance(vSUPPOSE, Supposing)
  /\ a_r_e_s_u_l_t(vSUPPOSE, vSENTENCE)
  /\ instance(vSENTENCE, Sentence) =>
      instance(vSENTENCE, Supposition)
. subclass(Request, Sentence)
%{Request
"A &%Sentence that expresses a request for something or 
that something be done."}%
. instance(vREQUEST, Requesting)
  /\ a_r_e_s_u_l_t(vREQUEST, vSENTENCE)
  /\ instance(vSENTENCE, Sentence) =>
      instance(vSENTENCE, Request)
. subclass(Order, Sentence)
%{Order
"A &%Sentence that expresses an order for something or 
that something be done."}%
. instance(vORDER, Ordering)
  /\ a_r_e_s_u_l_t(vORDER, vSENTENCE)
  /\ instance(vSENTENCE, Sentence) =>
      instance(vSENTENCE, Order)
. subclass(SoundRecording, Text)
%{SoundRecording
"Any &%Text which is a recording of 
&%RadiatingSound."}%
. instance(vRECORD, SoundRecording) =>
      exists vINFO: U; vSOUND: U
          . containsInformation(vRECORD, vINFO)
            /\ realization(vSOUND, vINFO)
            /\ instance(vSOUND, RadiatingSound)
. subclass(RecordAlbum, SoundRecording)
%{RecordAlbum
"A &%SoundRecording that has the form of a 
plastic or glass disk with continuous grooves that are transformed into 
sound by a record player."}%
. subclass(Label, Text)
%{Label
"A very brief &%Text that is attached to an &%Object 
and that indicates very specific information about the &%Object, e.g. its 
name, its &%monetaryValue, etc."}%
. instance(vLABEL, Label) =>
      exists vOBJ: U
          . instance(vOBJ, SelfConnectedObject)
            /\ connected(vLABEL, vOBJ)
            /\ refers(vLABEL, vOBJ)
. subclass(Form, Text)
%{Form
"A page or set of pages containing spaces where 
information is to be entered by an &%Agent."}%
. subclass(TaxReturn, Form)
%{TaxReturn
"A &%Form that is used for calculating the amount 
of income tax owed in a given year."}%
. instance(vRETURN, TaxReturn) =>
      hasPurpose(vRETURN,
                 True
                     when exists vCALCULATE: U; vAMOUNT: U; vTAX: U
                              . instance(vCALCULATE, Calculating)
                                /\ instrument(vCALCULATE, vRETURN)
                                /\ a_r_e_s_u_l_t(vCALCULATE, vAMOUNT)
                                /\ transactionAmount(vTAX, vAMOUNT)
                                /\ instance(vTAX, Tax)
                     else False)
. subclass(Application, Form)
%{Application
"A &%Form whose purpose is to obtain admission 
to an &%Organization or to receive assistance from an &%Organization."}%
. instance(vAPP, Application) =>
      hasPurpose(vAPP,
                 True
                     when exists vJOIN: U; vGIVE: U
                              . instance(vJOIN, JoiningAnOrganization)
                                \/ instance(vGIVE, UnilateralGiving)
                     else False)
. subclass(MotionPictureShot, MotionPicture)
%{MotionPictureShot
"A unit of action in a &%MotionPicture, a 
&%MotionPictureShot is a sequence of images which are captured by a single 
camera without interruption."}%
. subclass(BroadcastProgram, Series)
%{BroadcastProgram
"A &%Series of episodes that are broadcast 
on television or radio."}%
. instance(vPROGRAM, BroadcastProgram) =>
      exists vBROADCAST: U
          . instance(vBROADCAST, Broadcasting)
            /\ patient(vBROADCAST, vPROGRAM)
. subclass(NewsProgram, BroadcastProgram)
%{NewsProgram
"A &%BroadcastProgram that is devoted to 
reporting the latest events in a city, region, nation or the world at 
large."}%
. subclass(vPROGRAM, NewsProgram)
  /\ vEPISODE = SeriesVolumeFn(vPROGRAM, vNUMBER) =>
      exists vDISSEMINATE: U
          . instance(vDISSEMINATE, Disseminating)
            /\ patient(vDISSEMINATE, vEPISODE)
. subclass(Chapter, Article)
%{Chapter
"A numbered and/or titled section of a &%Book, which is 
typically indicated in a table of contents for the &%Book."}%
. instance(vCHAPTER, Chapter) =>
      exists vBOOK: U
          . instance(vBOOK, Book) /\ subsumesContentInstance(vBOOK, vCHAPTER)
. subrelation(titles, names)
. domain(titles, a_1, SymbolicString)
. domainSubclass(titles, a_2, Text)
%{titles
"A predicate used to indicate the title of a &%Text.  
Note that the second argument type restriction is a subclass, rather than 
an instance, of &%Text.  Thus, the title Murder_on_the_Orient_Express 
corresponds to a large class of &%Books, and not just to a single copy of 
the book."}%
. subclass(Report, FactualText)
. subclass(Report, Article)
%{Report
"A relatively brief &%FactualText, often it 
describes the findings of a study or experiment, or a series of 
observations."}%
. subclass(Newspaper, Periodical)
%{Newspaper
"A &%Periodical that is published on a daily or 
weekly basis, that contains &%Reports, and whose issues are printed on 
newsprint paper."}%
. instance(vPAPER, Newspaper) =>
      exists vREPORT: U
          . instance(vREPORT, Report)
            /\ subsumesContentInstance(vPAPER, vREPORT)
. subclass(vPAPER, Newspaper) /\ instance(vWEEK, Week) =>
      exists vPUBLICATION: U; vISSUE: U
          . instance(vPUBLICATION, Publication)
            /\ temporalPart(WhenFn(vPUBLICATION), vWEEK)
            /\ a_r_e_s_u_l_t(vPUBLICATION, vISSUE)
            /\ instance(vISSUE, vPAPER)
. subclass(Magazine, Periodical)
%{Magazine
"A &%Periodical that is softbound and printed on 
glossy paper."}%
. subclass(Letter, FactualText)
%{Letter
"A brief message which is intended to be mailed 
to a person or &%Organization."}%
. subclass(HistoricalAccount, FactualText)
%{HistoricalAccount
"A &%FactualAccount that describes 
significant events that occurred in the past."}%
. instance(vACCOUNT, HistoricalAccount) =>
      exists vEVENT: U
          . represents(vACCOUNT, vEVENT)
            /\ earlier(WhenFn(vEVENT), WhenFn(vACCOUNT))
. subclass(FinancialText, Report)
%{FinancialText
"A &%Report about monetary figures.  This 
class covers &%FinancialBills, balance sheets, account statements, etc."}%
. subclass(FinancialBill, FinancialText)
%{FinancialBill
"A brief statement that the stated amount 
of money is owed by the person to whom the bill is delivered."}%
. subclass(ReferenceBook, Book)
. subclass(ReferenceBook, FactualText)
%{ReferenceBook
"A &%Book which is not intended to be read 
from cover to cover, but which is meant to be consulted to answer specific 
factual questions, e.g. about the meaning of a word, the location of a 
country, etc."}%
. subclass(Dictionary, ReferenceBook)
%{Dictionary
"A &%ReferenceBook which specifies the meanings 
of the &%Words of a &%Language."}%
. subclass(NarrativeText, Text)
. partition(NarrativeText, FictionalText, HistoricalAccount)
%{NarrativeText
"Any &%Text that tells a story, whether true 
or false."}%
. subclass(ShortStory, FictionalText)
. subclass(ShortStory, Article)
%{ShortStory
"A brief work of fiction, often bound with other 
short stories in a &%Book or &%Periodical."}%
. subclass(Novel, FictionalText)
. subclass(Novel, Book)
%{Novel
"A &%FictionalText that is larger than a &%ShortStory 
and that is bound independently (i.e. it is a &%Book)."}%
. subclass(DramaticPlay, FictionalText)
%{DramaticPlay
"A &%FictionalText that is intended to be realized 
as &%DramaticActing."}%
. instance(vPLAY, DramaticPlay) =>
      hasPurpose(vPLAY,
                 True
                     when exists vACT: U; vPROP: U
                              . instance(vACT, DramaticActing)
                                /\ containsInformation(vPLAY, vPROP)
                                /\ realization(vACT, vPROP)
                     else False)
. subclass(Opera, DramaticPlay)
%{Opera
"A &%DramaticPlay that is set to &%Music."}%
. instance(vOPERA, Opera) /\ realization(vACT, vOPERA) =>
      instance(vACT, Music)
. instance(EnglishLanguage, NaturalLanguage)
%{EnglishLanguage
"A Germanic language that incorporates many roots 
from the Romance languages.  It is the official language of the &%UnitedStates, 
the &%UnitedKingdomOfGreatBritainAndNorthernIreland, and many other countries."}%
. subclass(Industry, Collection)
%{Industry
"The class of &%Collections of &%Corporations 
which are in the same line of business."}%
. instance(vINDUSTRY, Industry) =>
      member(vMEMB1, vINDUSTRY) /\ member(vMEMB2, vINDUSTRY) =>
          exists vCLASS: U
              . subclass(vCLASS, Corporation)
                /\ immediateInstance(vMEMB1, vCLASS)
                /\ immediateInstance(vMEMB2, vCLASS)
. subclass(Steps, StationaryArtifact)
%{Steps
"A &%StationaryArtifact which allows one to climb, step 
by step, from one level to another."}%
. instance(vSTEPS, Steps) =>
      capability(MotionUpward, instrument, vSTEPS)
      /\ capability(MotionDownward, instrument, vSTEPS)
. instance(vLEVEL1, BuildingLevel)
  /\ instance(vLEVEL2, BuildingLevel)
  /\ instance(vBUILDING, Building)
  /\ part(vLEVEL1, vBUILDING)
  /\ part(vLEVEL2, vBUILDING) =>
      exists vSTEPS: U
          . instance(vSTEPS, Steps) /\ connects(vSTEPS, vLEVEL1, vLEVEL2)
. subclass(Door, Artifact)
%{Door
"An &%Artifact that restricts and permits access to a 
&%StationaryArtifact (e.g. &%Building or &%Room) depending on whether the 
&%Door is open or locked.  Note that the class &%Door also covers gates, 
because it is not possible to define objective criteria that reliably 
distinguish doors from gates."}%
. instance(vDOOR, Door) =>
      exists vWAY: U . part(vDOOR, vWAY) /\ instance(vWAY, Doorway)
. subclass(Doorway, StationaryArtifact)
%{Doorway
"A &%StationaryArtifact consisting of a frame that 
holds a &%Door."}%
. instance(vWAY, Doorway) =>
      exists vARTIFACT: U
          . part(vWAY, vARTIFACT)
            /\ (instance(vARTIFACT, Building) \/ instance(vARTIFACT, Room))
. subclass(Window, StationaryArtifact)
%{Window
"A &%StationaryArtifact composed of transparent glass 
or plastic that admits light (and possibly air) into a &%Room or &%Building."}%
. instance(vDOOR, Door) =>
      exists vARTIFACT: U
          . part(vDOOR, vARTIFACT)
            /\ (instance(vARTIFACT, Building) \/ instance(vARTIFACT, Room))
. subclass(Wall, StationaryArtifact)
%{Wall
"A &%StationaryArtifact that supports a &%Building or 
partitions it into &%Rooms."}%
. instance(vWALL, Wall) =>
      exists vARTIFACT: U
          . part(vWALL, vARTIFACT)
            /\ (instance(vARTIFACT, Building) \/ instance(vARTIFACT, Room))
. subclass(Floor, StationaryArtifact)
%{Floor
"A &%StationaryArtifact that is the bottom surface 
of a &%Room."}%
. instance(vFLOOR, Floor) =>
      exists vARTIFACT: U
          . part(vFLOOR, vARTIFACT) /\ instance(vARTIFACT, Room)
. subclass(Roof, StationaryArtifact)
%{Roof
"The &%top of a &%Building."}%
. instance(vROOF, Roof) =>
      exists vBUILDING: U
          . instance(vBUILDING, Building) /\ top(vROOF, vBUILDING)
. subclass(BuildingLevel, StationaryArtifact)
%{BuildingLevel
"The story or level of a building, e.g. the &%Basement, 
the &%Attic, the ground level, the fourteenth floor, etc."}%
. instance(vLEVEL, BuildingLevel) =>
      exists vBUILDING: U
          . instance(vBUILDING, Building) /\ part(vLEVEL, vBUILDING)
. subclass(Basement, BuildingLevel)
%{Basement
"A &%BuildingLevel which satisfies two conditions, viz. it is 
lower than all of the other &%BuildingLevels in the same &%Building and it is below 
ground level."}%
. instance(vBASEMENT, Basement) =>
      not (exists vLEVEL: U; vBUILDING: U
               . instance(vLEVEL, BuildingLevel)
                 /\ instance(vBUILDING, Building)
                 /\ part(vLEVEL, vBUILDING)
                 /\ part(vBASEMENT, vBUILDING)
                 /\ not vLEVEL = vBASEMENT
                 /\ orientation(vLEVEL, vBASEMENT, Below))
. subclass(Garage, StationaryArtifact)
%{Garage
"A &%Building or part of a &%Building which is intended to house 
one or more &%Automobiles."}%
. instance(vGARAGE, Garage) =>
      hasPurpose(True
                     when exists vAUTO: U
                              . instance(vAUTO, Automobile)
                                /\ contains(vGARAGE, vAutomobile)
                     else False)
. instance(vGARAGE, Garage) =>
      exists vBUILDING: U
          . instance(vBUILDING, Building) /\ part(vGARAGE, vBUILDING)
. subclass(Kitchen, Room)
%{Kitchen
"A &%Room intended for &%Cooking."}%
. instance(vROOM, Kitchen) =>
      hasPurpose(vROOM,
                 True
                     when exists vCOOK: U
                              . instance(vCOOK, Cooking)
                                /\ located(vCOOK, vROOM)
                     else False)
. subclass(Bedroom, Room)
%{Bedroom
"A &%Room intended primarily for sleeping."}%
. instance(vROOM, Bedroom) =>
      exists vBED: U . instance(vBED, Bed) /\ located(vBED, vROOM)
. subclass(Porch, StationaryArtifact)
%{Porch
"A &%StationaryArtifact which is &%connected to a 
&%Building and which provides some shelter in entering or leaving the 
&%Building or in sitting outside."}%
. instance(vPORCH, Porch) =>
      exists vBUILDING: U
          . instance(vBUILDING, Building) /\ connected(vPORCH, vBUILDING)
. subclass(Sidewalk, StationaryArtifact)
%{Sidewalk
"A prepared path for pedestrians alongside a &%Roadway."}%
. instance(vSIDE, Sidewalk) =>
      hasPurpose(vSIDE,
                 True
                     when exists vWALK: U
                              . instance(vWALK, Walking) /\ path(vWALK, vSIDE)
                     else False)
. instance(vSIDE, Sidewalk) =>
      exists vROAD: U
          . instance(vROAD, Roadway) /\ orientation(vSIDE, vROAD, Near)
. subclass(Fence, StationaryArtifact)
%{Fence
"A &%StationaryArtifact that serves to demarcate or
to prevent access to or from the area that the &%Fence surrounds."}%
. subclass(SportsGround, StationaryArtifact)
%{SportsGround
"A specially designated and maintained area 
where &%Sports are played."}%
. instance(vGROUND, SportsGround) =>
      hasPurpose(vGROUND,
                 True
                     when exists vSPORT: U
                              . instance(vSPORT, Sport)
                                /\ located(vSPORT, vGROUND)
                     else False)
. subclass(IndustrialPlant, StationaryArtifact)
%{IndustrialPlant
"A &%Building or part of a &%Building or group 
of &%Buildings whose purpose is to &%Manufacture something."}%
. instance(vPLANT, IndustrialPlant) =>
      instance(vPLANT, Building)
      \/ (exists vBUILDING: U
              . instance(vBUILDING, Building) /\ located(vBUILDING, vPLANT))
. instance(vPLANT, IndustrialPlant) =>
      hasPurpose(vPLANT,
                 True
                     when exists vMANUFACTURE: U
                              . instance(vMANUFACTURE, Manufacture)
                                /\ located(vMANUFACTURE, vPLANT)
                     else False)
. subclass(Laboratory, StationaryArtifact)
%{Laboratory
"A &%Building, &%Room or suite of &%Rooms where 
scientific research, i.e. &%Experimenting, is conducted."}%
. instance(vLAB, Laboratory) =>
      exists vEXPERIMENT: U
          . instance(vEXPERIMENT, Experimenting)
            /\ located(vEXPERIMENT, vLAB)
. subclass(Farm, StationaryArtifact)
%{Farm
"A &%StationaryArtifact consisting of a cultivated 
&%LandArea and &%Buildings for maintaining the land and/or the &%Animals 
on the land."}%
. subclass(Barn, Building)
. disjoint(Barn, ResidentialBuilding)
%{Barn
"A &%Building on a &%Farm that is used for keeping 
&%DomesticAnimals, &%Fodder or harvested crops."}%
. instance(vBARN, Barn) =>
      exists vFARM: U . instance(vFARM, Farm) /\ located(vBARN, vFARM)
. subclass(PerformanceStage, StationaryArtifact)
%{PerformanceStage
"A large platform for theatrical plays, 
lectures, dances, music recitals, etc, which can be observed by an audience."}%
. instance(vSTAGE, PerformanceStage) =>
      hasPurpose(vSTAGE,
                 True
                     when exists vPERF: U
                              . instance(vPERF, Demonstrating)
                                /\ located(vPERF, vSTAGE)
                     else False)
. instance(vSTAGE, PerformanceStage) =>
      exists vAUDITORIUM: U
          . instance(vAUDITORIUM, Auditorium) /\ part(vSTAGE, vAUDITORIUM)
. subclass(Magnetism, RadiatingElectromagnetic)
%{Magnetism
"Any instance of &%RadiatingElectromagnetic which 
involves the attraction of &%Iron."}%
. subclass(RadioEmission, RadiatingElectromagnetic)
%{RadioEmission
"Any instance of &%RadiatingElectromagnetic 
where the waves have a wavelength between 5 milimeters and 30,000 meters."}%
. subclass(Broadcasting, Disseminating)
. subclass(Broadcasting, RadioEmission)
%{Broadcasting
"&%Disseminating information by using a 
&%CommunicationDevice that radiates &%RadioEmissions."}%
. instance(vBROADCAST, Broadcasting) =>
      exists vDEVICE: U
          . instance(vDEVICE, CommunicationDevice)
            /\ instrument(vBROADCAST, vDEVICE)
. subclass(RadioBroadcasting, Broadcasting)
%{RadioBroadcasting
"Any instance of &%Broadcasting which is 
intended to be received by a &%Radio."}%
. instance(vRADIO, Radio) =>
      capability(RadioBroadcasting, patient, vRADIO)
. subclass(TelevisionBroadcasting, Broadcasting)
%{TelevisionBroadcasting
"Any instance of &%Broadcasting which 
is intended to be received by a &%Television."}%
. instance(vTELEVISION, Television) =>
      capability(TelevisionBroadcasting, patient, vTELEVISION)
. subclass(Antenna, CommunicationDevice)
%{Antenna
"A &%CommunicationDevice which enables or improves 
the reception of &%RadioEmissions by another &%CommunicationDevice (the 
radio or television receiver)."}%
. instance(vANTENNA, Antenna) =>
      capability(RadioEmission, instrument, vANTENNA)
. subclass(Explosion, Radiating)
%{Explosion
"Any sudden and massive release of energy that is 
the product of a chemical reaction."}%
. instance(vEXPLOSION, Explosion) =>
      exists vPROC: U
          . instance(vPROC, ChemicalProcess) /\ causes(vPROC, vEXPLOSION)
. instance(vEXPLOSION, Explosion) =>
      capability(Damaging, instrument, vEXPLOSION)
. subclass(Performance, Demonstrating)
%{Performance
"A &%Demonstrating which includes &%DramaticActing 
and/or &%Music and which is intended to entertain the audience."}%
. instance(vPERFORMANCE, Performance) =>
      exists vSUB: U
          . subProcess(vSUB, vPERFORMANCE)
            /\ (instance(vSUB, DramaticActing) \/ instance(vSUB, Music))
. instance(vPERFORMANCE, Performance) =>
      exists vSTAGE: U
          . instance(vSTAGE, PerformanceStage)
            /\ located(vPERFORMANCE, vSTAGE)
. subclass(Lecture, Demonstrating)
. subclass(Lecture, Speaking)
%{Lecture
"Any instance of &%Speaking which is done before an 
assembled audience."}%
. subclass(Sermon, Lecture)
%{Sermon
"A &%Lecture that is part of a &%ReligiousService."}%
. instance(vSERMON, Sermon) =>
      exists vSERVICE: U
          . instance(vSERVICE, ReligiousService)
            /\ subProcess(vSERMON, vSERVICE)
. subclass(DramaticActing, Pretending)
%{DramaticActing
"Playing a character in a &%Performance, 
&%MotionPicture, etc."}%
. subclass(DramaticCast, GroupOfPeople)
%{DramaticCast
"The &%GroupOfPeople who engage in &%DramaticActing 
as part of the realization of a single &%FictionalText."}%
. instance(vCAST, DramaticCast) =>
      exists vTEXT: U; vPROP: U; vPROC: U
          . instance(vTEXT, FictionalText)
            /\ containsInformation(vTEXT, vPROP)
            /\ realization(vPROC, vPROP)
            /\ (forall vMEMBER: U
                    . member(vMEMBER, vCAST) =>
                          exists vSUB: U
                              . instance(vSUB, DramaticActing)
                                /\ agent(vSUB, vMEMBER)
                                /\ subProcess(vSUB, vPROC))
. subclass(SocialParty, Meeting)
. subclass(SocialParty, RecreationOrExercise)
%{SocialParty
"Any &%Meeting where the intent is primarily 
to socialize and be entertained."}%
. subclass(FormalMeeting, Meeting)
. disjoint(FormalMeeting, SocialParty)
%{FormalMeeting
"Any &%Meeting which is the result of &%Planning 
and whose purpose is not socializing."}%
. instance(vMEETING, FormalMeeting) =>
      exists vPLANNING: U
          . instance(vPLANNING, Planning)
            /\ a_r_e_s_u_l_t(vPLANNING, vMEETING)
            /\ earlier(WhenFn(vPLANNING), WhenFn(vMEETING))
. subclass(Resolution, Deciding)
%{Resolution
"Any instance of &%Deciding which is conducted at a 
&%FormalMeeting and where the &%agent is an &%Organization."}%
. instance(vRESOLUTION, Resolution) =>
      exists vAGENT: U; vMEETING: U
          . instance(vAGENT, Organization)
            /\ agent(vRESOLUTION, vAGENT)
            /\ subProcess(vRESOLUTION, vMEETING)
            /\ instance(vMEETING, FormalMeeting)
. subclass(Smoking, RecreationOrExercise)
%{Smoking
"Inhaling and exhaling &%Smoke produced by a 
&%CigarOrCigarette."}%
. instance(vSMOKING, Smoking) =>
      exists vBURN: U; vCIGAR: U; vBREATHE: U; vSMOKE: U
          . subProcess(vBURN, vSMOKING)
            /\ instance(vBURN, Combustion)
            /\ resource(vBURN, vCIGAR)
            /\ instance(vCIGAR, CigarOrCigarette)
            /\ a_r_e_s_u_l_t(vBURN, vSMOKE)
            /\ patient(vBREATHE, vSMOKE)
            /\ instance(vBREATHE, Breathing)
            /\ subProcess(vBREATHE, vSMOKING)
. instance(Jury, GroupOfPeople)
%{Jury
"A &%GroupOfPeople who are given the duty of rendering a 
verdict with respect to a &%LegalAction."}%
. instance(vJURY, Jury) =>
      holdsRight(True
                     when exists vDECISION: U
                              . instance(vDECISION, LegalDecision)
                                /\ agent(vDECISION, vJURY)
                     else False,
                 vJURY)
. subclass(LegalCharge, LegalAction)
%{LegalCharge
"Any &%LegalAction of which a &%Government is 
the &%agent."}%
. instance(vCHARGE, LegalCharge) =>
      exists vGOV: U . instance(vGOV, Government) /\ agent(vCHARGE, vGOV)
. subclass(Testifying, Stating)
%{Testifying
"Giving testimony as part of a &%JudicialProcess."}%
. instance(vTESTIFY, Testifying) =>
      exists vPROC: U
          . instance(vPROC, JudicialProcess) /\ subProcess(vTESTIFY, vPROC)
. subclass(CourtRoom, Room)
%{CourtRoom
"Any &%Room whose purpose is to realize 
&%JudicialProcesses."}%
. instance(vPROCESS, JudicialProcess) =>
      exists vROOM: U
          . instance(vROOM, CourtRoom) /\ located(vPROCESS, vROOM)
. subclass(LegalOpinion, Argument)
%{LegalOpinion
"An &%Argument that explains the reasoning behind a 
&%LegalDecision."}%
. instance(vOPINION, LegalOpinion) =>
      exists vDECISION: U; vTEXT: U; vPROPOSITION: U
          . instance(vDECISION, LegalDecision)
            /\ a_r_e_s_u_l_t(vDECISION, vTEXT)
            /\ containsInformation(vTEXT, vPROPOSITION)
            /\ conclusion(vPROPOSITION, vOPINION)
. subclass(LegalAward, LegalDecision)
%{LegalAward
"Any &%LegalDecision which gives to the plaintiff of 
the corresponding &%LegalAction some amount of monetary compensation."}%
. instance(vAWARD, LegalAward)
  /\ refers(vAWARD, vACTION)
  /\ instance(vACTION, LegalAction)
  /\ agent(vACTION, vPLAINTIFF) =>
      confersRight(True
                       when exists vGET: U; vOBJ: U; vVALUE: U
                                . instance(vGET, Getting)
                                  /\ experiencer(vGET, vPLAINTIFF)
                                  /\ patient(vGET, vOBJ)
                                  /\ monetaryValue(vOBJ, vVALUE)
                       else False,
                   vAWARD, vPLAINTIFF)
. subclass(LegalConviction, LegalDecision)
%{LegalConviction
"Any &%LegalDecision where the defendant is found 
guilty of the crime for which the corresponding trial was held."}%
. subclass(LegalAquittal, LegalDecision)
%{LegalAquittal
"Any &%LegalDecision where the defendant is found 
not to be guilty of the crime for which the corresponding trial was held."}%
. subclass(GameCall, Deciding)
. subclass(GameCall, Declaring)
%{GameCall
"A decision issued by an official referee in a 
&%Game.  Note that &%GameCall is a subclass of &%Declaring, because these 
decisions have binding, normative force."}%
. instance(vCALL, GameCall) =>
      exists vGAME: U . instance(vGAME, Game) /\ refers(vCALL, vGAME)
. subclass(BeginningOperations, OrganizationalProcess)
. disjoint(BeginningOperations, CeasingOperations)
%{BeginningOperations
"The process of an &%Organization 
commencing operations.  In the case of a &%Corporation, this would be 
the process of going into business."}%
. instance(vOP, BeginningOperations)
  /\ instance(vORG, Organization)
  /\ agent(vOP, vORG) =>
      starts(vOP, WhenFn(vORG))
. subclass(CeasingOperations, OrganizationalProcess)
%{CeasingOperations
"The process of an &%Organization 
ceasing operations, i.e. its folding or going out of business in 
some other fashion."}%
. instance(vOP, CeasingOperations)
  /\ instance(vORG, Organization)
  /\ agent(vOP, vORG) =>
      finishes(vOP, WhenFn(vORG))
. subclass(FallingAsleep, PsychologicalProcess)
. disjoint(FallingAsleep, WakingUp)
%{FallingAsleep
"The process of transitioning from a state of 
being &%Awake to a state of being &%Asleep."}%
. instance(vFALL, FallingAsleep) /\ experiencer(vFALL, vAGENT) =>
      exists vSTART: U; vFINISH: U
          . starts(vSTART, WhenFn(vFALL))
            /\ finishes(vFINISH, WhenFn(vFALL))
            /\ holdsDuring(vSTART, attribute(vAGENT, Awake))
            /\ holdsDuring(vFINISH, attribute(vAGENT, Asleep))
. subclass(WakingUp, PsychologicalProcess)
%{WakingUp
"The process of transitioning from a state of being 
&%Asleep to a state of being &%Awake."}%
. instance(vWAKE, WakingUp) /\ experiencer(vWAKE, vAGENT) =>
      exists vSTART: U; vFINISH: U
          . starts(vSTART, WhenFn(vWAKE))
            /\ finishes(vFINISH, WhenFn(vWAKE))
            /\ holdsDuring(vSTART, attribute(vAGENT, Asleep))
            /\ holdsDuring(vFINISH, attribute(vAGENT, Awake))
. subclass(AcademicDegree, Certificate)
%{AcademicDegree
"A &%Certificate that demonstrates that the holder 
of the &%Certificate has successfully completed an &%EducationalProgram."}%
. instance(vDEGREE, AcademicDegree)
  /\ possesses(vAGENT, vDEGREE) =>
      exists vPROGRAM: U; vSTUDY: U
          . instance(vPROGRAM, EducationalProgram)
            /\ realization(vSTUDY, vPROGRAM)
            /\ experiencer(vSTUDY, vAGENT)
. subclass(EducationalProgram, Plan)
%{EducationalProgram
"A series of &%EducationalCourses that must 
be completed to receive an &%AcademicDegree or other &%Certificate.  Note that 
an &%EducationalProgram, unlike an &%EducationalCourse, may be realized at more 
than one &%EducationalOrganization."}%
. instance(vPROGRAM, EducationalProgram) =>
      exists vCOURSE1: U; vCOURSE2: U
          . instance(vCOURSE1, EducationalCourse)
            /\ instance(vCOURSE2, EducationalCourse)
            /\ not vCOURSE1 = vCOURSE2
            /\ subPlan(vCOURSE1, vPROGRAM)
            /\ subPlan(vCOURSE2, vPROGRAM)
. subclass(EducationalCourse, EducationalProgram)
%{EducationalCourse
"A schedule of class meetings offered by an 
&%EducationalOrganization."}%
. instance(vCOURSE, EducationalCourse) =>
      exists vCLASS: U; vORG: U
          . realization(vCLASS, vCOURSE)
            /\ instance(vCLASS, EducationalProcess)
            /\ located(vCLASS, vORG)
            /\ instance(vORG, EducationalOrganization)
. subclass(School, EducationalOrganization)
%{School
"An &%EducationalOrganization with a curriculum, 
teachers, and students.  Most &%Schools are housed in a &%Building 
dedicated to the &%EducationalOrganization."}%
. subclass(HighSchool, School)
%{HighSchool
"A &%School which admits &%students who have 
graduated from a middle school and which normally covers the ninth through 
twelfth grades.  A &%HighSchool confers a high school diploma."}%
. instance(vENTER, Matriculation)
  /\ agent(vENTER, vCOLLEGE)
  /\ patient(vENTER, vSTUDENT)
  /\ instance(vCOLLEGE, College) =>
      exists vGRAD: U; vSCHOOL: U
          . instance(vGRAD, Graduation)
            /\ agent(vGRAD, vSCHOOL)
            /\ patient(vGRAD, vSTUDENT)
            /\ instance(vSCHOOL, HighSchool)
            /\ earlier(WhenFn(vGRAD), WhenFn(vENTER))
. subclass(PostSecondarySchool, School)
. partition(PostSecondarySchool, JuniorCollege, College,
            University)
%{PostSecondarySchool
"The class of &%Schools that offer 
an associate's degree or a bachelor's degree."}%
. subclass(JuniorCollege, PostSecondarySchool)
%{JuniorCollege
"The class of &%PostSecondarySchools that 
offer an associate's degree and do not offer a bachelor's degree."}%
. subclass(College, PostSecondarySchool)
%{College
"A &%School which admits &%students who have 
graduated from high school and which confers a bachelor's degree, 
normally requiring four years of study.  Note that a &%College does 
not confer any graduate degrees.  For institutions that confer both 
bachelor's and graduate degrees, the concept &%University should be 
used."}%
. subclass(University, PostSecondarySchool)
%{University
"A &%School which admits &%students that 
have graduated from high school (known as undergraduate students) and 
&%students who have received a bachelor's degree (known as graduate 
students).  A &%University confers both bachelor's and graduate 
degrees."}%
. subrelation(student, member)
. domain(student, a_1, EducationalOrganization)
. domain(student, a_2, CognitiveAgent)
%{student
"(&%student ?ORG ?AGENT) means that ?AGENT is enrolled 
in the &%EducationalOrganization ?ORG."}%
. student(vORG, vAGENT) =>
      exists vPROCESS: U
          . instance(vPROCESS, EducationalProcess)
            /\ located(vPROCESS, vORG)
            /\ destination(vPROCESS, vAGENT)
. subrelation(teacher, member)
. domain(teacher, a_1, EducationalOrganization)
. domain(teacher, a_2, CognitiveAgent)
%{teacher
"(&%teacher ?ORG ?AGENT) means that ?AGENT is a 
teacher at the &%EducationalOrganization ?ORG."}%
. teacher(vORG, vAGENT) =>
      exists vPROCESS: U
          . instance(vPROCESS, EducationalProcess)
            /\ located(vPROCESS, vORG)
            /\ agent(vPROCESS, vAGENT)
. subclass(InsurancePolicy, Certificate)
%{InsurancePolicy
"A &%Certificate that states the terms of an 
insurance contract."}%
. subclass(Telephoning, Speaking)
%{Telephoning
"Any instance of &%Speaking where the 
&%instrument of &%Communication is a &%Telephone."}%
. instance(vTEL, Telephoning) =>
      exists vDEVICE: U
          . instance(vDEVICE, Telephone) /\ instrument(vTEL, vDEVICE)
. subclass(EconomicRelation, BinaryRelation)
%{EconomicRelation
"A class of &%Relations which are used 
to specify various economic measures, e.g. the GDP, the consumer price 
index, and the trade deficit."}%
. instance(vREL, EconomicRelation) /\ domain(vREL, a_1, vCLASS) =>
      subclass(vCLASS, GeopoliticalArea)
. subclass(LaborStriking, OrganizationalProcess)
%{LaborStriking
"A &%Process in which some or all of the 
employees of an &%Organization refuse to work until their pay is 
increased or their working conditions are improved in some respect."}%
. instance(vSTRIKE, LaborStriking)
  /\ agent(vSTRIKE, vPERSON)
  /\ instance(vPERSON, Human)
  /\ patient(vSTRIKE, vORG)
  /\ instance(vORG, Organization) =>
      employs(vORG, vPERSON)
. subclass(Retiring, TerminatingEmployment)
%{Retiring
"Voluntarily leaving employment at the end of one's 
career in order to take time off in the later years of one's life."}%
. instance(monetaryWage, QuaternaryPredicate)
. domain(monetaryWage, a_1, Organization)
. domain(monetaryWage, a_2, Human)
. domain(monetaryWage, a_3, TimeDuration)
. domain(monetaryWage, a_4, CurrencyMeasure)
%{monetaryWage
"(&%monetaryWage ?ORG ?PERSON ?TIME ?MONEY) means 
that the &%Organization employs ?PERSON and pays him/her the amount of money 
?MONEY per &%TimeDuration ?TIME."}%
. monetaryWage(vORG, vPERSON, vTIME, vMONEY) =>
      employs(vORG, vPERSON)
. subclass(GameArtifact, Artifact)
. disjointDecomposition(GameArtifact, GameBoard, GamePiece)
%{GameArtifact
"An &%Artifact that is designed to be used as an 
&%instrument in a &%Game."}%
. instance(vARTIFACT, GameArtifact) =>
      exists vGAME: U
          . subclass(vGAME, Game) /\ capability(vGAME, instrument, vARTIFACT)
. subclass(GameBoard, GameArtifact)
%{GameBoard
"A &%GameArtifact which is intended to be used as the 
game area for playing a particular game."}%
. instance(vBOARD, GameBoard) =>
      hasPurpose(vBOARD,
                 True
                     when exists vGAME: U
                              . instance(vGAME, Game) /\ located(vGAME, vBOARD)
                     else False)
. subclass(GamePiece, GameArtifact)
%{GamePiece
"A &%GameArtifact that is moved around in a game 
area."}%
. subclass(Ball, GamePiece)
%{Ball
"Any &%GamePiece which has the shape of a sphere."}%
. subclass(GameShot, Impelling)
. subclass(GameShot, Maneuver)
%{GameShot
"Impelling a &%GamePiece for the purpose of 
scoring a point or preventing the opposing player or team from scoring 
a point.  Note that this class does not cover shots which are disallowed 
by the rules of the game."}%
. instance(vSHOT, GameShot) =>
      exists vPIECE: U
          . instance(vPIECE, GamePiece) /\ patient(vSHOT, vPIECE)
. instance(vSHOT, GameShot) =>
      exists vGAME: U . instance(vGAME, Game) /\ subProcess(vSHOT, vGAME)
. instance(vSHOT, GameShot) =>
      hasPurpose(vSHOT, instance(vSHOT, Score))
. subclass(Score, GameShot)
%{Score
"A successful attempt to score a point in a &%Game."}%
. subclass(GameGoal, GameArtifact)
%{GameGoal
"The location where a &%GameShot must end up if it 
is to constitute a &%Score."}%
. instance(vGOAL, GameGoal)
  /\ instrument(vGAME, vGOAL)
  /\ instance(vGAME, Game)
  /\ subProcess(vSCORE, vGAME)
  /\ instance(vSCORE, Score) =>
      exists vPIECE: U; vTIME: U
          . instance(vPIECE, GamePiece)
            /\ patient(vSCORE, vPIECE)
            /\ temporalPart(vTIME, WhenFn(vSCORE))
            /\ holdsDuring(vTIME, located(vPIECE, vGOAL))
. subclass(BaseballManeuver, Maneuver)
%{BaseballManeuver
"Any &%Maneuver in &%Baseball."}%
. instance(vMOVE, BaseballManeuver) =>
      exists vBASEBALL: U
          . instance(vBASEBALL, Baseball) /\ subProcess(vMOVE, vBASEBALL)
. subclass(BaseballWalk, BaseballManeuver)
%{BaseballWalk
"Taking first base after four balls have been 
called by the umpire."}%
. subclass(BaseballHit, GameShot)
. subclass(BaseballHit, BaseballManeuver)
%{BaseballHit
"Any base hit in &%Baseball."}%
. subclass(BaseballRun, BaseballHit)
. subclass(BaseballRun, Score)
%{BaseballRun
"A &%Score in &%Baseball.  It consists of hitting 
the ball with the bat and then touching all four bases of the diamond before 
being tagged with the ball by a member of the opposite team."}%
. subclass(HomeRun, BaseballRun)
%{HomeRun
"A &%BaseballRun where the batter touches home base 
during his turn at bat."}%
. subclass(Throwing, Impelling)
. subclass(Throwing, BodyMotion)
%{Throwing
"Any instance of &%Impelling where the &%instrument is 
an &%Arm."}%
. instance(vTHROW, Throwing) =>
      exists vARM: U . instance(vARM, Arm) /\ instrument(vTHROW, vARM)
. subclass(Pitching, Throwing)
. subclass(Pitching, GameShot)
%{Pitching
"&%Throwing a &%Ball to the batter in a game of 
&%Baseball or softball."}%
. instance(vPITCH, Pitching) /\ patient(vPITCH, vBALL) =>
      instance(vBALL, Ball)
. subclass(Catching, Touching)
. subclass(Catching, Maneuver)
%{Catching
"Any &%Maneuver in a &%Game which results in a 
situation where the &%agent &%grasps the &%Ball."}%
. instance(vCATCH, Catching) /\ patient(vCATCH, vBALL) =>
      instance(vCATCH, Ball)
. instance(vCATCH, Catching)
  /\ agent(vCATCH, vAGENT)
  /\ patient(vCATCH, vBALL) =>
      holdsDuring(EndFn(WhenFn(vCATCH)), grasps(vAGENT, vBALL))
. subclass(Stretching, Motion)
%{Stretching
"Moving two sides of an object in opposite 
directions so that the object becomes both longer and thinner."}%
. subclass(Accelerating, Translocation)
. subclass(Accelerating, Increasing)
%{Accelerating
"Increasing the speed with which someone 
or something is moving."}%
. instance(vACCELERATE, Accelerating)
  /\ agent(vACCELERATE, vAGENT) =>
      exists vLENGTH1: U; vLENGTH2: U; vTIME1: U; vTIME2: U
          . holdsDuring(BeginFn(WhenFn(vACCELERATE)),
                        measure(vAGENT, SpeedFn(vLENGTH1, vTIME1)))
            /\ holdsDuring(EndFn(WhenFn(vACCELERATE)),
                           measure(vAGENT, SpeedFn(vLENGTH2, vTIME2)))
            /\ (greaterThan(vLENGTH2, vLENGTH1) \/ greaterThan(vTIME2, vTIME1))
. subclass(Flying, Translocation)
%{Flying
"Any instance of &%Translocation which is through an 
&%AtmosphericRegion and which is powered by the wings of an &%Animal."}%
. instance(vFLY, Flying) =>
      exists vREGION: U
          . instance(vREGION, AtmosphericRegion) /\ located(vFLY, vREGION)
. subclass(TakingOff, Translocation)
%{TakingOff
"Any instance of &%Translocation which starts on something other 
than an &%AtmosphericRegion and which has an instance of &%Flying as a &%subProcess."}%
. instance(vOFF, TakingOff) =>
      exists vREGION: U; vFLYING: U
          . not instance(vREGION, AtmosphericRegion)
            /\ holdsDuring(BeginFn(WhenFn(vOFF)), located(vOFF, vREGION))
            /\ subProcess(vFLYING, vOFF)
            /\ instance(vFLYING, Flying)
. subclass(Landing, Translocation)
%{Landing
"Any instance of &%Translocation which ends up on something other 
than an &%AtmosphericRegion and which has an instance of &%Flying as a &%subProcess."}%
. instance(vLAND, Landing) =>
      exists vREGION: U; vFLYING: U
          . not instance(vREGION, AtmosphericRegion)
            /\ holdsDuring(EndFn(WhenFn(vLAND)), located(vLAND, vREGION))
            /\ subProcess(vFLYING, vLAND)
            /\ instance(vFLYING, Flying)
. subclass(Returning, Translocation)
%{Returning
"Any instance of &%Translocation where the &%agent 
goes to a location where he/she had been before the &%Translocation took place."}%
. instance(vRETURN, Returning)
  /\ experiencer(vRETURN, vAGENT)
  /\ destination(vRETURN, vDEST) =>
      exists vTIME: U
          . earlier(vTIME, WhenFn(vRETURN))
            /\ holdsDuring(vTIME, located(vAGENT, vDEST))
. subclass(Escaping, Translocation)
%{Escaping
"Any instance of &%Translocation where the &%agent brings 
it about that he/she is no longer confined without having the right to do 
so."}%
. instance(vESCAPE, Escaping) /\ agent(vESCAPE, vAGENT) =>
      exists vCONFINE: U
          . instance(vCONFINE, Confining)
            /\ patient(vCONFINE, vAGENT)
            /\ meetsTemporally(WhenFn(vCONFINE), WhenFn(vESCAPE))
. instance(vESCAPE, Escaping) =>
      not holdsRight(agent(vESCAPE, vAGENT), vAGENT)
. subclass(Leaving, Translocation)
%{Leaving
"The initial part of any instance of &%Translocation."}%
. instance(vLEAVE, Leaving) =>
      exists vGO: U
          . instance(vGO, Translocation)
            /\ subProcess(vLEAVE, vGO)
            /\ starts(WhenFn(vLEAVE), WhenFn(vGO))
. subclass(Arriving, Translocation)
%{Arriving
"The final part of any instance of &%Translocation."}%
. instance(vARRIVE, Arriving) =>
      exists vGO: U
          . instance(vGO, Translocation)
            /\ subProcess(vARRIVE, vGO)
            /\ finishes(WhenFn(vARRIVE), WhenFn(vGO))
. subclass(Rotating, Motion)
%{Rotating
"&%Motion that begins and ends at the same point, 
because the trajectory of the &%Motion is circular."}%
. instance(vROTATE, Rotating) /\ experiencer(vROTATE, vAGENT) =>
      exists vLOC: U
          . holdsDuring(BeginFn(WhenFn(vROTATE)), located(vAGENT, vLOC))
            /\ holdsDuring(EndFn(WhenFn(vROTATE)), located(vAGENT, vLOC))
. subclass(MotionUpward, Motion)
. disjoint(MotionUpward, MotionDownward)
%{MotionUpward
"&%Motion where an &%Object is moving away 
from the ground."}%
. subclass(MotionDownward, Motion)
%{MotionDownward
"&%Motion where an &%Object is moving toward the 
ground."}%
. subclass(Reversing, Motion)
%{Reversing
"Moving something in such a way that its &%top 
becomes its &%bottom and vice versa."}%
. instance(vREVERSE, Reversing)
  /\ patient(vREVERSE, vOBJ)
  /\ holdsDuring(BeginFn(WhenFn(vREVERSE)),
                 a_a_n_d(top(vTOP, vOBJ), bottom(vBOTTOM, vOBJ))) =>
      holdsDuring(EndFn(WhenFn(vREVERSE)),
                  a_a_n_d(top(vBOTTOM, vOBJ), bottom(vTOP, vOBJ)))
. subclass(Dripping, LiquidMotion)
%{Dripping
"Any &%LiquidMotion where the &%Liquid is moved 
drop by drop."}%
. subclass(Pouring, LiquidMotion)
. subclass(Pouring, Transfer)
%{Pouring
"Any instance of &%Transfer from one &%Container to 
another, where the thing transferred is a &%Liquid."}%
. instance(vPOUR, Pouring) =>
      exists vLIQUID: U; vCONTAINER1: U; vCONTAINER2: U
          . origin(vPOUR, vCONTAINER1)
            /\ destination(vPOUR, vCONTAINER2)
            /\ instance(vCONTAINER1, Container)
            /\ instance(vCONTAINER2, Container)
            /\ not vCONTAINER1 = vCONTAINER2
            /\ patient(vPOUR, vLIQUID)
            /\ attribute(vLIQUID, Liquid)
            /\ instance(vLIQUID, Substance)
. subclass(WaterWave, LiquidMotion)
%{WaterWave
"A &%WaterWave is a raised ridge of water 
moving along the surface of a body of water.  The &%WaterWave moves 
in a direction approximately transverse to the crest line of the wave.  
The &%patient of the &%WaterWave is successive regions of water, which 
do not travel in the direction of the wave or with it."}%
. instance(vWAVE, WaterWave) =>
      exists vAREA: U
          . instance(vAREA, WaterArea) /\ located(vWAVE, vAREA)
. subclass(Pulling, Transportation)
%{Pulling
"Any instance of &%Transportation, where a 
&%TransportationDevice is dragged by something else, whether the something 
else is an &%Animal or a self-powered &%TransportationDevice."}%
. instance(vPULL, Pulling) /\ patient(vPULL, vDEVICE) =>
      instance(vDEVICE, TransportationDevice)
. subclass(AirTransportation, Transportation)
%{AirTransportation
"Any instance of &%Transportation where the 
&%instrument is an &%Aircraft and which is through an &%AtmosphericRegion."}%
. instance(vTRANSPORT, AirTransportation) =>
      exists vCRAFT: U; vREGION: U
          . instance(vCRAFT, Aircraft)
            /\ instance(vREGION, AtmosphericRegion)
            /\ instrument(vTRANSPORT, vCRAFT)
            /\ located(vTRANSPORT, vREGION)
. instance(vCRAFT, Aircraft) =>
      capability(AirTransportation, instrument, vCRAFT)
. subclass(Helicopter, Aircraft)
%{Helicopter
"Any &%Aircraft with rapidly rotating wings."}%
. subclass(LandTransportation, Transportation)
%{LandTransportation
"Any instance of &%Transportation where the 
&%instrument is a &%LandVehicle."}%
. instance(vLAND, LandTransportation) =>
      exists vCRAFT: U; vAREA: U
          . instance(vCRAFT, LandVehicle)
            /\ instance(vAREA, LandArea)
            /\ instrument(vLAND, vCRAFT)
            /\ located(vCRAFT, vAREA)
. instance(vVEHICLE, LandVehicle) =>
      capability(LandTransportation, instrument, vVEHICLE)
. subclass(LandVehicle, Vehicle)
%{LandVehicle
"&%LandVehicle is the class of &%TransportationDevices that travel on 
land.  The two main types of &%LandVehicle are &%RoadVehicle and 
&%RailVehicle. Note that this includes vehicles which travel on any solid
surface, including a frozen body of water or snow."}%
. instance(vX, LandVehicle) =>
      hasPurpose(vX,
                 True
                     when exists vEV: U; vSURF: U
                              . surface(vSURF, PlanetEarth)
                                /\ instance(vEV, Transportation)
                                /\ holdsDuring(WhenFn(vEV),
                                               meetsSpatially(vX, vSURF))
                     else False)
. subclass(StageCoach, Trailer)
%{StageCoach
"A &%Trailer that is pulled by &%Horses and whose purpose 
was to transport &%Humans and their luggage from one &%City to the next, especially 
in areas which did not have an established transportation system, e.g. the old west."}%
. instance(vSTAGE, StageCoach)
  /\ instance(vPULL, Pulling)
  /\ patient(vPULL, vSTAGE)
  /\ agent(vPULL, vHORSE) =>
      instance(vHORSE, Horse)
. subclass(WaterTransportation, Transportation)
%{WaterTransportation
"Any instance of &%Transportation where 
the &%instrument is a &%Watercraft."}%
. instance(vTRANSPORT, WaterTransportation) =>
      exists vCRAFT: U; vAREA: U
          . instance(vCRAFT, Watercraft)
            /\ instance(vAREA, WaterArea)
            /\ instrument(vTRANSPORT, vCRAFT)
            /\ located(vTRANSPORT, vAREA)
. instance(vCRAFT, Watercraft) =>
      capability(WaterTransportation, instrument, vCRAFT)
. subclass(SpaceTransportation, Transportation)
%{SpaceTransportation
"Any instance of &%Transportation where the 
&%instrument is a &%Spacecraft and which is through a &%SpaceRegion."}%
. instance(vTRANSPORT, SpaceTransportation) =>
      exists vCRAFT: U; vREGION: U
          . instance(vCRAFT, Spacecraft)
            /\ instance(vREGION, SpaceRegion)
            /\ instrument(vTRANSPORT, vCRAFT)
            /\ located(vTRANSPORT, vREGION)
. subclass(Spacecraft, Vehicle)
%{Spacecraft
"Any &%Vehicle which is capable of 
&%SpaceTransportation."}%
. instance(vCRAFT, Spacecraft) =>
      capability(SpaceTransportation, instrument, vCRAFT)
. subclass(Missile, Spacecraft)
%{Missile
"A &%Spacecraft which is propelled by a rocket."}%
. subclass(Installing, Putting)
%{Installing
"&%Putting a &%Device in a location and configuring 
the &%Device so that it can be used as intended after the installation."}%
. instance(vINSTALL, Installing) /\ patient(vINSTALL, vDEVICE) =>
      instance(vDEVICE, Device)
. instance(vINSTALL, Installing)
  /\ patient(vINSTALL, vDEVICE)
  /\ hasPurpose(vDEVICE, vPURPOSE) =>
      holdsDuring(EndFn(WhenFn(vINSTALL)), a_t_r_u_e(vPURPOSE, True))
. subclass(MovingResidence, Transfer)
%{MovingResidence
"The process of changing one's residence, i.e. 
moving one's belongs to a new &%home."}%
. instance(vMOVE, MovingResidence) /\ agent(vMOVE, vAGENT) =>
      exists vHOME1: U; vHOME2: U
          . holdsDuring(BeginFn(WhenFn(vMOVE)), home(vAGENT, vHOME1))
            /\ holdsDuring(EndFn(WhenFn(vMOVE)), home(vAGENT, vHOME2))
            /\ not vHOME1 = vHOME2
. subclass(Tilling, IntentionalProcess)
. subclass(Tilling, SurfaceChange)
%{Tilling
"Any &%Process of altering &%Soil in such a way as to 
facilitate &%Agriculture."}%
. instance(vTILL, Tilling) /\ patient(vTILL, vSOIL) =>
      instance(vSOIL, Soil)
. instance(vTILL, Tilling) =>
      exists vCULTURE: U
          . instance(vCULTURE, Agriculture) /\ subProcess(vTILL, vCULTURE)
. subclass(Drilling, IntentionalProcess)
. subclass(Drilling, SurfaceChange)
%{Drilling
"Any &%Process of producing a &%hole in a 
&%SelfConnectedObject which involves rotating a long, thin bit."}%
. instance(vDRILL, Drilling) /\ patient(vDRILL, vOBJ) =>
      exists vHOLE: U
          . holdsDuring(BeginFn(WhenFn(vDRILL)), a_n_o_t(hole(vHOLE, vOBJ)))
            /\ holdsDuring(EndFn(WhenFn(vDRILL)), hole(vHOLE, vOBJ))
. subclass(Imagining, PsychologicalProcess)
%{Imagining
"Forming a mental picture of something which 
is not present."}%
. subclass(Dreaming, Imagining)
. disjoint(Dreaming, IntentionalProcess)
%{Dreaming
"A &%Process of producing metal images which occurs 
while one is &%Asleep."}%
. instance(vDREAM, Dreaming) /\ experiencer(vDREAM, vAGENT) =>
      holdsDuring(WhenFn(vDREAM), attribute(vAGENT, Asleep))
. subclass(Frightening, PsychologicalProcess)
%{Frightening
"Any &%PsychologicalProcess where the &%patient 
comes to feel &%Anxiety."}%
. instance(vFRIGHTEN, Frightening)
  /\ experiencer(vFRIGHTEN, vAGENT) =>
      holdsDuring(BeginFn(WhenFn(vFRIGHTEN)),
                  a_n_o_t(attribute(vAGENT, Anxiety)))
      /\ holdsDuring(EndFn(WhenFn(vFRIGHTEN)),
                     attribute(vAGENT, Anxiety))
. subclass(Murder, Killing)
. subclass(Murder, CriminalAction)
%{Murder
"Impermissible &%Killing of a &%Human."}%
. instance(vMURDER, Murder) =>
      exists vPERSON: U
          . patient(vMURDER, vPERSON) /\ instance(vPERSON, Human)
. subclass(Hanging, Killing)
%{Hanging
"&%Killing someone by suspending him/her from a 
rope wound around the neck until asphyxiation occurs."}%
. subclass(OrchestralConducting, Guiding)
%{OrchestralConducting
"The &%Process of directing an orchestra."}%
. instance(vCONDUCT, OrchestralConducting) =>
      exists vMUSIC: U
          . instance(vMUSIC, Music) /\ a_r_e_s_u_l_t(vCONDUCT, vMUSIC)
. instance(vCONDUCT, OrchestralConducting)
  /\ patient(vCONDUCT, vORCHESTRA) =>
      instance(vORCHESTRA, Orchestra)
. subclass(Orchestra, GroupOfPeople)
%{Orchestra
"A &%GroupOfPeople that create &%InstrumentalMusic 
together."}%
. instance(vORCHESTRA, Orchestra) =>
      hasPurpose(vORCHESTRA,
                 True
                     when exists vMUSIC: U
                              . instance(vMUSIC, InstrumentalMusic)
                                /\ agent(vMUSIC, vORCHESTRA)
                     else False)
. subclass(DramaticDirecting, Guiding)
%{DramaticDirecting
"The process of directing a &%DramaticActing 
in a &%MotionPicture or the &%Performance of a &%DramaticPlay."}%
. instance(vDIRECT, DramaticDirecting) /\ patient(vDIRECT, vACT) =>
      instance(vACT, DramaticActing)
. subclass(Sharing, ChangeOfPossession)
%{Sharing
"The subclass of &%ChangeOfPossession where a 
&%properPart of the &%patient is given by the &%agent or the &%destination."}%
. instance(vSHARE, Sharing)
  /\ agent(vSHARE, vAGENT1)
  /\ destination(vSHARE, vAGENT2)
  /\ patient(vSHARE, vOBJ) =>
      exists vGIVE: U; vPART: U
          . instance(vGIVE, Giving)
            /\ subProcess(vGIVE, vSHARE)
            /\ patient(vGIVE, vPART)
            /\ properPart(vPART, vOBJ)
            /\ agent(vGIVE, vAGENT1)
            /\ destination(vGIVE, vAGENT2)
. subclass(Stealing, UnilateralGetting)
. subclass(Stealing, CriminalAction)
%{Stealing
"Any &%UnilateralGetting which is not permitted by the 
&%origin of the &%UnilateralGetting.  These cases of &%UnilateralGetting are 
distinguished from ones where the &%destination is the subject of charity or 
other forms of benefaction."}%
. instance(vSTEAL, Stealing)
  /\ destination(vSTEAL, vAGENT)
  /\ origin(vSTEAL, vVICTIM)
  /\ instance(vVICTIM, CognitiveAgent) =>
      not confersRight(destination(vSTEAL, vAGENT), vVICTIM, vAGENT)
. subclass(Inheriting, UnilateralGetting)
%{Inheriting
"Any &%UnilateralGetting where the &%agent 
receives some part of the property of a person upon the death of the 
person."}%
. instance(vINHERIT, Inheriting)
  /\ agent(vINHERIT, vHEIR)
  /\ origin(vINHERIT, vPERSON)
  /\ patient(vINHERIT, vPROPERTY) =>
      exists vDEATH: U
          . instance(vDEATH, Death)
            /\ experiencer(vDEATH, vPERSON)
            /\ earlier(WhenFn(vDEATH), WhenFn(vINHERIT))
            /\ holdsDuring(ImmediatePastFn(WhenFn(vDEATH)),
                           possesses(vPERSON, vPROPERTY))
            /\ confersRight(possesses(vHEIR, vPROPERTY), vPERSON, vHEIR)
. partition(Position, FullTimePosition, PartTimePosition)
. subclass(FullTimePosition, Position)
%{FullTimePosition
"Any &%Position where the employee is either 
salaried or paid for at least 40 hour of work per week."}%
. subclass(PartTimePosition, Position)
%{PartTimePosition
"Any &%Position where the employee is not 
salaried and is paid for less than 40 hours of work per week."}%
. subclass(ClericalSecretary, Position)
. subclass(ClericalSecretary, SkilledOccupation)
%{ClericalSecretary
"The class of &%Positions where the position 
holder is responsible for clerical duties, e.g. typing documents, answering 
phones, keeping schedules, etc."}%
. subclass(Soldier, Position)
%{"The class of &%Positions which involve serving in 
the armed forces of a &%Nation."}%
. subclass(RedcoatSoldier, Soldier)
%{RedcoatSoldier
"Any &%Soldier that served on the British side during 
the American revolutionary war."}%
. subclass(ConfederateSoldier, Soldier)
%{ConfederateSoldier
"Any &%Soldier that served on the confederate side 
during the American Civil War."}%
. subclass(MilitaryPrivate, Soldier)
%{MilitaryPrivate
"An enlisted &%Soldier of the lowest rank."}%
. subclass(MilitaryOfficer, Soldier)
%{"The class of &%Soldiers who have authority or command."}%
. instance(vOFFICER, MilitaryOfficer) =>
      exists vMANAGE: U; vPATIENT: U
          . instance(vMANAGE, Managing)
            /\ agent(vMANAGE, vOFFICER)
            /\ patient(vMANAGE, vPATIENT)
            /\ (instance(vPATIENT, MilitaryOrganization)
                \/ instance(vPATIENT, Soldier))
. subclass(Lieutenant, MilitaryOfficer)
%{Lieutenant
"A commissioned &%MilitaryOfficer."}%
. subclass(CaptainOfficer, MilitaryOfficer)
%{CaptainOfficer
"A commissioned &%MilitaryOfficer who ranks 
above a &%Lieutenant but below a &%MajorOfficer."}%
. subclass(Colonel, MilitaryOfficer)
%{Colonel
"A commissioned &%MilitaryOfficer who ranks above 
a lieutenant colonel and below a brigadier general."}%
. subclass(Century, TimeDuration)
%{"The &%TimeDuration of 100 years."}%
. instance(vCENTURY, Century) =>
      duration(vCENTURY, MeasureFn(a_1_0_0, YearDuration))
. subclass(Decade, TimeDuration)
%{Decade
"The &%TimeDuration of 10 years."}%
. instance(vDECADE, Decade) =>
      duration(vDECADE, MeasureFn(a_1_0, YearDuration))
. subclass(YardLength, LengthMeasure)
. instance(YardLength, UnitOfMeasure)
%{YardLength
"English unit of length, equal to 3 &%FeetLength."}%
. instance(vNUMBER, RealNumber) =>
      MeasureFn(vNUMBER, YardLength) =
          MeasureFn(MultiplicationFn(a_3, vNUMBER), FootLength)
. subclass(NightTime, TimeInterval)
%{NightTime
"The class of &%TimeIntervals that begin at &%Sunset
and end at &%Sunrise."}%
. instance(vNIGHT, NightTime) =>
      exists vDAY1: U; vDAY2: U
          . instance(vDAY1, DayTime)
            /\ instance(vDAY2, DayTime)
            /\ meetsTemporally(vNIGHT, vDAY1)
            /\ meetsTemporally(vDAY2, vNIGHT)
. instance(vNIGHT, NightTime) =>
      exists vRISE: U; vSET: U
          . instance(vRISE, Sunrise)
            /\ instance(vSET, Sunset)
            /\ starts(vSET, vNIGHT)
            /\ finishes(vRISE, vNIGHT)
. subclass(DayTime, TimeInterval)
%{DayTime
"The class of &%TimeIntervals that begin at &%Sunrise 
and end at &%Sunset."}%
. instance(vDAY, DayTime) =>
      exists vNIGHT1: U; vNIGHT2: U
          . instance(vNIGHT1, NightTime)
            /\ instance(vNIGHT2, NightTime)
            /\ meetsTemporally(vDAY, vNIGHT1)
            /\ meetsTemporally(vNIGHT2, vDAY)
. instance(vDAY, DayTime) =>
      exists vRISE: U; vSET: U
          . instance(vRISE, Sunrise)
            /\ instance(vSET, Sunset)
            /\ starts(vRISE, vDAY)
            /\ finishes(vSET, vDAY)
. subclass(Morning, DayTime)
%{Morning
"The class of &%TimeIntervals that begin at &%Sunrise 
and end at noon."}%
. instance(vMORNING, Morning) =>
      exists vHOUR: U
          . instance(vHOUR, HourFn(a_1_2, vDAY)) /\ finishes(vHOUR, vMORNING)
. subclass(Afternoon, DayTime)
%{Afternoon
"The class of &%TimeIntervals that begin at noon and 
end at &%Sunset."}%
. instance(vAFTERNOON, Afternoon) =>
      exists vHOUR: U
          . instance(vHOUR, HourFn(a_1_2, vDAY)) /\ starts(vHOUR, vAFTERNOON)
. subclass(Sunrise, TimeInterval)
%{Sunrise
"The &%TimeInterval of each &%Day when the sun is rising 
and is partially overlapped by the horizon line."}%
. subclass(Sunset, TimeInterval)
%{Sunset
"The &%TimeInterval of each &%Day when the sun is setting 
and is partially overlapped by the horizon line."}%
. subclass(Weekend, TimeInterval)
%{Weekend
"Any &%Saturday and &%Sunday which are contiguous."}%
. instance(vWEEKEND, Weekend) =>
      exists vSATURDAY: U; vSUNDAY: U
          . instance(vSATURDAY, Saturday)
            /\ instance(vSUNDAY, Sunday)
            /\ starts(vSATURDAY, vWEEKEND)
            /\ finishes(vSUNDAY, vWEEKEND)
            /\ meetsTemporally(vSATURDAY, vSUNDAY)
. subclass(SeasonOfYear, TimeInterval)
. partition(SeasonOfYear, WinterSeason, SpringSeason, SummerSeason,
            FallSeason)
%{SeasonOfYear
"&%SeasonOfYear is the class of four 
seasons correlated with the calendar &%Year and associated with 
changes in the length of daylight and with overall temperature 
changes. Depending upon the &%GeographicArea, a &%SeasonOfYear 
may also be associated with weather patterns (e.g., rainy, dry, 
windy). The characteristics of seasons (cold vs. hot temperatures, 
long vs. short days) are reversed from the &%NorthernHemisphere 
to the &%SouthernHemisphere."}%
. subclass(WinterSeason, SeasonOfYear)
%{WinterSeason
"The &%SeasonOfYear that begins at the winter 
solstice and ends at the spring equinox."}%
. instance(vWINTER, WinterSeason) =>
      exists vSPRING: U
          . instance(vSPRING, SpringSeason)
            /\ meetsTemporally(vWINTER, vSPRING)
. instance(vWINTER, WinterSeason) =>
      exists vAUTUMN: U
          . instance(vAUTUMN, FallSeason)
            /\ meetsTemporally(vAUTUMN, vWINTER)
. subclass(SpringSeason, SeasonOfYear)
%{SpringSeason
"The &%SeasonOfYear that begins at the spring 
equinox and ends at the summer solstice. &%SpringSeason is the class of 
&%TimeIntervals associated with the calendar months of &%March 
through &%May."}%
. instance(vSPRING, SpringSeason) =>
      exists vSUMMER: U
          . instance(vSUMMER, SummerSeason)
            /\ meetsTemporally(vSPRING, vSUMMER)
. instance(vSpring, SpringSeason) =>
      exists vWINTER: U
          . instance(vWINTER, WinterSeason)
            /\ meetsTemporally(vWINTER, vSPRING)
. subclass(SummerSeason, SeasonOfYear)
%{SummerSeason
"The &%SeasonOfYear that begins at the summer 
solstice and ends at the autumnal equinox."}%
. instance(vSUMMER, SummerSeason) =>
      exists vSPRING: U
          . instance(vSPRING, SpringSeason)
            /\ meetsTemporally(vSPRING, vSUMMER)
. instance(vSUMMER, SummerSeason) =>
      exists vAUTUMN: U
          . instance(vAUTUMN, FallSeason)
            /\ meetsTemporally(vSUMMER, vAUTUMN)
. subclass(FallSeason, SeasonOfYear)
%{FallSeason
"The &%SeasonOfYear that begins at the autumnal 
equinox and ends at the winter solstice."}%
. instance(vAUTUMN, FallSeason) =>
      exists vSUMMER: U
          . instance(vSUMMER, SummerSeason)
            /\ meetsTemporally(vSUMMER, vAUTUMN)
. instance(vAUTUMN, FallSeason) =>
      exists vWINTER: U
          . instance(vWINTER, WinterSeason)
            /\ meetsTemporally(vAUTUMN, vWINTER)
. instance(Upstairs, PositionalAttribute)
%{Upstairs
"A &%PositionalAttribute to indicate that one thing is 
one or more floors above a second thing in the same building."}%
. orientation(vOBJ1, vOBJ2, Upstairs) =>
      exists vLEVEL1: U; vLEVEL2: U; vBUILDING: U
          . instance(vLEVEL1, BuildingLevel)
            /\ instance(vLEVEL2, BuildingLevel)
            /\ instance(vBUILDING, Building)
            /\ part(vLEVEL1, vBUILDING)
            /\ part(vLEVEL2, vBUILDING)
            /\ located(vOBJ1, vLEVEL1)
            /\ located(vOBJ2, vLEVEL2)
            /\ orientation(vLEVEL1, vLEVEL2, Above)
. instance(Downstairs, PositionalAttribute)
%{Downstairs
"A &%PositionalAttribute to indicate that one thing is 
one or more floors below a second thing in the same building."}%
. orientation(vOBJ1, vOBJ2, Downstairs) =>
      exists vLEVEL1: U; vLEVEL2: U; vBUILDING: U
          . instance(vLEVEL1, BuildingLevel)
            /\ instance(vLEVEL2, BuildingLevel)
            /\ instance(vBUILDING, Building)
            /\ part(vLEVEL1, vBUILDING)
            /\ part(vLEVEL2, vBUILDING)
            /\ located(vOBJ1, vLEVEL1)
            /\ located(vOBJ2, vLEVEL2)
            /\ orientation(vLEVEL1, vLEVEL2, Below)
. instance(Happiness, EmotionalState)
%{Happiness
"The state of being happy, experiencing pleasure, 
joy or contentment.  Note that this &%Attribute covers both active enjoyment, 
as well as the emotional state of simply being free from anxiety or fear."}%
. attribute(vPERSON, Happiness) =>
      not (exists vPROP: U . fears(vPERSON, vPROP))
. subAttribute(Tranquility, Happiness)
. contraryAttribute(Tranquility, Anxiety)
%{Tranquility
"The state of being free from &%Anxiety."}%
. instance(Unhappiness, EmotionalState)
. contraryAttribute(Unhappiness, Happiness)
%{Unhappiness
"The state of being unhappy, experiencing pain, 
sorrow or unease."}%
. subAttribute(Anxiety, Unhappiness)
%{Anxiety
"The state of being worried, troubled or uneasy."}%
. attribute(vPERSON, Anxiety) =>
      exists vPROP: U . fears(vPERSON, vPROP)
. subAttribute(Anger, Unhappiness)
%{Anger
"The state of being wrathful, irate or indignant."}%
. attribute(vPERSON, Anger) =>
      exists vPROP: U . disapproves(vPERSON, vPROP)
. subAttribute(Pain, Unhappiness)
%{Pain
"A physical sensation of discomfort which can vary widely 
in intensity."}%
. instance(Surprise, EmotionalState)
%{Surprise
"The &%EmotionalState that one experiences when something 
unexpected and of significance occurs."}%
. holdsDuring(vTIME, attribute(vAGENT, Surprise)) =>
      exists vPART: U; vPROP: U
          . temporalPart(vPART, PastFn(vTIME))
            /\ holdsDuring(vPART, expects(vAGENT, vPROP))
            /\ holdsDuring(vTIME, a_t_r_u_e(vPROP, False))
. subclass(SecondaryColor, ColorAttribute)
%{SecondaryColor
"A color that is the product of mixing together 
two or more &%PrimaryColors."}%
. instance(vCOLOR, SecondaryColor) /\ attribute(vOBJ, vCOLOR) =>
      exists vPROCESS: U; vRESOURCE1: U; vRESOURCE2: U; vPRIMARY1: U;
             vPRIMARY2: U
          . a_r_e_s_u_l_t(vPROCESS, vOBJ)
            /\ resource(vPROCESS, vRESOURCE1)
            /\ resource(vPROCESS, vRESOURCE2)
            /\ attribute(vRESOURCE1, vPRIMARY1)
            /\ attribute(vRESOURCE2, vPRIMARY2)
            /\ instance(vPRIMARY1, PrimaryColor)
            /\ instance(vPRIMARY2, PrimaryColor)
            /\ not vPRIMARY1 = vPRIMARY2
. instance(Gray, SecondaryColor)
%{Gray
"A &%SecondaryColor that results from mixing &%Black and 
&%White."}%
. instance(Pink, SecondaryColor)
%{Pink
"A &%SecondaryColor that results from mixing &%Red and 
&%White."}%
. instance(Brown, SecondaryColor)
%{Brown
"A &%SecondaryColor that resembles the color of wood or 
of soil."}%
. instance(Green, SecondaryColor)
%{Green
"A &%SecondaryColor that resembles the color of fresh 
grass."}%
. instance(LineFormation, ShapeAttribute)
%{LineFormation
"A &%ShapeAttribute that applies to 
&%Collections and indicates that all of the &%members of the &%Collection 
are arrayed in a line, i.e. each &%member (except possibly the first) is 
behind or to the side of exactly one other &%member."}%
. attribute(vCOLLECTION, LineFormation) =>
      instance(vCOLLECTION, Collection)
. instance(Stressed, SoundAttribute)
%{Stressed
"A &%SoundAttribute of &%Syllables.  It denotes 
the quality of being emphasized over the other &%Syllables in the same 
&%Word."}%
. attribute(vSYLLABLE, Stressed) => instance(vSYLLABLE, Syllable)
. attribute(vSYLLABLE, Stressed)
  /\ instance(vWORD, Word)
  /\ part(vSYLLABLE, vWORD) =>
      not (exists vSYLLABLE2: U
               . instance(vSYLLABLE2, Syllable)
                 /\ part(vSYLLABLE2, vWORD)
                 /\ not vSYLLABLE2 = vSYLLABLE)
. subclass(Syllable, SymbolicString)
%{Syllable
"A sequence of &%Characters from the same &%Word 
that denote a single sound."}%
. instance(vWORD, Word) =>
      exists vSYLLABLE: U
          . instance(vSYLLABLE, Syllable) /\ part(vSYLLABLE, vWORD)
. subclass(DigitCharacter, Character)
%{DigitCharacter
"Any &%Character that is comprised of a single digit, 
i.e. one of the numerals 0, 1, 2, 3, 4, 5, 6, 7, 8, 9."}%
. instance(Lost, ContestAttribute)
. contraryAttribute(Lost, Won)
%{Lost
"The &%ContestAttribute that applies to a &%Contest 
participant who has lost the &%Contest."}%
. instance(Won, ContestAttribute)
%{Won
"The &%ContestAttribute that applies to a &%Contest 
participant who has won the &%Contest."}%
. subclass(GameAttribute, ContestAttribute)
%{GameAttribute
"Any &%ContestAttribute that is specific 
to a &%Game."}%
. property(vTHING, vATTR) /\ instance(vATTR, GameAttribute) =>
      exists vGAME: U
          . instance(vGAME, Game)
            /\ (agent(vGAME, vTHING)
                \/ patient(vGAME, vTHING)
                \/ subProcess(vTHING, vGAME))
. subclass(SportAttribute, GameAttribute)
%{SportAttribute
"Any &%GameAttribute that is specific to 
a &%Sport."}%
. property(vTHING, vATTR) /\ instance(vATTR, SportAttribute) =>
      exists vSPORT: U
          . instance(vSPORT, Game)
            /\ (agent(vSPORT, vTHING)
                \/ patient(vSPORT, vTHING)
                \/ subProcess(vTHING, vSPORT))
. instance(BaseballStrike, SportAttribute)
%{BaseballStrike
"A baseball pitch that is in the strike zone 
and that is not hit by the batter."}%
. subclass(PoliticoEconomicAttribute, RelationalAttribute)
. partition(PoliticoEconomicAttribute, FormOfGovernment,
            EconomicAttribute)
%{PoliticoEconomicAttribute
"Any &%Attribute of a &%Government 
which specifies some aspect of the political or economic system of the 
&%Government."}%
. instance(vATTRIBUTE, PoliticoEconomicAttribute)
  /\ attribute(vGOVERNMENT, vATTRIBUTE) =>
      instance(vGOVERNMENT, Government)
. subclass(Oxidation, ChemicalProcess)
%{Oxidation
"Any &%ChemicalProcess where &%Electrons are removed 
from the substance undergoing the &%ChemicalProcess."}%
. instance(vOXIDATE, Oxidation)
  /\ patient(vOXIDATE, vSUBSTANCE)
  /\ holdsDuring(BeginFn(WhenFn(vOXIDATE)),
                 electronNumber(vSUBSTANCE, vGREATER)) =>
      exists vLOWER: U
          . lessThan(vLOWER, vGREATER)
            /\ holdsDuring(EndFn(WhenFn(vOXIDATE)),
                           electronNumber(vSUBSTANCE, vLOWER))
. subclass(Dialysis, Separating)
%{Dialysis
"Any process of &%Separating a &%Solution into two or more 
constituent &%PureSubstances by means of their unequal diffusion through membranes 
that are partially permeable."}%
. instance(vDIALYSIS, Dialysis) =>
      exists vSOLUTION: U; vSUBSTANCE1: U; vSUBSTANCE2: U
          . resource(vDIALYSIS, vSOLUTION)
            /\ instance(vSOLUTION, Solution)
            /\ a_r_e_s_u_l_t(vDIALYSIS, vSUBSTANCE1)
            /\ instance(vSUBSTANCE1, PureSubstance)
            /\ a_r_e_s_u_l_t(vDIALYSIS, vSUBSTANCE2)
            /\ instance(vSUBSTANCE2, PureSubstance)
            /\ not vSUBSTANCE1 = vSUBSTANCE2
. instance(ChemicalEquilibrium, InternalAttribute)
%{ChemicalEquilibrium
"The &%Attribute of being in a chemically 
stable state, i.e. the relative proportions of &%resources and &%results will 
not longer change."}%
. property(vPROCESS, ChemicalEquilibrium) =>
      instance(vPROCESS, ChemicalProcess)
. property(vPROCESS, ChemicalEquilibrium) =>
      exists vRATIO: U
          . holdsDuring(vTIME, resource(vPROCESS, vRESOURCE))
            /\ holdsDuring(vTIME, a_r_e_s_u_l_t(vPROCESS, vRESULT)) =>
                vRATIO = DivisionFn(vRESOURCE, vRESULT)
. subclass(RightAngle, TwoDimensionalAngle)
%{RightAngle
"Any &%TwoDimensionalAngle that has the 
&%angularMeasure of 90 &%AngularDegrees."}%
. instance(vANGLE, RightAngle) =>
      angularMeasure(vANGLE, MeasureFn(a_9_0, AngularDegree))
. subclass(Polygon, ClosedTwoDimensionalFigure)
%{Polygon
"A &%ClosedTwoDimensionalFigure that is composed 
exclusively of straight lines, i.e. &%OneDimensionalFigures."}%
. instance(vPOLYGON, Polygon) =>
      geometricPart(vPART, vPOLYGON) =>
          sideOfFigure(vPART, vPOLYGON)
          \/ (exists vSIDE: U
                  . sideOfFigure(vSIDE, vPOLYGON)
                    /\ geometricPart(vPART, vSIDE))
. subclass(Triangle, Polygon)
%{Triangle
"Any three-sided &%Polygon."}%
. instance(vTRIANGLE, Triangle) =>
      CardinalityFn(KappaFn(vSIDE, sideOfFigure(vSIDE, vTRIANGLE))) = a_3
. subclass(Quadrilateral, Polygon)
%{Quadrilateral
"Any four-sided &%Polygon."}%
. instance(vQUAD, Quadrilateral) =>
      CardinalityFn(KappaFn(vSIDE, sideOfFigure(vSIDE, vQUAD))) = a_4
. subclass(Rectangle, Quadrilateral)
%{Rectangle
"Any &%Quadrilateral whose angles are all 
&%RightAngles."}%
. instance(vRECTANGLE, Rectangle) =>
      angleOfFigure(vANGLE, vRECTANGLE) => instance(vANGLE, RightAngle)
. subclass(Square, Rectangle)
%{Square
"Any &%Rectangle whose sides are all equal."}%
. instance(vSQUARE, Square) =>
      exists vLENGTH: U
          . forall vSIDE: U
                . sideOfFigure(vSIDE, vSQUARE) => lineMeasure(vSIDE, vLENGTH)
. subclass(Circle, ClosedTwoDimensionalFigure)
%{Circle
"The class of &%ClosedTwoDimensionalFigures such that 
all &%GeometricPoints that make up the &%Circle are equidistant from a 
single &%GeometricPoint, known as the center of the &%Circle."}%
. instance(vCIRCLE, Circle) =>
      exists vRADIUS: U . radius(vCIRCLE, vRADIUS)
. subrelation(sideOfFigure, geometricPart)
. domain(sideOfFigure, a_1, OneDimensionalFigure)
. domain(sideOfFigure, a_2, GeometricFigure)
%{sideOfFigure
"(&%sideOfFigure ?SIDE ?FIGURE) means that the 
&%OneDimensionalFigure ?POINT is a side of the &%GeometricFigure ?FIGURE."}%
. instance(radius, BinaryPredicate)
. instance(radius, SingleValuedRelation)
. instance(radius, TotalValuedRelation)
. domain(radius, a_1, Circle)
. domain(radius, a_2, LengthMeasure)
%{radius
"(&%radius ?CIRCLE ?LENGTH) means that the radius of 
the &%Circle ?CIRCLE has a length of ?LENGTH."}%
. radius(vCIRCLE, vRADIUS) =>
      exists vPOINT: U
          . forall vPART: U
                . pointOfFigure(vPART, vCIRCLE) =>
                      geometricDistance(vPART, vPOINT, vRADIUS)
. instance(diameter, BinaryPredicate)
. instance(diameter, SingleValuedRelation)
. instance(diameter, TotalValuedRelation)
. domain(diameter, a_1, Circle)
. domain(diameter, a_2, LengthMeasure)
%{diameter
"(&%diameter ?CIRCLE ?LENGTH) means that the diameter 
of the &%Circle ?CIRCLE has a length of ?LENGTH."}%
. diameter(vCIRCLE, vLENGTH) =>
      exists vHALF: U
          . radius(vCIRCLE, vHALF) /\ MultiplicationFn(vHALF, a_2) = vLENGTH
. instance(tangent, BinaryPredicate)
. domain(tangent, a_1, OneDimensionalFigure)
. domain(tangent, a_2, Circle)
%{tangent
"(&%tangent ?LINE ?CIRCLE) means that the straight line 
?LINE is tangent to the &%Circle ?CIRCLE, i.e. ?LINE touches ?CIRCLE without 
intersecting it."}%
. tangent(vLINE, vCIRCLE) =>
      exists vPOINT1: U
          . pointOfFigure(vPOINT1, vLINE)
            /\ pointOfFigure(vPOINT1, vCIRCLE)
            /\ (forall vPOINT2: U
                    . pointOfFigure(vPOINT2, vLINE)
                      /\ pointOfFigure(vPOINT2, vCIRCLE) =>
                          vPOINT1 = vPOINT2)
. subrelation(contestParticipant, agent)
. instance(contestParticipant, TotalValuedRelation)
. domain(contestParticipant, a_1, Contest)
. domain(contestParticipant, a_2, Agent)
%{contestParticipant
"(&%contestParticipant ?CONTEST ?AGENT) 
means that ?AGENT is one of the sides in the &%Contest ?CONTEST.  For 
example, if the ?CONTEST is a football game, then ?AGENT would be one of 
the opposing teams.  For another example, if ?CONTEST is a &%Battle, then 
?AGENT would be one of the sides fighting each other."}%
. subclass(CivilWar, War)
%{CivilWar
"A &%War in which the fighting &%GeopoliticalAreas 
are both part of the same &%Nation."}%
. instance(vWAR, CivilWar) =>
      exists vNATION: U
          . instance(vNATION, Nation)
            /\ (forall vAGENT: U
                    . contestParticipant(vWAR, vAGENT) =>
                          geopoliticalSubdivision(vAGENT, vNATION))
. subclass(Debating, Contest)
. subclass(Debating, LinguisticCommunication)
%{Debating
"A &%Contest where each participant holds a different 
view regarding some issue, and each participant attempts to prove, by 
rhetoric or evidence, that his/her own views about a particular matter are 
correct and/or that the views of the other participants are incorrect."}%
. subclass(Negotiating, Contest)
. subclass(Negotiating, LinguisticCommunication)
%{Negotiating
"A &%Contest where each participant attempts to 
maximize his self-interest in a &%Promise that marks the end of the &%Contest."}%
. instance(vNEGOTIATE, Negotiating) =>
      hasPurpose(vNEGOTIATE,
                 True
                     when exists vCOMMIT: U
                              . instance(vCOMMIT, Committing)
                                /\ subProcess(vCOMMIT, vNEGOTIATE)
                                /\ finishes(WhenFn(vCOMMIT), WhenFn(vNEGOTIATE))
                     else False)
. subclass(BusinessCompetition, Contest)
%{BusinessCompetition
"Any &%Contest where the &%contestParticipants 
are &%Corporations and the aim is to win as many customers as possible."}%
. instance(vCONTEST, BusinessCompetition)
  /\ contestParticipant(vCONTEST, vAGENT) =>
      instance(vAGENT, Corporation)
. subclass(Boxing, ViolentContest)
. subclass(Boxing, Sport)
%{Boxing
"A sport which involves two participants who try to 
knock each other out in a limited number of rounds.  Note that each instance 
of &%Boxing is a boxing match."}%
. subclass(Gymnastics, Sport)
%{Gymnastics
"A sport which involves exercises of agility on a 
range of gymnastic equipment."}%
. subclass(Baseball, Sport)
%{Baseball
"A sport which involves two teams of 9 players each 
that take turns at bat and attempt to score runs.  Note that each instance 
of &%Baseball is a baseball game."}%
. subclass(BaseballTeam, SportsTeam)
%{BaseballTeam
"The class of &%SportsTeams that play &%Baseball."}%
. instance(vTEAM, BaseballTeam) =>
      capability(Baseball, agent, vTEAM)
. subclass(BaseballInning, Maneuver)
%{BaseballInning
"A division of a &%Baseball game.  A normal game 
consists of 9 innings, and each inning involves a turn a bat for both teams."}%
. instance(vINNING, BaseballInning) =>
      exists vGAME: U
          . instance(vGAME, Baseball) /\ subProcess(vINNING, vGAME)
. instance(Blind, BiologicalAttribute)
%{Blind
"The &%Attribute that applies to &%Animals and &%Humans 
that are unable to see."}%
. attribute(vAGENT, Blind) => not capability(Seeing, agent, vAGENT)
. instance(Fist, BodyPosition)
%{Fist
"The &%BodyPosition of having the fingers drawn into 
the palm so that the hand can be used for striking something."}%
. attribute(vHAND, Fist) => instance(vHAND, Hand)
. subclass(LyingDown, BodyMotion)
%{LyingDown
"The &%BodyMotion of moving from a &%Sitting 
to a &%Prostrate position."}%
. instance(vLIE, LyingDown) /\ agent(vLIE, vAGENT) =>
      holdsDuring(BeginFn(WhenFn(vLIE)), attribute(vAGENT, Sitting))
      /\ holdsDuring(EndFn(WhenFn(vLIE)), attribute(vAGENT, Prostrate))
. subclass(SittingDown, BodyMotion)
%{SittingDown
"The &%BodyMotion of moving from a &%Standing 
to a &%Sitting position."}%
. instance(vSIT, SittingDown) /\ agent(vSIT, vAGENT) =>
      holdsDuring(BeginFn(WhenFn(vSIT)), attribute(vAGENT, Standing))
      /\ holdsDuring(EndFn(WhenFn(vSIT)), attribute(vAGENT, Sitting))
. subclass(StandingUp, BodyMotion)
%{StandingUp
"The &%BodyMotion of moving from a &%Sitting 
to a &%Standing position."}%
. instance(vSTAND, StandingUp) /\ agent(vSTAND, vAGENT) =>
      holdsDuring(BeginFn(WhenFn(vSTAND)), attribute(vAGENT, Sitting))
      /\ holdsDuring(EndFn(WhenFn(vSTAND)), attribute(vAGENT, Standing))
. subclass(OpeningEyes, BodyMotion)
. disjoint(OpeningEyes, ClosingEyes)
%{OpeningEyes
"The &%BodyMotion of relaxing the eye lids so that 
the corneas are exposed to light."}%
. subclass(ClosingEyes, BodyMotion)
%{ClosingEyes
"The &%BodyMotion of tensing the eye lids so that 
the corneas are not exposed to light."}%
. subclass(Winking, ClosingEyes)
. subclass(Winking, Gesture)
%{Winking
"Any instance of &%ClosingEyes which is intended to 
express something to someone else."}%
. subclass(Shrugging, BodyMotion)
. subclass(Shrugging, Gesture)
%{Shrugging
"Moving the &%Shoulders in such a way that the motion 
is intended to express something to someone else."}%
. instance(vSHRUG, Shrugging) /\ patient(vSHRUG, vSHOULDER) =>
      instance(vSHOULDER, Shoulder)
. subclass(Trembling, BodyMotion)
. subclass(Trembling, ComplementFn(IntentionalProcess))
%{Trembling
"Any &%BodyMotion which is involuntary and which is 
repeated many times over a short time frame, e.g. a tremor in the hands."}%
. subclass(DomesticAnimal, Animal)
. disjoint(DomesticAnimal, Human)
%{DomesticAnimal
"Any &%Animal that is kept by a &%Human, as 
a pet, as livestock, for exhibition, etc."}%
. instance(vANIMAL, DomesticAnimal) =>
      exists vKEEP: U; vPERSON: U
          . instance(vKEEP, Keeping)
            /\ agent(vKEEP, vPERSON)
            /\ instance(vPERSON, Human)
            /\ patient(vKEEP, vANIMAL)
. instance(vFEED, Fodder) =>
      hasPurpose(vFEED,
                 True
                     when exists vANIMAL: U; vEAT: U
                              . instance(vANIMAL, DomesticAnimal)
                                /\ instance(vEAT, Eating)
                                /\ agent(vEAT, vANIMAL)
                                /\ patient(vEAT, vFEED)
                     else False)
. subclass(Horse, HoofedMammal)
. subclass(Horse, DomesticAnimal)
%{Horse
"A domesticated &%HoofedMammal that is used for 
transportation and work."}%
. subclass(Donkey, HoofedMammal)
. subclass(Donkey, DomesticAnimal)
%{Donkey
"A domesticated &%HoofedMammal that is used for 
work."}%
. subclass(Mule, HoofedMammal)
. subclass(Mule, DomesticAnimal)
%{Mule
"The product of a &%Male &%Donkey and a &%Female 
&%Horse.  &%Mules are always sterile."}%
. instance(vMULE, Mule) =>
      exists vDONKEY: U; vHORSE: U
          . father(vMULE, vDONKEY)
            /\ instance(vDONKEY, Donkey)
            /\ mother(vMULE, vHORSE)
            /\ instance(vHORSE, Horse)
. instance(vMULE, Mule) =>
      not capability(SexualReproduction, agent, vMULE)
. subclass(Sheep, HoofedMammal)
. subclass(Sheep, DomesticAnimal)
%{Sheep
"A domesticated &%HoofedMammal that is bred for its 
wool and for its meat (known as mutton)."}%
. subclass(Cow, HoofedMammal)
. subclass(Cow, DomesticAnimal)
%{Cow
"A domesticated &%HoofedMammal that is raised for milk 
and beef, and is also used for work."}%
. subclass(FemaleCow, Cow)
%{FemaleCow
"A &%Cow that is &%Female."}%
. instance(vCOW, FemaleCow) <=>
      instance(vCOW, Cow) /\ attribute(vCOW, Female)
. subclass(Chicken, Bird)
. subclass(Chicken, DomesticAnimal)
%{Chicken
"A subclass of &%Bird that is raised for its meat 
and for its eggs."}%
. subclass(Hen, Chicken)
%{Hen
"A &%Female &%Chicken."}%
. instance(vHEN, Hen) <=>
      instance(vHEN, Chicken) /\ attribute(vHEN, Female)
. subclass(ChickenMeat, Meat)
%{ChickenMeat
"&%Meat that was originally part of a &%Chicken."}%
. instance(vMEAT, ChickenMeat) <=>
      (exists vCHICKEN: U
           . instance(vMEAT, Meat)
             /\ instance(vCHICKEN, Chicken)
             /\ part(vMEAT, vCHICKEN))
. subclass(Mouse, Rodent)
%{Mouse
"A &%Rodent that has a hairless tail like a rat but that 
is smaller than a rat."}%
. subclass(Hay, Fodder)
%{Hay
"&%Grass that has been cut and cured for use as &%Fodder."}%
. instance(vHAY, Hay) =>
      exists vMAKE: U; vGRASS: U
          . instance(vMAKE, Making)
            /\ resource(vMAKE, vGRASS)
            /\ instance(vGRASS, Grass)
            /\ a_r_e_s_u_l_t(vMAKE, vHAY)
. subclass(Copying, Making)
%{Copying
"&%Making a &%copy of something."}%
. instance(vCOPY, Copying)
  /\ resource(vCOPY, vTHING1)
  /\ a_r_e_s_u_l_t(vCOPY, vTHING2) =>
      copy(vTHING1, vTHING2)
. subclass(Vacationing, RecreationOrExercise)
%{Vacationing
"Taking time off from &%Working."}%
. instance(vVACATION, Vacationing)
  /\ instance(vWORK, Working)
  /\ agent(vVACATION, vPERSON)
  /\ agent(vWORK, vPERSON)
  /\ instance(vPERSON, Human) =>
      not overlapsTemporally(WhenFn(vVACATION), WhenFn(vWORK))
. subclass(Working, FinancialTransaction)
%{Working
"Any &%FinancialTransaction where someone exchanges 
his/her labor for an instance of &%CurrencyMeasure."}%
. subclass(Farming, Working)
%{Farming
"Operating a farm, e.g. planting and harvesting crops, 
tending livestock, etc."}%
. instance(vFARMING, Farming) /\ agent(vFARMING, vFARMER) =>
      exists vFARM: U
          . instance(vFARM, Farm)
            /\ holdsDuring(WhenFn(vFARMING), located(vFARMER, vFARM))
. subclass(Serving, Working)
%{Serving
"Working as a waiter or servant, either for an 
&%Organization (e.g. a restaurant) or for a person or family."}%
. subclass(Sales, Working)
%{Sales
"Any instance of &%Working that involves &%Selling or 
trying to sell items."}%
. subAttribute(Retired, Unemployed)
%{Retired
"Voluntary unemployment toward the end of one's life."}%
. subclass(SkilledOccupation, Position)
%{SkilledOccupation
"Any &%Position which requires 
learning a set of skills."}%
. instance(vOCCUPATION, SkilledOccupation)
  /\ attribute(vPERSON, vOCCUPATION) =>
      exists vTRAINING: U
          . instance(vTRAINING, EducationalProcess)
            /\ destination(vTRAINING, vPERSON)
. subclass(ManualLabor, Position)
%{ManualLabor
"Any &%Position which involves manual 
work."}%
. subclass(UnskilledOccupation, ManualLabor)
. disjoint(UnskilledOccupation, SkilledOccupation)
%{UnskilledOccupation
"Any &%Position which does not 
require learning a set of skills."}%
. instance(Maid, UnskilledOccupation)
%{Maid
"A &%Position which involves &%Serving a person 
or family.  Note that this &%Position is filled only by a &%Woman."}%
. attribute(vMAID, Maid) => instance(vMAID, Woman)
. attribute(vMAID, Maid) =>
      exists vSERVE: U
          . instance(vSERVE, Serving) /\ agent(vSERVE, vMAID)
. instance(TheaterProfession, SkilledOccupation)
%{TheaterProfession
"Often know as the stage, the 
&%Position of performing live plays."}%
. subclass(Coach, SkilledOccupation)
%{Coach
"Any occupation that involves training an athlete or a 
sports team."}%
. subclass(OccupationalTrade, SkilledOccupation)
. subclass(OccupationalTrade, ManualLabor)
%{OccupationalTrade
"Any &%Position that involves skilled 
manual work."}%
. subclass(Profession, SkilledOccupation)
. disjoint(Profession, OccupationalTrade)
%{Profession
"Any occupation that requires at least a bachelor's
degree."}%
. (instance(vROLE, OccupationalTrade)
   \/ instance(vROLE, Profession))
  /\ attribute(vHUMAN, vROLE) =>
      exists vFIELD: U
          . instance(vFIELD, FieldOfStudy) /\ knows(vHUMAN, vFIELD)
. subclass(Cleric, Profession)
%{Cleric
"The &%Profession of being in charge of or ministering 
to a &%ReligousOrganization."}%
. occupiesPosition(vPERSON, Cleric, vORG) <=>
      leader(vORG, vPERSON) /\ instance(vORG, ReligiousOrganization)
. subclass(PoliceOfficer, Profession)
. subclass(PoliceOfficer, GovernmentOfficer)
%{PoliceOfficer
"The &%Profession of being a police officer, i.e. 
working for a law enforcement agency that is part of a &%Government."}%
. subclass(PoliceDetective, PoliceOfficer)
%{PoliceDetective
"The &%Profession of being a police 
detective, i.e. being a &%PoliceOfficer whose duties include the 
investigation of crimes."}%
. subclass(PrivateDetective, Profession)
. disjoint(PrivateDetective, PoliceDetective)
%{PrivateDetective
"The &%Profession of being a private detective, 
i.e. a detective who can be hired for a fee to investigate something."}%
. subclass(Professor, Profession)
%{Professor
"The &%Profession of being a &%teacher at a 
&%PostSecondarySchool."}%
. instance(vPROF, Professor)
  /\ occupiesPosition(vPERSON, vPROF, vORG) =>
      teacher(vORG, vPROF) /\ instance(vORG, PostSecondarySchool)
. subclass(MedicalDoctor, Profession)
%{MedicalDoctor
"The &%Profession of being a medical doctor, 
i.e. having attended medical school and being licensed to practice medicine."}%
. attribute(vDOCTOR, MedicalDoctor) =>
      exists vPROCESS1: U; vPROCESS2: U
          . subclass(vPROCESS1, DiagnosticProcess)
            /\ subclass(vPROCESS2, TherapeuticProcess)
            /\ capability(vPROCESS1, agent, vDOCTOR)
            /\ capability(vPROCESS2, agent, vDOCTOR)
. subclass(NewsReporter, Profession)
%{NewsReporter
"The &%Profession of being a news reporter, i.e. 
investigating and reporting, in a publication or broadcast program, current 
events."}%
. instance(Mathematics, FieldOfStudy)
%{Mathematics
"The &%FieldOfStudy dealing with quantities and their 
relations to one another."}%
. subclass(Science, FieldOfStudy)
%{Science
"Any &%FieldOfStudy which tests theories on the basis of 
careful observations and/or experiments and which has a cumulative body of results."}%
. subclass(SocialScience, Science)
%{SocialScience
"Any &%Science which studies human behavior, either in 
the aggregate, as do, for example, &%Economics and &%Linguistics, or with respect to 
the individual, as does &%Psychology."}%
. instance(Economics, SocialScience)
%{Economics
"The field of economics."}%
. instance(Linguistics, SocialScience)
%{Linguistics
"The field of linguistics."}%
. instance(Psychology, SocialScience)
%{Psychology
"The field of psychology."}%
. instance(Biology, Science)
%{Biology
"The study of the classification, development, and 
functioning of &%Organisms."}%
. subField(Physiology, Biology)
. instance(Physiology, Science)
%{Physiology
"The part of &%Biology dealing with the functioning of 
&%Organisms."}%
. subField(MedicalScience, Biology)
. instance(MedicalScience, Science)
%{MedicalScience
"The field of medicine."}%
. instance(Chemistry, Science)
%{Chemistry
"The study of the compositions, properties, and 
reactions of &%Substances."}%
. instance(Physics, Science)
%{Physics
"The study of matter and energy and their relations."}%
. instance(Engineering, Science)
%{Engineering
"The application of instances of &%Science to the solution 
of practical problems, i.e. the creation of various forms of technology."}%
. subField(Electronics, Physics)
. subField(Electronics, Engineering)
. instance(Electronics, FieldOfStudy)
%{Electronics
"The branch of &%Physics that deals with the theory 
and applications of electron emissions."}%
. instance(Theology, FieldOfStudy)
%{Theology
"The systematic study of religious practice and religious truth."}%
. instance(MilitaryScience, FieldOfStudy)
%{MilitaryScience
"The study of the principles of war."}%
. instance(History, FieldOfStudy)
%{History
"The recording and interpretation of past events involving 
&%Humans, including political events and cultural practices."}%
. instance(Philosophy, FieldOfStudy)
%{Philosophy
"The study of first principles, including epistemology, 
metaphysics, and ethics."}%
. instance(FieldOfLaw, FieldOfStudy)
%{FieldOfLaw
"The study of legal principles and the framework of national 
and/or international laws."}%
. subrelation(subField, subProposition)
. instance(subField, TransitiveRelation)
. instance(subField, IrreflexiveRelation)
. domain(subField, a_1, FieldOfStudy)
. domain(subField, a_2, FieldOfStudy)
%{subField
"(&%subField ?FIELD1 ?FIELD2) means that ?FIELD1 is a proper 
part of the &%FieldOfStudy ?FIELD2.  For example, &%Physiology is a &%subField of 
&%Biology."}%
. instance(hasExpertise, BinaryPredicate)
. domain(hasExpertise, a_1, Human)
. domain(hasExpertise, a_2, FieldOfStudy)
%{hasExpertise
"(&%hasExpertise ?PERSON ?FIELD) means that ?PERSON has 
studied the &%FieldOfStudy ?FIELD and is regarded as an expert."}%
. hasExpertise(vPERSON, vFIELD) =>
      exists vLEARN: U
          . instance(vLEARN, Learning)
            /\ agent(vLEARN, vPERSON)
            /\ realization(vLEARN, vFIELD)
. instance(hasOccupation, BinaryPredicate)
. domain(hasOccupation, a_1, Human)
. domainSubclass(hasOccupation, a_2, IntentionalProcess)
%{hasOccupation
"(&%hasOccupation ?PERSON ?WORK) means that ?PERSON 
engages in activities of the class ?WORK as a means of earning a living."}%
. hasOccupation(vPERSON, vWORK) =>
      exists vINST: U
          . instance(vINST, vWORK)
            /\ instance(vINST, Working)
            /\ agent(vINST, vPERSON)
. subclass(Bleeding, AutonomicProcess)
%{Bleeding
"The release of &%Blood from an &%Animal in response 
to an &%Injuring of some sort."}%
. instance(vBLEED, Bleeding) =>
      exists vINJURY: U
          . instance(vINJURY, Injuring) /\ causes(vINJURY, vBLEED)
. instance(vBLEED, Bleeding) /\ experiencer(vBLEED, vANIMAL) =>
      instance(vANIMAL, Animal)
. instance(vBLEED, Bleeding) /\ experiencer(vBLEED, vANIMAL) =>
      exists vBLOOD: U
          . instance(vBLOOD, Blood)
            /\ holdsDuring(BeginFn(WhenFn(vBLEED)), part(vBLOOD, vANIMAL))
            /\ holdsDuring(EndFn(WhenFn(vBLEED)),
                           a_n_o_t(part(vBLOOD, vANIMAL)))
. subclass(ClosingContract, Committing)
%{ClosingContract
"Completing a &%Contract of some sort, 
e.g. the purchase of a house, closing a business deal, etc."}%
. instance(vCLOSE, ClosingContract)
  /\ agent(vCLOSE, vAGENT)
  /\ destination(vCLOSE, vCONTRACT)
  /\ instance(vCONTRACT, Contract) =>
      agreementMember(vCONTRACT, vAGENT)
. subclass(Opening, Motion)
. relatedInternalConcept(Opening, Closing)
%{Opening
"The &%Class of &%Processes where an aperture is 
created in an &%Object.  Note that the aperture may be created intentionally, 
as when one opens a door, or unintentionally, as when the ground ruptures 
in a seismic event."}%
. subclass(Closing, Motion)
%{Closing
"The &%Class of &%Processes where an aperture is 
closed in an &%Object."}%
. subclass(PreparedFood, Food)
%{PreparedFood
"&%Food that is the result of &%Cooking."}%
. instance(vFOOD, PreparedFood) =>
      exists vCOOK: U
          . instance(vCOOK, Cooking) /\ a_r_e_s_u_l_t(vCOOK, vFOOD)
. subclass(RawFood, Food)
%{RawFood
"&%Food that is not the result of &%Cooking."}%
. instance(vFOOD, RawFood) =>
      not (exists vCOOK: U
               . instance(vCOOK, Cooking) /\ a_r_e_s_u_l_t(vCOOK, vFOOD))
. subclass(SoupStock, PreparedFood)
%{SoupStock
"&%Food which is prepared by reducing &%Meat 
and/or &%FruitOrVegetables to a translucent broth which can be used as 
a base for soups or sauces."}%
. subclass(Coffee, Beverage)
. subclass(Coffee, PreparedFood)
%{Coffee
"A &%Beverage which is prepared by infusing ground, 
roasted coffee beans into hot water."}%
. subclass(DateFruit, FruitOrVegetable)
%{DateFruit
"A &%FruitOrVegetable that is produced by the date 
palm."}%
. subclass(Avocado, FruitOrVegetable)
%{Avocado
"A &%FruitOrVegetable that is shaped like a pear and 
has a dark green skin and a rich meat."}%
. instance(protonNumber, BinaryPredicate)
. instance(protonNumber, SingleValuedRelation)
. instance(protonNumber, TotalValuedRelation)
. domain(protonNumber, a_1, PureSubstance)
. domain(protonNumber, a_2, PositiveInteger)
%{protonNumber
"(&%protonNumber ?SUBSTANCE ?NUMBER) means that 
the &%PureSubstance ?SUBSTANCE has the number of &%Protons ?NUMBER."}%
. protonNumber(vSUBSTANCE, vNUMBER) =>
      part(vATOM, vSUBSTANCE)
      /\ (instance(vATOM, Atom) \/ instance(vATOM, Molecule)) =>
          vNUMBER =
              CardinalityFn(KappaFn(vPROTON,
                                    a_a_n_d(part(vPROTON, vATOM),
                                            instance(vPROTON, Proton))))
. instance(electronNumber, BinaryPredicate)
. instance(electronNumber, SingleValuedRelation)
. instance(electronNumber, TotalValuedRelation)
. domain(electronNumber, a_1, PureSubstance)
. domain(electronNumber, a_2, PositiveInteger)
%{electronNumber
"(&%electronNumber ?SUBSTANCE ?NUMBER) means that 
the &%PureSubstance ?SUBSTANCE has the number of &%Electrons ?NUMBER."}%
. electronNumber(vTYPE, vNUMBER) =>
      part(vATOM, vSUBSTANCE)
      /\ (instance(vATOM, Atom) \/ instance(vATOM, Molecule)) =>
          vNUMBER =
              CardinalityFn(KappaFn(vELECTRON,
                                    a_a_n_d(part(vELECTRON, vATOM),
                                            instance(vELECTRON, Electron))))
. subclass(Arson, Combustion)
. subclass(Arson, Destruction)
%{Arson
"An act where an agent sets something which it does not possess 
on fire in order to destroy it or its contents."}%
. subclass(Bombing, Destruction)
%{Bombing
"An act of &%Destruction where the thing destroyed
is destroyed by means of an explosive device."}%
. subclass(Bomb, Weapon)
%{Bomb
"A weapon that explodes in order to cause damage."}%
. instance(vX, Bombing) =>
      exists vBOMB: U . instance(vBOMB, Bomb) /\ instrument(vX, vBOMB)
. subclass(CarBombing, Bombing)
%{CarBombing
"A car bombing is an attack in which a car is
used as the delivery mechanism for a bomb.  The car is usually destroyed
in the blast if the bomb detonates successfully."}%
. instance(vX, CarBombing) =>
      exists vBOMB: U; vCAR: U
          . instance(vBOMB, Bomb)
            /\ instance(vCAR, TransportationDevice)
            /\ instrument(vX, vCAR)
            /\ instrument(vX, vBOMB)
            /\ connected(vCAR, vBOMB)
. subclass(ChemicalAttack, ViolentContest)
%{ChemicalAttack
"An attack against people or property in which
a chemical agent is used as the active ingredient of the attack."}%
. instance(vX, ChemicalAttack) =>
      exists vCHEM: U
          . instance(vCHEM, Substance) /\ instrument(vX, vCHEM)
. subclass(HandgrenadeAttack, Bombing)
%{HandgrenadeAttack
"An attack in which a &%HandGrenade is 
employed as an explosive device for the purpose of &%Destruction.
A case in which a hand grenade is used as a blunt striking object in
an attack would not be in this class."}%
. subclass(HandGrenade, Bomb)
%{HandGrenade
"A hand grenade is a small explosive device
with a simple trigger mechanism, usually lasting a few seconds, designed
to be propelled by a human to its target."}%
. instance(vX, HandGrenade) =>
      measure(vX, MeasureFn(vN, PoundMass)) /\ lessThan(vN, a_1_0)
. instance(vX, HandgrenadeAttack) =>
      exists vHG: U . instance(vHG, HandGrenade) /\ instrument(vX, vHG)
. subclass(Hijacking, UnilateralGetting)
%{Hijacking
"An event in which a &%TransportationDevice is
taken by coercion or force by an agent."}%
. instance(vX, Hijacking) =>
      exists vV: U; vA: U
          . agent(vX, vA)
            /\ instance(vV, TransportationDevice)
            /\ holdsDuring(ImmediatePastFn(WhenFn(vX)),
                           a_n_o_t(possesses(vA, vV)))
            /\ holdsDuring(WhenFn(vX), possesses(vA, vV))
. subclass(HostageTaking, UnilateralGetting)
%{HostageTaking
"An event in which one agent keeps another
against his or her will, in order to force it or a third agent to 
accede to some demand.  The hostages are typically kept in the place
where they are first taken hostage, in contrast to a &%Kidnapping.
Hostage taking often involves a number of people (although it may be
just one), again, in contrast to a &%Kidnapping."}%
. instance(vX, HostageTaking) =>
      exists vA: U . instance(vA, SentientAgent) /\ patient(vX, vA)
. subclass(IncendiaryDeviceAttack, Combustion)
. subclass(IncendiaryDeviceAttack, ViolentContest)
%{IncendiaryDeviceAttack
"An attack in which an agent
uses a device which causes fire in order to destroy life or property."}%
. subclass(Infiltration, JoiningAnOrganization)
%{Infiltration
"An event in which an agent joins an
organization under false pretenses.  The objective of such an act
is often to gather information helpful to a rival organization."}%
. subclass(Kidnapping, UnilateralGetting)
%{Kidnapping
"An event in which one agent keeps another
against his or her will, in order to force it or a third agent to 
accede to some demand.  The kidnapped party is normally removed from
the location where first attacked.  In contrast to a &%HotageTaking,
a kidnapping normally involves an attack on one, or a very small 
number of people, such as a couple."}%
. instance(vX, Kidnapping) =>
      exists vA: U
          . instance(vA, SentientAgent)
            /\ vN = CardinalityFn(KappaFn(vA, patient(vX, vA)))
            /\ lessThan(vN, a_3)
            /\ greaterThan(vN, a_0)
. instance(vX, Kidnapping) =>
      exists vA: U; vLOC1: U; vLOC2: U
          . instance(vA, SentientAgent)
            /\ instance(vLOC1, GeographicArea)
            /\ instance(vLOC2, GeographicArea)
            /\ not vLOC1 = vLOC2
            /\ holdsDuring(ImmediatePastFn(WhenFn(vX), located(vA, vLOC1)))
            /\ holdsDuring(WhenFn(vX), located(vA, vLOC2))
. subclass(KnifeAttack, ViolentContest)
%{KnifeAttack
"An attack in which a knife is used."}%
. subclass(Knife, Device)
%{Knife
"A sharp object used for cutting.  The object must 
have at least single blade or major protrusion which may be sharp at its 
end as well.  It may be sharp on both sides, or just one.  Unlike an awl 
it has a sharp edge rather than a point.  Unlike scissors, it is a single 
blade without additional articulated parts.  Unlike an axe, a knife is 
well-designed for slicing rather than chopping, although a heavy knife 
such as a broadsword can also be used for chopping, whereas a non-knife is 
not well designed for slicing meat for example.  A knife can be small like 
a pocket knife, or large like a two-handed broadsword.  A knife may also 
include other protrusions such as in the split swords and trident-like 
objects (that also possess a long sharp edge) in Chinese weaponry."}%
. instance(vX, Knife) => capability(Cutting, vX, instrument)
. instance(vX, KnifeAttack) =>
      exists vHG: U . instance(vHG, Knife) /\ instrument(vX, vHG)
. subclass(LetterBombAttack, Bombing)
%{LetterBombAttack
"An attack with a bomb that is
concealed in a letter or package, which is typically designed to 
explode upon opening."}%
. subclass(Lynching, Killing)
%{Lynching
"A lynching is a form of &%Killing conducted under 
a thin guise of legitimacy by a vigilante group.  It may be a purge of an 
individual from the group who is perceived to have gone astray, or it may 
be the summary execution of an individual outside the group that the group 
has determined has violated some law or code, either of the group, or the 
larger society.  A lynching is distinguished from a legal execution in 
that the laws of a government are not followed in carrying out the 
killing.  A lynching is distinguished from a murder in that there is the 
pretense of some process carried out by a group in the name of their own 
group or a higher power."}%
. subclass(MortarAttack, Bombinb)
%{MortarAttack
"An attack in which a &%Mortar weapon is
used."}%
. subclass(Mortar, Weapon)
%{Mortar
"A mortar is a bomb that is shot at a location.  A 
howitzer is a weapon that fires mortars.  The mortar may not include the 
propelling charge that provides the motive force for delivering it to its 
target, which distinguishes it from a rocket.  A mortar is distinguished 
from other bombs in that it is propelled rather than exploded in place, or 
dropped, or propelled by human power."}%
. instance(vX, MortarAttack) =>
      exists vMA: U . instance(vMA, Mortar) /\ instrument(vX, vMA)
. subclass(RocketMissileAttack, Bombinb)
%{RocketMissileAttack
"An attack in which a rocket or
missile is used."}%
. subclass(Rocket, Projectile)
. subclass(Stoning, ViolentContest)
%{Stoning
"An act where a victim or victims is attacked
with stones.  The stones may either be placed on top of a victim in
order to cause death by pressure and suffocation, in which case the act
is typically part of a ritualized legal sentence, or where the victim
is pelted with stones causing injury or death by trauma.  The intent
of such an act is usually the death of the victim."}%
. instance(vX, Stoning) =>
      exists vST: U . instance(vST, Rock) /\ instrument(vX, vST)
. subclass(SuicideBombing, Bombing)
. subclass(SuicideBombing, Killing)
%{SuicideBombing
"A bomb attack in which the bomber
intends to blow himself up during the course of the attack.  The bomber
is the delivery mechanism for the explosive and the bomb is typically
in close contact with the bomber, such as being strapped around his
torso.  This action is distinguished from actions in which the bomber
merely happens to be blown up by his own bomb in that the bomber
knows that he is committing suicide."}%
. instance(vX, SuicideBombing) =>
      exists vA: U
          . agent(vX, vA)
            /\ holdsDuring(FutureFn(WhenFn(vX)), attribute(vA, Dead))
. instance(vX, SuicideBombing) /\ agent(vX, vP) =>
      believes(vP,
               holdsDuring(FutureFn(WhenFn(vX)), attribute(vP, Dead)))
. subclass(Vandalism, Destruction)
%{Vandalism
"An event where the objective of the agent
is to damage or destroy some property of another agent.  This is
distinguished from acts where the prime objective is damage or loss
of life of another agent."}%
. instance(vX, Vandalism) =>
      not (exists vA: U . instance(vA, Agent) /\ patient(vX, vA))
. subclass(VehicleAttack, ViolentContest)
%{VehicleAttack
"An event in which a vehicle is used
by an agent in order to inflict injury, death or damage to people
or property."}%
. instance(vX, VehicleAttack) =>
      exists vV: U
          . instance(vV, TransportationDevice) /\ instrument(vX, vV)
. subclass(Bus, Automobile)
%{Bus
"An automobile designed to carry at least
a dozen people.  It can be distinguished from a van which is
designed to carry less than a dozen people."}%
. subclass(BusStop, GeographicArea)
%{BusStop
"An area, often, though not necessarily with
seats or some kind of minimal shelter, where people gather to meet and
board a bus.  It must border a road."}%
. subclass(BusinessPerson, OccupationalRole)
%{BusinessPerson
"Any of a class of people in a professional 
occupation such as banking, finance, management, or engineering.  This is 
distinguished from blue collar jobs that primarily involve manual labor 
rather than thought as the effort expended to derive remuneration.  It is 
also distinguished from professions that may be outwardly similar but are 
done in a non-profit organization."}%
. subclass(Celebrity, Human)
%{Celebrity
"Anyone who is known by a large number of people,
either explicitly by name, or by action."}%
. attribute(vX, Celebrity) =>
      greaterThan(CardinalityFn(KappaFn(vA,
                                        knows(vA,
                                              True
                                                  when exists vP: U . vP = vX
                                                  else False))),
                  a_1_0_0_0)
. subclass(Checkpoint, GeographicArea)
%{Checkpoint
"An area on or very near a border, usually along 
a road connecting two regions, where &%MilitaryPersons or &%Police 
restrict the flow of traffic in order to extract tarrifs, deny movement to 
certain kinds of people or goods, or other enforement actions.  Because of 
the power relationship involved, such areas are often the site of illegal 
activities conducted by the officials in order to extract favors or 
bribes."}%
. instance(vX, Checkpoint) =>
      (exists vROAD: U
           . instance(vROAD, Road) /\ orientation(vROAD, vX, Near))
      \/ (exists vREG: U . orientation(BorderFn(vREG), vX, Near))
. subclass(Road, Region)
%{Road
"A path along which vehicles travel.  It is typically,
although not necessarily, paved and intended for cars."}%
. instance(vX, Road) =>
      hasPurpose(vX,
                 True
                     when exists vEV: U; vVEH: U
                              . instance(vEV, Transportation)
                                /\ location(vEV, vX)
                                /\ instance(vVEH, LandVehicle)
                                /\ instrument(vEV, vVEH)
                     else False)
. subclass(Civilian, OccupationalRole)
. disjointDecomposition(OccupationalRole, Civilan, MilitaryPerson,
                        GovernmentPerson)
%{Civilian
"Someone who is not a member of a
&%ModernMilitaryOrganization."}%
. attribute(vX, Civilian) =>
      not member(vX, ModernMilitaryOrganization)
. subclass(Convoy, Group)
%{Convoy
"A group of people driving vehicles that all have 
the same destination.  That destination may be an intermediate destination 
on the way to a final destination for some of the vehicles however.  This 
is distinguished from vehicles that have no common purpose, such as 
traffic on a freeway.  This includes cases where some of the agents intend 
to reach a point but fail to do so."}%
. instance(vC, Convoy) =>
      exists vD: U; vT: U
          . forall vA: U
                . exists vE: U
                      . member(vA, vC)
                        /\ instance(vE, Transportation)
                        /\ agent(vE, vA)
                        /\ time(vE, vT)
                        /\ destination(vE, vD)
. subclass(Diplomat, GovernmentPerson)
%{Diplomat
"A person who works as a facilitator for communication
between countries, in the official employ of one of the countries."}%
. subclass(Dissident, Civilian)
%{Dissident
"Someone who is opposed to the leadership
of a particular country.  Typically, a dissident suffers punishment
at the hands of the country whose leadership he is opposing."}%
. subclass(Embassy, GovernmentBuilding)
%{Embassy
"An embassy is a building that is owned by a
government to house its diplomatic and consular staff that is in 
another country."}%
. instance(vX, Embassy) =>
      exists vEGOV: U; vOTHERGOV: U
          . instance(vEGOV, Nation)
            /\ instance(vOTHERGOV, Nation)
            /\ not vEGOV = vOTHERGOV
            /\ possesses(vEGOV, vX)
            /\ located(vX, vOTHERGOV)
. subclass(EntertainmentBuilding, Building)
%{EntertainmentBuilding
"A building that has the primary 
purpose of entertaining people."}%
. instance(vBUILDING, EntertainmentBuilding) =>
      hasPurpose(vBUILDING,
                 True
                     when exists vREC: U
                              . instance(vREC, RecreationOrExercise)
                                /\ located(vREC, vBUILDING)
                     else False)
. subclass(Garage, Building)
%{Garage
"A building, the intended function of which is to
contain and protect vehicles when they are not in use or are under
repair."}%
. subclass(GovernmentBuilding, Building)
%{GovernmentBuilding
"A building belonging to a &%Government"}%
. instance(vX, GovernmentBuilding) =>
      exists vG: U . instance(vG, Government) /\ possesses(vG, vX)
. subclass(GovernmentPerson, OccupationalRole)
%{GovernmentPerson
"A person who works for a &%Government."}%
. attribute(vX, GovernmentPerson) => exists vG: U . employs(vG, vX)
. subclass(Hotel, Building)
%{Hotel
"A building which servers the purpose of a temporary
home for people, either for people who are travelling, or occasionally for
those who do not have another more permanent residence.  A hotel is 
distinguished from a homeless shelter, or a residence loaned to a friend
in that the primary purpose of the building is to generate revenue in
return for the priviledge of staying there.  Many hotels contains other 
facilities such as restaurants or health clubs or even miscellaneous stores
although that is not their primary business or purpose."}%
. instance(vX, Hotel) =>
      hasPurpose(vX,
                 True
                     when exists vOWN: U; vEMP: U; vEV: U; vP: U; vPAY: U
                              . employs(vOWN, vEMP)
                                /\ possesses(vOWN, vX)
                                /\ instance(vP, Human)
                                /\ instance(vPAY, FinancialTransaction)
                                /\ agent(vPAY, vP)
                                /\ patient(vPAY, vEMP)
                                /\ confersRight(vEMP, vEV, vP)
                                /\ agent(vEV, vP)
                                /\ located(vEV, vX)
                     else False)
. subclass(Marketplace, GeographicArea)
%{Marketplace
"An area, building, or set of buildings
where &%FinancialTransactions are intended to take place.  There should
be more than one owner or renter of space or buildings within the
marketplace."}%
. instance(vX, Marketplace) =>
      hasPurpose(vX,
                 True
                     when exists vEV: U
                              . instance(vEV, FinancialTransaction)
                                /\ located(vEV, vX)
                     else False)
. subclass(StoreOwner, OccupationalRole)
%{StoreOwner
"Someone who operates a store which he
either owns or rents."}%
. instance(vX, StoreOwner) =>
      exists vSTORE: U; vPCLASS: U; vPINST: U
          . holdsRight(vP, vX)
            /\ subclass(vP, FinancialTransaction)
            /\ (instance(vPINST, vPCLASS) =>
                    agent(vPINST, vX) /\ located(vPINST, vX))
. subclass(Militant, Civilian)
%{Militant
"A militant is a civilian who is not 
officially authorized by a government to engage in combat, but who
does so on behalf of a &%PoliticalOrganization."}%
. subclass(MilitaryPerson, OccupationalRole)
%{MilitaryPerson
"Someone who is a member of a
&%ModernMilitaryOrganization."}%
. attribute(vX, MilitaryPerson) =>
      member(vX, ModernMilitaryOrganization)
. subclass(OfficeBuilding, Building)
%{OfficeBuilding
"A building in which work activities take
place which is not primarily designed for manufacturing or retail sales."}%
. subclass(PeaceKeepingMission, MilitaryOrganization)
%{PeaceKeepingMission
"A military deployment which is intended
to prevent hostilities between two other entities located in the same rough
geographic area."}%
. subclass(PlaceOfWorship, Building)
%{PlaceOfWorship
"Any place designed for &%ReligiousProcesses."}%
. instance(vX, PlaceOfWorship) =>
      hasPurpose(vX,
                 True
                     when exists vEV: U
                              . instance(vEV, ReligiousProcess)
                                /\ located(vEV, vX)
                     else False)
. subclass(PoliceFacility, Building)
%{PoliceFacility
"A building designed to house &%PolicePersons."}%
. subclass(PolicePerson, GovernmentPerson)
%{PolicePerson
"A member of a government whose occupation
has the primary purpose of preventing crime and arresting criminals."}%
. subclass(PoliticalFigure, Celebrity)
%{PoliticalFigure
"A well known person who participates
in a PoliticalProcess.  This must either be the person's principal
occupation, or what is intended to become his principal occupation
(for example, after an election)."}%
. attribute(vX, PoliticalFigure) =>
      exists vEV: U . agent(vEV, vX) /\ instance(vEV, PoliticalProcess)
. attribute(vX, PoliticalFigure) =>
      exists vGOV: U
          . instance(vGOV, Government)
            /\ (member(vX, vGOV) \/ desires(vX, member(vX, vGOV)))
. subclass(ReligiousFigure, Celebrity)
%{ReligiousFigure
"A well-known leader of a religious group."}%
. attribute(vX, ReligiousFigure) =>
      exists vORG: U
          . instance(vORG, ReligiousOrganization)
            /\ occupiesPosition(vX, Leader, vORG)
. subclass(Restaurant, Building)
%{Restaurant
"A building where people pay to be served food
and eat.  Some restaurants may also offer entertainment."}%
. instance(vX, Restaurant) =>
      hasPurpose(vX,
                 True
                     when exists vOWN: U; vEMP: U; vEV: U; vP: U; vPAY: U
                              . employs(vOWN, vEMP)
                                /\ possesses(vOWN, vX)
                                /\ instance(vP, Human)
                                /\ instance(vPAY, FinancialTransaction)
                                /\ agent(vPAY, vP)
                                /\ patient(vPAY, vEMP)
                                /\ confersRight(vEMP, vEV, vP)
                                /\ instance(vEV, Eating)
                                /\ agent(vEV, vP)
                                /\ located(vEV, vX)
                     else False)
. subclass(EducationalFacility, StationaryArtifact)
%{EducationalFacility
"A building or campus, owned by an
&%EducationalOrganization, which is intended as the location for
&%EducationalProcesses."}%
. instance(vX, EducationalFacility) =>
      exists vORG: U
          . instance(vORG, EducationalOrganization) /\ possesses(vORG, vX)
. instance(vX, EducationalFacility) =>
      hasPurpose(vX,
                 True
                     when exists vEV: U
                              . instance(vEV, EducationalProcess)
                                /\ located(vEV, vX)
                     else False)
. subclass(Student, SocialRole)
%{Student
"A person who participates in an
&%EducationalProcess in order to learn something."}%
. instance(vX, Student) =>
      exists vEV: U
          . instance(vEV, EducationalProcess) /\ patient(vEV, vX)
. subclass(Subway, Hole)
%{Subway
"A subway is a hollow area of the earth, typically
under large cities, designed for running trains that move people. It is
distinguished from other kinds of tunnels in that trains run through
them, primarily for the purpose of carrying people rather than ore, for
example."}%
. instance(vX, Subway) =>
      exists vSURF: U
          . surface(vSURF, PlanetEarth) /\ orientation(vX, vSURF, Below)
. instance(vX, Subway) =>
      hasPurpose(vX,
                 True
                     when exists vEV: U; vP: U
                              . instance(vEV, Transportation)
                                /\ instance(vP, Human)
                                /\ patient(vEV, vP)
                                /\ located(vEV, vX)
                     else False)
. subclass(Tourist, SocialRole)
%{Tourist
"A tourist is a person who is travelling to a 
place primarily for reasons of entertainment or education, rather than
business, although business transaction may take place during the trip."}%
. subclass(TouristSite, GeographicArea)
%{TouristSite
"A tourist site is a location that has some
feature of interest to &%Tourists, which entertains or informs them."}%
. subclass(TerroristOrganization, PoliticalOrganization)
. instance(vX, TerroristOrganization) =>
      exists vEV: U . instance(vEV, ViolentContest) /\ agent(vEV, vX)
%{TerroristOrganization
"A group that uses violent means in an
  attempt to bring about their political aims.  Those violent means are
  distinguished from a war between nations, or a civil war in that the group
  is at least partially clandestine and a significant proportion of its acts
  are against non-military targets."}%
%{members-Count
"A relation between an instance of an &%Organization
  and the approximate number of members in the &%Organization."}%
. instance(a_m_e_m_b_e_r_s_Minus_C_o_u_n_t, BinaryPredicate)
. domain(a_m_e_m_b_e_r_s_Minus_C_o_u_n_t, a_1, Organization)
. domain(a_m_e_m_b_e_r_s_Minus_C_o_u_n_t, a_2, Number)
. a_m_e_m_b_e_r_s_Minus_C_o_u_n_t(vORG, vNUM) =>
      vNUM = CardinalityFn(KappaFn(vMEM, members(vMEM, vORG)))
. subclass(Aborting, Removing)
%{Aborting
"&%Removing a human fetus from a &%Pregnant woman 
in such a way that the fetus cannot survive."}%
. subclass(Accountant, Profession)
%{Accountant
"The &%Profession of being an &%Accountant."}%
. subclass(Accrediting, Declaring)
%{Accrediting
"Any process of certifying an &%EducationalOrganization."}%
. subclass(AcuteAngle, TwoDimensionalAngle)
%{AcuteAngle
"Any &%TwoDimensionalAngle that has an 
&%angularMeasure that is less than 90 AngularDegrees."}%
. subclass(Aerating, Combining)
%{Aerating
"Combining a substance with &%Air."}%
. subclass(AerobicExerciseDevice, RecreationOrExerciseDevice)
%{AerobicExerciseDevice
"An &%RecreationOrExerciseDevice whose purpose is 
to develop the cardiovascular system."}%
. subclass(Agency, CommercialAgent)
%{Agency
"A &%CommercialAgent whose customers are all other 
&%CommercialAgents, e.g. staffing agencies, food-service providers, etc."}%
. subclass(AirForce, MilitaryService)
%{AirForce
"&%AirForce is the subclass of &%MilitaryService 
that comprises military air forces."}%
. subclass(AlcoholicBeverage, Depressant)
. subclass(Alkaloid, ChemicalBase)
. subclass(Alkaloid, PlantSubstance)
. subclass(Alkaloid, BiologicallyActiveSubstance)
%{Alkaloid
"A &%ChemicalBase found in &%Plants that has 
physiological and psychological effects."}%
. subclass(AlphabeticCharacter, Character)
%{AlphabeticCharacter
"Any &%Character that is comprised of a single 
alphabetical character, e.g. A, B, C, D, ..."}%
. subclass(Alveolus, BodyVessel)
. subclass(Alveolus, AnimalAnatomicalStructure)
%{Alveolus
"Tiny sacs in the &%Lung which absorb &%Oxygen 
which is delivered to them by the &%BronchialDucts."}%
. subclass(Ambassador, DiplomaticAgent)
%{Ambassador
"&%Ambassador is the class of &%DiplomaticAgents 
that are the most highly-ranked foreign service representatives from the 
government of one country to another."}%
%{Ambulance
"&%Ambulance is the subclass of 
&%EmergencyRoadVehicles that represents ambulances."}%
. subclass(Ambush, Maneuver)
%{Ambush
"Any &%Maneuver in a &%ViolentContest where one &%contestParticipant 
attempts to conceal himself from another contestParticipant so that he can &%Attack the 
other &%contestParticipant."}%
. subclass(AminoAcid, ChemicalAcid)
. subclass(AminoAcid, OrganicCompound)
%{AminoAcid
"Organic acids that are the building blocks of 
Proteins."}%
. subclass(AnaerobicExerciseDevice, RecreationOrExerciseDevice)
. disjoint(AnaerobicExerciseDevice, AerobicExerciseDevice)
%{AnaerobicExerciseDevice
"An &%RecreationOrExerciseDevice whose purpose 
is to develop &%Muscles without also developing the cardiovascular system."}%
. subclass(Anchor, AttachingDevice)
%{Anchor
"An &%AttachingDevice which is large hook or set of hooks 
that are used to secure a &%Ship on the open water."}%
. subclass(AnimalController, Device)
%{AnimalController
"Any &%Device which is used to control the 
movements of an &%Animal or &%Human, e.g. leashes, reins, harnesses, muzzles, 
bridles, shackles, handcuffs, etc."}%
. subclass(AnimalPoweredDevice, Device)
%{AnimalPoweredDevice
"&%AnimalPoweredDevice is the subclass 
of &%Devices that function with power supplied by animals.  Examples: 
oxcarts, horse-drawn plows, mule-driven mills."}%
. subclass(AnimalShell, AnimalAnatomicalStructure)
. subclass(AnimalShell, BodyPart)
%{AnimalShell
"A hard shell of calcium that serves as a 
supporting structure for some &%Invertebrates."}%
. subclass(AnimalTeam, GroupOfAnimals)
%{AnimalTeam
"A &%GroupOfAnimals which are &%Pulling something."}%
. subclass(Ankle, BodyJoint)
%{Ankle
"The joint in the &%Leg that connects the tibia and the 
fibula to the talus."}%
. subclass(Announcement, FactualText)
%{Announcement
"Any &%Text which contains information about 
an event in the future."}%
. subclass(AntInsect, Insect)
%{AntInsect
"A colony &%Insect of three types:  males, 
&%QueenInsect, and worker ants."}%
. subclass(AnteMeridiem, TimeInterval)
%{AnteMeridiem
"The class of &%TimeIntervals that begin at midnight 
and end at noon."}%
. subclass(Antelope, HoofedMammal)
%{Antelope
"A &%HoofedMammal with long legs and backward-facing horns.  
This class includes gazelles, addax, blackbucks, etc."}%
. subclass(Antibiotic, BiologicallyActiveSubstance)
%{Antibiotic
"A &%BiologicallyActiveSubstance than can kill 
instances of &%Bacterium."}%
. subclass(AntigenA, Antigen)
%{AntigenA
"An &%Antigen that is carried in the red blood 
cells of those with &%BloodTypeA."}%
. subclass(AntigenB, Antigen)
%{AntigenB
"An &%Antigen that is carried in the red blood 
cells of those with &%BloodTypeB."}%
. subclass(Apple, FruitOrVegetable)
. subclass(Apple, Food)
%{Apple
"A &%FruitOrVegetable that has a tart to sweet taste and 
a spherical shape."}%
. subclass(Application, FormText)
%{Application
"A &%FormText whose purpose is to obtain admission 
to an &%Organization or to receive assistance from an &%Organization."}%
. subclass(Appointing, Declaring)
%{Appointing
"Any instance of &%Declaring by which the 
patient is assigned to a &%Position within an Organization where 
the patient previously had no position.  For example, the appointments 
of people to non-elective offices in a government."}%
. subclass(Apron, Clothing)
%{Apron
"An item of &%Clothing that protects the front and 
middle part of the body while one is Cooking or doing other work."}%
. subclass(ArrowFigure, Icon)
%{ArrowFigure
"An &%Icon which has the shape of an arrow and 
which is used to indicate direction or a relationship betwee two things."}%
. subclass(ArrowProjectile, Projectile)
%{ArrowProjectile
"A long, thin &%Projectile with a pointed tip is 
fired from a bow."}%
. subclass(ArtCritic, Journalist)
%{ArtCritic
"The &%Profession of reporting and critiquing current 
&%ArtWorks."}%
. subclass(ArtSchool, School)
%{ArtSchool
"Any &%School whose aim is to teach students 
how to create ArtWorks."}%
. subclass(ArtStudio, Workshop)
%{ArtStudio
"A Workshop devoted to the creation of &%ArtWorks."}%
. subclass(AtmosphericPressureMeasure, ConstantQuantity)
%{AtmosphericPressureMeasure
"&%AtmosphericPressureMeasure is the class 
of UnitsOfMeasure used to measure pressure (barometricPressure), 
e.g., InchMercury."}%
. subclass(AtmosphericRegion, SpaceRegion)
%{AtmosphericRegion
"&%AtmosphericRegion is the class of 
all subregions of EarthsAtmosphere."}%
. subclass(AtomicGroup, CompoundSubstance)
%{AtomicGroup
"Two or more &%Atoms that are bound together and 
comprise part of a Molecule."}%
. subclass(Atrophy, PathologicProcess)
. subclass(Atrophy, Decreasing)
%{Atrophy
"Any decrease in the size of an &%Organ which is due to 
disease or lack of use."}%
. subclass(Attorney, Profession)
%{Attorney
"The &%Profession of practicing law, whether as a 
judge or as a legal advocate."}%
. subclass(AttorneyGeneral, Attorney)
. subclass(AttorneyGeneral, GovernmentOfficer)
%{AttorneyGeneral
"The head law officer of a &%GeopoliticalArea, 
usually a Nation or StateOrProvince."}%
. subclass(AudioRecording, Text)
%{AudioRecording
"Any &%Text which is a recording of 
&%RadiatingSound."}%
. subclass(AutomaticGun, Gun)
%{AutomaticGun
"A Gun that fires a burst of &%Projectiles 
with each pull of the trigger.  Also known as a machine gun."}%
. subclass(Automobile, SelfPoweredRoadVehicle)
%{Automobile
"Automobile is a subclass of 
&%SelfPoweredRoadVehicles including passenger cars, family vans, light 
trucks, and sport utility vehicles.  In general, this class covers 
four-wheeled passenger road vehicles."}%
. subclass(Avocado, Food)
. subclass(Axle, Device)
%{Axle
"Axle is a class of &%Devices each of which can 
be paired with two VehicleWheels to rotate and move a RoadVehicle."}%
. subclass(BacterialDisease, InfectiousDisease)
%{BacterialDisease
"A disease that is caused by instances of 
Bacterium."}%
. subclass(Bag, Container)
%{Bag
"Any Container which is made of &%Fabric."}%
. subclass(Baking, Cooking)
. subclass(Baking, Heating)
%{Baking
"Any instance of &%Cooking where the instrument 
is an Oven."}%
. subclass(Ball, Sphere)
. subclass(BallisticMissile, Missile)
%{BallisticMissile
"A &%Missile which is guided for the first stage 
of its flight but then falls to its target for the second stage."}%
. subclass(Ballot, FormText)
%{Ballot
"A &%FormText which is used in Voting.  A list of 
candidates is printed on the form, and the voter selects the candidate he/she 
wants to vote for."}%
. subclass(Bandage, Fabric)
%{Bandage
"A piece of &%Fabric that is used to cover an 
open wound."}%
. subclass(Banker, SkilledOccupation)
%{Banker
"Any &%SkilledOccupation which involves working in a 
&%FinancialBank."}%
. subclass(Baptizing, ReligiousProcess)
. subclass(Baptizing, JoiningAnOrganization)
%{Baptizing
"A &%ReligiousProcess which marks the acceptance of 
the person being baptized into the ReligiousOrganization."}%
. subclass(BargainSale, OfferingForSale)
%{BargainSale
"Offering to sell something to someone at a 
reduced price."}%
. subclass(Barking, RadiatingSound)
%{Barking
"Any instance of &%RadiatingSound which is produced 
by a Canine."}%
. subclass(Baseball, TeamSport)
%{Baseball
"A &%TeamSport which involves two teams of 9 players 
each that take turns at bat and attempt to score runs.  Note that each instance 
of Baseball is a baseball game."}%
. subclass(BaseballBase, GameArtifact)
%{BaseballBase
"Any of four regions which must each be 
successively touched after a BaseballHit in order to complete a 
&%BaseballRun."}%
. subclass(BaseballBat, GameArtifact)
%{BaseballBat
"A bat which is used to hit the ball in 
Baseball."}%
. subclass(BaseballDugout, Building)
%{BaseballDugout
"A &%Building which is used to house the members 
of both Baseball teams while a game is being played."}%
. subclass(BaseballField, SportsFacility)
%{BaseballField
"A &%SportsFacility which is dedicated to 
Baseball."}%
. subclass(BaseballInning, BaseballManeuver)
%{BaseballInning
"A division of a Baseball game.  A normal game 
consists of 9 innings, and each inning involves a turn a bat for both teams."}%
. subclass(BaseballSingle, BaseballHit)
%{BaseballSingle
"Any &%BaseballHit where the batter makes it 
safely to first base by hitting the ball."}%
. subclass(BaseballSteal, BaseballManeuver)
. disjoint(BaseballSteal, BaseballWalk)
. disjoint(BaseballSteal, BaseballHit)
%{BaseballSteal
"Any move from one base to another which is neither 
a BaseballWalk nor a BaseballHit."}%
. disjoint(BaseballWalk, BaseballHit)
. subclass(Basketball, TeamSport)
%{Basketball
"A &%TeamSport which involves two teams of 5 players 
each.  The object of the game is to put the ball through a hoop."}%
. subclass(Bathing, Washing)
%{Bathing
"Washing the entire body of a Human or &%Animal."}%
. subclass(BathingDevice, WashingDevice)
%{BathingDevice
"A &%WashingDevice which is intended to be used by 
Humans for washing their bodies.  Note that this class covers bathtubs, showers, 
etc."}%
. subclass(Bathroom, Room)
%{Bathroom
"A Room that contains a &%WashBasin and 
possibly a Toilet."}%
. subclass(Baton, Device)
%{Baton
"A thin stick which is used for &%OrchestralConducting."}%
. subclass(Battery, Device)
%{Battery
"Battery is a subclass of Device.  Batteries are 
devices that use chemical means to store or produce electrical power."}%
. subclass(BecomingDrunk, PsychologicalProcess)
. disjoint(BecomingDrunk, SoberingUp)
%{BecomingDrunk
"The process of transitioning from a state of 
being Sober to a state of being Drunk."}%
. subclass(Beef, Meat)
%{Beef
"Meat that was originally part of a &%Cow."}%
. subclass(Bell, PercussionInstrument)
%{Bell
"A &%PercussionInstrument which is made of &%Metal and 
which produces a single tone when it is struck."}%
. subclass(Belt, Clothing)
%{Belt
"A piece of &%Clothing that is worn around the waist 
of a pair of Trousers."}%
. subclass(Bequeathing, UnilateralGiving)
%{Bequeathing
"Any &%UnilateralGiving where the agent 
wills some part of his/her property to someone else upon his/her death."}%
. subclass(Bicycle,
           a_C_y_c_l_e_Minus_T_r_a_n_s_p_o_r_t_a_t_i_o_n_D_e_v_i_c_e)
%{Bicycle
"Bicycle is a class of two-wheeled, 
&%UserPoweredVehicles."}%
. subclass(BiochemicalAgent, SelfConnectedObject)
%{BiochemicalAgent
"A &%BiologicalAgent or a &%ChemicalAgent."}%
. subclass(BiochemicalAttack, Attack)
%{BiochemicalAttack
"Attacks in which a &%BiochemicalWeapon 
is used against an Organism."}%
. subclass(BiochemicalWeapon, WeaponOfMassDestruction)
%{BiochemicalWeapon
"A &%WeaponOfMassDestruction that is 
either a BiologicalWeapon or a ChemicalWeapon, i.e. not a 
&%RadioactiveWeapon."}%
. subclass(Biography, HistoricalAccount)
%{Biography
"A &%HistoricalAccount which is concerned 
with the life of a single Human."}%
. subclass(BiologicalAgent, BiochemicalAgent)
%{BiologicalAgent
"A naturally occurring &%Substance, a 
synthetic analogue of such a substance or an Organism that is capable 
of inflicting severe harm on other Organisms.  All BiologicalWeapons 
contain a BiologicalAgent."}%
. subclass(BiologicalConception, OrganOrTissueProcess)
%{BiologicalConception
"The production of a zygote from the fusion 
of a male and female gamete."}%
. subclass(BiologicalWeapon, BiochemicalWeapon)
%{BiologicalWeapon
"Weapons which contain a sample of 
&%ToxicOrganism or a BiologicallyActiveSubstance that is produced by a 
&%ToxicOrganism (or a synthetic analogue of the latter)."}%
. subclass(Biopsy, DiagnosticProcess)
%{Biopsy
"Any &%DiagnosticProcess which involves the examination of 
&%BodySubstances taken from a living Organism."}%
. subclass(BirdEgg, Egg)
%{BirdEgg
"Any Egg that is produced by a &%Bird."}%
. subclass(Bloating, Increasing)
. subclass(Bloating, PathologicProcess)
%{Bloating
"Any &%Process where the stomach or instestines of a 
Human or Animal become distended from excessive gas."}%
. subclass(Blockade, Maneuver)
%{Blockade
"Any Maneuver in a Contest where one &%contestParticipant 
attempts to deny access to something that is wanted by another contestParticipant."}%
. subclass(BloodCell, Cell)
. subclass(BloodCell, AnimalAnatomicalStructure)
%{BloodCell
"A Cell that is normally present in &%Blood."}%
. subclass(BloodTypeA, Blood)
%{BloodTypeA
"The subclass of Blood that contains AntigenA 
and does not contain AntigenB."}%
. subclass(BloodTypeAB, Blood)
%{BloodTypeAB
"The subclass of &%Blood that contains both 
AntigenA and AntigenB."}%
. subclass(BloodTypeB, Blood)
%{BloodTypeB
"The subclass of Blood that contains AntigenB 
and does not contain AntigenA."}%
. subclass(BloodTypeO, Blood)
%{BloodTypeO
"The subclass of &%Blood that contains neither 
AntigenA nor AntigenB."}%
. subclass(Blushing, AutonomicProcess)
%{Blushing
"The process of turning red in response to a 
stimulus which has a deep emotional effect."}%
. subclass(Boarding, Translocation)
%{Boarding
"Getting on a &%Vehicle, e.g. getting into an 
Automobile, boarding an Aircraft, etc."}%
. subclass(BoatDeck, Artifact)
%{BoatDeck
"One of the levels of a &%Watercraft, e.g. the 
upper deck and lower deck of small boats with a cabin."}%
. subclass(BodyJoint, BodyJunction)
%{BodyJoint
"&%BodyJunctions where different parts of the same 
Skeleton come together."}%
. subclass(Bodybuilding, Sport)
%{Bodybuilding
"A sport which involves the development of one's 
Muscles and competition against other bodybuilders."}%
. subclass(Bomber, MilitaryAircraft)
%{Bomber
"Any &%MilitaryAircraft whose purpose is to deliver 
&%ExplosiveDevices."}%
. subclass(Bowing, Inclining)
. subclass(Brandy, DistilledAlcoholicBeverage)
%{Brandy
"A &%DistilledAlcoholicBeverage that is prepared by 
distilling Wine."}%
. subclass(BreadOrBiscuit, PreparedFood)
%{BreadOrBiscuit
"Food that consists largely of grain flour 
and water.  Note that this class covers crackers, cookies, as well as any 
self-connected instance of bread, whether it is a loaf, a slice, a chunk 
of bread, etc."}%
. subclass(BreakabilityAttribute, InternalAttribute)
%{BreakabilityAttribute
"A subclass of &%Attributes for 
characterizing the breakability of CorpuscularObjects."}%
. subclass(Breast, AnimalAnatomicalStructure)
. subclass(Breast, Organ)
%{Breast
"The paired &%Organs which are part of the chests 
of Primates."}%
. subclass(Brick, BoardOrBlock)
%{Brick
"A block of fired Clay that is used in &%Constructing."}%
. subclass(BrigadierGeneral, MilitaryGeneral)
%{BrigadierGeneral
"A &%MilitaryGeneral that ranks below 
a MajorGeneral."}%
. subclass(BroadcastNetwork, CommunicationSystem)
%{BroadcastNetwork
"&%BroadcastNetwork is the subclass of 
&%CommunicationSystems consisting of BroadcastingStations that are linked 
electronically and managed or owned by one organization."}%
. subclass(BroadcastingStation, StationaryArtifact)
. subclass(BroadcastingStation, CommunicationDevice)
%{BroadcastingStation
"A &%BroadcastingStation is
a TelevisionStation or a RadioStation."}%
. subclass(Broom, BrushOrComb)
%{Broom
"A &%BrushOrComb whose purpose is to remove dirt and other 
small particles from floors."}%
. subclass(BrushOrComb, Device)
%{BrushOrComb
"A &%Device which consists of a handle and bristles and 
whose purpose is to remove particles from something or to smooth something out."}%
. subclass(Bubble, CorpuscularObject)
%{Bubble
"A globe which has a &%Liquid surface and which contains 
a Gas."}%
. subclass(Buffalo, HoofedMammal)
. disjoint(Buffalo, DomesticAnimal)
%{Buffalo
"A &%HoofedMammal with long hair whose habitat is the 
plains of NorthAmerica."}%
. subclass(Bugle, HornInstrument)
%{Bugle
"A &%HornInstrument that has no valves."}%
. subclass(Bull, Cow)
%{Bull
"A Cow that is &%Male."}%
. subclass(Bullet, Projectile)
%{Bullet
"A Projectile that is designed to be fired by a &%Gun."}%
. subclass(Burrow, Cave)
%{Burrow
"A small Cave created by an &%Animal for the purpose 
of inhabiting it."}%
. subclass(Burying, Putting)
%{Burying
"Putting something in the ground and then covering 
it with Soil."}%
. subclass(Bus, SelfPoweredRoadVehicle)
%{Bus
"Bus is the subclass of &%SelfPoweredRoadVehicles 
that can transport large numbers of passengers (i.e., dozens) at one 
time."}%
. subclass(Butter, PreparedFood)
%{Butter
"An emulsion of fat which is produced by churning &%Milk."}%
. subclass(Button, AttachingDevice)
%{Button
"An &%AttachingDevice that is used on &%Clothing."}%
. subclass(Calf, Cow)
%{Calf
"A young Cow, i.e. a Cow that is &%NonFullyFormed."}%
. subclass(Campground, LandArea)
%{Campground
"A &%LandArea whose purpose is to have &%MobileResidences 
(e.g. recreational vehicles, mobile homes, Tents, etc.) located there."}%
. subclass(Candle, IlluminationDevice)
%{Candle
"An &%IlluminationDevice that consists of &%Wax and a wick, 
which is lit with a flame."}%
. subclass(Capillary, BloodVessel)
%{Capillary
"A very small &%BloodVessel that connects arterioles 
(very small Arteries) with venules (very small Veins)."}%
. subclass(Carpenter, OccupationalTrade)
%{Carpenter
"Any occupation that involves creating and repairing 
Artifacts that are made chiefly of Wood."}%
. subclass(CausingHappiness, BiologicalProcess)
%{CausingHappiness
"Any &%Process whose result is that the 
patient of the process is happy."}%
. subclass(CausingPain, CausingUnhappiness)
%{CausingPain
"Any &%Process whose result is that the 
patient of the process is in Pain."}%
. subclass(CausingUnhappiness, BiologicalProcess)
%{CausingUnhappiness
"Any &%Process whose result is that the 
patient of the process is unhappy."}%
. subclass(CavalryUnit, MilitaryUnit)
%{CavalryUnit
"&%MilitaryUnits composed primarily of &%Soldiers 
who are mounted, i.e. who perform their combat missions from a Horse or 
Vehicle."}%
. subclass(Ceiling, StationaryArtifact)
%{Ceiling
"A &%StationaryArtifact that is the top surface 
of a Room."}%
. subclass(CellNucleus, BodyPart)
%{CellNucleus
"The part of the Cell that contains &%DNA and 
&%RNA."}%
. subclass(Cellulose, PlantSubstance)
. subclass(Cellulose, Carbohydrate)
%{Cellulose
"The main component of Plant &%Tissue."}%
. subclass(Cement, Mixture)
%{Cement
"Cement is a subclass of &%Mixture 
whose instances may contain various minerals or ores, prepared by 
heating and pulverizing, and used in binding Concrete or in laying 
brick or stone."}%
. subclass(Cemetery, LandArea)
%{Cemetery
"A &%LandArea which is used for burying the dead."}%
. subclass(CentrifugalMotion, Rotating)
. disjoint(CentrifugalMotion, CentripetalMotion)
%{CentrifugalMotion
"Any instance of &%Rotating where there is 
Motion away from the center of the Rotating."}%
. subclass(CentripetalMotion, Rotating)
%{CentripetalMotion
"Any instance of &%Rotating where there is 
Motion towards the center of the Rotating."}%
. instance(Century, UnitOfMeasure)
%{Century
"The &%TimeDuration of 100 years."}%
. subclass(CerealGrain, Seed)
. subclass(CerealGrain, Food)
%{CerealGrain
"Any &%Seed which is produced by the cereal grasses, 
e.g. rice, corn, wheat, etc."}%
. subclass(ChangingClothing, Transfer)
%{ChangingClothing
"Any instance of a process of 
&%RemovingClothing or PuttingOnClothing."}%
. subclass(ChemicalAcid, CompoundSubstance)
. disjoint(ChemicalAcid, ChemicalBase)
%{ChemicalAcid
"A bitter &%CompoundSubstance that is capable of 
reacting with a ChemicalBase and forming a ChemicalSalt."}%
. subclass(ChemicalAgent, BiochemicalAgent)
. subclass(ChemicalAgent, CompoundSubstance)
. subclass(ChemicalAgent, BiologicallyActiveSubstance)
. disjoint(ChemicalAgent, OrganicObject)
%{ChemicalAgent
"Synthetic compounds that are not an analogue 
of anything occurring naturally and that can result in serious burns, 
paralysis, and death to Organisms."}%
. subclass(ChemicalBase, CompoundSubstance)
%{ChemicalBase
"A &%CompoundSubstance that is capable of 
reacting with a ChemicalAcid and forming a ChemicalSalt."}%
. subclass(ChemicalReduction, ChemicalSynthesis)
. disjoint(ChemicalReduction, Oxidation)
%{ChemicalReduction
"Any &%ChemicalProcess where Electrons 
are added to the substance undergoing the ChemicalProcess."}%
. subclass(ChemicalSalt, CompoundSubstance)
%{ChemicalSalt
"A bitter &%CompoundSubstance that is formed in a 
chemical reaction of a ChemicalBase with a ChemicalAcid."}%
. subclass(ChemicalWeapon, BiochemicalWeapon)
%{ChemicalWeapon
"Weapons that damage or destroy &%Organisms by means 
of a ChemicalAgent."}%
. subclass(ChestOrCabinet, Furniture)
. subclass(ChestOrCabinet, Container)
%{ChestOrCabinet
"Any piece of &%Furniture which is also a 
Container, e.g. a chest of drawers, a memory chest, an armoire, etc."}%
. subclass(Chimney, StationaryArtifact)
. subclass(Chimney, Device)
%{Chimney
"A thin passageway through which &%Smoke from a controlled 
fire is conducted outside of a Building or Room."}%
. subclass(Cholesterol, Steroid)
. subclass(Cholesterol, AnimalSubstance)
%{Cholesterol
"A Steroid that is produced by the &%Liver and that 
is believed to be closely associated with various cardiological disorders."}%
. subclass(Choreographing, Planning)
%{Choreographing
"Planning that results in a sequence of dance 
steps that are executed as part of a Performance."}%
. subclass(ChristianBible, Book)
. subsumesContentClass(ChristianBible, NewTestament)
. subsumesContentClass(ChristianBible, OldTestament)
%{ChristianBible
"Any instance of the collection of writings which 
is regarded as scripture by those who embrace Christianity."}%
. subclass(ChristianGospel, Text)
%{ChristianGospel
"Four books in the New Testament of the 
&%ChristianBible that describe the life and teachings of Jesus Christ 
and that are referred to, respectively, as Matthew, Mark, Luke, and John."}%
. subclass(Chromatography, Separating)
%{Chromatography
"Processes of Separating a &%LiquidMixture or 
a GasMixture into some or all of the PureSubstances that comprise it."}%
. subclass(CigarOrCigarette, SmokingDevice)
%{CigarOrCigarette
"A tube of thin paper containing finely ground 
tobacco that is smoked."}%
. subclass(Circle, Oval)
%{Circle
"The class of Ovals such that all &%GeometricPoints 
that make up the Circle are equidistant from a single GeometricPoint, 
known as the center of the Circle."}%
. subclass(CircleSector, ClosedTwoDimensionalFigure)
%{CircleSector
"A slice of a &%Circle, i.e. any 
&%ClosedTwoDimensionalFigure which consists of two Radii and the arc of 
the Circle that they bound."}%
. subclass(CityBlock, LandArea)
%{CityBlock
"A square-shaped area surrounded by &%Roadways 
which is part of a City and typically contains Buildings."}%
. subclass(CityGovernment, Government)
%{CityGovernment
"&%CityGovernment is the class of 
governments of Cities."}%
. subclass(Clamp, AttachingDevice)
%{Clamp
"An &%AttachingDevice which is designed to attach 
two things together by means of a movable part which can be tightened 
or loosened."}%
. subclass(Clapping, HandGesture)
. subclass(Clapping, RadiatingSound)
%{Clapping
"Bringing the &%Hands together repeatedly to make 
a loud noise."}%
. subclass(Classroom, Room)
%{Classroom
"Any Room in a &%School where education 
takes place."}%
. subclass(Cleric, ReligiousPosition)
%{Cleric
"Any &%Position which involves being in charge of or ministering 
to a ReligousOrganization."}%
. subclass(Cloak, Clothing)
%{Cloak
"A piece of &%Clothing that covers the whole body 
except the face (and possibly entire head), hands, and feet."}%
. subclass(Closet, Room)
%{Closet
"A relatively small &%Room used for storage."}%
. subclass(ClosingEyes, EyeMotion)
%{ClosingEyes
"The &%EyeMotion of tensing the eye lids so that 
the corneas are not exposed to light."}%
. subclass(CoastGuard, PoliceOrganization)
%{CoastGuard
"&%CoastGuard is the subclass of &%GovernmentOrganizations 
that enforce the maritime laws of a &%Nation and guard its &%Seacoast.  This may be 
a military or quasi-military organization."}%
. subclass(Coconut, FruitOrVegetable)
. subclass(Coconut, Food)
%{Coconut
"A &%FruitOrVegetable that is produced by a type of palm 
and has an edible white meat."}%
. subclass(Coffin, Container)
%{Coffin
"A &%Container for a &%HumanCorpse."}%
. subclass(Collar, Clothing)
%{Collar
"A piece of &%Clothing that fits around the &%Neck.  
A &%Collar is always part of a &%Coat or a &%Shirt."}%
. subclass(CollegeFreshman, CollegeStudentPosition)
%{CollegeFreshman
"The &%Positions of a student at a &%PostSecondarySchool 
who has completed less than one year at the school."}%
. subclass(CollegeJunior, CollegeStudentPosition)
%{CollegeJunior
"The &%Positions of a student at a &%PostSecondarySchool 
who has completed at least two years and less than three years at the school."}%
. subclass(CollegeSenior, CollegeStudentPosition)
%{CollegeSenior
"The &%Positions of a student at a &%PostSecondarySchool 
who has completed at least three years and less than four years at the school."}%
. subclass(CollegeSophomore, CollegeStudentPosition)
%{CollegeSophomore
"The &%Positions of a student at a &%PostSecondarySchool 
who has completed at least one year and less than two years at the school."}%
. subclass(CollegeStudentPosition, Position)
%{CollegeStudentPosition
"Any &%Position at a &%PostSecondarySchool 
which is occupied exclusively by students."}%
. subclass(Comedian, EntertainmentProfession)
%{Comedian
"&%Positions which involve performing stand-up comedy, which 
is recorded and/or performed in front of live audiences."}%
. subclass(CommercialShipping, Shipping)
. subclass(CommercialShipping, CommercialService)
%{CommercialShipping
"&%CommercialShipping is the subclass of 
Transportation events in which a commercial agent provides transportation 
of goods for remuneration."}%
. subclass(CommunicationOrganization, Organization)
%{CommunicationOrganization
"&%CommunicationOrganization is 
the subclass of &%Organizations that manage Communications over physical 
infrastructure owned or leased by the organization.  Such organizations 
may also produce and disseminate information, entertainment, or other 
content.  Also see &%MediaOrganization."}%
. subclass(CommunicationSystem, Collection)
%{CommunicationSystem
"&%CommunicationSystem is a complex 
system with various components, enabling communication (in some 
medium) between points in a specific area, whether local or worldwide."}%
. subclass(CommunistParty, PoliticalParty)
%{CommunistParty
"Any &%PoliticalParty that advocates for a 
&%CommunistState."}%
. subclass(Compartment, Container)
%{Compartment
"A &%Container which is part of another &%Container, 
e.g. a drawer, a zippered pouch in a piece of luggage, a compartment in a TV 
dinner, etc."}%
. subclass(Compass, Device)
%{Compass
"A Device that indicates the direction of &%North."}%
. subclass(ComposingMusic, ContentDevelopment)
%{ComposingMusic
"&%ContentDevelopment which results in a 
&%MusicalComposition."}%
. subclass(Concealing, Putting)
%{Concealing
"Locating something in such a way that it cannot 
be seen."}%
. subclass(Concentrating, Removing)
%{Concentrating
"Removing a &%Liquid from a &%Solution to 
increase the concentration of the &%Solution."}%
. subclass(Cone, ThreeDimensionalFigure)
%{Cone
"The class of &%ThreeDimensionalFigures which are 
produced by rotating a &%RightTriangle around its &%RightAngle."}%
. subclass(Congratulating, ExpressingApproval)
%{Congratulating
"Any &%ExpressingApproval to a person for 
something that the person did in the past and that is regarded as being 
to the benefit of the person congratulated."}%
. subclass(ConjugatedSubstance, CompoundSubstance)
%{ConjugatedSubstance
"A &%CompoundSubstance that results from 
the &%ChemicalSynthesis of two or more &%CompoundSubstances."}%
. subclass(Consonant, AlphabeticCharacter)
%{Consonant
"An &%AlphabeticCharacter that denotes a speech sound 
that results in audible friction when it is pronounced."}%
. subclass(ContraceptiveDevice, Device)
%{ContraceptiveDevice
"&%Devices which permit sexual intercourse but 
which reduce the likelihood of conception."}%
. subclass(CoolingDevice, Device)
%{CoolingDevice
"A &%Device whose purpose is &%Cooling something, 
e.g. air conditioners, refrigerators, freezers, etc."}%
. subclass(Corn, CerealGrain)
%{Corn
"A &%CerealGrain which is found on long ears of a &%Plant 
native to the Americas."}%
. subclass(Coroner, GovernmentOfficer)
%{Coroner
"A &%GovernmentOfficer who investigates deaths that are 
suspected of being due to something other than natural causes."}%
. subclass(Corporal, MilitaryOfficer)
%{Corporal
"A noncomissioned &%MilitaryOfficer."}%
. subclass(Corresponding, LinguisticCommunication)
%{Corresponding
"Instances of &%LinguisticCommunication which 
are achieved by means of &%Texts that are mailed between the persons 
communicating with one another."}%
. subclass(Cotton, PlantAnatomicalStructure)
%{Cotton
"Fibers from the cotton plant that are used in 
&%Making &%CottonFabric."}%
. subclass(CottonFabric, Fabric)
%{CottonFabric
"Any &%Fabric that is made entirely out of &%Cotton."}%
. subclass(Crane, MaterialHandlingEquipment)
%{Crane
"Crane is a subclass of mechanical &%Devices 
that consist of a &%HoistingDevice on a moveable boom, designed to 
assist in moving heavy loads."}%
. subclass(CreditUnion, FinancialCompany)
%{CreditUnion
"Credit unions are non-profit, member-owned, 
financial cooperatives. They are operated entirely by and for their 
members. When money is deposited in a credit union, the depositor 
becomes a member of the union because the deposit is considered partial 
ownership in the credit union. Many large organizations have established 
credit unions for their employees."}%
. subclass(Creek, BodyOfWater)
. subclass(Creek, StreamWaterArea)
. subclass(Creek, FreshWaterArea)
. disjoint(Creek, River)
%{Creek
"Creek is the class of small streams of fresh 
water flowing through land, usually into a &%River."}%
. subclass(CriminalGang, GroupOfPeople)
%{CriminalGang
"A &%GroupOfPeople which exists (partially or 
wholly) for the purpose of CriminalAction."}%
. subclass(CultivatedLandArea, LandArea)
%{CultivatedLandArea
"A &%LandArea which is dedicated to 
Agriculture, e.g. Lawns, gardens, and fields for growing crops."}%
. subclass(Curb, StationaryArtifact)
%{Curb
"A raised concrete or asphalt structure that connects a 
Sidewalk with a Roadway."}%
. subclass(Curtain, WindowCovering)
. subclass(Curtain, Fabric)
%{Curtain
"A piece of Fabric whose purpose is &%Covering a 
Window so as to keep out the light or prevent people from seeing inside."}%
. subclass(CuttingDevice, Device)
%{CuttingDevice
"Any Device whose purpose is &%Cutting something 
else.  This class covers knives of all times, axes, saws, razors, chisels etc."}%
. subclass(Cylinder, ThreeDimensionalFigure)
%{Cylinder
"The class of &%ThreeDimensionalFigures such that 
all GeometricPoints that make up the Cylinder are equidistant from a 
&%OneDimensionalFigure, known as the axis of the Cylinder."}%
. subclass(DateFruit, Food)
. subclass(DaySchool, School)
%{DaySchool
"A &%School that does not board its students, i.e. 
students attend classes during the day and then return to a private residence 
for the night."}%
. subclass(Deacon, ReligiousPosition)
. subclass(Deacon, PartTimePosition)
%{Deacon
"Any Position within a &%ReligiousOrganization that is held 
by a layman, which is part-time, and which involves assisting a Cleric."}%
. subclass(Deboarding, Translocation)
%{Deboarding
"Getting off a &%Vehicle, e.g. getting out of an 
Automobile, deplaning, getting off a Watercraft, etc."}%
. instance(Decade, UnitOfMeasure)
. subclass(Decelerating, Translocation)
. subclass(Decelerating, Decreasing)
%{Decelerating
"Decreasing the speed with which someone 
or something is moving."}%
. subclass(Dentist, Profession)
%{Dentist
"The &%Profession of being a dentist, i.e. diagnosing 
and treating problems related to the teeth."}%
. subclass(Depressant, BiologicallyActiveSubstance)
%{Depressant
"Any &%BiologicallyActiveSubstance which has 
the effect of depressing the central nervous system, i.e. decreasing 
function or activity in the Brain or SpinalCord."}%
. subclass(Deputy, PoliceOfficer)
%{Deputy
"A &%Position which authorizes the holder of the position 
to act as the sheriff when the sheriff is not available."}%
. subclass(Detergent, Mixture)
%{Detergent
"Any Mixture whose purpose is to remove &%Soil 
and/or other undesirable substances from the surfaces of objects."}%
. subclass(DeviceStateAttribute, DeviceAttribute)
%{DeviceStateAttribute
"&%DeviceStateAttribute is the class 
of attributes that represent different states that a Device may be in.  
Examples: DeviceOff, DeviceOn, DeviceOpen, and DeviceClosed."}%
. subclass(Diamond, Mineral)
. subclass(Diamond, Carbon)
%{Diamond
"Crystalline &%Carbon that is valued as a gem and 
used in industrial applications."}%
. subclass(Dictionary, ReferenceText)
%{Dictionary
"A &%ReferenceText which specifies the meanings 
of the Words of a Language or of a technical jargon."}%
. subclass(DieselEngine, InternalCombustionEngine)
%{DieselEngine
"&%DieselEngine is the subclass of 
&%InternalCombustionEngines that use DieselFuel as their resource."}%
. subclass(Diet, Plan)
%{Diet
"A &%Plan regarding what one is allowed to eat."}%
. subclass(Digging, IntentionalProcess)
. subclass(Digging, SurfaceChange)
%{Digging
"Any Process of removing or turning over the &%Soil."}%
. subclass(DigitAppendage, AnimalAnatomicalStructure)
. subclass(DigitAppendage, BodyPart)
%{DigitAppendage
"Any of the extremities of &%Limbs that are 
found in the higer Vertebrates and the Amphibians."}%
. subclass(Diluting, Putting)
%{Diluting
"Adding a Liquid to a &%Solution to decrease 
the concentration of the Solution."}%
. subclass(DiningRoom, Room)
%{DiningRoom
"A Room intended primarily for &%Eating."}%
. subclass(DiplomaticAgent, ForeignServicePosition)
%{DiplomaticAgent
"&%DiplomaticAgent is the class of &%Positions 
where one is charged to represent one national government to another nation 
or international organization.  This includes any Ambassador or head of 
a diplomatic mission.  Individuals with this attribute may also hold a 
career diplomatic position (see ForeignServicePosition)."}%
. subclass(Dish, Holder)
%{Dish
"A Holder for Food while the &%Food is being eaten."}%
. subclass(Dismounting, BodyMotion)
%{Dismounting
"Any &%BodyMotion which results in not being &%On 
something else."}%
. subclass(DisplayArtifact, Artifact)
%{DisplayArtifact
"Something for posting content so 
that it can be disseminated to the public."}%
. subclass(Divorcing, Declaring)
%{Divorcing
"A legal act whereby a marriage is dissolved."}%
. subclass(Documentary, MotionPicture)
. subclass(Documentary, FactualText)
%{Documentary
"A &%MotionPicture which purports to represent the 
facts about a person, event, etc."}%
. subclass(Dodging, BodyMotion)
. subclass(Dodging, IntentionalProcess)
%{Dodging
"Purposely moving one's body in such a way as 
to avoid being hit by something."}%
. subclass(DomesticCat, DomesticAnimal)
. subclass(DomesticCat, Feline)
%{DomesticCat
"A variety of &%Feline which has been domesticated 
by selective breeding."}%
. subclass(DomesticDog, DomesticAnimal)
. subclass(DomesticDog, Canine)
%{DomesticDog
"Canines which have evolved from the common 
wolf by selective breeding."}%
. subclass(Dormitory, ResidentialBuilding)
. subclass(Dormitory, TemporaryResidence)
. disjoint(Dormitory, SingleFamilyResidence)
%{Dormitory
"A &%TemporaryResidence which is owned by a &%School 
and which is used to house students while they take classes at the School."}%
. subclass(Dough, PreparedFood)
. subclass(Dough, Mixture)
%{Dough
"A Mixture of Flour, &%Water, etc. which is used in 
making BreadOrBiscuits."}%
. subclass(DramaticPerformance, Performance)
%{DramaticPerformance
"A &%Performance that consists exclusively of 
&%DramaticActing, e.g. a live performance of Death_of_a_Salesman in front 
of an audience."}%
. subclass(DressingRoom, Room)
%{DressingRoom
"Any &%Room which is intended for 
&%ChangingClothing."}%
. subclass(DriveComponent, EngineeringComponent)
%{DriveComponent
"An &%EngineeringComponent whose purpose is to 
transfer force from one part of a Device to another part."}%
. subclass(DriversLicense, License)
%{DriversLicense
"A &%License which identifies the holder and 
indicates that he has the right to drive a certain class of RoadVehicle."}%
. subclass(Driveway, Roadway)
%{Driveway
"A small, private &%Roadway that is used for parking 
Automobiles or for connecting a Garage to a public Roadway."}%
. subclass(DrugStore, RetailStore)
%{DrugStore
"A &%RetailStore that sells &%Medicine, and 
perhaps other items as well."}%
. subclass(Drum, PercussionInstrument)
%{Drum
"An atonal &%PercussionInstrument which consists of a 
hollow cylinder and a fabric stretched across at least one end of the 
cylinder."}%
. subclass(Duck, Bird)
%{Duck
"A subclass of &%Bird with webbed feet and a large bill.  
Some ducks live in the wild, and some are raised for meat and/or eggs."}%
. subclass(DutyTax, Tax)
%{DutyTax
"A &%Tax that is levied on imports and/or exports."}%
. subclass(EarthTremor, Tremor)
%{Earthquake
"Earthquake is the class of events in 
which the earth shakes while its layers readjust due to tensional 
stresses in the surface of the earth.  A single earthquake may consist 
of one or more EarthTremors."}%
. subclass(Echoing, RadiatingSound)
%{Echoing
"Instances of &%RadiatingSound where the instrument 
is a surface which bounces sound waves back to their origin, where they can 
be heard again."}%
. subclass(EconomicAttribute, PoliticoEconomicAttribute)
%{EconomicAttribute
"&%EconomicAttribute is the class 
of terms including all Attributes used to characterize the 
economic systems or development levels of Nations or dependent 
&%GeopoliticalAreas."}%
. subclass(Elbow, BodyJoint)
%{Elbow
"The joint in the &%Arm connecting the forearm and the 
upper arm."}%
. subclass(ElectoralCollegeElection, GeneralElection)
%{ElectoralCollegeElection
"&%ElectoralCollegeElection is 
the class of Elections in which the outcome is decided by the votes of 
electors who have been chosen by popular vote, rather than directly by 
results of the popular vote.  ElectoralCollegeElection is an indirect 
method of election, in contrast to PopularElection."}%
. subclass(ElectricMotor, Engine)
. subclass(ElectricMotor, ElectricDevice)
%{ElectricMotor
"&%ElectricMotor is the subclass of &%Engines 
that produce mechanical power from electricity."}%
. subclass(ElectricalSignalling, Signalling)
%{ElectricalSignalling
"&%ElectricalSignalling is the 
subclass of Signalling processes that involve control of an electrical 
current.  Cf. ElectronicSignalling."}%
. subclass(ElectronicSignalling, Signalling)
%{ElectronicSignalling
"&%ElectronicSignalling is the 
subclass of Signalling processes that involve a signal generated by 
a computer."}%
. subclass(Elephant, Herbivore)
%{Elephant
"A very large, almost hairless &%Herbivore with a long 
trunk."}%
. subclass(Elevator, TransportationDevice)
%{Elevator
"A &%TransportationDevice consisting of a car that moves 
up and down in a vertical shaft so that people can move from one floor to another 
in a building."}%
. subclass(Embracing, Touching)
%{Embracing
"The class of Touching processes where one &%Human 
hugs another one."}%
. subclass(EmploymentFiring, TerminatingEmployment)
%{EmploymentFiring
"Involuntarily ending one's employment.  
Note that this covers termination due to inadequate performance, as 
well as layoffs."}%
. subclass(Engine, Transducer)
%{Engine
"Engine is a subclass of Transducer.  &%Engines 
are devices for converting some form of energy resource into mechanical 
power."}%
. subclass(EntertainmentCompany, CommercialAgent)
%{EntertainmentCompany
"Any business whose services include 
Performances.  This class covers nightclubs, commercial live theaters, 
and comedy clubs."}%
. subclass(EntertainmentProfession, SkilledOccupation)
%{EntertainmentProfession
"Positions which involve creating 
content or performances that are intended to entertain.  This class covers 
the TheaterProfession, FilmMakingProfession, being a comedian, etc."}%
. subclass(Entombing, Putting)
%{Entombing
"More commonly known as burying, this is the class 
of processes of putting a HumanCorpse into a Tomb.  Note that this class 
is not a subclass of Burying, since some Tombs are not covered with Soil, 
e.g. those in a mausoleum."}%
. subclass(Envelope, Container)
%{Envelope
"A sealable &%Container for one or more pieces of 
paper which is designed to protect the papers while they are transferred to 
someone."}%
. subclass(Espionage, PoliticalProcess)
. subclass(Espionage, Investigating)
%{Espionage
"Any Investigating by one &%Government of another 
Government where the second Government does not know that it is being 
spied upon."}%
. subclass(EuropeanNation, Nation)
%{EuropeanNation
"The class of nations that are in &%Europe."}%
. subclass(Execution, Killing)
%{Execution
"Killing of a Human by a &%Government for 
the commission of a CriminalAction."}%
. subclass(Exhaling, Breathing)
%{Exhaling
"Any instance of &%Breathing where the breath is 
expelled from the Lungs."}%
. subclass(ExplosiveDevice, Device)
%{ExplosiveDevice
"A Device whose purpose is to explode.  Note 
that ExplosiveDevice is not a subclass of Weapon, since explosives can be 
used in demolition work and in fireworks displays, for example."}%
. subclass(ExplosiveMine, ExplosiveDevice)
. subclass(ExplosiveMine, Weapon)
%{ExplosiveMine
"An &%ExplosiveDevice which is designed to 
explode when there is movement over it, e.g. by a person on foot, by a 
&%RoadVehicle, etc."}%
. subclass(ExplosiveSubstance, Substance)
%{ExplosiveSubstance
"Any &%Substance which is capable of exploding."}%
. subclass(ExpressingFarewell, Expressing)
%{ExpressingFarewell
"Any instance of &%Expressing an acknowledgment 
of a person's departure.  Note that this class is not a subclass of 
&%LinguisticCommunication, because it covers gestures of departure, e.g. Waving 
and Nodding in certain circumstances."}%
. subclass(EyeGlass, OpticalDevice)
%{EyeGlass
"A lens or pair of lenses with or without frames whose 
purpose is to to correct a defect in vision.  This class covers ordinary eye 
glasses, reading glasses, contact lenses, monocles, etc."}%
. subclass(EyeMotion, BodyMotion)
%{EyeMotion
"Any &%Motion where a patient is the agent's 
own Eyelid or Eyelids."}%
. subclass(Eyelid, Skin)
%{Eyelid
"Folds of &%Skin that can be manipulated to 
cover or uncover Eyes."}%
. subclass(FacialHair, Hair)
%{FacialHair
"Hair that grows on the Face.  This 
class covers bears, mustaches, sideburns, midnight shadow, etc."}%
. subclass(Factory, Building)
%{Factory
"A building intended to house a process that 
produces goods of some value."}%
. instance(vX, Factory) =>
      hasPurpose(vX,
                 True
                     when exists vEV: U
                              . instance(vEV, Manufacture) /\ located(vEV, vX)
                     else False)
. subclass(Falling, MotionDownward)
. subclass(FamilyBusiness, Partnership)
%{FamilyBusiness
"A &%Partnership that is owned by a single 
family."}%
. subclass(FanDevice, CoolingDevice)
%{FanDevice
"A &%CoolingDevice which consists simply of one or more 
blades that circulate the air.  Note that this class covers both electrical fans 
and fans that are manually operated."}%
. subclass(FarmBuilding, Building)
. disjoint(FarmBuilding, ResidentialBuilding)
%{FarmBuilding
"A Building on a &%Farm that is used for keeping 
&%DomesticAnimals, Fodder or harvested crops."}%
. subclass(FarmHand, OccupationalTrade)
%{FarmHand
"&%OccupationalTrades which involve &%Agriculture."}%
. subclass(Feather, AnimalAnatomicalStructure)
. subclass(Feather, BodyPart)
%{Feather
"Each instance of this class is one of the structures 
that make up the external covering of Birds."}%
. subclass(Feeding, Giving)
%{Feeding
"Giving Food to a Human or &%Animal."}%
. subclass(Fighter, MilitaryAircraft)
%{Fighter
"Any high-speed &%MilitaryAircraft whose purpose is 
to destroy enemy MilitaryAircraft."}%
. subclass(FilmDirector, FilmMakingProfession)
%{FilmDirector
"Positions which involve directing &%MotionPictures."}%
. subclass(FilmMaking, ContentDevelopment)
%{FilmMaking
"&%ContentDevelopment where the result is a 
&%MotionPicture."}%
. subclass(FilmMakingProfession, EntertainmentProfession)
%{FilmMakingProfession
"Positions which involve &%FilmMaking, 
i.e. acting in films, directing films, producing films, etc."}%
. subclass(FilmProducer, FilmMakingProfession)
%{FilmProducer
"Positions which involve producing &%MotionPictures, 
i.e arranging the financing for the MotionPicture and supervising its production."}%
. subclass(FinancialCompany, CommercialAgent)
%{FinancialCompany
"The class &%FinancialCompany 
includes, as subclasses, &%FinancialBank, &%CreditUnion and &%SavingsAndLoan."}%
. subclass(FinancialService, CommercialService)
%{FinancialService
"Services performed by 
&%FinancialOrganizations."}%
. subclass(Financing, Funding)
. subclass(Financing, FinancialService)
%{Financing
"Any &%Funding which is provided by a &%FinancialCompany 
with the aim of making a profit on the money invested."}%
. subclass(Fingerprint, ShapeAttribute)
. subclass(Fingerprint, BiologicalAttribute)
%{Fingerprint
"That pattern of arches, loops, and whorls that mark 
the imprint of a &%Finger."}%
. subclass(Fireplace, StationaryArtifact)
. subclass(Fireplace, Device)
%{Fireplace
"A Device in a &%Building which is used for burning wood, 
coal, etc for heat."}%
. subclass(FishMeat, Meat)
%{FishMeat
"Meat that was originally part of a &%Fish."}%
. subclass(Flooding, LiquidMotion)
%{Flooding
"Flooding is the subclass of &%LiquidMotion 
processes in which the water level of a Waterway rises or water spreads 
over a flood plain along a Waterway."}%
. subclass(Flour, PreparedFood)
. subclass(Flour, Powder)
%{Flour
"A &%Powder that is prepared from &%CerealGrain, e.g. 
wheat flour, rice flour, etc.  Flour is most often used in the making 
of &%BreadOrBiscuits."}%
. subclass(FlyInsect, Insect)
%{FlyInsect
"&%Insects with &%Wings and two &%Limbs."}%
. subclass(Focusing, QuantityChange)
%{Focusing
"Altering the relative distance of a &%Lens 
so that a visual image is sharper."}%
. subclass(Fodder, Food)
%{Fodder
"Fodder is the subclass of &%Food that is intended 
for instances of &%DomesticAnimal."}%
%{Fog
"Any &%WaterCloud that is in contact with the ground."}%
. subclass(Folding, ShapeChange)
%{Folding
"Bending something in such a way that one part of 
it covers another part."}%
. subclass(Football, TeamSport)
%{Football
"A &%TeamSport where each team tries to place the ball 
in the other's goal.  Note that each instance of Football is a football game."}%
. subclass(FootballManeuver, Maneuver)
%{FootballManeuver
"Any Maneuver in &%Football."}%
. subclass(FootballPass, FootballManeuver)
%{FootballPass
"Any &%FootballManeuver where the member of one 
team throws the ball to another member of the same team."}%
. subclass(FootballTeam, SportsTeam)
%{FootballTeam
"The class of &%SportsTeams that play &%Football."}%
. subclass(FootballTouchdown, FootballManeuver)
. subclass(FootballTouchdown, Score)
%{FootballTouchdown
"Any &%FootballManeuver which is also a 
Score, i.e. any play in a Football game which results in one team 
being in possession of the ball on the inside of the opponent's goal line."}%
. subclass(FormOfGovernment, PoliticoEconomicAttribute)
%{FormOfGovernment
"&%FormOfGovernment is a class of 
Attributes used to describe the characteristics of a government, 
especially a NationalGovernment.  The concept FormOfGovernment is 
interpreted broadly enough to include Anarchy and Factionalism."}%
. subclass(FormText, Text)
%{FormText
"A page or set of pages containing spaces where 
information is to be entered by an Agent."}%
. subclass(FossilFuel, Fuel)
. subclass(FossilFuel, PetroleumProduct)
%{FossilFuel
"&%FossilFuel is the subclass of &%Fuel whose 
instances are derived from fossilized organic deposits, such as Coal 
and LiquefiedPetroleumGas."}%
. subclass(Fox, Canine)
%{Fox
"Canines with a bushy tail and pointed ears and nose.  
Foxes tend to be much smaller than most DomesticDogs."}%
. subclass(FreeAtom, Atom)
%{FreeAtom
"Any Atom which is not part of a &%Molecule."}%
. subclass(Fuel, Substance)
%{Fuel
"Fuel is the class of &%Substances that can be 
used as resources in Combustion processes in order to produce heat.  
Mechanical energy can be produced by burning fuel in an Engine."}%
. subclass(Funeral, FormalMeeting)
%{Funeral
"A &%FormalMeeting whose purpose is to commemorate 
the death of someone."}%
. subclass(GainingConsciousness, PsychologicalProcess)
%{GainingConsciousness
"The process of transitioning from a state 
of being Unconscious to a state of being Awake."}%
. subclass(GameDie, GamePiece)
%{GameDie
"A small cube with 1 to 6 dots on each face that is 
used to generate numbers at random in a Game."}%
. subclass(GameReferee, SkilledOccupation)
%{GameReferee
"A position which involves adjudicating contested 
Maneuvers in a Game, i.e. deciding whether or not the Maneuvers are 
permitted by the rules of the Game."}%
. subclass(GasolineEngine, InternalCombustionEngine)
%{GasolineEngine
"&%GasolineEngine is the subclass of 
&%InternalCombustionEngines that use Gasoline as their resource."}%
. subclass(Gastropod, Mollusk)
%{Gastropod
"A &%Mollusk with a distinct head that has no 
shell (e.g. slugs) or a univalve shell (e.g. snails)."}%
. subclass(Glove, Clothing)
%{Glove
"Clothing that is intended to be worn on the &%Hand.  
Note that this class covers both gloves which have individual compartments 
for each of the Fingers and mittens."}%
. subclass(Glue, Solution)
%{Glue
"Any &%Solution whose purpose is to be used as the instrument 
of Attaching one thing to another or one part of something to another part."}%
%{Goat
"A domesticated &%HoofedMammal that is raised primarily 
for milk."}%
. subclass(Golf, Sport)
%{Golf
"A sport which has a course of 9 or 18 holes and where 
the object is to hit a ball with a club into each hole in turn with the fewest 
number of strokes."}%
. subclass(GolfHole, GolfManeuver)
%{GolfHole
"A division of a Golf game.  A normal game 
consists of 9 to 18 holes, and each hole involves a turn for each of 
the players in the Golf game."}%
. subclass(GolfManeuver, Maneuver)
%{GolfManeuver
"Any Maneuver in &%Golf."}%
. subclass(Goose, Bird)
%{Goose
"A subclass of &%Bird with webbed feet and a long neck 
and a large body.  These Birds are often raised for their meat."}%
. subclass(GovernmentOfficer, Profession)
%{GovernmentOfficer
"Any &%Profession where the position occupied 
is within a GovernmentOrganization."}%
. subclass(GovernmentSecretary, SkilledOccupation)
%{GovernmentSecretary
"The class of &%Positions where the position holder 
is head of an adminstrative department of Government."}%
. subclass(GraduateSchool, PostSecondarySchool)
%{GraduateSchool
"A &%School which is devoted to a specific 
subject area, which admits students that have a bachelor's degree, which 
grants masters and/or doctorate degrees, and which is part of a University."}%
. subclass(GraphDiagram, Icon)
%{GraphDiagram
"An &%Icon which depicts one or more quantities."}%
. subclass(Grasshopper, Insect)
%{Grasshopper
"Insects with enormous legs that are used for 
jumping."}%
. instance(GrayColor, SecondaryColor)
%{GrayColor
"A &%SecondaryColor that results from mixing &%Black and 
White."}%
. subclass(Guitar, StringInstrument)
%{Guitar
"A &%StringInstrument that has six to twelve strings and 
is played by strumming with one hand while grasping frets with the other hand."}%
. subclass(Gun, ProjectileLauncher)
%{Gun
"A &%ProjectileLauncher that shoots &%Bullets."}%
. subclass(GunBarrel, EngineeringComponent)
%{GunBarrel
"The part of a Gun through which a &%Projectile travels 
when it is fired."}%
. subclass(GunPowder, Mixture)
%{GunPowder
"A &%Mixture of potassium nitrate, sulfur, and 
charcoal that is used in ExplosiveDevices and to propell Projectiles 
in ProjectileWeapons."}%
. subclass(GunTrigger, EngineeringComponent)
%{GunTrigger
"The part of the Gun which is pulled in &%Shooting 
the Gun."}%
. subclass(Hammer, Device)
%{Hammer
"A Device that is used to pound &%Nails into a 
surface, where they become firmly attached."}%
. subclass(HandGesture, Gesture)
%{HandGesture
"Any Gesture which involves the &%Hands."}%
. subclass(Handle, EngineeringComponent)
%{Handle
"The part or parts of an &%Artifact that are designed to be 
held with the Hands when the Artifact is used or carried."}%
. subclass(Hanging, Suffocating)
%{Hanging
"Suffocating someone by suspending him/her from 
a rope wound around the neck until asphyxiation occurs."}%
. subclass(Harvesting, Removing)
%{Harvesting
"Gathering the plant results of &%Agriculture."}%
. subclass(Headlight, VehicleLight)
%{Headlight
"Any &%VehicleLight which is attached to the front 
of a Vehicle."}%
. subclass(HeatingDevice, Device)
%{HeatingDevice
"A Device whose purpose is &%Heating something, 
e.g. electric heaters, heat lamps, ovens, stoves, etc."}%
. subclass(Herbivore, Mammal)
. disjoint(Herbivore, Carnivore)
%{Herbivore
"A plant-eating &%Mammal."}%
. subclass(Hijacking, Robbing)
%{Hijacking
"Robbing a &%Vehicle and then driving it away."}%
. subclass(Hinge, EngineeringComponent)
%{Hinge
"An &%EngineeringComponent that connects one thing to 
another in such a way that they can move relative to one another."}%
. subclass(HistoricalAccount, NarrativeText)
. subclass(HoistingDevice, MaterialHandlingEquipment)
%{HoistingDevice
"&%HoistingDevice is a subclass of 
mechanical Devices that provide a mechanical advantage in lifting 
and lowering, e.g., by use of a block and tackle."}%
. subclass(HolidayCard, ContentBearingObject)
%{HolidayCard
"A stiff piece of &%Paper, usually folded over, which 
is sent to others in celebration of a Holiday."}%
. subclass(Holster, Container)
%{Holster
"A Container for a Pistol.  It is generally made of 
Leather and worn on either the shoulder or the waist."}%
. subclass(HomeBase, BaseballBase)
%{HomeBase
"The final &%BaseballBase which must be touched 
by the batter in order to achieve a BaseballRun."}%
. subclass(Honey, AnimalSubstance)
. subclass(Honey, Food)
%{Honey
"An edible, sweet &%Substance produced by some species of 
Bees."}%
. subclass(Hoof, AnimalAnatomicalStructure)
. subclass(Hoof, BodyPart)
%{Hoof
"The hard end of the Foot of a &%HoofedMammal."}%
. subclass(Horn, Bone)
%{Horn
"An outgrowth of &%Bone that is found on some 
&%HoofedMammals."}%
. subclass(HornInstrument, MusicalInstrument)
%{HornInstrument
"A &%MusicalInstrument which is played by 
blowing it.  It uses lip vibration to generates sound and control part 
of the pitch generation process as well."}%
. subclass(HorseRiding, Carrying)
%{HorseRiding
"Any instance of Carrying where the &%Animal is 
a Horse."}%
. subclass(Horsepower, FunctionQuantity)
. instance(Horsepower, UnitOfMeasure)
%{Horsepower
"A power measure that is equal to 746 &%Watts."}%
. subclass(Hunting, Pursuing)
%{Hunting
"Hunting is the class of &%Processes in which 
an animal or animals are pursued and sometimes captured and/or killed."}%
. subclass(Hydrocarbon, OrganicCompound)
%{Hydrocarbon
"Any &%OrganicCompound that contains only &%Carbon 
and Hydrogen."}%
%{Hypothalamus
"The part of the &%Brain lying below the 
thalamus that serves to regulate AutonomicProcesses."}%
. subclass(IlluminationDevice, Device)
%{IlluminationDevice
"Any &%Device whose purpose is to be a source of 
visible light."}%
. subclass(Immigrating, Translocation)
%{Immigrating
"Any Translocation by a Human from one &%Nation 
to another Nation where the person is not a citizen for the purpose of taking 
up residence."}%
. subclass(Imprisoning, Confining)
%{Imprisoning
"The class of &%Confining processes where the detainee 
is put in Prison."}%
. subclass(Inclining, BodyMotion)
. subclass(Inclining, MotionDownward)
%{Inclining
"Moving one's body downward from a vertical position.  
Note that this class covers cases of leaning forward, as well as those of 
reclining backwards."}%
. subclass(IncomeTax, Tax)
%{IncomeTax
"A &%Tax on annual income."}%
. subclass(InfectiousDisease, DiseaseOrSyndrome)
%{InfectiousDisease
"Any &%DiseaseOrSyndrome that is caused by a 
Microorganism."}%
. subclass(Inhaling, Breathing)
%{Inhaling
"Any instance of &%Breathing where the breath is 
taken into the Lungs."}%
. subclass(Insulin, Hormone)
%{Insulin
"A Hormone secreted by the &%Pancreas that is used 
to regulate the metabolism of Carbohydrates."}%
. subclass(InsuranceCompany, CommercialAgent)
%{InsuranceCompany
"A &%CommercialAgent that insures &%Agents 
for the payment of a premium or premiums."}%
. subclass(InternalCombustionEngine, Engine)
%{InternalCombustionEngine
"&%InternalCombustionEngine is 
the subclass of Engines in which a heat reaction that occurs inside 
the engine is transformed into mechanical energy."}%
. subclass(Interviewing, FormalMeeting)
%{Interviewing
"A &%FormalMeeting whose purpose is to acquire 
information from the interviewee that can be used in a media report."}%
. subclass(Intestine, BodyVessel)
. subclass(Intestine, AnimalAnatomicalStructure)
%{Intestine
"A &%BodyVessel which connects the &%Stomach to 
the anus and which is used in digesting Food."}%
. subclass(Ion, PureSubstance)
%{Ion
"An electronically charged Atom or Molecule.  In 
other words, a PureSubstance that has lost one of its Electrons."}%
. subclass(Ivory, Bone)
%{Ivory
"A very hard substance that makes up the tusks of 
elephants and walruses."}%
. subclass(Janitor, UnskilledOccupation)
%{Janitor
"Any Position which involves cleaning a &%Building 
or some of the Rooms within a Building."}%
. subclass(Journalist, Profession)
%{Journalist
"The &%Profession of being a news reporter, i.e. 
investigating and reporting, in a publication or broadcast program, current 
events."}%
. subclass(Judge, Attorney)
. subclass(Judge, GovernmentOfficer)
%{Judge
"An &%Attorney who has the power of deciding legal cases."}%
. subclass(Jumping, BodyMotion)
. subclass(Jumping, MotionUpward)
%{Jumping
"Any &%MotionUpward which is done by one's body 
and which results in a situation where one's feet are unsupported."}%
. subclass(Jury, GroupOfPeople)
%{Jury
"A &%GroupOfPeople who are given the duty of rendering a 
verdict with respect to a LegalAction."}%
. subclass(Kidnapping, Robbing)
%{Kidnapping
"Robbing a &%Human, i.e. taking him/her away 
with the threat of force."}%
. subclass(Kidney, Organ)
. subclass(Kidney, AnimalAnatomicalStructure)
%{Kidney
"An &%Organ that separates urine from other 
&%BodySubstances and passes it to the bladder."}%
. subclass(Knuckle, BodyJoint)
%{Knuckle
"Any joint in a &%Finger."}%
. subclass(Ladder, Artifact)
%{Ladder
"An &%Artifact which consists of two parallel supports 
connected by a series of rungs which can be used to ascend or descend."}%
. subclass(Lamb, Sheep)
%{Lamb
"A young Sheep, i.e. a Sheep that is &%NonFullyFormed."}%
. subclass(LawEnforcement, PoliticalProcess)
. subclass(LawEnforcement, RegulatoryProcess)
%{LawEnforcement
"Any &%RegulatoryProcess where the agent is either 
a PoliceOrganization or a member of a PoliceOrganization.  This covers 
everything from issuing a traffic ticket to arresting someone on suspicion of having 
committed a Murder."}%
. subclass(Lawn, CultivatedLandArea)
%{Lawn
"A &%CultivatedLandArea containing mowed &%Grass."}%
. subclass(LayingEggs, OrganismProcess)
%{LayingEggs
"Any &%OrganismProcess where an &%Egg is expelled 
from the body of a Animal, e.g. a Bird or Reptile laying eggs."}%
. subclass(LegalAppeal, Requesting)
. subclass(LegalAppeal, JudicialProcess)
%{LegalAppeal
"Asking that a higher court reconsider a &%LegalDecision 
of a lower court."}%
. subclass(LegalDismissal, LegalDecision)
%{LegalDismissal
"Any &%LegalDecision where the &%LegalAction of 
the plaintiff is dismissed by the court, e.g. for lack of merit."}%
. subclass(LegalSummons, Ordering)
. subclass(LegalSummons, JudicialProcess)
%{LegalSummons
"An official order that a person appear at a 
&%CourtRoom at a specified time."}%
. subclass(LemonFruit, FruitOrVegetable)
. subclass(LemonFruit, Food)
%{LemonFruit
"A citrus &%FruitOrVegetable that has a yellow skin 
and a tart, acidic flavor."}%
. subclass(Lengthening, Increasing)
%{Lengthening
"Increasing the length of something."}%
. subclass(Lens, OpticalDevice)
%{Lens
"An &%OpticalDevice which consists of a polished, 
transparent piece of glass or plastic.  Lenses are often part of 
other OpticalDevices."}%
. subclass(Lesion, AbnormalAnatomicalStructure)
%{Lesion
"Any &%AbnormalAnatomicalStructure which is the result of 
an Injuring and which is found on the surface of an Organ."}%
. subclass(Library, EducationalOrganization)
%{Library
"An &%EducationalOrganization which is a repository 
of Texts which have been classified for efficient retrieval."}%
. subclass(License, Certificate)
%{License
"License is the subclass of &%Certificates that 
are granted by a GovernmentOrganization and that authorize the performance 
of a kind of action, e.g., driving, exporting, travelling to another 
country, etc."}%
. subclass(Licking, Touching)
%{Licking
"The class of Touching processes where the &%Tongue 
is brought into contact with something else."}%
. subclass(Lightning, WeatherProcess)
. subclass(Lightning, Radiating)
%{Lightning
"A &%WeatherProcess which involves a significant 
release of electricity from a Cloud."}%
. subclass(LilacFlower, FloweringPlant)
%{LilacFlower
"A &%FloweringPlant that has large clusters of 
aromatic flowers."}%
. subclass(LinguisticAttribute, InternalAttribute)
%{LinguisticAttribute
"Any &%Attribute that is 
expressed by a Language or class of Languages."}%
. subclass(LiquefiedPetroleumGas, FossilFuel)
. subclass(LiquefiedPetroleumGas, RefinedPetroleumProduct)
%{LiquefiedPetroleumGas
"&%LiquefiedPetroleumGas is a 
compressed hydrocarbon gas."}%
. subclass(LiquorShot, DistilledAlcoholicBeverage)
%{LiquorShot
"A small serving of a &%DistilledAlcoholicBeverage."}%
. subclass(LoadingWeapon, Inserting)
%{LoadingWeapon
"Inserting ammunition into a &%ProjectileWeapon 
in such a way that the ammunition can be fired by the weapon."}%
. subclass(LosingConsciousness, PsychologicalProcess)
. disjoint(LosingConsciousness, GainingConsciousness)
%{LosingConsciousness
"The process of transitioning from a state 
of being Awake to a state of being Unconscious."}%
. subclass(Magnetism, Radiating)
%{Magnetism
"Any instance of &%Radiating which 
involves the attraction of Iron."}%
. subclass(Maid, ServicePosition)
%{Maid
"Any &%ServicePosition where various needs of a person 
or family are served over a long period of time.  Note that these Positions 
are, by definition, filled only by Women."}%
. subclass(Mailbox, Container)
%{Mailbox
"A &%Container whose purpose is to receive items 
that are mailed to the address associated with the Mailbox."}%
. subclass(MajorGeneral, MilitaryGeneral)
%{MajorGeneral
"A &%MilitaryGeneral that ranks above a 
&%BrigadierGeneral."}%
. subclass(Map, Icon)
%{Map
"An Icon which represents one or more &%GeographicAreas 
(or even the entire Earth)."}%
. subclass(Marble, Rock)
%{Marble
"A metamorphic Rock that is used in &%Constructing 
and in creating Sculptures."}%
. subclass(Marshal, PoliceOfficer)
%{Marshal
"A &%PoliceOfficer whose responsibility is to enforce 
the decisions of a law court."}%
. subclass(Massaging, TherapeuticProcess)
. subclass(Massaging, Touching)
%{Massaging
"A subclass of &%TherapeuticProcess which involves 
kneading Muscles in such a way that tension is relieved, blood circulation 
is increased, etc."}%
. subclass(Mast, Artifact)
%{Mast
"A large pole in the center of a &%Watercraft which is 
used to support a sail."}%
. subclass(MatchDevice, Device)
%{MatchDevice
"A small stick of carboard or wood that is treated 
with chemicals that can be easily ignited with friction.  MatchDevices are 
used for starting fires."}%
. subclass(MaterialHandlingEquipment, Device)
%{MaterialHandlingEquipment
"&%MaterialHandlingEquipment 
is a class of Devices that are equipment used for handling goods and 
supplies more efficiently or safely.  Examples are cranes, hoists, 
forklifts, conveyors, racks, etc."}%
. subclass(Mating, OrganismProcess)
%{Mating
"Any process of sexual intercourse between two &%Humans 
or Animals."}%
. subclass(MediaOrganization, Organization)
%{MediaOrganization
"&%MediaOrganization is the subclass 
of Organization for groups whose primary purpose is the production or 
dissemination of media content.  For organizations that physically enable 
Communication, see CommunicationOrganization."}%
. disjoint(MedicalClinic, Residence)
. subclass(MedicalSchool, GraduateSchool)
%{MedicalSchool
"A &%GraduateSchool that is devoted to 
&%MedicalScience and that grants the degree of doctor of medicine."}%
. subclass(Medicine, BiologicallyActiveSubstance)
%{Medicine
"Any &%BiologicallyActiveSubstance which has a 
therapeutic effect under certain conditions."}%
. subclass(Memorizing, Learning)
%{Memorizing
"The process of committing a &%Text to memory."}%
. subclass(Menstruation, OrganOrTissueProcess)
%{Menstruation
"A periodic discharge of &%Blood and other 
&%BiologicalSubstances by Females that is part of a readjustment of 
the uterus."}%
. subclass(Message, FactualText)
%{Message
"A &%FactualText which is intended to be delivered to 
and read by a Human, GroupOfPeople or Organization."}%
. subclass(Messaging, Transfer)
%{Messaging
"Any instance of Transfer where a &%Message is the 
patient."}%
. subclass(Meteorite, Meteoroid)
%{Meteorite
"Any &%Meteoroid that leaves traces on the surface 
of Earth."}%
. subclass(Meteoroid, AstronomicalBody)
%{Meteoroid
"Any &%AstronomicalBody that breaks through the 
atmosphere of Earth."}%
. instance(MetricTon, UnitOfMeasure)
. subclass(MetricTon, MassMeasure)
%{MetricTon
"&%MetricTon is a &%UnitOfMeasure that represents 
a weight of 2,205 PoundMass."}%
. subclass(Microphone, ElectricDevice)
. subclass(Microphone, CommunicationDevice)
%{Microphone
"A &%CommunicationDevice that converts sound 
into electrical energy."}%
. subclass(Microscope, OpticalDevice)
%{Microscope
"An &%OpticalDevice with a stand and a focus, which is 
used for magnifying the images of things that are placed in the stand."}%
. subclass(MilitaryAircraft, Aircraft)
. subclass(MilitaryAircraft, MilitaryVehicle)
%{MilitaryAircraft
"Any &%Aircraft which is made for a 
&%MilitaryOrganization.  This includes fighters, Bombers, attack 
helicopters, etc."}%
. subclass(MilitaryArtifact, Artifact)
%{MilitaryArtifact
"Any &%Artifact which is made for a 
&%MilitaryOrganization."}%
. subclass(MilitaryCorps, MilitaryUnit)
%{MilitaryCorps
"Any &%MilitaryUnit with the rank of 
corps."}%
. subclass(MilitaryInfiltration, MilitaryProcess)
. subclass(MilitaryInfiltration, Translocation)
%{MilitaryInfiltration
"Any Process by a &%MilitaryOrganization 
which involves moving through enemy positions without detection by the enemy."}%
. subclass(MilitaryInstallation, StationaryArtifact)
. subclass(MilitaryInstallation, MilitaryArtifact)
%{MilitaryInstallation
"A &%StationaryArtifact consisting of grounds 
and Buildings that is intended to be used by a MilitaryOrganization."}%
. subclass(MilitaryManeuver, Maneuver)
%{MilitaryManeuver
"Any Maneuver which takes place in a &%Battle 
and which is intended to secure a tactical advantage for one of the agents of 
the Battle."}%
%{MilitaryOfficer
"The class of &%Soldiers who have authority or command."}%
. subclass(MilitaryPlatoon, MilitaryUnit)
%{MilitaryPlatoon
"Any &%MilitaryUnit with the rank of 
platoon."}%
. subclass(MilitaryReserveForce, MilitaryOrganization)
%{MilitaryReserveForce
"&%MilitaryReserveForce is the subclass 
of MilitaryOrganizations that consist of forces trained in military 
procedures and activities, which are subject to being called to active duty 
if needed."}%
. subclass(MilitaryShip, Ship)
. subclass(MilitaryShip, MilitaryVehicle)
%{MilitaryShip
"Any Ship which is made for a &%MilitaryOrganization.  
This includes aircraft carriers, destroyers, etc."}%
. subclass(MilitarySquad, MilitaryUnit)
%{MilitarySquad
"Any &%MilitaryUnit with the rank of squad."}%
. subclass(MilitarySurplus, MilitaryArtifact)
%{MilitarySurplus
"Any &%MilitaryArtifact which is sold to a 
non-military customer."}%
. subclass(MilitaryTank, MilitaryVehicle)
. subclass(MilitaryTank, RoadVehicle)
. subclass(MilitaryTank, ArtilleryGun)
%{MilitaryTank
"A &%MilitaryVehicle that moves along the ground 
on treaded wheels and that contains a large cannon."}%
. subclass(MilitaryVehicle, Vehicle)
%{MilitaryVehicle
"Any &%Vehicle which is intended to be 
used by a MilitaryOrganization."}%
. subclass(MilitaryWatercraft, Watercraft)
%{MilitaryWatercraft
"&%MilitaryWatercraft is the class of 
all Watercraft owned or leased for use by some MilitaryOrganization."}%
. subclass(Millennium, TimeDuration)
. subclass(Millennium, UnitOfMeasure)
%{Millennium
"The &%TimeDuration of 1000 years."}%
. subclass(MineOrWell, StationaryArtifact)
%{MineOrWell
"An construction in the earth from which 
Minerals or Water is removed, either in pure form or as part of 
some other Substance."}%
. subclass(Mirror, Artifact)
%{Mirror
"An &%Artifact with a surface that is capable of 
displaying an image by reflecting light."}%
. subclass(Missile, Projectile)
. subclass(Missile, SelfPoweredDevice)
%{Missile
"A &%Projectile that is self-propelled and contains 
an ExplosiveDevice."}%
. subclass(ModellingPosition, Position)
%{ModellingPosition
"Any &%Position which involves posing for an 
artist or photographer."}%
. subclass(Monument, StationaryArtifact)
%{Monument
"A &%StationaryArtifact whose purpose is to commemorate 
a person, animal or event."}%
. subclass(MortarGun, ArtilleryGun)
%{MortarGun
"A short-range &%Gun that is positioned on the ground 
at a high angle and fires explosive shells."}%
. subclass(Moth, Insect)
%{Moth
"Nocturnal &%Insect with a large body and antennae."}%
. subclass(MotionPicture, ContentBearingObject)
%{MotionPicture
"A &%ContentBearingObject which depicts motion 
(and which may have an audio or text component as well).  This Class covers 
films, videos, etc."}%
. subclass(MotionPictureScene, MotionPicture)
%{MotionPictureScene
"A discrete part of a &%MotionPicture which is set in 
the same time period and the same location."}%
. subclass(Motorcycle, SelfPoweredRoadVehicle)
%{Motorcycle
"Motorcycle is the subclass of &%RoadVehicles 
that have two wheels one behind the other in the frame, upon which the rider 
sits on a seat above the engine."}%
. subclass(MotorizedRailwayCar, RollingStock)
. subclass(MotorizedRailwayCar, PoweredVehicle)
%{MotorizedRailwayCar
"&%MotorizedRailwayCar is the subclass 
of railway cars that carry their own power source."}%
. subclass(Mounting, BodyMotion)
%{Mounting
"Any &%BodyMotion which results in being &%On 
something else."}%
. subclass(Museum, EducationalOrganization)
%{Museum
"An &%EducationalOrganization where &%Artifacts of historic, 
scientific or aesthetic value are collected and exhibited."}%
. subclass(MusicalPerformance, Performance)
%{MusicalPerformance
"A &%Performance that consists exclusively of 
Music, e.g. an orchestra playing a symphony to an assembled audience."}%
. subclass(MysteryStory, FictionalText)
%{MysteryStory
"A &%FictionalText whose central plot element is a 
crime of some sort, usually a murder."}%
. subclass(Nail, AttachingDevice)
%{Nail
"An &%AttachingDevice which is a thin piece of metal, with 
or without a head, that is fastened with a hammer."}%
. subclass(NailDigit, AnimalAnatomicalStructure)
%{NailDigit
"Any of the horny structures which are found 
on the DigitAppendages of Primates and other Animals."}%
. subclass(NationalFlag, Flag)
%{NationalFlag
"A Flag that is the official flag of a &%Nation, 
e.g. the stars and stripes is the NationalFlag of the UnitedStates."}%
. subclass(Nectar, PlantSubstance)
%{Nectar
"A sweet, sticky liquid that is produced by &%Plants 
and that attracts Insects."}%
. subclass(NerveCell, Cell)
. subclass(NerveCell, AnimalAnatomicalStructure)
%{NerveCell
"The Cells that make up a &%NervousSystem."}%
. subclass(NervousSystem, Organ)
. subclass(NervousSystem, AnimalAnatomicalStructure)
%{NervousSystem
"A system in &%Vertebrates that is made up of 
the Brain, the spinal cord, nerves, etc."}%
. subclass(Neurosis, PsychologicalDysfunction)
%{Neurosis
"Any &%PsychologicalDysfunction which is not due 
to an organic impairment of the NervousSystem."}%
. subclass(NewTestament, Book)
. subsumesContentClass(NewTestament, ChristianGospel)
%{NewTestament
"The second and final part of the &%ChristianBible,
describing the life and teachings of Jesus Christ and the activities of his 
apostles."}%
. subclass(NonprofitOrganization, Organization)
. disjoint(NonprofitOrganization, CommercialAgent)
%{NonprofitOrganization
"Any &%Organization whose purpose is something 
other than making a profit."}%
. subclass(NonspecificDisease, InfectiousDisease)
%{NonspecificDisease
"The class of &%InfectiousDiseases that 
are not caused by a single type of Microorganism."}%
. subclass(Nostril, BodyVessel)
. subclass(Nostril, AnimalAnatomicalStructure)
%{Nostril
"Either of two &%BodyVessels that run through the &%Nose 
and connect it to the Throat."}%
. subclass(NuclearWeapon, ExplosiveDevice)
. subclass(NuclearWeapon, Weapon)
%{NuclearWeapon
"An &%ExplosiveDevice which achieves its effect 
by means of a critical mass of a radioactive substance."}%
. subclass(NuclearWeapon, RadioactiveWeapon)
%{NuclearWeapon
"&%RadioactiveWeapons whose destructive power is 
achieved through nuclear energy."}%
. subclass(OakWood, WoodArtifact)
%{OakWood
"Any &%WoodArtifact that is made from the &%Wood of an 
oak tree."}%
. subclass(Oar, TransportationDevice)
%{Oar
"A &%Device consisting of a flat, broad surface attached to a 
handle that is used as an instrument in Rowing."}%
. subclass(ObliqueAngle, TwoDimensionalAngle)
%{ObliqueAngle
"Any &%TwoDimensionalAngle that has an 
&%angularMeasure that is greater than 90 AngularDegrees."}%
. subclass(OfferingToPurchase, Offering)
%{OfferingToPurchase
"Offering to buy something from someone."}%
. subclass(OilPaint, Paint)
. disjoint(OilPaint, WatercolorPaint)
%{OilPaint
"Any Paint which is an oil-based &%Solution."}%
. subclass(OilPicture, PaintedPicture)
. disjoint(OilPicture, WatercolorPicture)
%{OilPicture
"Any &%OilPicture which is created 
with oil-based paints."}%
. subclass(OldTestament, Book)
%{OldTestament
"The first part of the &%ChristianBible, describing 
the history of the Hebrew people."}%
. subclass(OlympicGames, Sport)
%{OlympicGames
"A sports event where athletes from various countries 
compete against one another.  The Olympics are now held every two years, either in 
the winter or the summer."}%
. subclass(Opium, Depressant)
. subclass(OpticalDevice, Device)
%{OpticalDevice
"A &%Device which enables someone to see something 
more clearly or with greater magnification."}%
. subclass(OrangeFruit, FruitOrVegetable)
. subclass(OrangeFruit, Food)
%{OrangeFruit
"A citrus &%FruitOrVegetable that has an orange 
skin and a sweet, acidic flavor."}%
. subclass(Organification, OrganOrTissueProcess)
%{Organification
"Any &%BiologicalProcess that results in 
the formation of an Organ."}%
. subclass(OrganizationalMerging, OrganizationalProcess)
%{OrganizationalMerging
"The process of two or more 
Organizations merging into a single Organization."}%
. subclass(Orthography, Procedure)
%{Orthography
"A method for representing the sounds of a &%Language 
with written Characters."}%
. subclass(Ossification, OrganOrTissueProcess)
%{Ossification
"Any &%BiologicalProcess that results in the 
formation of Bones."}%
. subclass(Outside, Region)
%{Outside
"Any Region which is not enclosed by a &%Building 
or part of a Building."}%
. subclass(Oval, ClosedTwoDimensionalFigure)
%{Oval
"The class of &%ClosedTwoDimensionalFigures that are 
produced by the intersection of a Cone with a ClosedTwoDimensionalFigure."}%
. subclass(Oven, HeatingDevice)
. subclass(Oven, Container)
%{Oven
"A &%HeatingDevice with a door for inserting and removing 
Food that is to be baked."}%
. subclass(Owl, Bird)
%{Owl
"A nocturnal bird of prey with a large head and 
forward-facing eyes."}%
. subclass(Oxidation, ChemicalDecomposition)
%{Oxidation
"Any &%ChemicalProcess where &%Electrons 
are removed from the substance undergoing the ChemicalProcess."}%
. subclass(Pancreas, Gland)
%{Pancreas
"A large Gland that secretes &%Insulin and other 
substances."}%
. subclass(Paragraph, Text)
%{Paragraph
"A &%Text which consists of one or more sentences, 
begins with an indented line, and expresses a single topic."}%
. subclass(ParkingLot, StationaryArtifact)
%{ParkingLot
"A &%LandArea which has been levelled, paved, and 
marked off for parking Automobiles."}%
. subclass(Partnership, CommercialAgent)
%{Partnership
"A &%CommercialAgent that is owned by more 
than one person."}%
. subclass(PassCertificate, Certificate)
%{PassCertificate
"A &%Certificate that allows the holder to 
be at or away from a specified location, e.g. a pass for a leave of 
absence, a hall pass, a pass to enter a cleared facility, etc."}%
. subclass(Passport, License)
%{Passport
"A &%License which identifies the holder and permits 
travel between different countries."}%
. subclass(Pea, Seed)
. subclass(Pea, Food)
%{Pea
"The edible &%Seed of a pea plant."}%
. subclass(PearFruit, FruitOrVegetable)
. subclass(PearFruit, Food)
%{PearFruit
"A &%FruitOrVegetable that has a thick skin and the 
shape of a tear drop."}%
. subclass(Peeling, Removing)
%{Peeling
"Removing the Skin (or part of the &%Skin) from 
an Organism.  Note that this class covers a large range of cases, including 
peeling an orange, pelting an Animal, etc."}%
. subclass(Pencil, WritingDevice)
%{Pencil
"A &%WritingDevice that consists of an encased piece of 
graphite."}%
. subclass(PensionPlan, FinancialAccount)
%{PensionPlan
"A qualified retirement plan set up by a 
corporation, labor union, government, or other organization for its 
employees.  Examples include profit-sharing plans, stock bonus and 
employee stock ownership plans, thrift plans, target benefit plans, 
money purchase plans, and defined benefit plans."}%
. subclass(PercussionInstrument, MusicalInstrument)
%{PercussionInstrument
"A &%MusicalInstrument which does not 
have strings and which is played by striking it."}%
. subclass(PerformanceAct, Performance)
%{PerformanceAct
"A discrete &%subProcess of a &%Performance, 
e.g. an act of a play, a movement of a performance of a symphony, etc."}%
. subclass(PerformanceProgram, FactualText)
%{PerformanceProgram
"A &%Text that describes the events 
and/or participants in a Performance."}%
. subclass(PerformanceStageWing, StationaryArtifact)
%{PerformanceStageWing
"A part of the &%PerformanceStage that is not 
visible to members of the audience."}%
. subclass(PeriodicalPublisher, Publisher)
%{PeriodicalPublisher
"Any &%Publisher that publishes 
Periodicals, e.g. newspaper and magazine publishing houses."}%
. subclass(PetroleumProduct, OrganicCompound)
%{PetroleumProduct
"&%PetroleumProduct is a broad class that 
includes both crude oil (Petroleum) and RefinedPetroleumProducts."}%
. subclass(Pharmacist, Profession)
%{Pharmacist
"The &%Profession of being a pharmacist, i.e. 
preparing and dispensing BiologicallyActiveSubstances."}%
. subclass(PhotographicFilm, Artifact)
%{PhotographicFilm
"Celluloid covered with an emulsion which can 
be converted into photographic negatives by a Camera."}%
. subclass(Piano, StringInstrument)
%{Piano
"A &%StringInstrument which is played with keys that 
activate hammers that strike strings."}%
. subclass(PictureFrame, Artifact)
%{PictureFrame
"A frame which surrounds a &%PaintedPicture or 
Photograph and has the function of protecting and accenting the picture."}%
%{Pig
"A domesticated &%HoofedMammal that is raised for pork."}%
. subclass(Pigeon, Bird)
%{Pigeon
"A subclass of &%Bird with a stout body and short legs."}%
. subclass(Pillow, Artifact)
%{Pillow
"A soft, stuffed Artifact to support the &%Head or 
the body as a whole while one is sleeping or relaxing."}%
. subclass(PitchersMound, GameArtifact)
%{PitchersMound
"The place where the pitcher in &%Baseball 
stands when he is throwing balls to the batter."}%
. subclass(PituitaryGland, Gland)
%{PituitaryGland
"The main &%Gland of the endocrine system."}%
. subclass(PlayingCard, GameArtifact)
. subclass(PlayingCard, ContentBearingObject)
%{PlayingCard
"A small piece of stiff paper with markings 
which is intended to be used for playing card games."}%
. subclass(Pleading, Stating)
%{Pleading
"&%Stating in a court of law a claim about whether or 
not one is guilty of the crime of which one has been accused."}%
. subclass(Plumber, OccupationalTrade)
%{Plumber
"Any occupation that involves installing, repairing, and 
replacing pipes and pipe fixtures."}%
. subclass(PoliceCaptain, PoliceOfficer)
%{PoliceCaptain
"A &%PoliceOfficer who is in charge of a precinct."}%
. subclass(PoliceSergeant, PoliceOfficer)
%{PoliceSergeant
"A &%PoliceOfficer with the rank of sergeant."}%
. subclass(PoliticalCrime, CriminalAction)
. subclass(PoliticalCrime, PoliticalProcess)
%{PoliticalCrime
"A &%CriminalAction that is committed by or 
against &%Governments."}%
. subclass(PoliticalRevolution, PoliticalProcess)
. subclass(PoliticalRevolution, ViolentContest)
%{PoliticalRevolution
"The violent overthrow of one &%Government 
and its replacement by another.  This covers grass-roots revolutions, as well 
as coups d'etat."}%
. subclass(Polling, Investigating)
%{Polling
"Investigating what people believe (and in what proportions) 
by asking a set of structured questions to a random sample of people."}%
. subclass(PopularElection, GeneralElection)
%{PopularElection
"&%PopularElection is the class of 
Elections in which office-holders and issues are determined directly by 
the outcome of the votes cast by the enfranchised.  For example, U.S.  
Senators and Representatives are elected by PopularElection.  By 
contrast, U.S. Presidents are elected by indirect elections, in which the 
Electoral College determines the actual outcome.  See electionWinner."}%
. subclass(Pork, Meat)
%{Pork
"Meat that was originally part of a &%Pig."}%
. subclass(Portrait, PaintedPicture)
%{Portrait
"A &%PaintedPicture that represents someone's &%Face."}%
. subclass(PostMeridiem, TimeInterval)
%{PostMeridiem
"The class of &%TimeIntervals that begin at noon and 
end at midnight."}%
. subclass(PotOrPan, Container)
%{PotOrPan
"A &%Container which has a handle and is used for 
Cooking."}%
. subclass(Potter, OccupationalTrade)
%{Potter
"Any occupation that involves the creation of &%Pottery."}%
. subclass(PressureMeasuringDevice, MeasuringDevice)
%{PressureMeasuringDevice
"Any &%Device that measures and 
represents AtmosphericPressureMeasure."}%
. subclass(Prison, StationaryArtifact)
%{Prison
"An installation which is owned and maintained by 
a Government for the purpose of Confining people.  This class covers 
jails, federal prisons, concentration camps, gulags, etc."}%
. subclass(PrivateSchool, School)
. disjoint(PrivateSchool, GovernmentOrganization)
%{PrivateSchool
"A &%School which is not publicly owned."}%
. subclass(Proclaiming, Lecture)
. subclass(Proclaiming, Declaring)
%{Proclaiming
"Any instance of &%Speaking before an assembled 
audience that effects an institutional change, e.g. a change in the laws of 
the government."}%
. subclass(Professor, Teacher)
%{Professor
"The &%Profession of being a teacher at a 
&%PostSecondarySchool."}%
. subclass(ProfitSharingPlan, PensionPlan)
%{ProfitSharingPlan
"An arrangement in which an employer 
shares its profits with its employees.  The compensation can be stocks, 
bonds or cash, and can be immediate or deferred until retirement."}%
. subclass(ProjectileLauncher, Weapon)
%{ProjectileLauncher
"A Weapon that shoots a &%Projectile."}%
. subclass(ProjectionScreen, CommunicationDevice)
%{ProjectionScreen
"A &%CommunicationDevice upon which images 
are projected so that they can be viewed."}%
. subclass(Proprietorship, CommercialAgent)
%{Proprietorship
"A &%CommercialAgent that is owned by a 
single person."}%
. subclass(Protozoa, Microorganism)
%{Protozoa
"Unicellular &%Organisms that are capable of movement 
and that are found in almost every part of the world.  This class includes 
amoebas, sporozoans, and paramecia."}%
. subclass(Psychosis, PsychologicalDysfunction)
%{Psychosis
"Any &%PsychologicalDysfunction which is the 
result of an organic impairment of the NervousSystem."}%
. subclass(PublicDefender, Attorney)
. subclass(PublicDefender, GovernmentOfficer)
%{PublicDefender
"An &%Attorney who defends criminal cases for a 
&%GovernmentOrganization."}%
. subclass(PublicLibrary, Library)
. subclass(PublicLibrary, GovernmentOrganization)
%{PublicLibrary
"A &%Library which is financed by taxes and which 
is open to everyone."}%
. subclass(PublicPark, Park)
%{PublicPark
"A &%Park that is publicly owned, i.e. owned 
by a Government."}%
. subclass(PublicProsecutor, Attorney)
. subclass(PublicProsecutor, GovernmentOfficer)
%{PublicProsecutor
"An &%Attorney who prosecutes criminal cases for 
a GovernmentOrganization."}%
. subclass(PublicSchool, School)
. subclass(PublicSchool, GovernmentOrganization)
%{PublicSchool
"A &%School which is financed primarily by taxes."}%
. subclass(Publisher, CommercialAgent)
%{Publisher
"Any business whose services include the 
Publication of Texts."}%
. subclass(Pulling, LandTransportation)
%{Pulling
"Any instance of &%LandTransportation, where a 
&%TransportationDevice is dragged by something else, whether the something 
else is an Animal or a self-powered TransportationDevice."}%
. subclass(PulmonaryVein, Vein)
%{PulmonaryVein
"A Vein that carries &%Blood from the 
Lungs to the Heart."}%
. subclass(Pump, TransportationDevice)
%{Pump
"A Device that moves &%Fluids by means of pressure or suction."}%
. subclass(Punching, Impelling)
%{Punching
"Any instance of &%Impelling where the instrument 
is a Fist of the agent."}%
. subclass(Punishing, RegulatoryProcess)
%{Punishing
"A &%RegulatoryProcess where the agent does 
something to the destination that the agent knows is undesirable 
for the destination."}%
. subclass(PuttingOnClothing, Covering)
%{PuttingOnClothing
"Putting Clothing on a &%Human or 
Animal in such a way that the Human or Animal wears the Clothing."}%
. disjoint(QueenInsect, WorkerInsect)
. subclass(Rabbit, Rodent)
%{Rabbit
"A burrowing &%Rodent with a short tail and long ears."}%
. subclass(Racing, Sport)
%{Racing
"A sport which involves a contest of speed between the 
participants.  Note that this covers a variety of things, including auto 
racing, running competitions, etc."}%
. subclass(RadarOrSonar, ElectricDevice)
%{RadarOrSonar
"An &%ElectricDevice that emits and receives 
microwave radiation for the purpose of locating and tracking distant objects."}%
. subclass(RadiatingInfrared, Radiating)
. disjoint(RadiatingInfrared, RadiatingLight)
. disjoint(RadiatingInfrared, RadioEmission)
%{RadiatingInfrared
"Any instance of &%Radiating where the 
wavelengths are longer than those of visible light and shorter than those 
of radio emissions."}%
. subclass(RadiatingSoundUltrasonic, RadiatingSound)
%{RadiatingSoundUltrasonic
"All sound waves that have frequencies 
above those that normal Human ears can detect."}%
. subclass(RadiatingUltraviolet, Radiating)
. disjoint(RadiatingUltraviolet, RadiatingLight)
. disjoint(RadiatingUltraviolet, XRayRadiation)
%{RadiatingUltraviolet
"Any instance of &%Radiating where the 
wavelengths are shorter than those of visible light and longer than those 
of X-Rays."}%
. subclass(RadiatingVisibleLight, RadiatingLight)
. disjoint(RadiatingVisibleLight, RadiatingUltraviolet)
%{RadiatingVisibleLight
"Any instance of &%RadiatingLight that can 
be detected by normal human visual perception."}%
. subclass(RadioEmission, Radiating)
%{RadioEmission
"Any instance of &%Radiating 
where the waves have a wavelength between 5 milimeters and 30,000 meters."}%
. subclass(RadioReceiver, ReceiverDevice)
%{RadioReceiver
"A &%RadioReceiver is a &%Device for receiving 
radio broadcast signals from a RadioStation."}%
. subclass(RadioactiveWeapon, WeaponOfMassDestruction)
. disjoint(RadioactiveWeapon, BiochemicalWeapon)
%{RadioactiveWeapon
"A &%WeaponOfMassDestruction which 
achieves its effect through radioactivity, either by an explosion resulting 
from nuclear fission or by a conventional explosive device that scatters 
radioactive debris."}%
%{RadiologicalWeapon
"Weapons which are designed to spread 
radioactive particles over a large area by means of a conventional 
explosive device rather than a nuclear reaction.  These weapons are often 
referred to as 'dirty bombs'."}%
. subclass(RadiologicalWeapon, RadioactiveWeapon)
. subclass(Radish, PlantRoot)
. subclass(Radish, Food)
%{Radish
"A &%PlantRoot that is often used in salads."}%
. subclass(Ramp, Object)
%{Ramp
"Ramp is the class of &%Objects that are 
inclined planes used for moving objects from one level to another, 
especially used for wheeled vehicles and people who cannot climb stairs."}%
. subclass(Raping, Mating)
. subclass(Raping, CriminalAction)
%{Raping
"Any instance of &%Mating where one participant does not 
consent."}%
. subclass(Rat, Rodent)
%{Rat
"A Rodent that has a hairless tail like a &%Mouse 
but that is larger than a Mouse."}%
. subclass(Rattlesnake, Snake)
%{Rattlesnake
"A subclass of &%Snake which derives its name 
from the fact that it can manipulate its tail in such a way as to produce 
a sound like that of a rattle."}%
. subclass(RearWindow, VehicleWindow)
%{RearWindow
"Any &%VehicleWindow which is located at the back 
of an Automobile."}%
. subclass(ReceiverDevice, CommunicationDevice)
. subclass(ReceiverDevice, ElectricDevice)
%{ReceiverDevice
"An &%ElectricDevice that is capable of 
receiving and decoding RadioEmissions, e.g. Radios and Televisions."}%
. subclass(Reciting, Speaking)
%{Reciting
"Any instance of &%Speaking where what is 
uttered is contained within a Text."}%
. subclass(RecordAlbum, AudioRecording)
%{RecordAlbum
"A &%AudioRecording that has the form of a 
plastic or glass disk with continuous grooves that are transformed into 
sound by a record player."}%
. subclass(RecoveringFromIllness, OrganismProcess)
%{RecoveringFromIllness
"Any &%Process where the experiencer recovers 
from a DiseaseOrSyndrome."}%
. subclass(RecreationOrExerciseDevice, Device)
%{RecreationOrExerciseDevice
"A Device whose purpose is &%RecreationOrExercise."}%
. subclass(RedBloodCell, BloodCell)
%{RedBloodCell
"&%BloodCells that contain hemoglobin, lack a 
&%CellNucleus, and carry Oxygen to the tissues of the body."}%
. subclass(ReferenceText, FactualText)
%{ReferenceText
"A &%Text which is not intended to be read 
from beginning to end, but which is meant to be consulted to answer specific 
factual questions, e.g. about the meaning of a word, the location of a 
country, etc."}%
. subclass(Reflecting, Radiating)
%{Reflecting
"Any instance of &%Radiating where the radiated 
waves rebound from a surface, e.g. an echo of sound or a reflection of 
light."}%
. subclass(ReflectingLight, Reflecting)
. subclass(ReflexiveProcess, AutonomicProcess)
%{ReflexiveProcess
"Any &%Muscle reaction which is a response 
to a specific stimulus and which does not reach the level of consciousness."}%
. subclass(Refrigerator, CoolingDevice)
. subclass(Refrigerator, ElectricDevice)
. subclass(Refrigerator, Container)
%{Refrigerator
"The intersection of Containers and &%ElectricDevices 
in which the temperature is reduced from that of the outside air by a Cooling 
process."}%
. subclass(Regretting, ExpressingDisapproval)
%{Regretting
"&%ExpressingDisapproval about a state of affairs 
that has already occurred."}%
. subclass(RelievingPain, TherapeuticProcess)
. subclass(RelievingPain, CausingHappiness)
%{RelievingPain
"Any &%TherapeuticProcess that removes &%Pain from 
the patient of the process."}%
. subclass(ReligiousPosition, Position)
%{ReligiousPosition
"Any Position within a &%ReligousOrganization."}%
. subclass(RemovingClothing, Uncovering)
%{RemovingClothing
"Removing Clothing from a &%Human or 
Animal in such a way that the Human or Animal no longer wears the 
Clothing."}%
. subclass(Renting, FinancialTransaction)
. subclass(Renting, Borrowing)
%{Renting
"Giving money to the owner of an &%Object in 
exchange for the right to use the Object for a fixed time period."}%
. subclass(Researcher, Profession)
%{Researcher
"The &%Profession of being a scientific 
researcher."}%
. subclass(Resigning, TerminatingEmployment)
%{Resigning
"Voluntarily ending one's employment."}%
. subclass(Resistor, EngineeringComponent)
%{Resistor
"A &%Device which resists passage of an electric current 
through it.  It is used for various purposes in an electrical circuit."}%
. subclass(Restaurant, CommercialAgent)
%{Restaurant
"Any &%CommercialAgent whose services include selling 
Food to customers which is intended to be eaten on the premises."}%
. subclass(Retina, Organ)
. subclass(Retina, AnimalAnatomicalStructure)
%{Retina
"A membrane that covers the &%Eye and converts 
the image formed by the lens of the Eye into neurochemical impulses 
which can be processed by the Brain."}%
. subclass(Retiring, Resigning)
. subclass(RevolverGun, Pistol)
%{RevolverGun
"A &%Pistol whose magazine is a revolving cylinder with 
six chambers for Bullets."}%
. subclass(Rice, CerealGrain)
%{Rice
"A &%CerealGrain which has short and long grain varieties 
and which is usually prepared for eating by steaming."}%
. subclass(RightTriangle, Triangle)
%{RightTriangle
"Any Triangle that contains a &%RightAngle."}%
. subclass(Ringing, RadiatingSound)
%{Ringing
"Any instance of &%RadiatingSound which is produced by 
a Bell."}%
. subclass(RoadTransportationSystem, TransportationSystem)
%{RoadTransportationSystem
"&%RoadTransportationSystem 
is the subclass of TransportationSystems whose routes are Roadways."}%
. subclass(Robbing, Stealing)
%{Robbing
"Any instance of &%Stealing which involves the threat 
of the use of force."}%
. subclass(Rocket, Spacecraft)
%{Rocket
"A &%Spacecraft which has the shape of a cylinder 
with a cone on top and which is powered by a jet engine."}%
. subclass(Rooster, Chicken)
%{Rooster
"A Male &%Chicken."}%
. subclass(Rotor, EngineeringComponent)
%{Rotor
"The &%Rotating component of a motor, generator or similar 
Device."}%
. subclass(Rowing, WaterTransportation)
%{Rowing
"Any instance of &%WaterTransportation where the 
instrument is an Oar that is manually powered."}%
. subclass(Rubber, PlantSubstance)
%{Rubber
"A latex that is produced by certain species of 
&%BotanticalTrees."}%
. subclass(Rug, Fabric)
%{Rug
"A piece of Fabric whose purpose is to cover a &%Floor."}%
. subclass(SafeContainer, Container)
. subclass(SafeContainer, SecurityDevice)
%{SafeContainer
"A Container with a &%Lock which is intended 
to secure items from theft.  Note that this covers safes, lockers, and locked 
storage compartments."}%
. subclass(Sailor, SkilledOccupation)
%{Sailor
"The class of &%Positions which involve working on a 
ship, whether a merchant ship or a navy ship."}%
. subclass(SalesPosition, SkilledOccupation)
%{SalesPosition
"Any Position which involves &%Selling 
or trying to sell items."}%
. subclass(Sandwich, PreparedFood)
%{Sandwich
"Any &%Food which consists of two or more pieces 
of bread and some sort of filling between the two pieces of bread."}%
%{Satellite
"Satellite is the collection of bodies that 
revolve around some  astronomical body, e.g., planets around a star."}%
. subclass(Saving, Decreasing)
%{Saving
"Any instance of Decreasing where the &%PhysicalQuantity 
involved is a CurrencyMeasure."}%
. subclass(SavingsAndLoan, FinancialCompany)
%{SavingsAndLoan
"A federally or state chartered 
&%FinancialCompany that takes Deposits from individuals, funds 
Mortgages, and pays Dividends."}%
. subclass(Scar, AbnormalAnatomicalStructure)
%{Scar
"Any &%AbnormalAnatomicalStructure which results from the 
healing of a Lesion."}%
. subclass(Scholarship, Funding)
%{Scholarship
"Any &%Funding which is made on the basis of merit 
and whose purpose is to allow the destination to realize an 
&%EducationalProgram."}%
. subclass(Sculpture, ArtWork)
%{Sculpture
"Any &%ArtWork which is not constructed on the 
two-dimensional surface of a canvas, piece of paper, etc."}%
. subclass(Seating, Guiding)
%{Seating
"Guiding someone to a &%Seat, e.g. as when an usher 
shows someone to a Seat in an Auditorium."}%
. subclass(SecondarySchool, School)
%{SecondarySchool
"A &%School which admits students who have 
graduated from a middle school and which normally covers the ninth through 
twelfth grades.  A SecondarySchool confers a high school diploma."}%
. subclass(SeizingProperty, UnilateralGetting)
%{SeizingProperty
"Any instance of &%UnilateralGetting which is done by 
a Government and which is not permitted by the origin of the UnilateralGetting."}%
. subclass(SelfPoweredDevice, Device)
%{SelfPoweredDevice
"&%SelfPoweredDevice is the subclass of &%Devices whose action is 
powered by some kind of on-board component or power source (not the user)."}%
. subclass(SelfPoweredRoadVehicle, RoadVehicle)
. subclass(SelfPoweredRoadVehicle, PoweredVehicle)
%{SelfPoweredRoadVehicle
"&%SelfPoweredRoadVehicle is the 
class of RoadVehicles that are also PoweredVehicles.  
&%SelfPoweredRoadVehicle covers motorcycles, semi-trailers, RVs, etc., 
as well as Automobiles.  This class includes vehicles powered by 
electricity, gasoline, diesel, and other fuels."}%
. subclass(Sentencing, LegalDecision)
%{Sentencing
"Any &%LegalDecision where the defendant is assigned 
a punishment for a CriminalAction which was the subject of an earlier 
&%LegalConviction."}%
. subclass(Sergeant, MilitaryOfficer)
%{Sergeant
"A noncomissioned &%MilitaryOfficer."}%
. subclass(ServicePosition, SkilledOccupation)
%{ServicePosition
"Any &%Position which involves working 
as a waiter or servant, either for an Organization (e.g. a restaurant) 
or for a person or family."}%
. subclass(SewageSystem, Pipeline)
%{SewageSystem
"A &%Pipline which is used to transport human 
waste to an area where it can be treated and/or disposed of."}%
. subclass(Sewing, Attaching)
%{Sewing
"Attaching two pieces of &%Fabric or one part of a 
piece of Fabric to another part by means of needle and thread."}%
. subclass(Shelf, Artifact)
%{Shelf
"An piece of Furniture or part of a piece of &%Furniture 
that is used for keeping or displaying things."}%
. subclass(Sheriff, PoliceOfficer)
%{Sheriff
"A &%PoliceOfficer whose jurisdiction is a &%County."}%
. subclass(Shield, Artifact)
%{Shield
"An &%Artifact that is held by the hand or whole arm and 
is used to prevent injuries from Weapons."}%
. subclass(ShipCaptain, SkilledOccupation)
%{ShipCaptain
"The class of &%Positions which involve the command 
of a ship."}%
. subclass(ShipMate, SkilledOccupation)
%{ShipMate
"The class of &%Positions that involve some responsibility 
on a ship and are lower in rank than ShipCaptain."}%
. subclass(ShipOfficer, Sailor)
%{ShipOfficer
"The class of &%Sailors which have a position of 
responsibility on a Ship."}%
. subclass(Shipping, Transportation)
%{Shipping
"Shipping is the subclass of &%Transportation 
events in which goods are transported from one place to another by an 
agent who is entrusted with the goods temporarily just in order to move 
them.  Shipping may be done within an organization or it may be done 
by an outside commercial agent.  See CommercialShipping."}%
. subclass(ShoppingMall, MercantileOrganization)
%{ShoppingMall
"A &%MercantileOrganization which is a collection 
of various shops gathered together in a single, modern development."}%
. subclass(Shortening, Decreasing)
%{Shortening
"Decreasing the length of something."}%
. subclass(ShotBall, Ball)
%{ShotBall
"A solid metal &%Ball that is used in the sport of 
shotput."}%
. subclass(Signalling, Guiding)
%{Signalling
"Signalling is the subclass of &%Guiding 
processes in which an agent, animate or inanimate, sends a signal to 
another Object.  In many cases, this signal will be an electrical or 
electronic one.  Some signals may directly control the behavior of 
the object signalled, while others may merely cause information to be 
presented.  Instances of electrical Signalling are typically more 
complex than simply than operation of a DeviceSwitch, though in some 
cases, Signalling involves remote activation of such a switch by another 
device."}%
. subclass(Silk, Fabric)
%{Silk
"Fabric that is woven from the strands produced by 
certain Larval Insects."}%
. subclass(Sinking, Falling)
%{Sinking
"The class of &%Falling processes that occur 
in a BodyOfWater."}%
. subclass(Skull, Bone)
%{Skull
"The Bone that is found in the Heads of &%Vertebrates."}%
. subclass(Skylight, Window)
%{Skylight
"A Window that is part of the &%Ceiling of 
a Room."}%
. subclass(Sleeve, Clothing)
%{Sleeve
"A piece of Clothing that covers the Arm.  A 
Sleeve is always part of a Coat or a Shirt."}%
. subclass(SmokingDevice, Device)
%{SmokingDevice
"Any Device whose purpose is &%Smoking."}%
. subclass(SmokingPipe, SmokingDevice)
%{SmokingPipe
"A &%SmokingDevice consisting of a tube and a small 
bowl."}%
. subclass(Smuggling, Transportation)
. subclass(Smuggling, CriminalAction)
%{Smuggling
"Any instance &%Transportation which is also a 
&%CriminalAction."}%
%{Snowing
"Snowing is a precipitation process 
in which water falls in a Solid state."}%
. subclass(SoberingUp, PsychologicalProcess)
%{SoberingUp
"The process of transitioning from a state of 
being Drunk to a state of being Sober."}%
. subclass(Sock, Clothing)
%{Sock
"A piece of Clothing that is made of a soft &%Fabric 
like Cotton and that is intended to be worn on the Foot."}%
. subclass(Sofa, Seat)
%{Sofa
"A padded &%Seat that is designed to accommodate more 
than one Human."}%
. subclass(Soldering, Attaching)
%{Soldering
"Attaching two things by means of a &%MetallicAlloy."}%
. subclass(Soldier, SkilledOccupation)
%{Soldier
"The class of &%Positions which involve serving in 
the armed forces of a Nation."}%
. subclass(Somersaulting, BodyMotion)
%{Somersaulting
"Any &%BodyMotion which begins and ends in 
a Sitting position and where the feet roll over the head and return to 
their original position."}%
. subclass(Song, MusicalComposition)
%{Song
"Any &%MusicalComposition which contains &%Lyrics."}%
. subclass(Spear, Weapon)
%{Spear
"A &%Weapon with a long handle and a short 
blade."}%
. subclass(Sphere, ThreeDimensionalFigure)
%{Sphere
"The class of &%ThreeDimensionalFigures such that 
all GeometricPoints that make up the Sphere are equidistant from a 
single GeometricPoint, known as the center of the Sphere."}%
. subclass(SpinalColumn, Bone)
%{SpinalColumn
"A flexible column made out of bones called 
vertebrae. The main function of the SpinalColumn is to protect the 
spinal cord."}%
. subclass(SpinalCord, Organ)
%{SpinalCord
"A cord of nerves that carries impulses to 
and from the Brain.  It is contained within the SpinalColumn."}%
. subclass(Spleen, Organ)
. subclass(Spleen, AnimalAnatomicalStructure)
%{Spleen
"An &%Organ on the left side of the body that produces 
Cells that play a crucial role in immune response."}%
. subclass(SportServe, GameShot)
%{SportServe
"A &%GameShot which is part of a &%Sport and 
which serves to start the Sport, e.g. the beginning shot in Tennis, 
Badminton or Squash."}%
. subclass(SportsAttribute, GameAttribute)
%{SportsAttribute
"Any &%GameAttribute that is specific to 
a Sport."}%
. subclass(SportsFacility, StationaryArtifact)
%{SportsFacility
"A specially designated and maintained facility 
where Sports are played.  Note that this covers sports fields, stadiums, 
and gymnasiums."}%
. subclass(SportsLeague, Organization)
%{SportsLeague
"An Organization whose members are &%SportsTeams 
and whose purpose is to set up games between its members."}%
. subclass(SportsPlay, Plan)
%{SportsPlay
"A Plan for a Maneuver within a &%TeamSport."}%
. subclass(SportsPosition, SkilledOccupation)
%{SportsPosition
"A &%Position which is filled by someone on a 
&%SportsTeam and which represents the role played by the person on the team."}%
. subclass(SportsTeam, Organization)
%{SportsTeam
"An Organization which habitually plays a &%Sport 
together, either as an occupation or as a leisure activity."}%
. subclass(Spraying, LiquidMotion)
. subclass(Spraying, Transfer)
%{Spraying
"Any instance of Transfer of a &%Liquid which is 
accomplished by converting the Liquid into a mist."}%
. instance(SquareMile, UnitOfMeasure)
. subclass(SquareMile, AreaMeasure)
%{SquareMile
"&%SquareMile represents a &%UnitOfMeasure 
equal to one square Mile."}%
. instance(SquareYard, UnitOfMeasure)
. subclass(SquareYard, AreaMeasure)
%{SquareYard
"&%SquareYard represents a &%UnitOfMeasure 
equal to one square YardLength."}%
. subclass(Squirrel, Rodent)
%{Squirrel
"A tree-dwelling &%Rodent with a bushy tail."}%
. subclass(StageCoach, Wagon)
%{StageCoach
"A Wagon that is pulled by &%Horses and whose purpose 
was to transport Humans and their luggage from one City to the next, especially 
in areas which did not have an established transportation system, e.g. the old west."}%
. subclass(Stairway, StationaryArtifact)
%{Stairway
"A &%StationaryArtifact which allows one to climb, step 
by step, from one level to another."}%
. subclass(StandardBearer, Soldier)
%{StandardBearer
"Any &%Soldier who is tasked with carrying the colors of 
his/her unit in Battles and parades."}%
. subclass(Starch, Carbohydrate)
%{Starch
"A complex &%Carbohydrate that is the main form in 
which Carbohydrates are stored."}%
. subclass(Starving, Killing)
%{Starving
"Killing someone by depriving them of &%Food."}%
. subclass(SteamEngine, Engine)
%{SteamEngine
"&%SteamEngine is the subclass of &%Engines 
that produce mechanical power from heat and steam pressure."}%
. subclass(SteeringWheel, VehicleController)
%{SteeringWheel
"A &%VehicleController which enables one to steer 
a Vehicle."}%
. subclass(Steroid, OrganicCompound)
. subclass(Steroid, BiologicallyActiveSubstance)
%{Steroid
"A class of &%OrganicCompounds having the same basic 
chemical structure and having significant physiological effects."}%
. subclass(Stimulant, BiologicallyActiveSubstance)
. disjoint(Stimulant, Depressant)
%{Stimulant
"Any &%BiologicallyActiveSubstance which has 
the effect of stimulating the central nervous system, i.e. increasing 
function or activity in the Brain or SpinalCord."}%
. subclass(Stirring, LiquidMotion)
. subclass(Stirring, Combining)
%{Stirring
"Any instance of &%LiquidMotion which is also an 
instance of Combining two or more Liquids."}%
. subclass(Store, Building)
%{Store
"A &%Building that has the purpose of housing
&%FinancialTransactions."}%
. instance(vX, Store) =>
      hasPurpose(vX,
                 True
                     when exists vEV: U
                              . instance(vEV, FinancialTransaction)
                                /\ located(vEV, vX)
                     else False)
. subclass(Stove, HeatingDevice)
%{Stove
"A &%HeatingDevice which consists one or more burners for 
heating pots and pans of Food."}%
. subclass(Strangling, Grabbing)
%{Strangling
"Any instance of &%Grabbing where the patient is 
someone else's throat and the intention is to make it impossible for the other 
person to breathe."}%
. subclass(Streetcar, ElectrifiedRailwayCar)
%{Streetcar
"Streetcar is the subclass of 
&%ElectrifiedRailwayCars that run on tracks laid into, along, or 
beside city Streets."}%
. subclass(Stretching, Lengthening)
%{Stretching
"Lengthening an object by pulling two sides 
of it in opposite directions."}%
. subclass(String, Artifact)
%{String
"A long, thin strand of Fabric that is used for &%Tying 
things together, etc.  Note that this class covers a cord of any width, including 
rope, twine, and thread, for example."}%
. subclass(StringInstrument, MusicalInstrument)
%{StringInstrument
"A &%MusicalInstrument which is played by 
striking strings, either directly as with a guitar or indirectly via keys 
as with Pianos."}%
. subclass(Submarine, Watercraft)
%{Submarine
"A &%Watercraft which is capable of travelling 
under the water level by filling tanks water."}%
. subclass(SubwaySystem, RailTransportationSystem)
%{SubwaySystem
"Any &%RailTransportationSystem that runs 
exclusively through Tunnels."}%
. subclass(Suffocating, Killing)
%{Suffocating
"Killing someone by asphyxiation, i.e. by 
depriving them of oxygen."}%
. subclass(Sugar, Carbohydrate)
%{Sugar
"A simple &%Carbohydrate that has a sweet taste and 
consists mostly or entirely of sucrose."}%
. subclass(Suicide, Killing)
%{Suicide
"Any instance of &%Killing where the agent and 
the patient are identical."}%
. subclass(Sunlight, RadiatingLight)
%{Sunlight
"Any instance of &%RadiatingLight where the 
Sun (Sol) is the origin."}%
. subclass(Surgeon, MedicalDoctor)
%{Surgeon
"The &%Profession of being a surgeon, i.e. being a 
medical doctor who specializes in performing surgical operations."}%
. subclass(Swamp, StaticWaterArea)
%{Swamp
"Swamp is a subclass of &%StaticWaterAreas that are 
stagnant and relatively shallow.  They are situated in low, wet land with 
grasses and possibly trees as vegetation."}%
. subclass(Sweeping, Removing)
%{Sweeping
"Removing small particles from the floor by means of 
a Broom."}%
. subclass(SwimmingPool, FluidContainer)
. subclass(SwimmingPool, StationaryArtifact)
%{SwimmingPool
"A &%FluidContainer that is filled with &%Water 
and that is used for Swimming."}%
. subclass(SwitchDevice, EngineeringComponent)
%{SwitchDevice
"An &%EngineeringComponent which is capable of turning 
an ElectricDevice on and off."}%
. subclass(Sword, Weapon)
%{Sword
"A &%Weapon with a long blade and covered 
handle."}%
. subclass(Tableware, Device)
%{Tableware
"Devices that are used in Ingesting (&%Eating 
and/or Drinking) a meal.  This coves dishware, flatware, and glassware."}%
. subclass(Tail, AnimalAnatomicalStructure)
%{Tail
"A &%BodyPart which extends from the rear of the 
main body of some Vertebrates."}%
. subclass(Taillight, VehicleLight)
%{Taillight
"Any &%VehicleLight which is attached to the back 
of a Vehicle."}%
. subclass(TakingIll, PathologicProcess)
%{TakingIll
"Any &%Process where the experiencer contracts a 
&%DiseaseOrSyndrome."}%
. subclass(TaxReturn, FormText)
%{TaxReturn
"A &%FormText that is used for calculating the amount 
of income tax owed in a given year."}%
. subclass(Taxicab, Automobile)
%{Taxicab
"An &%Automobile which is used to transport people 
on short trips in exchange for a fare."}%
. subclass(Tea, Beverage)
. subclass(Tea, PreparedFood)
%{Tea
"A &%Beverage which is prepared by infusing tea leaves 
into hot water."}%
. subclass(Teacher, Profession)
%{Teacher
"The &%Profession of being a teacher."}%
. subclass(TeamSport, Sport)
%{TeamSport
"Any Sport which is played by &%SportsTeams, e.g. 
Baseball and Football."}%
. subclass(TearSubstance, LiquidBodySubstance)
. subclass(TearSubstance, SalineSolution)
%{TearSubstance
"The class of &%SalineSolutions produced by 
the lacrimal glands of the Eyes."}%
. subclass(Telegraph, ElectricDevice)
. subclass(Telegraph, CommunicationDevice)
%{Telegraph
"A Device that permits &%LinguisticCommunication 
between remote points by means of a code of aural dots and dashes that can 
be converted into letters of an alphabet."}%
. subclass(TelephoneLine, WireLine)
%{TelephoneLine
"A &%WireLine that carries telephone signals and 
allows users of Telephones or Telegraphs to communicate with one another."}%
. subclass(TelevisionReceiver, ReceiverDevice)
%{TelevisionReceiver
"A &%TelevisionReceiver is a &%Device for 
receiving television broadcast signals from a TelevisionStation."}%
. subclass(TellingALie, Stating)
%{TellingALie
"Any Stating which is both &%False and believed 
to be False by the agent of the Stating."}%
. instance(vT, TellingALie)
  /\ agent(vT, vAGENT)
  /\ patient(vT, vFORMULA)
  /\ instance(vFORMULA, Formula) =>
      holdsDuring(WhenFn(vT), believes(vAGENT, a_n_o_t(vFORMULA)))
. subclass(Tendon, Tissue)
. subclass(Tendon, AnimalSubstance)
%{Tendon
"Tissue that connects Muscle to &%Bone."}%
. subclass(TestForm, FormText)
. subclass(TestForm, MeasuringDevice)
%{TestForm
"A &%FormText which is intended to measure some aspect 
of the cognitive capabilities, e.g. intelligence or knowledge of a domain, 
of the person taking the test."}%
. subclass(Testament, Certificate)
%{Testament
"A &%Certificate that describes how a person's 
property is to be distributed after the death of the person."}%
. subclass(Thanking, ExpressingApproval)
%{Thanking
"Any &%ExpressingApproval to a person for something 
that the person did in the past and that is regarded as being to the thanker's 
benefit."}%
. subclass(TheaterProfession, EntertainmentProfession)
%{TheaterProfession
"Often know as the stage, &%Positions which 
involve performing live plays."}%
. subclass(Thumb, Finger)
%{Thumb
"The thick, short Finger of each &%Hand."}%
. subclass(Thunder, WeatherProcess)
. subclass(Thunder, RadiatingSound)
%{Thunder
"Any instance of &%RadiatingSound which is caused by 
an instance of Lightning."}%
. subclass(ThyroidHormone, Hormone)
%{ThyroidHormone
"A Hormone secreted by the &%ThyroidGland."}%
. subclass(Ticket, Certificate)
%{Ticket
"A &%Certificate that allows the holder to perform 
a specified act once, e.g. ride a bus, attend a concert, obtain a prize, 
etc."}%
. subclass(TieClothing, Clothing)
%{TieClothing
"Clothing that is intended to be worn around the 
Neck and knotted at the front."}%
. subclass(Tilling, Digging)
%{Tilling
"Any Process of &%Digging, e.g. breaking and 
turning over the earth that facilitates Agriculture."}%
. subclass(Toad, Amphibian)
%{Toad
"An Amphibian that lacks a &%Tail and lives at least 
partially outside of water."}%
. subclass(Tobacco, FloweringPlant)
%{Tobacco
"A &%FloweringPlant containing nicotine whose leaves 
are dried and then smoked or ingested."}%
. subclass(Toilet, Device)
%{Toilet
"A &%Device for urination and defecation."}%
. subclass(Tomb, StationaryArtifact)
%{Tomb
"A &%StationaryArtifact which is meant to contain someone 
who is Dead."}%
. subclass(TonalLanguage, SpokenHumanLanguage)
%{TonalLanguage
"Any &%SpokenHumanLanguage that uses pitch to 
differentiate otherwise identical words, e.g. Chinese."}%
%{Towel
"A piece of Fabric which is used for &%Drying."}%
. subclass(Tracing, ContentDevelopment)
. subclass(Tracing, SurfaceChange)
%{Tracing
"Any &%ContentDevelopment that results in a &%Blueprint."}%
. subclass(TractorTrailer, RoadVehicle)
%{TractorTrailer
"&%TractorTrailer is the subclass of 
&%RoadVehicles that are truck tractor- truck trailer combinations."}%
. subclass(TransferringPosition, OrganizationalProcess)
%{TransferringPosition
"Any process within an &%Organization 
where a person is moved from one Position to another, e.g. the promotion 
or demotion of an employee."}%
. subclass(TransportationCompany, CommercialAgent)
%{TransportationCompany
"A &%CommercialAgent whose services 
include Transportation, e.g. a RailroadCompany, an airline, a cruise 
ship line, etc."}%
. subclass(TransportationSystem, Object)
%{TransportationSystem
"&%TransportationSystem is the 
subclass of complex Objects consisting of networks of Transitways 
and TransitJunctions that link together a number of GeographicRegions 
or TransitTerminals.  TransportationSystem covers worldwide 
networks, such as internationally recognized shipping lanes or air 
corridors, also route systems such as those flown by a single airline, 
as well as LocalTransitSystems such as BART (Bay Area Rapid Transit)."}%
. subclass(TrapOrCage, Holder)
%{TrapOrCage
"A Device whose purpose is to trap or cage &%Animals, 
i.e. to be in instrument in an act of Confining."}%
. subclass(Treasurer, SkilledOccupation)
%{Treasurer
"Any &%SkilledOccupation which involves receiving 
and disbursing money."}%
. subclass(TreeBranch, PlantBranch)
%{TreeBranch
"Any &%PlantBranch which is part of a 
&%BotanicalTree."}%
. subclass(TreeGraph, Graph)
%{TreeGraph
"A &%TreeGraph is a &%DirectedGraph that has no 
&%GraphLoops."}%
. subclass(Trembling, Tremor)
. disjoint(Trembling, IntentionalProcess)
. subclass(Tremor, Rotating)
%{Tremor
"Motion that involves rapidly &%Rotating between 
two positions."}%
. subclass(Trespassing, CriminalAction)
. subclass(Trespassing, Translocation)
%{Trespassing
"Entering property that does not belong to one and without 
the permission of the owner of the property."}%
. subclass(Trousers, Clothing)
%{Trousers
"A piece of Clothing that covers each &%Leg 
of a person separately."}%
. subclass(Truck, SelfPoweredRoadVehicle)
%{Truck
"Truck is the subclass of &%RoadVehicles that 
are designed primarily for transporting various kinds of non-passenger 
loads.  Truck is the class of single-bodied trucks or TruckTractors.  
Note: TractorTrailer combinations are a distinct class."}%
. subclass(TruckTractor, Truck)
%{TruckTractor
"&%TruckTractor is the subclass of &%Trucks 
that are used to tow truck trailers.  Truck tractors are the cab portions 
of tractor-trailers.  See also TruckTrailer."}%
. subclass(TruckTrailer, Trailer)
%{TruckTrailer
"&%TruckTrailer is the subclass of &%Trailers 
that are towed by TruckTractors.  These are the trailers used in 
tractor-trailer (semi-trailer) rigs."}%
. subclass(Tube, Artifact)
%{Tube
"A long, narrow, and hollow &%Artifact that is designed for 
moving Fluids from place to another."}%
. subclass(Turbine, Engine)
%{Turbine
"An &%Engine which converts the kinetic energy of a moving 
Liquid (typically Water) into mechanical energy."}%
. subclass(TurningOffDevice, InternalChange)
%{TurningOffDevice
"Any &%Process whose result is that the patient 
of the process is in the state of DeviceOff.  In other words, this class covers 
any process of turning off a device, e.g. turning off the lights, switching off a 
television set, etc."}%
. subclass(TurningOnDevice, InternalChange)
%{TurningOnDevice
"Any &%Process whose result is that the patient 
of the process is in the state of DeviceOn.  In other words, this class covers 
any process of turning on a device, e.g. turning on the lights, switching on a 
television set, etc."}%
. subclass(UnionSoldier, Soldier)
%{UnionSoldier
"Any &%Soldier that served on the union side during 
the American Civil War."}%
. subclass(Urea, OrganicCompound)
%{Urea
"Urea is a dry, soluble, nitrogenous substance 
that is the major solid component of the urine of mammals, and which 
may be synthesized from ammonia and carbon dioxide; it is useful in the 
production of Plastic and in Fertilizers."}%
. subclass(VehicleBrake, VehicleController)
%{VehicleBrake
"A &%VehicleController which is capable of stopping 
the motion of a Vehicle."}%
. subclass(VehicleController, Device)
%{VehicleController
"Any &%Device which is used to start, stop or 
control the movements of a Vehicle.  This class covers steering wheels, brakes, 
acceleration pedals, airplane sticks, etc."}%
. subclass(VehicleLight, IlluminationDevice)
%{VehicleLight
"Any &%IlluminationDevice which is attached to the 
surface of a Vehicle and whose purpose is to illuminate that area around 
the Vehicle so that potential obstacles can be detected or alerted."}%
. subclass(VehicleThrottle, VehicleController)
%{VehicleThrottle
"A &%VehicleController which controls the amount 
of Fuel which is supplied to the Engine."}%
. subclass(VehicleTire, Artifact)
%{VehicleTire
"A covering, usually made of rubber, for a &%Wheel."}%
. subclass(VehicleWheel, Wheel)
%{VehicleWheel
"&%VehicleWheel is a class of cylindrical 
Devices used to move a RoadVehicle along a road, running either  
directly on the wheel rims or on tires attached to the wheel rims."}%
. subclass(VehicleWindow, Window)
%{VehicleWindow
"Any Window which is part of a &%Vehicle, 
e.g. the Windshield and RearWindow of an Automobile."}%
. subclass(Vein, BloodVessel)
. relatedInternalConcept(Vein, Artery)
%{Vein
"Any &%BloodVessel which transfers &%Blood from 
the extremities of the body to the Heart."}%
. subclass(VendingDevice, Device)
%{VendingDevice
"A Device which is capable of Selling a &%Product 
to a customer automatically when the customer inserts the appropriate amount of 
Currency."}%
. subclass(Violin, StringInstrument)
%{Violin
"A &%StringInstrument that has four strings, a hollow 
body, and is played on the shoulder with a bow."}%
. subclass(ViralDisease, InfectiousDisease)
%{ViralDisease
"A disease that is caused by instances of 
Virus."}%
. subclass(VocalMusic, Music)
%{VocalMusic
"Music which is produced (at least in part)
by Singing."}%
. subclass(VocationalSchool, School)
%{VocationalSchool
"Any &%School whose aim is to teach 
students an OccupationalTrade."}%
. subclass(VotingPoll, StationaryArtifact)
%{VotingPoll
"A structure where Voting for an &%Election 
takes place."}%
. subclass(Vowel, AlphabeticCharacter)
%{Vowel
"An &%AlphabeticCharacter that denotes a speech sound that 
does not result in audible friction when it is pronounced."}%
. subclass(Vulture, Bird)
%{Vulture
"A diurnal bird of prey with a bald head that 
feeds on carrion."}%
. subclass(Wading, Walking)
%{Wading
"Any instance of &%Walking which occurs through a 
&%BodyOfWater."}%
. subclass(Wagon, LandVehicle)
%{Wagon
"A &%Landcraft that is not self-propelled, but must be 
pulled by either an Animal or a self-propelled Vehicle to move along the 
ground."}%
. subclass(WalkingCane, Device)
%{WalkingCane
"A &%Device which has the form of a staff with 
a handle and which enables some people to walk with greater assurance."}%
. subclass(Wallpaper, ArtWork)
%{Wallpaper
"Any decorative paper that is used to cover the 
Walls of Rooms."}%
. subclass(Warehouse, CommercialBuilding)
%{Warehouse
"A very large &%CommercialBuilding whose purpose is 
to store commodities."}%
. subclass(WashBasin, WashingDevice)
%{WashBasin
"A &%WashingDevice which is intended to be used by 
Humans for washing their Hands."}%
. subclass(Washing, Removing)
%{Washing
"Removing small particles from something by means of 
a Detergent and Water."}%
. subclass(WashingDevice, Device)
%{WashingDevice
"Any Device whose purpose is &%Washing 
something, e.g. washing machines, dishwashers, bathtubs, etc."}%
. subclass(Wastebasket, Container)
%{Wastebasket
"A &%Container which is used for trash."}%
. subclass(WatchClock, Clock)
%{WatchClock
"A Clock that can be worn on the &%Wrist."}%
. subclass(WaterWave, WaterMotion)
%{WaterWave
"A &%WaterWave is a raised ridge of water 
moving along the surface of a body of water.  The WaterWave moves 
in a direction approximately transverse to the crest line of the wave.  
The patient of the WaterWave is successive regions of water, which 
do not travel in the direction of the wave or with it."}%
. subclass(WatercolorPaint, Paint)
%{WatercolorPaint
"Any Paint which is a water-based &%Solution."}%
. subclass(WatercolorPicture, PaintedPicture)
%{WatercolorPicture
"Any &%PaintedPicture which is created 
with water-based paints."}%
. subclass(Wax, Substance)
%{Wax
"Any &%Substance of high molecular weight that resembles 
beeswax."}%
. subclass(WeaponOfMassDestruction, Weapon)
%{WeaponOfMassDestruction
"Nuclear, chemical and biological weapons.  
What these weapons have in common is that they are designed to kill large numbers 
of people indiscriminately."}%
. subclass(Welfare, Funding)
%{Welfare
"Any Funding which is provided by a &%ServiceOrganization 
to people in need."}%
. subclass(Wheat, CerealGrain)
%{Wheat
"A long &%CerealGrain which is produced by certain grasses and 
which is used to make BreadOrBiscuits."}%
. subclass(Whip, Weapon)
%{Whip
"A &%Weapon that consists of a thin strand of 
Fabric, usually Leather, and a handle by which the strand is 
impelled at a high rate of speed."}%
. subclass(WhiteBloodCell, BloodCell)
%{WhiteBloodCell
"&%BloodCells that lack hemoglobin, contain a 
&%CellNucleus, and have no color."}%
. subclass(WholesaleStore, Agency)
. subclass(WillowTree, BotanicalTree)
%{WillowTree
"A &%BotanicalTree of the genus &%Salix."}%
. subclass(WindInstrument, MusicalInstrument)
%{WindInstrument
"A &%MusicalInstrument which is played by 
blowing it and which uses a reed."}%
. subclass(Windmill, Engine)
%{Windmill
"Windmill is the subclass of &%Engines that 
produce mechanical power from Wind energy."}%
. subclass(Window, Artifact)
%{Window
"An &%Artifact composed of transparent glass or 
plastic that admits light (and possibly air) into a Room, Building 
or Vehicle."}%
. subclass(WindowCovering, Artifact)
%{WindowCovering
"An &%Artifact that is used to cover 
Windows.  Note that this class includes blinds, drapes, shutters, 
etc."}%
. subclass(Windshield, VehicleWindow)
. disjoint(Windshield, RearWindow)
%{Windshield
"Any &%VehicleWindow which located at the front 
of an Automobile."}%
. subclass(Wine, AlcoholicBeverage)
%{Wine
"An &%AlcoholicBeverage that is prepared by fermenting 
the juice of grapes."}%
. subclass(Wing, Limb)
%{Wing
"Any &%Limb which is capable of being an 
instrument in Flying."}%
. subclass(WingDevice, EngineeringComponent)
%{WingDevice
"The wings of Aircraft, i.e. the parts of &%Aircraft 
that allow them to become and remain airborne."}%
. subclass(WireLine, Wire)
. subclass(WireLine, EngineeringComponent)
%{WireLine
"A &%Wire that is designed for conducting electricity."}%
. subclass(WireSpring, Wire)
. subclass(WireSpring, EngineeringComponent)
%{WireSpring
"An &%EngineeringComponent consisting of a coil of 
Wire that returns to its original shape when pulled apart or pressed together."}%
. relatedInternalConcept(Wood, WoodArtifact)
. subclass(WoodArtifact, Artifact)
%{WoodArtifact
"Wood that has been cut (and perhaps treated) for 
some purpose, e.g. Constructing or Combustion.  Note that this class covers 
both lumber and firewood."}%
. subclass(Wool, Fabric)
%{Wool
"Fabric that is made from the Hair of &%Sheep."}%
. subclass(WorkerInsect, Insect)
%{WorkerInsect
"Sterile members of an &%Insect colony which 
are responsible for locating food and caring for eggs, larvae, etc."}%
. subclass(Workshop, StationaryArtifact)
%{Workshop
"A Room, suite of Rooms or &%Building which is 
devoted to hand-crafting Artifacts."}%
. subclass(Wrist, BodyJoint)
%{Wrist
"The joint in the &%Arm connecting the radius and carpal 
bones."}%
. subclass(WritingDevice, Device)
%{WritingDevice
"A &%Device whose purpose is to be an instrument 
of Writing, e.g. pens, pencils, crayons, etc."}%
. subclass(XRayRadiation, Radiating)
%{XRayRadiation
"Electro-magnetic radiation of short wavelength, 
often made use of by devices that scan the inside of objects."}%
%{CenterOfCircleFn
"(CenterOfCircleFn ?CIRCLE) denotes the 
&%GeometricPoint that is the center of the Circle ?CIRCLE."}%
. instance(CenterOfCircleFn, UnaryFunction)
. instance(CenterOfCircleFn, TotalValuedRelation)
. domain(CenterOfCircleFn, a_1, Circle)
. range(CenterOfCircleFn, GeometricPoint)
%{DiameterFn
"(DiameterFn ?CIRCLE) denotes the length of the 
diameter of the Circle ?CIRCLE."}%
. instance(DiameterFn, UnaryFunction)
. instance(DiameterFn, TotalValuedRelation)
. domain(DiameterFn, a_1, Circle)
. range(DiameterFn, LengthMeasure)
%{OccupationFn
"(OccupationFn ?PROCESS) denotes the 
subclass of ?PROCESS where instances of ?PROCESS are performed as 
one's occupation, i.e. as part of a FinancialTransaction where one 
earns money for the performance of ?PROCESS."}%
. instance(OccupationFn, UnaryFunction)
. domain(OccupationFn, a_1, IntentionalProcess)
. rangeSubclass(OccupationFn, FinancialTransaction)
%{RadiusFn
"(RadiusFn ?CIRCLE) denotes the length of the radius 
of the Circle ?CIRCLE."}%
. instance(RadiusFn, UnaryFunction)
. instance(RadiusFn, TotalValuedRelation)
. domain(RadiusFn, a_1, Circle)
. range(RadiusFn, LengthMeasure)
%{StartFn
"(StartFn ?PROCESS) denotes &%IntentionalProcesses 
of bringing it about that Processes of type ?PROCESS begin, e.g. start 
working, begin running, etc."}%
. instance(StartFn, UnaryFunction)
. domain(StartFn, a_1, Process)
. rangeSubclass(StartFn, IntentionalProcess)
%{StopFn
"(StopFn ?PROCESS) denotes &%IntentionalProcesses 
of bringing it about that Processes of type ?PROCESS end, e.g. stop 
walking, quit working, etc."}%
. instance(StopFn, UnaryFunction)
. domain(StopFn, a_1, Process)
. rangeSubclass(StopFn, IntentionalProcess)
. instance(affiliatedOrganization, BinaryPredicate)
. domain(affiliatedOrganization, a_1, CognitiveAgent)
. domain(affiliatedOrganization, a_2, CognitiveAgent)
. subrelation(agent, involvedInEvent)
%{agentOperatesInArea
"(agentOperatesInArea ?ORG ?AREA) means that the &%Organization 
?ORG conducts operations (i.e. instances of IntentionalProcess) in ?AREA."}%
. domain(agentOperatesInArea, a_1, Organization)
. domain(agentOperatesInArea, a_2, GeopoliticalArea)
. subrelation(agentOperatesInArea, located)
%{allegiance
"(allegiance ?AGENT ?ENTITY) means that the &%CognitiveAgent 
?AGENT owes its allegiance to the political entity ?ENTITY."}%
. instance(allegiance, BinaryPredicate)
. domain(allegiance, a_1, CognitiveAgent)
. domain(allegiance, a_2, CognitiveAgent)
%{ancestorOrganization
"(ancestorOrganization ?ORG1 ?ORG2) means that 
the Organization ?ORG1 descended from the Organization ?ORG2."}%
. instance(ancestorOrganization, BinaryPredicate)
. instance(ancestorOrganization, TransitiveRelation)
. instance(ancestorOrganization, IrreflexiveRelation)
. domain(ancestorOrganization, a_1, Organization)
. domain(ancestorOrganization, a_2, Organization)
. disjointRelation(ancestorOrganization, subOrganization)
%{anniversary
"(anniversary ?PHYSICAL ?TIME) means that 
?TIME is the class of TimeIntervals which mark the anniversary of 
?PHYSICAL.  For example, (anniversary Christmas (DayFn 35 December)) 
means that Christmas is celebrated each year on the 25th of December."}%
. instance(anniversary, BinaryPredicate)
. instance(anniversary, TemporalRelation)
. domain(anniversary, a_1, Physical)
. domain(anniversary, a_2, TimeInterval)
%{aunt
"(aunt ?AUNT ?PERSON) means that ?AUNT is 
the sister of a parent of ?PERSON."}%
. domain(aunt, a_1, Woman)
. domain(aunt, a_2, Human)
. subrelation(aunt, familyRelation)
%{birthday
"(birthday ?PERSON ?DAY) means that ?DAY is the 
anniversary each year of the birth of ?PERSON.  For example, (birthday 
&%WilliamJeffersonClinton (DayFn 19 August)) means that Bill Clinton's 
birthday is August 19th."}%
. domain(birthday, a_1, Human)
. domain(birthday, a_2, Day)
. subrelation(birthday, anniversary)
%{birthplace
"(birthplace ?INDIV ?PLACE) means that the Animal ?INDIV was born 
at the location ?PLACE.  The location may be a geographic area or a building, such as a hospital."}%
. instance(birthplace, BinaryPredicate)
. domain(birthplace, a_1, Animal)
. domain(birthplace, a_2, Object)
%{brandName
"(brandName ?NAME ?PRODUCT) means that ?NAME 
is the brand name for the product class ?PRODUCT, e.g. Cheerios is the 
brand name for a certain class of breakfast cereal."}%
. domain(brandName, a_2, Product)
. subrelation(brandName, names)
. domain(brandName, a_1, SymbolicString)
. subrelation(causes, relatedEvent)
. subrelation(contestParticipant, involvedInEvent)
%{cousin
"(cousin ?PERSON1 ?PERSON2) means that ?PERSON1 
and ?PERSON2 are cousins, i.e. ?PERSON1 and ?PERSON2 have grandparents 
(but not parents) in common."}%
. domain(cousin, a_1, Human)
. domain(cousin, a_2, Human)
. subrelation(cousin, familyRelation)
. instance(customer, AsymmetricRelation)
%{defendant
"(defendant ?AGENT ?ACTION) means the &%LegalAction 
?ACTION makes a legal claim against ?AGENT."}%
. domain(defendant, a_1, CognitiveAgent)
. domain(defendant, a_2, LegalAction)
. subrelation(defendant, patient)
. subrelation(defendant, involvedInEvent)
. relatedInternalConcept(dependentGeopoliticalArea,
                         primaryGeopoliticalSubdivision)
. subrelation(destination, involvedInEvent)
%{detainee
"(detainee ?EVENT ?OBJECT) means that in the 
Confining ?EVENT, the Object ?OBJECT is restrained by force, threat, or 
other form of intimidation."}%
. instance(detainee, CaseRole)
. domain(detainee, a_1, Confining)
. domain(detainee, a_2, Animal)
. subrelation(detainee, patient)
. subrelation(detainee, involvedInEvent)
%{deviceState
"(deviceState ?DEVICE ?STATE) means that 
the Object ?DEVICE is in the DeviceStateAttribute ?STATE."}%
. instance(deviceState, BinaryPredicate)
. domain(deviceState, a_1, Object)
. domain(deviceState, a_2, DeviceStateAttribute)
. subrelation(direction, involvedInEvent)
%{equipmentType
"(equipmentType ?THING ?TYPE) means that 
the Artifact ?THING has a component or attachment of Device ?TYPE. 
See also equipmentTypeCount."}%
. instance(equipmentType, BinaryPredicate)
. domain(equipmentType, a_1, Artifact)
. domain(equipmentType, a_2, Device)
. subrelation(experiencer, involvedInEvent)
%{experimentalControl
"(experimentalControl ?EXPERIMENT ?OBJ) 
means that the Object ?OBJ serves as a control in the instance of 
Experimenting ?EXPERIMENT, i.e. ?OBJ is the standard against which something 
else in the experiment can be compared."}%
. instance(experimentalControl, CaseRole)
. domain(experimentalControl, a_1, Experimenting)
. domain(experimentalControl, a_2, Object)
. subrelation(experimentalControl, involvedInEvent)
%{financialAccount
"A formal banking, brokerage, or business 
relationship established to provide for regular services, dealings, and 
other financial transactions.  (accountAt ?ACCOUNT ?ORG) means that 
?ACCOUNT is a financial account opened at the FinancialCompany 
?ORG."}%
. domain(financialAccount, a_1, FinancialAccount)
. domain(financialAccount, a_2, FinancialCompany)
. subrelation(financialAccount, agreementMember)
%{financialAsset
"A predicate that relates an &%Agent to any 
item of economic value owned by the Agent.  Examples of financial assets 
are cash, securities, accounts receivable, inventory, office equipment, a 
house, a car, and other property."}%
. domain(financialAsset, a_1, Agent)
. domain(financialAsset, a_2, Object)
. subrelation(financialAsset, possesses)
%{formerName
"(formerName ?NAME ?THING) means that the 
string ?NAME is a name formerly used for ?THING."}%
. subrelation(formerName, names)
%{grammaticalRelation
"(grammaticalRelation ?PHRASE ?SENTENCE) 
means that the Phrase ?PHRASE has a grammatical relation to the Sentence 
?SENTENCE, i.e. it is a subject, object, main verb, etc. of the ?SENTENCE."}%
. instance(grammaticalRelation, BinaryPredicate)
. domain(grammaticalRelation, a_1, Phrase)
. domain(grammaticalRelation, a_2, Sentence)
%{grandfather
"(grandfather ?PERSON ?PARENT) means that 
?PARENT is the grandfather of ?PERSON."}%
. domain(grandfather, a_1, Human)
. domain(grandfather, a_2, Man)
. subrelation(grandfather, familyRelation)
%{grandmother
"(grandmother ?PERSON ?PARENT) means that 
?PARENT is the grandmother of ?PERSON."}%
. domain(grandmother, a_1, Human)
. domain(grandmother, a_2, Man)
. subrelation(grandmother, familyRelation)
%{headquartersOfOrganization
"(headquartersOfOrganization ?ORG ?AREA) 
means that the Organization ?ORG is headquartered in ?AREA."}%
. domain(headquartersOfOrganization, a_1, Organization)
. domain(headquartersOfOrganization, a_2, GeopoliticalArea)
. subrelation(headquartersOfOrganization, located)
%{hostileForces
"(hostileForces ?UNIT1 ?UNIT2) means that 
the MilitaryUnits ?UNIT1 and ?UNIT2 are, respectively, allied with 
&%GeopoliticalAreas that are at war with one another."}%
. instance(hostileForces, BinaryPredicate)
. instance(hostileForces, IrreflexiveRelation)
. domain(hostileForces, a_1, MilitaryUnit)
. domain(hostileForces, a_2, MilitaryUnit)
%{ideologicalAffiliationOfOrganization
"(ideologicalAffiliationOfOrganization 
?ORG ?GOV) means that one of the goals of ?ORG is to realize the FormOfGovernment ?GOV."}%
. instance(ideologicalAffiliationOfOrganization, BinaryPredicate)
. domain(ideologicalAffiliationOfOrganization, a_1, Organization)
. domain(ideologicalAffiliationOfOrganization, a_2,
         FormOfGovernment)
. subrelation(instrument, involvedInEvent)
%{intelligenceQuotient
"(intelligenceQuotient ?PERSON ?NUMBER) 
means that ?NUMBER is the I.Q. of ?PERSON.  The I.Q. of a person is the ratio 
of their mental age (determined by a standardized test) divided by their 
chronological age, multiplied by 100."}%
. instance(intelligenceQuotient, BinaryPredicate)
. instance(intelligenceQuotient, SingleValuedRelation)
. domain(intelligenceQuotient, a_1, Human)
. domain(intelligenceQuotient, a_2, RationalNumber)
%{inventory
"(inventory ?CBO ?COLLECTION) means that 
the ContentBearingObject ?CBO contains a list or enumeration of the 
members of the Collection ?COLLECTION."}%
. instance(inventory, BinaryPredicate)
. domain(inventory, a_1, ContentBearingObject)
. domain(inventory, a_2, Collection)
%{involvedInEvent
"(involvedInEvent ?EVENT ?THING) means 
that in the Process ?EVENT, the Entity ?THING plays some CaseRole."}%
. instance(involvedInEvent, BinaryPredicate)
. instance(involvedInEvent, AsymmetricRelation)
. domain(involvedInEvent, a_1, Process)
. domain(involvedInEvent, a_2, Entity)
%{landlord
"(landlord ?PERSON ?UNIT) means that ?PERSON is a 
landlord of the Residence ?UNIT, i.e. he or she owns ?UNIT and is renting 
the unit to someone else."}%
. instance(landlord, BinaryPredicate)
. domain(landlord, a_1, Human)
. domain(landlord, a_1, PermanentResidence)
%{lastName
"(lastName ?CHAR ?INDIV) means that the 
&%SymbolicString ?CHAR contains the last (surname or family) name of the 
Human ?INDIV."}%
. instance(lastName, BinaryPredicate)
. instance(lastName, AsymmetricRelation)
. domain(lastName, a_1, SymbolicString)
. domain(lastName, a_2, Human)
. subrelation(lastName, names)
%{localLongName
"(localLongName ?NAME ?THING) means that 
the string ?NAME is the long form of the name used for ?THING in its local 
area or language."}%
. subrelation(localLongName, names)
%{localShortName
"(localShortName ?NAME ?THING) means that 
the string ?NAME is the short form of the name used for ?THING in its 
local area or language."}%
. subrelation(localShortName, names)
%{loss
"The amount by which the cost of an investment or 
business operation exceeds its return, i.e. the negative quantity left 
after subtracting for all expenses."}%
. instance(loss, AsymmetricRelation)
. domain(loss, a_1, FinancialTransaction)
. domain(loss, a_2, CurrencyMeasure)
%{measurementReading
"(measurementReading ?DEVICE ?QUANTITY) 
means that ?QUANTITY is a reading of the MeasuringDevice ?DEVICE, e.g. if 
?THERMOMETER is a Thermometer, (measurementReading ?THERMOMETER 
(MeasureFn 42 CelsiusDegree)) would mean that ?THERMOMETER registers 42 
degrees Celsius."}%
. instance(measurementReading, BinaryPredicate)
. domain(measurementReading, a_1, MeasuringDevice)
. domain(measurementReading, a_2, ConstantQuantity)
%{middleName
"(middleName ?CHAR ?INDIV) means that the 
&%SymbolicString ?CHAR contains the middle name of the Human ?INDIV."}%
. instance(middleName, BinaryPredicate)
. instance(middleName, AsymmetricRelation)
. domain(middleName, a_1, SymbolicString)
. domain(middleName, a_2, Human)
. subrelation(middleName, names)
%{multiplicativeFactor
"(multiplicativeFactor ?NUMBER1 ?NUMBER2) 
means that ?NUMBER1 is a factor of ?NUMBER2, i.e. ?NUMBER1 can be multiplied by 
some Integer to give ?NUMBER2 as a result."}%
. instance(multiplicativeFactor, BinaryPredicate)
. instance(multiplicativeFactor, TransitiveRelation)
. domain(multiplicativeFactor, a_1, Integer)
. domain(multiplicativeFactor, a_2, Integer)
%{nephew
"(nephew ?NEPHEW ?PERSON) means that ?NEPHEW is 
the son of a sibling of ?PERSON."}%
. domain(nephew, a_1, Man)
. domain(nephew, a_2, Human)
. subrelation(nephew, familyRelation)
%{niece
"(niece ?NIECE ?PERSON) means that ?NIECE is 
the daughter of a sibling of ?PERSON."}%
. domain(niece, a_1, Woman)
. domain(niece, a_2, Human)
. subrelation(niece, familyRelation)
%{occupation
"(occupation ?PERSON ?TYPE) means that the occupation 
of ?PERSON is ?TYPE.  This predicate is most often used in combination with the 
function OccupationFn, e.g. (occupation PoliceOfficerWilkins (OccupationFn 
&%LawEnforcement))."}%
. instance(occupation, BinaryPredicate)
. domain(occupation, a_1, Human)
. domain(occupation, a_2, FinancialTransaction)
%{older
"(older ?OBJ1 ?OBJ2) means that ?OBJ1 is older than 
?OBJ2, i.e. the age of ?OBJ1 is greaterThan the age of ?OBJ2."}%
. instance(older, BinaryPredicate)
. domain(older, a_1, Object)
. domain(older, a_2, Object)
%{onboard
"(onboard ?OBJ ?VEHICLE) means that the 
&%SelfConnectedObject ?OBJ is inside the Vehicle ?VEHICLE."}%
. domain(onboard, a_1, SelfConnectedObject)
. domain(onboard, a_2, Vehicle)
. subrelation(onboard, located)
%{parasite
"(parasite ?ORGANISM1 ?ORGANISM2) means that there 
is a parasitic relationship between ?ORGANISM1 and ?ORGANISM2, i.e. ?ORGANISM1 
inhabits and obtains nourishment from ?ORGANISM2 in such a way that 
?ORGANISM2 is injured."}%
. instance(parasite, BinaryPredicate)
. domain(parasite, a_1, Organism)
. domain(parasite, a_2, Organism)
. subrelation(path, involvedInEvent)
%{pathInSystem
"(pathInSystem ?PATH ?SYSTEM) means that 
the Physical thing ?PATH consists of one or more connected routes in 
the PhysicalSystem ?SYSTEM."}%
. instance(pathInSystem, BinaryPredicate)
. domain(pathInSystem, a_1, Transitway)
. domain(pathInSystem, a_2, TransportationSystem)
. subrelation(pathInSystem, part)
. subrelation(patient, involvedInEvent)
%{placeOfDeath
"(placeOfDeath ?INDIV ?PLACE) means that the Animal ?INDIV died 
at the location ?PLACE.  The location may be a geographic area or a building, such as a hospital."}%
. instance(placeOfDeath, BinaryPredicate)
. domain(placeOfDeath, a_1, Animal)
. domain(placeOfDeath, a_2, Object)
%{plaintiff
"(plaintiff ?AGENT ?ACTION) means that ?AGENT 
is responsible for initiating the LegalAction ?ACTION."}%
. domain(plaintiff, a_1, CognitiveAgent)
. domain(plaintiff, a_2, LegalAction)
. subrelation(plaintiff, agent)
. subrelation(plaintiff, involvedInEvent)
%{potentialOfHydrogen
"(potentialOfHydrogen ?SOLUTION ?NUMBER) 
means that the Solution ?SOLUTION has a pH value of ?NUMBER.  The ph varies 
between 0 and 14, and it is a measure of the acidity or alkalinity of ?SOLUTION.  
More precisely,  and it is the logarithm of the reciprocal of the quantity of 
&%AtomGrams of Hydrogen ions."}%
. instance(potentialOfHydrogen, BinaryPredicate)
. domain(potentialOfHydrogen, a_1, Solution)
. domain(potentialOfHydrogen, a_2, RealNumber)
%{powerPlant
"(powerPlant ?GENERATOR ?THING) means that 
the Device ?GENERATOR is the power-producing component of the Artifact 
?THING which provides the energy for its operation."}%
. instance(powerPlant, BinaryPredicate)
. instance(powerPlant, AsymmetricRelation)
. instance(powerPlant, IrreflexiveRelation)
. domain(powerPlant, a_1, Device)
. domain(powerPlant, a_2, Artifact)
. subrelation(powerPlant, component)
%{quarter
"(quarter ?QUART ?WHOLE) means that ?QUART is a 
quarter of ?WHOLE."}%
. subrelation(quarter, part)
%{reactant
"(reactant ?PROCESS ?SUBSTANCE) means that ?SUBSTANCE 
is a chemical reactant in the chemical reaction ?PROCESS, i.e. ?SUBSTANCE is 
present at the beginning of the chemical reaction ?PROCESS."}%
. domain(reactant, a_1, ChemicalProcess)
. domain(reactant, a_2, Substance)
. subrelation(reactant, resource)
%{reagent
"(reagent ?PROCESS ?SUBSTANCE) means that ?SUBSTANCE 
is a chemical agent in the chemical reaction ?PROCESS."}%
. domain(reagent, a_1, ChemicalProcess)
. domain(reagent, a_2, Substance)
. subrelation(reagent, instrument)
%{registeredItem
"(registeredItem ?DOCUMENT ?ITEM) means 
that the Text ?DOCUMENT contains an official record of the Physical 
thing ?ITEM.  The registered item could be an object or an event, e.g., 
an automobile, a ship, a marriage, an adoption."}%
. instance(registeredItem, BinaryPredicate)
. domain(registeredItem, a_1, Text)
. domain(registeredItem, a_2, Physical)
. subrelation(registeredItem, refers)
%{relatedEvent
"(relatedEvent ?EVENT1 ?EVENT2) means 
that the Process ?EVENT1 is related to the Process ?EVENT2.  The 
relationship is between separate individual events, not events and 
their subprocesses.  On the other hand, two subProcesses of the same 
overarching event may be relatedEvents.  The argument order does not 
imply temporal ordering."}%
. instance(relatedEvent, BinaryPredicate)
. instance(relatedEvent, SymmetricRelation)
. domain(relatedEvent, a_1, Process)
%{religiousAffiliationOfOrganization
"(religiousAffiliationOfOrganization 
?ORG ?BELIEF) means that one of the goals of ?ORG is to advance the religious teachings 
of the BeliefGroup ?BELIEF."}%
. instance(religiousAffiliationOfOrganization, BinaryPredicate)
. domain(religiousAffiliationOfOrganization, a_1, Organization)
. domain(religiousAffiliationOfOrganization, a_2, BeliefGroup)
. subrelation(resource, involvedInEvent)
. subrelation(a_r_e_s_u_l_t, involvedInEvent)
%{routeInSystem
"(routeInSystem ?PART ?SYSTEM) means that 
the Transitway ?PART is an established route of the 
&%TransportationSystem ?SYSTEM."}%
. instance(routeInSystem, BinaryPredicate)
. domain(routeInSystem, a_1, Transitway)
. domain(routeInSystem, a_2, TransportationSystem)
. subrelation(routeInSystem, pathInSystem)
%{secretesSubstance
"(secretesSubstance ?OBJ ?STUFF) means 
that the subclass of OrganicObject (either Organism or BodyPart) 
?OBJ produces the subclass of Substance ?STUFF."}%
. instance(secretesSubstance, BinaryPredicate)
. domain(secretesSubstance, a_1, OrganicObject)
. domain(secretesSubstance, a_2, NaturalSubstance)
%{sententialObject
"(sententialObject ?OBJECT ?SENTENCE) 
means that the NounPhrase ?OBJECT is the object of the Sentence 
?SENTENCE."}%
. domain(sententialObject, a_1, NounPhrase)
. domain(sententialObject, a_2, Sentence)
. subrelation(sententialObject, grammaticalRelation)
%{sententialSubject
"(sententialSubject ?SUBJECT ?SENTENCE) 
means that the NounPhrase ?SUBJECT is the subject of the Sentence 
?SENTENCE."}%
. domain(sententialSubject, a_1, NounPhrase)
. domain(sententialSubject, a_2, Sentence)
. subrelation(sententialSubject, grammaticalRelation)
%{speaksLanguage
"(speaksLanguage ?AGENT ?LANGUAGE) means that the 
&%SentientAgent ?AGENT is capable of understanding and/or generating the Language 
?LANGUAGE."}%
. instance(speaksLanguage, BinaryPredicate)
. domain(speaksLanguage, a_1, SentientAgent)
. domain(speaksLanguage, a_2, Language)
%{stepfather
"(stepfather ?PERSON ?FATHER) means that ?FATHER 
is the stepfather of ?PERSON, i.e. ?FATHER is the spouse of the mother 
of ?PERSON, without also being the father of ?PERSON."}%
. domain(stepfather, a_1, Human)
. domain(stepfather, a_2, Man)
. subrelation(stepfather, legalRelation)
%{stepmother
"(stepmother ?PERSON ?MOTHER) means that ?MOTHER 
is the stepmother of ?PERSON, i.e. ?MOTHER is the spouse of the father 
of ?PERSON, without also being the mother of ?PERSON."}%
. domain(stepmother, a_1, Human)
. domain(stepmother, a_2, Woman)
. subrelation(stepmother, legalRelation)
%{stockHolder
"(stockHolder ?Stock ?Agent) means that 
?Agent possesses the Stock ?Stock."}%
. instance(stockHolder, BinaryPredicate)
. domain(stockHolder, a_1, Stock)
. domain(stockHolder, a_2, CognitiveAgent)
%{subRegion
"(subRegion ?PART ?WHOLE) means that the Region 
?PART is a part of the Region ?WHOLE."}%
. domain(subRegion, a_1, Region)
. domain(subRegion, a_2, Region)
. subrelation(subRegion, part)
. instance(targetInAttack, BinaryPredicate)
. domain(targetInAttack, a_1, Process)
. domain(targetInAttack, a_2, Object)
%{tenant
"(tenant ?PERSON ?UNIT) means that ?PERSON is a tenant 
of the Residence ?UNIT, i.e. he or she is renting the unit."}%
. instance(tenant, BinaryPredicate)
. domain(tenant, a_1, Human)
. domain(tenant, a_2, Residence)
%{third
"(third ?THIRD ?WHOLE) means that ?THIRD is one 
third of ?WHOLE."}%
. subrelation(third, part)
%{uncle
"(uncle ?UNCLE ?PERSON) means that ?UNCLE is 
the brother of a parent of ?PERSON."}%
. domain(uncle, a_1, Man)
. domain(uncle, a_2, Human)
. subrelation(uncle, familyRelation)
%{wavelength
"(wavelength ?RADIATION ?MEASURE) means that the 
instance of radiation, ?RADIATION, has an average wavelength of ?MEASURE."}%
. instance(wavelength, SingleValuedRelation)
. domain(wavelength, a_1, Radiating)
. domain(wavelength, a_2, LengthMeasure)
. subrelation(wavelength, measure)
%{yearOfFounding
"(yearOfFounding ?ORG ?NUMBER) means that the &%Organization 
?ORG was founded in the year expressed in ?NUMBER."}%
. instance(yearOfFounding, BinaryPredicate)
. instance(yearOfFounding, AsymmetricRelation)
. domain(yearOfFounding, a_1, Organization)
. domain(yearOfFounding, a_2, Integer)
. instance(Anthropology, SocialScience)
%{Anthropology
"The field of anthropology."}%
. instance(Architecture, FieldOfStudy)
%{Architecture
"The &%FieldOfStudy of designing &%Buildings, i.e. 
creating Blueprints for Buildings."}%
. instance(BaseballStrike, BaseballManeuver)
. disjoint(BaseballStrike, BaseballHit)
. instance(BeforeCommonEra, TimeInterval)
%{BeforeCommonEra
"The &%TimeInterval that runs from 
&%NegativeInfinity to the time of the birth of Christ."}%
. instance(CommonEra, TimeInterval)
%{CommonEra
"The &%TimeInterval that runs from the supposed 
time of the death of Christ to PositiveInfinity."}%
. instance(ConfederateStatesOfAmerica, GeopoliticalArea)
%{ConfederateStatesOfAmerica
"The eleven states of the &%UnitedStates 
that tried to secede from the UnitedStates."}%
. instance(ContainerEmpty, RelationalAttribute)
%{ContainerEmpty
"&%ContainerEmpty is the &%Attribute of a 
Container that is empty."}%
. instance(ContainerFull, RelationalAttribute)
%{ContainerFull
"&%ContainerFull is the &%Attribute of a 
Container that is full to capacity."}%
. instance(Deaf, BiologicalAttribute)
%{Deaf
"The Attribute that applies to Animals and &%Humans 
that are unable to hear."}%
. instance(DemocraticParty, PoliticalParty)
%{DemocraticParty
"One of the two major political parties in 
the UnitedStates.  The DemocraticParty represents liberal values."}%
. instance(DeviceClosed, DeviceStateAttribute)
. instance(DeviceClosed, RelationalAttribute)
. instance(DeviceOff, DeviceStateAttribute)
. instance(DeviceOff, InternalAttribute)
. instance(DeviceOn, DeviceStateAttribute)
. instance(DeviceOn, InternalAttribute)
. instance(DeviceOpen, DeviceStateAttribute)
. instance(DeviceOpen, RelationalAttribute)
. instance(Diarrhea, DiseaseOrSyndrome)
%{Diarrhea
"A &%DiseaseOrSyndrome of frequent, watery bowel 
movements.  Severe cases can be fatal for the young or weak.  It is
a common cause of death for the very young in poor developing countries."}%
. instance(Drugged, ConsciousnessAttribute)
. contraryAttribute(Drugged, Sober)
%{Drugged
"The &%ConsciousnessAttribute of someone whose motor and/or 
cognitive faculties are significantly impaired by a BiologicallyActiveSubstance."}%
. subAttribute(Drunk, Drugged)
%{Drunk
"The &%ConsciousnessAttribute of someone whose motor and 
cognitive faculties are significantly impaired by Alcohol."}%
. instance(Emphysema, DiseaseOrSyndrome)
%{Emphysema
"A &%DiseaseOrSyndrome that affects the &%Lungs and 
which results in a decrease of breathing ability."}%
. instance(EnglishLanguage, SpokenHumanLanguage)
. subAttribute(Excitement, Happiness)
%{Excitement
"The state of being happy about a state of 
affairs that might occur in the future."}%
. instance(Fever, DiseaseOrSyndrome)
%{Fever
"Having a body temperature which is (significantly) greater 
than 98.6 degrees Fahrenheit.  This syndrome is often associated with dehydration 
and chills."}%
. instance(Florida, AmericanState)
%{Florida
"A state in the southeastern &%UnitedStates between 
the Gulf of Mexico and the Atlantic Ocean."}%
. instance(Foul, SportsAttribute)
%{Foul
"A &%SportsAttribute that indicates that the &%GamePiece of 
a Sport is no longer in play because it has gone beyond the limits of the 
sports field."}%
. instance(Fragile, BreakabilityAttribute)
%{Fragile
"An &%Attribute which indicates that the 
associated Object is very breakable."}%
. instance(FrenchLanguage, SpokenHumanLanguage)
. instance(FrenchLanguage, NaturalLanguage)
%{FrenchLanguage
"A &%Romance language that is the official language 
of France and Belgium, and is widely spoken in Africa."}%
. instance(GermanLanguage, SpokenHumanLanguage)
. instance(GermanLanguage, NaturalLanguage)
%{GermanLanguage
"A &%Germanic language that is spoken primarily in 
Germany and Austria."}%
. instance(Goiter, DiseaseOrSyndrome)
%{Goiter
"A &%DiseaseOrSyndrome which is due to an &%Iodine deficiency 
and which results in an enlarged &%ThyroidGland."}%
. instance(Governor, Position)
%{Governor
"The head of the &%Government of an &%AmericanState."}%
. instance(GreekLanguage, SpokenHumanLanguage)
. instance(GreekLanguage, NaturalLanguage)
%{GreekLanguage
"An Indo-European language that is spoken in &%Greece."}%
. instance(Handstand, BodyPosition)
%{Handstand
"The &%BodyPosition where one rests on one's hands 
and extends one's feet in the air."}%
. subAttribute(Headache, Pain)
%{Headache
"&%Pain that that is restricted to the &%Head."}%
. subAttribute(Housewife, Unemployed)
%{Housewife
"A role occupied by a wife who manages the home 
while her husband earns income for the family."}%
. instance(Hungry, BiologicalAttribute)
%{Hungry
"The &%Attribute that applies to &%Animals and &%Humans 
when they want &%Food."}%
. subAttribute(Illegal, Prohibition)
. contraryAttribute(Illegal, Legal)
%{Illegal
"A proposition is &%Illegal just in case it is inconsistent 
with any proposition that is a &%Law."}%
. instance(InteriorDesign, FieldOfStudy)
%{InteriorDesign
"The &%FieldOfStudy of designing the interiors of 
&%Buildings."}%
. instance(Kneeling, BodyPosition)
%{Kneeling
"The &%BodyPosition of resting one's weight on one's 
&%Knees."}%
. instance(Knight, SocialRole)
%{Knight
"A &%SocialRole that is assigned by the 
&%UnitedKingdomOfGreatBritianAndNorthernIreland to persons for 
reasons of personal merit."}%
. instance(LatinLanguage, SpokenHumanLanguage)
. instance(LatinLanguage, NaturalLanguage)
%{LatinLanguage
"A &%Language that was spoken in ancient &%Rome and 
is still the official language of the Vatican."}%
. subAttribute(Legal, Permission)
%{Legal
"A proposition is &%Legal just in case it is not inconsistent 
with any proposition that is a Law."}%
. instance(LevelShape, ShapeAttribute)
%{LevelShape
"The &%ShapeAttribute of &%Objects where no 
part of the top of the &%Object is higher than any other part of the 
top."}%
. instance(LieutenantGovernor, Position)
%{LieutenantGovernor
"The second-in-command of some &%Governments 
of &%AmericanStates."}%
. instance(LiteracyAttribute, TraitAttribute)
%{LiteracyAttribute
"The ability to read and write.  Someone who 
has this &%Attribute is able to read and write."}%
. instance(Literature, FieldOfStudy)
%{Literature
"The study of literature, i.e. instances of &%FictionalText 
that are regarded as having special merit."}%
. subAttribute(MarriageContract, Contract)
%{MarriageContract
"A &%Contract between a married couple 
about how assets owned by the couple will be distributed in the event 
that the couple is divorced."}%
. instance(Mayor, Position)
%{Mayor
"The head of the &%Government of a &%City."}%
. instance(NaziParty, PoliticalParty)
%{NaziParty
"The German &%PoliticalParty headed by Adolf Hitler."}%
. instance(OrangeColor, SecondaryColor)
%{OrangeColor
"A &%SecondaryColor that results from mixing &%Red 
and &%Yellow and resembles the color of a ripe orange fruit."}%
. instance(Pliable, ShapeAttribute)
%{Pliable
"The shape of an &%Object with this &%Attribute 
can be altered."}%
. instance(PoliticalScience, SocialScience)
%{PoliticalScience
"The field of political science."}%
. instance(Pope, Position)
%{Pope
"The &%Position of head of the &%RomanCatholicChurch."}%
. instance(Pregnant, BiologicalAttribute)
%{Pregnant
"The Attribute that applies to Female &%Animals and 
&%Humans that have an embryo or fetus growing inside of them as the result of 
having one of the &%Female's &%Eggs fertilized."}%
. instance(PresidentOfTheUnitedStates, Position)
%{PresidentOfTheUnitedStates
"The position of being head of the 
&%UnitedStates."}%
. subAttribute(Puberty, NonFullyFormed)
%{Puberty
"The &%DevelopmentalAttribute of having functional sex 
glands which are not fully mature."}%
. instance(Purple, SecondaryColor)
%{Purple
"A &%SecondaryColor that results from mixing &%Red and 
&%Blue."}%
. instance(RepublicanParty, PoliticalParty)
%{RepublicanParty
"One of the two major political parties in 
the &%UnitedStates.  The RepublicanParty represents traditional, 
conservative values."}%
. instance(RussianLanguage, SpokenHumanLanguage)
. instance(RussianLanguage, NaturalLanguage)
%{RussianLanguage
"A Slavic language that is spoken in &%Russia."}%
. subAttribute(Satisfaction, Happiness)
%{Satisfaction
"The state of being happy about a state of
affairs that occurred in the past.  In cases where that state of affairs 
is the product of one's own doing, this is known as pride."}%
. instance(Sober, ConsciousnessAttribute)
%{Sober
"The &%ConsciousnessAttribute of someone whose motor and
cognitive faculties are not significantly impaired by a &%BiologicallyActiveSubstance."}%
. instance(SpanishLanguage, SpokenHumanLanguage)
. instance(SpanishLanguage, NaturalLanguage)
%{SpanishLanguage
"A &%Romance language that is the official language 
of Spain, Mexico, and many Central and South American countries."}%
. instance(Splitting, BodyPosition)
%{Splitting
"The &%BodyPosition of extending one's &%Legs at 
right angles to one's &%Torso."}%
. instance(SportsOut, SportsAttribute)
%{SportsOut
"A &%SportsAttribute that indicates that a player in 
a &%Sport can no longer compete because he has been tagged with the &%GamePiece."}%
. subAttribute(Squatting, Sitting)
%{Squatting
"Sitting on one's heels."}%
. instance(Stressed, LinguisticAttribute)
%{Stressed
"A &%LinguisticAttribute of &%Syllables.  It denotes 
the quality of being emphasized over the other &%Syllables in the same 
&%Word."}%
. instance(SymmetricShape, ShapeAttribute)
%{SymmetricShape
"A &%ShapeAttribute that applies to a 
&%SelfConnectedObject that can be divided into two copies of each other."}%
. instance(TieScore, ContestAttribute)
%{TieScore
"The &%ContestAttribute that applies to all &%contestParticipants 
in a &%Contest when none of them have &%Won or &%Lost the &%Contest."}%
. instance(Tourist, SocialRole)
%{Tourist
"&%Tourist is a &%SocialRole assumed by a person 
who is travelling for pleasure."}%
. subAttribute(Treaty, Contract)
%{Treaty
"Any &%Contract which holds between two or more 
Nations."}%
. instance(Tuberculosis, BacterialDisease)
%{Tuberculosis
"A &%BacterialDisease caused by the Tubercle &%Bacillus 
that results in lesions on various body parts, especially the Lungs."}%
. instance(Unbreakable, BreakabilityAttribute)
. contraryAttribute(Unbreakable, Fragile)
%{Unbreakable
"An &%Attribute which indicates that the 
associated &%Object cannot be broken."}%
. instance(UnionStatesOfAmerica, GeopoliticalArea)
%{UnionStatesOfAmerica
"The states of the &%UnitedStates that the 
&%ConfederateStatesOfAmerica seceded from."}%
. instance(UnitedKingdomOfGreatBritainAndNorthernIreland,
           EuropeanNation)
%{UnitedKingdomOfGreatBritainAndNorthernIreland
"The &%Nation comprising 
England, Scotland, Wales, and Northern Ireland."}%
. instance(UnitedStatesDepartmentOfAgriculture,
           GovernmentOrganization)
%{UnitedStatesDepartmentOfAgriculture
"Provides services to farmers in 
the UnitedStates."}%
. instance(UnitedStatesDepartmentOfDefense, GovernmentOrganization)
%{UnitedStatesDepartmentOfDefense
"Entrusted with the national 
security of the &%UnitedStates."}%
. instance(UnitedStatesHouseOfRepresentatives,
           LegislativeOrganization)
. part(UnitedStatesHouseOfRepresentatives, UnitedStatesCongress)
%{UnitedStatesHouseOfRepresentatives
"One of the two legislatures 
that make up the &%UnitedStatesCongress."}%
. instance(UnitedStatesPostalService, GovernmentOrganization)
%{UnitedStatesPostalService
"The &%GovernmentOrganization of the 
&%UnitedStates that is entrusted with delivering the mail."}%
. instance(UnitedStatesSenate, LegislativeOrganization)
. part(UnitedStatesSenate, UnitedStatesCongress)
%{UnitedStatesSenate
"One of the two legislatures that make 
up the &%UnitedStatesCongress."}%
. instance(Veteran, SocialRole)
%{Veteran
"The &%Attribute that applies to someone who was a 
&%Soldier at one time, but is not currently a &%Soldier."}%
. instance(Widowed, SocialRole)
%{Widowed
"The &%Attribute that applies to someone who was 
married to someone who has died, and who has not remarried."}%
. holdsDuring(vNOW, attribute(vP, Widowed)) =>
      (exists vBEFORE: U; vSPOUSE: U
           . earlier(vBEFORE, vNOW)
             /\ holdsDuring(vBEFORE, spouse(vSPOUSE, vP)))
      /\ not (exists vOTHER: U . holdsDuring(vNOW, spouse(vOTHER, vP)))

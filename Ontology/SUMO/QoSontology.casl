sort U
ops Abort, Abstract, AbstractionLevelAttribute, AddressFn,
    AsymmetricRelation, Attribute, AutomaticApplication,
    BerkeleySoftwareDistribution, BinaryPredicate, BinaryRelation,
    BitsPerSecond, BusNetwork, CPU, CPUUtilizationFn,
    CentralProcessingUnit, CognitiveAgent, ComplexityAttribute,
    ComputationalSystem, Computer, ComputerComponent, ComputerData,
    ComputerDirectory, ComputerFile, ComputerHardware,
    ComputerInputDevice, ComputerMemory, ComputerNetwork,
    ComputerOutputDevice, ComputerPassword, ComputerPath,
    ComputerPathAttribute, ComputerProcess, ComputerProgram,
    ComputerResource, ComputerResponse, ComputerStatus, ComputerTask,
    ComputerTerminal, ComputerUser, ConsoleApplication,
    ConstantQuantity, ContentBearingObject, ContinuousPath,
    DataCompression, DataSaving, DataSink, DataTransfer, Database,
    DesignPatternAttribute, DeterministicDataStream, DynamicDataStream,
    ElectricDevice, EngineeringComponent, EnvironmentSoftwareAttribute,
    Epoch, Executable, Feedback, FormOfAdaptationAttribute,
    HardDiskDrive, HardwareSystem, HighPriority, HostDown, HostReady,
    IPAddress, ImageFile, InitialProfileFn, Integer, InternalChange,
    LAN, List, LowPriority, MeasuringPerformance,
    MonitorApplicationCmd, MonitorComponentCmd, MonitorConnectivityCmd,
    MonitoringProgram, Multitasking, NetworkAdapter, NetworkResource,
    OperatingSystem, Optimization, Packet, PacketsPerSecond,
    PathImportanceFunction, PhysicalAddress, PhysicalQuantity,
    PositiveInteger, PositiveRealNumber, Predicate, Printer,
    PriorityAttribute, ProcessFailure, ProcessState, ProcessStatus,
    ProcessSuccess, ProcessTask, Product, Quantity,
    QuasicontinuousPath, QuintaryPredicate, RM_StartApplication,
    RealNumber, RealtimeSystem, RealtimeSystemAttribute,
    ReplicationsOnSameHostOK, Report, ResourceManagementProgram,
    Restartable, ReusingAResource, RingNetwork, SatisfyingRequirements,
    ScalabilityCombining, ScalabilitySplitting, Scalable, Sensor,
    Server, ShutdownBlock, ShutdownFn, SoftwareAttribute,
    SoftwareSystem, Solaris, StarNetwork, StartupBlock, StartupFn,
    StochasticDataStream, StrictnessAttribute, SymbolicString,
    SystemBehaviorAttribute, TaskRelationAttribute, TernaryPredicate,
    TernaryRelation, TimeDependentQuantity, TimeDuration, TimePoint,
    TimePosition, TimingRequirementAttribute, TransientPath,
    UnaryFunction, UniformResourceIdentifier, UniformResourceLocator,
    UniformResourceName, UnitOfMeasure, UnixEpoch, UserAccount,
    UserName, UserRequest, UsingAResource, Utility,
    VariableArityRelation, a_0, a_1, a_1_9_7_0, a_2, a_3, a_4, a_5,
    a_A_s_s_e_s_s_m_e_n_t_Minus_D_e_s_i_g_n_P_a_t_t_e_r_n, a_At_R_O_W,
    a_C_o_n_c_u_r_r_e_n_c_y_Minus_F_o_r_m_O_f_A_d_a_p_t_a_t_i_o_n,
    a_D_e_p_e_n_d_e_n_t_Minus_T_a_s_k_R_e_l_a_t_i_o_n,
    a_F_i_r_m_Minus_S_t_r_i_c_t_n_e_s_s,
    a_G_u_i_d_a_n_c_e_Minus_D_e_s_i_g_n_P_a_t_t_e_r_n,
    a_H_a_r_d_Minus_S_t_r_i_c_t_n_e_s_s,
    a_H_y_b_r_i_d_Minus_S_t_r_i_c_t_n_e_s_s,
    a_H_y_b_r_i_d_Minus_S_y_s_t_e_m_B_e_h_a_v_i_o_r,
    a_I_m_p_o_r_t_a_n_c_e_Minus_S_t_r_i_c_t_n_e_s_s,
    a_I_n_d_e_p_e_n_d_e_n_t_Minus_T_a_s_k_R_e_l_a_t_i_o_n,
    a_I_n_i_t_i_a_t_i_o_n_Minus_D_e_s_i_g_n_P_a_t_t_e_r_n,
    a_I_n_s_t_r_u_m_e_n_t_Minus_A_b_s_t_r_a_c_t_i_o_n_L_e_v_e_l,
    a_M_e_t_h_o_d_Minus_A_b_s_t_r_a_c_t_i_o_n_L_e_v_e_l,
    a_M_u_l_t_i_p_l_e_R_e_q_u_i_r_e_m_e_n_t_Minus_C_o_m_p_l_e_x_i_t_y,
    a_O_b_j_e_c_t_Minus_A_b_s_t_r_a_c_t_i_o_n_L_e_v_e_l,
    a_P_e_r_i_o_d_i_c_Minus_S_y_s_t_e_m_B_e_h_a_v_i_o_r,
    a_P_r_e_c_i_s_i_o_n_Minus_F_o_r_m_O_f_A_d_a_p_t_a_t_i_o_n,
    a_R_e_s_o_u_r_c_e_A_l_l_o_c_a_t_i_o_n_Minus_F_o_r_m_O_f_A_d_a_p_t_a_t_i_o_n,
    a_S_i_n_g_l_e_R_e_q_u_i_r_e_m_e_n_t_Minus_C_o_m_p_l_e_x_i_t_y,
    a_S_l_a_c_k_Minus_F_o_r_m_O_f_A_d_a_p_t_a_t_i_o_n,
    a_S_o_f_t_Minus_S_t_r_i_c_t_n_e_s_s,
    a_T_a_s_k_G_r_o_u_p_Minus_A_b_s_t_r_a_c_t_i_o_n_L_e_v_e_l,
    a_T_a_s_k_Minus_A_b_s_t_r_a_c_t_i_o_n_L_e_v_e_l,
    a_T_r_a_n_s_i_e_n_t_Minus_S_y_s_t_e_m_B_e_h_a_v_i_o_r,
    a_U_t_i_l_i_t_y_Minus_S_t_r_i_c_t_n_e_s_s,
    a_r_M_P_r_o_g_r_a_m_Minus_o_f, abstractionLevel, attribute,
    bandwidthOf, batchInterArrival, batchLatency, benchmarkPerformance,
    collectRate, commandLineArguments, complexity, componentDataID,
    computerResponseTo, computerRunning, containsInformation,
    criticalityLevel, dataID, dataProcessed, dataStreamSlack,
    defaultNetwork, dependencyDelay, dependencyType, designPattern,
    directoryOf, environmentAttributes, formOfAdaptation, frequency,
    granularity, hardwareType, hasAccount, hasDependency,
    heartBeatRate, hostJitter, hostOf, hostStatus, imageResolution,
    instrument, ipAddressOf, load, maximumReplications, measure,
    memorySize, minimumReplications, monitorApplicationData,
    monitorComponentData, monitorConnectivityData, names, numberOfCPUs,
    password, patient, performanceResult, portNumber, possesses,
    priority, processAborted, processID, processList, productModel,
    programCopy, programRunning, property, qoSSlack, represents,
    requestRate, resourceUsed, responseRate, responseTime, runningOn,
    runsOn, sendRate, settlingTime, shutdownOf, simpleDeadline,
    slidingWindowSize, softwarePath, standardErrorDevice,
    standardInputDevice, standardOutputDevice, startupOf,
    startupTimeDelay, stateOfProcess, status, strictness,
    systemBehavior, systemMeasured, task, taskRelation, thresholdOf,
    unitMeasuringPerformance, userName
        : U;
    AddressFn, BeginFn, CardinalityFn, EndFn, ImmediateFutureFn,
    ImmediatePastFn, ListFn, StartupFn, WhenFn, YearFn
        : U -> U;
    DayFn, HourFn, KappaFn, ListOrderFn, MeasureFn, MinuteFn, MonthFn,
    SecondFn, memorySize, programRunning
        : U * U -> U
preds processList : U;
      a_r_M_P_r_o_g_r_a_m_Minus_o_f, a_v_e_r_s_i_o_n, agent, complexity,
      component, computerResponseTo, computerRunning, connected,
      contraryAttribute, dataProcessed, dataStreamSlack, dependencyDelay,
      dependencyType, designPattern, destination, directoryOf, disjoint,
      duration, earlier, finishes, greaterThanOrEqualTo, hardwareType,
      hasAccount, hasDependency, hasPurpose, holdsDuring, inList,
      instance, instrument, lessThan, load, located, maximumReplications,
      measure, meetsTemporally, minimumReplications,
      monitorApplicationData, origin, part, password, patient,
      processAborted, productModel, programCopy, programRunning,
      property, range, refers, represents, resourceUsed, responseTime,
      runningOn, runsOn, shutdownOf, standardErrorDevice,
      standardInputDevice, standardOutputDevice, starts, startupOf,
      startupTimeDelay, status, strictness, subAttribute, subclass,
      subrelation, subsumesContentInstance, systemBehavior,
      systemMeasured, task, time, unitMeasuringPerformance, userName,
      uses : U * U;
      benchmarkPerformance, domain, domainSubclass,
      exhaustiveDecomposition, monitorComponentData,
      performanceResult : U * U * U;
      disjointDecomposition : U * U * U * U;
      componentDataID : U * U * U * U * U
vars vAbort, vAccount, vAddress, vAgent, vApplication, vAttribute,
     vComponent, vCompression, vComputer, vCopy, vData, vDelay,
     vDestination, vDevice, vDirectory, vEvent, vFeedback, vFile,
     vHardDrive, vHardware, vHardwareSystem, vID, vInstance, vLoad,
     vMaxCopies, vMeasure, vMemory, vMinCopies, vModel, vMonitor,
     vMonitorCopy, vNA, vName, vNet, vNetwork, vNewMemory, vNumber,
     vNumber1, vNumber2, vOrigin, vPassword, vPath, vProcess, vProcess1,
     vProcess2, vProcessor, vProgram, vProgram1, vProgram2, vPurpose,
     vRM, vRMCopy, vRequest, vResource, vResponse, vReusing, vSave,
     vSend, vShutdown, vSink, vSoftware, vStartup, vState, vSystem,
     vTask, vTest, vTime, vTime1, vTime2, vTransfer, vType, vURI, vURL,
     vUnit, vUser, vUsing, vVersion: U
. instance(productModel, AsymmetricRelation)
. subrelation(productModel, represents)
. domain(productModel, a_1, SymbolicString)
. domainSubclass(productModel, a_2, Product)
%{productModel
"(productModel ?Model ?Product) means that 
?Model represents the type of the Product ?Product"}%
. subclass(ComputationalSystem, Product)
%{ComputationalSystem
"Instances of &%ComputationalSystems 
include instances of &%SoftwareSystems, &%HardwareSystems, and 
&%ComputerNetworks."}%
. subclass(Computer, ElectricDevice)
%{Computer
"A general-purpose machine that processes 
data according to a set of instructions that are stored internally 
either temporarily or permanently."}%
. subclass(ComputerNetwork, ComputationalSystem)
%{ComputerNetwork
"The network includes the network 
operating system in the client and server machines, the cables 
connecting them and all supporting hardware in between such as 
bridges, routers and switches."}%
. subclass(LAN, ComputerNetwork)
. disjointDecomposition(LAN, BusNetwork, StarNetwork, RingNetwork)
%{LAN
"A computer network that spans a relatively small 
area. Most LANs are confined to a single building or group of buildings. 
However, one LAN can be connected to other LANs over any distance via 
telephone lines and radio waves."}%
. subclass(BusNetwork, LAN)
%{BusNetwork
"A network in which all nodes are connected 
to a single wire (the bus) that has two endpoints. Ethernet 10Base-2 
and 10Base-5 networks, for example, are bus networks. Other common 
network types include &%StarNetworks and &%RingNetworks."}%
. subclass(StarNetwork, LAN)
%{StarNetwork
"A local-area network (LAN) that uses a star 
topology in which all nodes are connected to a central computer."}%
. subclass(RingNetwork, LAN)
%{LAN
"A local-area network (LAN) whose topology is a ring. 
That is, all of the nodes are connected in a closed loop.  Messages 
travel around the ring, with each node reading those messages addressed 
to it."}%
. subclass(ComputerHardware, EngineeringComponent)
%{ComputerHardware
"The hardware is the physical part of 
a computer system."}%
. instance(vHardware, ComputerHardware) <=>
      (exists vComputer: U
           . instance(vComputer, Computer) /\ component(vHardware, vComputer))
. subclass(ComputerMemory, ComputerHardware)
%{ComputerMemory
"The computer's workspace (physically, 
a collection of RAM chips). It is an important resource, since it 
determines the size and number of programs that can be run at the 
same time, as well as the amount of data that can be processed 
instantly."}%
. subclass(HardDiskDrive, ComputerHardware)
%{HardDiskDrive
"The primary computer storage medium, which 
is made of one or more aluminum or glass platters, coated with a 
ferromagnetic material. Most hard disks are fixed disks, which are 
permanently sealed in the drive."}%
. subclass(CPU, ComputerHardware)
%{CPU
"CPU (Central Processing Unit) is the computing part 
of the computer."}%
. subclass(DataTransfer, ComputerProcess)
%{DataTransfer
"A subclass of &%ComputerProcesses which 
send data over a computer channel or bus."}%
. instance(vTransfer, DataTransfer) =>
      exists vOrigin: U; vDestination: U; vSystem: U; vData: U
          . origin(vTransfer, vOrigin)
            /\ destination(vTransfer, vDestination)
            /\ instrument(vTransfer, vSystem)
            /\ patient(vTransfer, vData)
            /\ instance(vData, ComputerData)
            /\ instance(vSystem, HardwareSystem)
            /\ instance(vOrigin, HardwareSystem)
            /\ instance(vDestination, ComputationalSystem)
. subclass(ComputerProcess, InternalChange)
%{ComputerProcess
"An instance of &%ComputerProcess is a 
process which manipulates data in the computer."}%
. instance(vProcess, ComputerProcess) =>
      exists vComputer: U; vProgram: U
          . instance(vComputer, Computer)
            /\ computerRunning(vProcess, vComputer)
            /\ instance(vProgram, ComputerProgram)
            /\ programRunning(vProcess, vProgram)
. programRunning(vProcess, vProgram) =>
      exists vComputer: U . runningOn(vProgram, vComputer)
. subclass(ComputerFile, ComputerData)
%{ComputerFile
"A collection of bytes stored as an 
individual entity. All data on disk is stored as a file with an 
assigned file name that is unique within the folder (directory) 
it resides in."}%
. subclass(ComputerDirectory, ComputerFile)
%{ComputerDirectory
"This is the class of catalogs that 
identify and locate instances of &%ComputerFiles.  The catalog's entries 
consist of at least &%ComputerFile names and a physical address on a memory
device of the &%ComputerFile or an index (e.g., file descriptor) into a 
table of &%ComputerFile physical addresses.  &%ComputerDirectories are thus 
collections of data elements and must be named and stored on memory devices; 
hence, &%ComputerDirectory is a subset of &%ComputerFile."}%
. instance(runningOn, BinaryRelation)
. domain(runningOn, a_1, ComputerProgram)
. domain(runningOn, a_2, Computer)
%{runningOn
"(runningOn ?Program ?Computer) holds if the 
&%ComputerProgram ?Program is being executed on ?Computer."}%
. runningOn(vProgram, vComputer) =>
      exists vProcess: U
          . programRunning(vProcess, vProgram)
            /\ computerRunning(vProcess, vComputer)
. subrelation(computerRunning, instrument)
. domain(computerRunning, a_1, ComputerProcess)
. domain(computerRunning, a_2, Computer)
%{computerRunning
"(&%computerRunning ?Process ?Computer) 
means that the ComputerProcess ?Process is running on ?Computer."}%
. instance(programRunning, BinaryPredicate)
. domain(programRunning, a_1, ComputerProcess)
. domain(programRunning, a_2, ComputerProgram)
%{programRunning
"(&%programRunning ?Process ?Program) 
means that the &%ComputerProcess ?Process is executing the 
&%ComputerProgram ?Program."}%
. instance(directoryOf, BinaryPredicate)
. domain(directoryOf, a_1, ComputerFile)
. domain(directoryOf, a_2, ComputerDirectory)
%{directoryOf
"(&%directoryOf ?FILE ?DIRECTORY) means that 
the &%ComputerFile ?FILE is in the &%ComputerDirectory ?DIRECTORY."}%
. subclass(PhysicalAddress, SymbolicString)
%{PhysicalAddress
"The collection of all addresses which 
identify a location of a &%ComputerFile."}%
. instance(AddressFn, UnaryFunction)
. domain(AddressFn, a_1, ComputerFile)
. range(AddressFn, PhysicalAddress)
%{AddressFn
"(&%AddressFn ?FILE) returns as its value the 
physical address of the &%ComputerFile ?FILE."}%
. instance(vDirectory, ComputerDirectory)
  /\ instance(vFile, ComputerFile)
  /\ directoryOf(vFile, vDirectory) =>
      refers(AddressFn(vFile), vDirectory)
. subclass(BitsPerSecond, TimeDependentQuantity)
. instance(BitsPerSecond, UnitOfMeasure)
%{BitsPerSecond
"The measurement of the speed of data 
transfer in a communications system."}%
. subclass(PacketsPerSecond, TimeDependentQuantity)
. instance(PacketsPerSecond, UnitOfMeasure)
%{PacketsPerSecond
"The rate or speed of &%Packet-Networks 
transferred in a second."}%
. subclass(Packet, ComputerData)
%{Packet
"A block of data used for transmission in packet 
switched systems."}%
. subclass(SoftwareSystem, ComputationalSystem)
%{SoftwareSystem
"This is the class of mutually supportive 
groups of instances of &%ComputerProgram for a single general purpose. 
For example, a database management system is a collection of many instances
of &%ComputerProgram that work together to store, retrieve, modify, and 
delete data."}%
. instance(vSystem, SoftwareSystem) =>
      forall vProgram: U; vProcess: U
          . part(vProgram, vSystem) /\ programRunning(vProcess, vProgram) =>
                exists vPurpose: U . hasPurpose(vProcess, vPurpose)
. subclass(HardwareSystem, ComputerHardware)
. subclass(HardwareSystem, ComputationalSystem)
%{HardwareSystem
"The class of hardware systems is the 
connection of three types of physical modules: instances of 
&%ComputerProcessor(s), &%ComputerMemory, and &%ComputerNetwork. 
&%ComputerProcessors execute instructions from &%ComputerPrograms, 
which usually include instructions to read and write data from 
memory, and send data via instances of &%ComputerNetworks."}%
. instance(vSoftware, SoftwareSystem)
  /\ instance(vProcess, ComputerProcess)
  /\ programRunning(vProcess, vSoftware) =>
      exists vHardware: U
          . instance(vHardware, HardwareSystem)
            /\ computerRunning(vProcess, vHardware)
. instance(vSystem, HardwareSystem) =>
      exists vProcessor: U; vMemory: U; vNetwork: U
          . instance(vProcessor, CPU)
            /\ component(vSystem, vProcessor)
            /\ instance(vMemory, ComputerMemory)
            /\ component(vSystem, vMemory)
            /\ instance(vNetwork, ComputerNetwork)
            /\ component(vSystem, vNetwork)
. instance(vSystem, vHardwareSystem)
  /\ component(vNetwork, vSystem)
  /\ instance(vEvent, DataTransfer)
  /\ origin(vEvent, vSystem) =>
      exists vNetwork: U
          . instance(vNetwork, ComputerNetwork)
            /\ instrument(vEvent, vNetwork)
. instance(runsOn, BinaryPredicate)
. instance(runsOn, AsymmetricRelation)
. domain(runsOn, a_1, ComputerProgram)
. domain(runsOn, a_2, Computer)
%{runsOn
"(runsOn ?Program ?Computer) means that ?Program 
is capable of running on ?Computer."}%
. (exists vProcess: U
       . programRunning(vProcess, vProgram)
         /\ computerRunning(vProcess, vComputer)) =>
      runsOn(vProgram, vComputer)
. subclass(StartupBlock, ComputerProgram)
%{StartupBlock
"A typically small instance of &%ComputerProgram 
(a sequence of instructions that will run on a computer) whose function is 
to load and initialize a typically larger instance of &%ComputerProgram 
and start it running."}%
. instance(startupOf, BinaryPredicate)
. domain(startupOf, a_1, StartupBlock)
. domain(startupOf, a_2, ComputerProgram)
%{startupOf
"(&%startupOf ?STARTUP ?PROGRAM) holds just in 
case an instance of &%StartupBlock ?STARTUP specifies a set of instructions 
to start the ?PROGRAM."}%
. instance(vStartup, StartupBlock) =>
      exists vApplication: U . startupOf(vStartup, vApplication)
. startupOf(vStartup, vApplication)
  /\ instance(vProcess1, ComputerProcess)
  /\ programRunning(vProcess1, vStartup)
  /\ WhenFn(vProcess1) = vTime1 =>
      exists vProcess2: U; vTime2: U
          . instance(vProcess2, ComputerProcess)
            /\ programRunning(vProcess2, vApplication)
            /\ WhenFn(vProcess2) = vTime2
            /\ meetsTemporally(vTime1, vTime2)
. instance(StartupFn, UnaryFunction)
. domain(StartupFn, a_1, ComputerProgram)
. range(StartupFn, StartupBlock)
%{StartupFn
"(&%StartupFn ?Program) returns an instance of 
&%StartupBlock which contains the instructions to start the ?Program."}%
. subclass(ShutdownBlock, ComputerProgram)
%{ShutdownBlock
"A typically small instance of 
&%ComputerProgram whose function is to end a typically larger
instance of &%ComputerProgram."}%
. instance(shutdownOf, BinaryPredicate)
. domain(shutdownOf, a_1, ShutdownBlock)
. domain(shutdownOf, a_2, ComputerProgram)
%{shutdownOf
"(&%shutdownOf ?SHUTDOWN ?PROGRAM) holds just 
in case an instance of &%ShutdownBlock ?SHUTDOWN specifies a set of 
instructions to end ?PROGRAM."}%
. instance(vShutdown, ShutdownBlock) =>
      exists vApplication: U . shutdownOf(vShutdown, vApplication)
. shutdownOf(vShutdown, vApplication)
  /\ instance(vProcess1, ComputerProcess)
  /\ programRunning(vProcess1, vShutdown)
  /\ WhenFn(vProcess1) = vTime1 =>
      exists vProcess2: U; vTime2: U
          . instance(vProcess2, ComputerProcess)
            /\ programRunning(vProcess2, vApplication)
            /\ WhenFn(vProcess2) = vTime2
            /\ meetsTemporally(vTime2, vTime1)
. instance(ShutdownFn, UnaryFunction)
. domain(ShutdownFn, a_1, ComputerProgram)
. range(ShutdownFn, ShutdownBlock)
%{ShutdownFn
"(&%ShutdownFn ?Program) returns an instance of 
&%ShutdownBlock which contains the instructions to end ?PROGRAM."}%
. subclass(EnvironmentSoftwareAttribute, Attribute)
%{EnvironmentSoftwareAttribute
"The class of attributes which 
correspond to environment variables.  Environment variables are defined 
outside of a &%ComputerProgram, unlike ordinary variables that are 
defined in the source code of the &%ComputerProgram. Typically, the 
environment variable stores some value that many if not all 
&%ComputerProgams will need when they execute. An example is the
environment variable PATH under Unix-like operating systems that stores 
the &%ComputerDirectories where executable &%ComputerPrograms can be found. 
Another example is the environment variable CLASSPATH for Java programs, 
which stores the directory where Java class files can be found that will be 
needed by any &%ComputerProgram written in Java."}%
. subrelation(environmentAttributes, property)
. domain(environmentAttributes, a_1, ComputerProgram)
. domain(environmentAttributes, a_2, EnvironmentSoftwareAttribute)
%{environmentAttributes
"(&%environmentAttributes ?Program 
?Attribute) holds if ?Attribute is an &%EnvironmentSoftwareAttribute 
which describes the &%ComputerProgram ?Program."}%
. subclass(ComputerInputDevice, ComputerHardware)
%{ComputerInputDevice
"A peripheral device that generates 
input for the computer such as a keyboard, scanner, or mouse."}%
. subclass(ComputerOutputDevice, ComputerHardware)
%{ComputerOutputDevice
"Any peripheral that presents 
output from the computer, such as a screen or printer."}%
. subclass(ComputerTerminal, ComputerOutputDevice)
%{ComputerTerminal
"A &%ComputerOutputDevice for displaying
information on some sort of screen or other reusable output surface.  This
is contrasted with a &%Printer, which places a substance on a surface
that is for practical purposes, permanent."}%
. subrelation(standardInputDevice, instrument)
. domain(standardInputDevice, a_1, ComputerProcess)
. domain(standardInputDevice, a_2, ComputerInputDevice)
%{standardInputDevice
"(&%standardInputDevice ?PROCESS 
?DEVICE) holds just in case the DEVICE is the predefined input channel
with which the running version of the program PROCESS is initialised."}%
. programRunning(vProcess, vProgram) =>
      exists vDevice: U . standardInputDevice(vProcess, vDevice)
. subrelation(standardOutputDevice, instrument)
. domain(standardOutputDevice, a_1, ComputerProcess)
. domain(standardOutputDevice, a_2, ComputerOutputDevice)
%{standardOutputDevice
"(&%standardOutputDevice ?PROGRAM 
?DEVICE) holds just in case the DEVICE is the predefined output channel 
with which the running version of this program is initialised."}%
. programRunning(vProcess, vProgram) =>
      exists vDevice: U . standardOutputDevice(vProcess, vDevice)
. subrelation(standardErrorDevice, instrument)
. domain(standardErrorDevice, a_1, ComputerProcess)
. domain(standardErrorDevice, a_2, ComputerOutputDevice)
%{standardErrorDevice
"(&%standardErrorDevice ?PROGRAM 
?DEVICE) holds just in case the DEVICE is the predefined error channel
with which the running version of this program is initialised."}%
. programRunning(vProcess, vProgram) =>
      exists vDevice: U . standardErrorDevice(vProcess, vDevice)
. instance(hostOf, BinaryPredicate)
. domain(hostOf, a_1, ComputationalSystem)
. domain(hostOf, a_2, Computer)
%{hostOf
"(hostOf ?SYSTEM ?COMPUTER) means that ?COMPUTER 
is the host of the computational system ?SYSTEM."}%
. subclass(ProcessState, ContentBearingObject)
%{ProcessState
"The class of all the information required 
for a &%ComputerProgram to run on a processor. It is a vector that 
contains a pointer to the next program instruction to be executed as well 
as the values of all intermediate and defined variables, the state of the 
processor executing the program, and the allocated address space among 
other data."}%
. instance(vState, ProcessState) =>
      exists vProgram: U
          . instance(vProgram, ComputerProgram)
            /\ (forall vProcess: U
                    . programRunning(vProcess, vProgram) =>
                          represents(vState, vProcess))
. instance(stateOfProcess, BinaryRelation)
. domain(stateOfProcess, a_1, ComputerProcess)
. domain(stateOfProcess, a_2, ProcessState)
%{stateOfProcess
"(&%stateOfProcess ?PROCESS ?STATE) says 
that ?STATE is a state of the &%ComputerProcess ?PROCESS."}%
. subclass(AutomaticApplication, ComputerProgram)
%{AutomaticApplication
"A program which is started 
automatically, as opposed to an application started in response to 
some condition becoming true."}%
. instance(vApplication, AutomaticApplication)
  /\ instance(vSystem, SoftwareSystem)
  /\ part(vApplication, vSystem) =>
      part(StartupFn(vApplication), StartupFn(vSystem))
. subclass(RM_StartApplication, ComputerProgram)
%{RM_StartApplication
"A program started by a Resource 
Management program, which determines if and where to start the 
application."}%
. instance(vRM, RM_StartApplication) =>
      exists vApplication: U; vProcess: U; vRMCopy: U
          . instance(vApplication, ComputerProgram)
            /\ programCopy(vRMCopy, vRM)
            /\ programRunning(vProcess, StartupFn(vApplication))
            /\ agent(vProcess, vRMCopy)
. instance(ConsoleApplication, ComputerProgram)
%{ConsoleApplication
"A Program which is started inside 
an Xterm or other console."}%
. subclass(ResourceManagementProgram, ComputerProgram)
%{ResourceManagementProgram
"The class of resource 
management programs."}%
. instance(a_r_M_P_r_o_g_r_a_m_Minus_o_f, BinaryPredicate)
. domain(a_r_M_P_r_o_g_r_a_m_Minus_o_f, a_1,
         ResourceManagementProgram)
. domain(a_r_M_P_r_o_g_r_a_m_Minus_o_f, a_2, SoftwareSystem)
%{rMProgram-of
"(&%rMProgram-of ?RM ?SYSTEM) means that 
?RM is the resource management program of &%the SoftwareSystem ?SYSTEM."}%
. a_r_M_P_r_o_g_r_a_m_Minus_o_f(vRM, vSystem) =>
      exists vApplication: U; vProcess: U; vRMCopy: U
          . part(vApplication, vSystem)
            /\ programCopy(vRMCopy, vRM)
            /\ programRunning(vProcess, vApplication)
            /\ agent(vProcess, vRMCopy)
. instance(programCopy, AsymmetricRelation)
. subrelation(programCopy, containsInformation)
. domain(programCopy, a_1, ComputerFile)
. domain(programCopy, a_2, ComputerProgram)
%{programCopy
"(&%programCopy ?File ?Program) means that 
the &%ComputerFile ?File is one of the copies of the &%ComputerProgram 
?Program."}%
. instance(criticalityLevel, BinaryPredicate)
. domain(criticalityLevel, a_1, ComputerProgram)
. domain(criticalityLevel, a_2, Integer)
%{criticalityLevel
"(&%criticalityLevel ?PROGRAM ?INTEGER) 
holds just in case ?INTEGER indicates the relative priority of ?PROGRAM 
with respect to other applications within the &%SoftwareSystem."}%
. instance(startupTimeDelay, BinaryRelation)
. domain(startupTimeDelay, a_1, ComputerProgram)
. domain(startupTimeDelay, a_2, TimeDuration)
%{startupTimeDelay
"(&%startupTimeDelay ?PROGRAM ?TIME) 
says that ?TIME is the time to delay after the previous application 
was started before starting the application ?PROGRAM."}%
. (exists vTime1: U; vTime2: U; vTime: U
       . startupTimeDelay(vApplication, vDelay)
         /\ instance(vProcess1, ComputerProcess)
         /\ programRunning(vProcess1, vApplication)
         /\ WhenFn(vProcess1) = vTime1
         /\ instance(vProcess2, ComputerProcess)
         /\ WhenFn(vProcess2) = vTime2
         /\ meetsTemporally(vTime1, vTime)
         /\ meetsTemporally(vTime, vTime2)) =>
      measure(vTime, vDelay)
. subclass(Feedback, ContentBearingObject)
%{Feedback
"The class of all messages to a resource 
management program from one of its processes."}%
. instance(vFeedback, Feedback) <=>
      (exists vRM: U; vProcess: U; vProgram: U
           . a_r_M_P_r_o_g_r_a_m_Minus_o_f(vRM, vProgram)
             /\ programRunning(vProcess, vProgram)
             /\ instance(vSend, DataTransfer)
             /\ patient(vSend, vFeedback)
             /\ destination(vSend, vRM))
. instance(processList, Predicate)
. instance(processList, VariableArityRelation)
%{processList
"The arguments of this relation are data 
structures, each of which contains the information necessary for the 
process already loaded by the operating system to execute on a processor."}%
. processList(a_At_R_O_W)
  /\ inList(vProcess1, ListFn(a_At_R_O_W))
  /\ inList(vProcess2, ListFn(a_At_R_O_W))
  /\ ListOrderFn(ListFn(a_At_R_O_W), vNumber1) = vProcess1
  /\ ListOrderFn(ListFn(a_At_R_O_W), vNumber2) = vProcess2
  /\ lessThan(vNumber1, vNumber2) =>
      earlier(WhenFn(vProcess1), WhenFn(vProcess2))
. instance(settlingTime, BinaryPredicate)
. domain(settlingTime, a_1, ComputerProgram)
. domain(settlingTime, a_2, TimeDuration)
%{settlingTime
"(&%settlingTime ?PROGRAM ?TIME) says that 
?TIME represents seconds to delay after an action was taken with respect 
to QoS."}%
. instance(minimumReplications, BinaryPredicate)
. domain(minimumReplications, a_1, ComputerProgram)
. domain(minimumReplications, a_2, PositiveInteger)
%{minimumReplications
"(&%minimumReplications ?PROGRAM 
?INTEGER) means that ?INTEGER represents the minimum copies of the 
application ?PROGRAM required to be survivable, where a program is 
survivable if the failure of one or more resources does not result 
in the failure of the program.  Either long MTTF for the system as a 
whole or short MTTR when failure occurs would improve the survivability
of a program."}%
. minimumReplications(vApplication, vMinCopies) =>
      greaterThanOrEqualTo(CardinalityFn(KappaFn(vCopy,
                                                 programRunning(vCopy,
                                                                vApplication))),
                           vMinCopies)
. instance(maximumReplications, BinaryPredicate)
. domain(maximumReplications, a_1, ComputerProgram)
. domain(maximumReplications, a_2, PositiveInteger)
%{maximumReplications
"(&%maximumReplications ?PROGRAM ?INTEGER) means that 
?INTEGER represents the maximum number of copies of this application which can be run 
during a process."}%
. maximumReplications(vApplication, vMaxCopies) =>
      greaterThanOrEqualTo(vMaxCopies,
                           CardinalityFn(KappaFn(vCopy,
                                                 programRunning(vCopy,
                                                                vApplication))))
. subclass(IPAddress, PhysicalAddress)
%{IPAddress
"The Internet Protocol address; a numeric address such as 123.231.32.2 that 
the domain name server translates into a domain name."}%
. instance(ipAddressOf, BinaryPredicate)
. domain(ipAddressOf, a_1, Computer)
. domain(ipAddressOf, a_2, IPAddress)
%{ipAddressOf
"(&%ipAddressOf ?HOST ?ADDRESS) holds if ?ADDRESS is the &%IPAddress of 
the computer ?HOST."}%
. instance(portNumber, BinaryPredicate)
. domain(portNumber, a_1, ComputerProgram)
. domain(portNumber, a_2, PositiveInteger)
%{portNumber
"(&%portNumber ?PROGRAM ?NUMBER) holds if ?NUMBER identifies a protocol 
port, i.e. a TCP-IP software abstraction used to distinguish different applications providing 
services within a single destination computer. The different ports on a host are identified by a 
positive 16-bit number."}%
. instance(processID, BinaryPredicate)
. domain(processID, a_1, ComputerProcess)
. domain(processID, a_2, PositiveInteger)
%{processID
"(&%processID ?PROCESS ?NUMBER) holds if ?NUMBER is a unique number 
generated by the operating system and used to refer to the &%ComputerProcess ?PROCESS.  There 
is usually no significance to the numbers as they are reused as old processes die and new processes 
are created."}%
. subclass(ProcessStatus, Attribute)
%{ProcessStatus
"A class of attributes. Each instance of &%ProcessStatus describes a 
status of a &%Process, such as &%ProcessFailure, &%ProcessSuccess, etc."}%
. instance(ProcessFailure, ProcessStatus)
%{ProcessFailure
"An attribute that denotes the failure of the &%Process to achieve 
its goal."}%
. instance(ProcessSuccess, ProcessStatus)
. contraryAttribute(ProcessSuccess, ProcessFailure)
%{ProcessSuccess
"An attribute that denotes the success of the &%Process to achieve 
its goal."}%
. subrelation(status, property)
. domain(status, a_1, ComputerProcess)
. domain(status, a_2, ProcessStatus)
%{status
"(&%status ?PROCESS ?STATUS) holds if ?STATUS is the current status of ?PROCESS."}%
. status(vProcess, ProcessFailure)
  /\ hasPurpose(vProcess, vPurpose) =>
      not holdsDuring(ImmediatePastFn(WhenFn(vProcess)), vPurpose)
. subclass(ComputerComponent, ComputerHardware)
%{ComputerComponent
"An instance of &%ComputerComponent is a 
piece of computer hardware that has measurable performance characteristics 
in terms of different units. Components include hard drives, the performance
of which can be measured in terms of BitsPerSecond required to transfer data 
to and from the drive, network adapters, the performance of which can be 
measured by &%PacketsPerSecond units of data transfered to and from the adapter, 
and other common components like &%ComputerMemory and &%CentralProcessingUnit."}%
. subclass(ComputerMemory, ComputerComponent)
. subclass(HardDiskDrive, ComputerComponent)
. subclass(CentralProcessingUnit, ComputerComponent)
. instance(vComponent, ComputerComponent) =>
      exists vUnit: U . unitMeasuringPerformance(vComponent, vUnit)
. subclass(NetworkAdapter, ComputerComponent)
%{NetworkAdapter
"A network adapter, also known as a Network 
Interface Card or NIC, is a physical device installed in a computer on its 
system bus. Its purpose is to connect to a specific type of network,
usually an ethernet or a token ring network."}%
. instance(vNA, NetworkAdapter) =>
      exists vNet: U
          . instance(vNet, ComputerNetwork) /\ connected(vNA, vNet)
. instance(unitMeasuringPerformance, BinaryPredicate)
. domain(unitMeasuringPerformance, a_1, ComputerComponent)
. domain(unitMeasuringPerformance, a_2, UnitOfMeasure)
%{unitMeasuringPerformance
"(&%unitMeasuringPerformance ?COMPONENT 
?UNIT) holds in case ?UNIT is an instance of &%UnitOfMeasure which is used to 
measure the performance of ?COMPONENT."}%
. instance(vHardDrive, HardDiskDrive) =>
      unitMeasuringPerformance(vHardDrive, BitsPerSecond)
. instance(vNA, NetworkAdapter) =>
      unitMeasuringPerformance(vNA, PacketsPerSecond)
. subclass(MonitoringProgram, ComputerProgram)
%{MonitoringProgram
"A program which monitors performance 
of an application, a component, etc."}%
. instance(vMonitor, MonitoringProgram) =>
      exists vSystem: U; vEvent: U; vMonitorCopy: U
          . systemMeasured(vEvent, vSystem)
            /\ programCopy(vMonitorCopy, vMonitor)
            /\ agent(vEvent, vMonitorCopy)
. instance(systemMeasured, BinaryPredicate)
. instance(systemMeasured, AsymmetricRelation)
. domain(systemMeasured, a_1, MeasuringPerformance)
. domain(systemMeasured, a_2, ComputationalSystem)
%{systemMeasured
"(&%systemMeasured ?Event ?System) means that 
?Event is an event of measuring the performance of the &%ComputationalSystem 
?System."}%
. instance(dataID, BinaryPredicate)
. domain(dataID, a_1, MonitoringProgram)
. domain(dataID, a_2, SymbolicString)
%{dataID
"(&%dataID ?PROGRAM ?NUMBER) holds if ?NUMBER is a small 
number associated with an instance of &%MonitoringProgram."}%
. subclass(MeasuringPerformance, ComputerProcess)
%{MeasuringPerformance
"Each element of &%MeasuringPerformance 
is an event of measuring the performance of an instance of &%ComputerComponent, 
performed by a &%MonitoringProgram."}%
. instance(vEvent, MeasuringPerformance) =>
      exists vProgram: U; vCopy: U
          . instance(vProgram, MonitoringProgram)
            /\ programCopy(vCopy, vProgram)
            /\ agent(vEvent, vCopy)
. instance(componentDataID, QuintaryPredicate)
. domain(componentDataID, a_1, TimePosition)
. domainSubclass(componentDataID, a_2, ComputerComponent)
. domain(componentDataID, a_3, ComputerComponent)
. domain(componentDataID, a_4, UnitOfMeasure)
. domain(componentDataID, a_5, SymbolicString)
%{componentDataID
"(&%componentDataID ?TIME ?COMPONENT ?INSTANCE 
?UNIT ?NUMBER) holds if ?INSTANCE is an instance of ?COMPONENT, identified by 
&%IDNumber ?NUMBER, and whose performance is measured by a &%UnitOfMeasure-ComputerPerformance ?UNIT. The timestamp ?TIME identifies the time when this 
information was created."}%
. componentDataID(vTime, vComponent, vInstance, vUnit, vNumber) =>
      instance(vInstance, vComponent)
. componentDataID(vTime, vComponent, vInstance, vUnit, vNumber) =>
      unitMeasuringPerformance(vInstance, vUnit)
. componentDataID(vTime, vComponent, vInstance, vUnit, vNumber) =>
      refers(vNumber, vInstance)
. subrelation(heartBeatRate, frequency)
. domain(heartBeatRate, a_1, ComputerProgram)
. domain(heartBeatRate, a_2, TimeDuration)
%{heartBeatRate
"(&%heartBeatRate ?Program ?Period) holds if 
?Period is the period at which the ComputerProgram ?Program sends its heartbeat 
to a monitoring process."}%
. subclass(MonitorConnectivityCmd, MonitoringProgram)
%{MonitorConnectivityCmd
"This is the command to get a list 
of applications periodically."}%
. subclass(MonitorApplicationCmd, MonitoringProgram)
%{MonitorApplicationCmd
"This command is to change the monitoring 
for any component for which a &%componentDataID was sent on initial connection."}%
. subclass(MonitorComponentCmd, MonitoringProgram)
%{MonitorComponentCmd
"This is the command to monitor any of the 
generic components - hard drive, network, cpu, memory, etc."}%
. instance(performanceResult, TernaryPredicate)
. domain(performanceResult, a_1, MeasuringPerformance)
. domain(performanceResult, a_2, ComputerComponent)
. domain(performanceResult, a_3, RealNumber)
%{performanceResult
"(&%performanceResult ?EVENT ?COMPONENT 
?NUMBER) holds if the performance of ?COMPONENT has a value ?NUMBER, 
measured by ?EVENT, an instance of &%MeasuringPerformance."}%
. instance(monitorComponentData, TernaryPredicate)
. domain(monitorComponentData, a_1, TimePosition)
. domain(monitorComponentData, a_2, SymbolicString)
. domain(monitorComponentData, a_3, RealNumber)
%{monitorComponentData
"(&%monitorComponentData ?TIME ?ID 
?NUMBER) holds if at time ?TIME, a component with the &%IDNumber ?ID 
has a performance of a value ?NUMBER."}%
. monitorComponentData(vTime1, vID, vNumber)
  /\ componentDataID(vTime2, vComponent, vInstance, vUnit, vID) =>
      exists vEvent: U
          . instance(vEvent, MeasuringPerformance)
            /\ unitMeasuringPerformance(vInstance, vUnit)
            /\ time(vEvent, vTime1)
            /\ performanceResult(vEvent, vInstance, vNumber)
. instance(monitorConnectivityData, BinaryRelation)
. domain(monitorConnectivityData, a_1, TimePosition)
. domain(monitorConnectivityData, a_2, IPAddress)
%{monitorConnectivityData
"(&%monitorConnectivityData ?TIME 
?IPADDRESS) is a relation between a timestamp ?TIME and an ?IP address."}%
. instance(monitorApplicationData, BinaryPredicate)
. domain(monitorApplicationData, a_1, TimePosition)
. domain(monitorApplicationData, a_2, ComputerProgram)
%{monitorApplicationData
"(&%monitorApplicationData ?TIME 
?APPLICATION) holds if the time stamp ?TIME specifies the time at which 
?APPLICATION is running."}%
. monitorApplicationData(vTime, vApplication) =>
      exists vProcess: U
          . programRunning(vProcess, vApplication) /\ time(vProcess, vTime)
. instance(Executable, Attribute)
%{Executable
"Able to be run in its current format."}%
. (exists vProcess: U . programRunning(vProcess, vProgram)) <=>
      property(vProgram, Executable)
. subclass(OperatingSystem, SoftwareSystem)
%{OperatingSystem
"The master control program that runs the 
computer. It is the first program loaded when the computer is turned on, 
and its main part, called the kernel, resides in memory at all times. It 
may be developed by the vendor of the computer it's running in or by a 
third party."}%
. instance(defaultNetwork, BinaryPredicate)
. domain(defaultNetwork, a_1, HardwareSystem)
. domain(defaultNetwork, a_2, ComputerNetwork)
%{defaultNetwork
"(&%defaultNetwork ?SYSTEM ?NET) holds if 
?NET is the default network of the &%HardwareSystem ?SYSTEM."}%
. subclass(Solaris, OperatingSystem)
%{Solaris
"The class of all instances of Solaris , a 
unix-based operating system for Sun SPARC computers. It includes the 
Open Look and Motif graphical user interfaces, OpenWindows (the Sun 
version of X Windows), DOS and Windows Emulation, and ONC networking."}%
. instance(numberOfCPUs, BinaryPredicate)
. domain(numberOfCPUs, a_1, Computer)
. domain(numberOfCPUs, a_2, PositiveInteger)
%{numberOfCPUs
"(&%numberOfCPUs ?COMPUTER ?INTEGER) means 
that the number of CPUs for the host ?COMPUTER is equal to INTEGER."}%
. subrelation(hardwareType, represents)
. domain(hardwareType, a_1, SymbolicString)
. domain(hardwareType, a_2, Computer)
%{hardwareType
"(&%hardwareType ?TYPE ?COMPUTER) means that 
TYPE represents the computer vendor model name, as well as the version 
of the product."}%
. hardwareType(vType, vComputer)
  /\ productModel(vModel, vComputer) =>
      subsumesContentInstance(vType, vModel)
. hardwareType(vType, vComputer)
  /\ a_v_e_r_s_i_o_n(vVersion, vComputer) =>
      subsumesContentInstance(vType, vVersion)
. instance(thresholdOf, BinaryPredicate)
. domain(thresholdOf, a_1, Computer)
. domain(thresholdOf, a_2, PositiveRealNumber)
. instance(benchmarkPerformance, TernaryPredicate)
. domain(benchmarkPerformance, a_1, ComputationalSystem)
. domain(benchmarkPerformance, a_2, MonitoringProgram)
. domain(benchmarkPerformance, a_3, Quantity)
%{benchmarkPerformance
"(&%benchmarkPerformance ?SYSTEM 
?TEST ?NUMBER) holds if ?NUMBER is a benchmark for measuring the performance 
of an instance of a &%ComputationalSystem."}%
. benchmarkPerformance(vSystem, vTest, vNumber) =>
      exists vEvent: U
          . instance(vEvent, MeasuringPerformance)
            /\ performanceResult(vEvent, vSystem, vNumber)
. instance(bandwidthOf, BinaryPredicate)
. domain(bandwidthOf, a_1, ComputerNetwork)
. domain(bandwidthOf, a_2, BitsPerSecond)
%{bandwidthOf
"(&%bandwidthOf ?NET ?BANDWIDTH) holds if 
?BANDWIDTH is the amount of data which can be sent through an instance 
of a &%ComputerNetwork ?NET, measured in bits per second."}%
. instance(priority, BinaryPredicate)
. domain(priority, a_1, ComputationalSystem)
. domain(priority, a_2, PriorityAttribute)
%{priority
"(&%priority ?SYSTEM ?QUANTITY) means that the 
priority of the ?SYSTEM is characterized by a &%PriorityAttribute, such 
as &%HighPriority or &%LowPriority."}%
. subclass(PriorityAttribute, Attribute)
%{PriorityAttribute
"A class of attributes which describe 
priorities of &%ComputationalSystems."}%
. instance(HighPriority, PriorityAttribute)
%{HighPriority
"Used to indicate that a &%ComputationalSystem 
has a high priority."}%
. instance(LowPriority, PriorityAttribute)
%{LowPriority
"Used to indicate that a &%ComputationalSystem 
has a low priority."}%
. subclass(ComputerPath, ComputerData)
%{ComputerPath
"An instance of &%ComputerPath is a series 
of programs that connects input devices, typically sensors, to output 
devices, typically actuators."}%
. instance(softwarePath, BinaryPredicate)
. domain(softwarePath, a_1, SoftwareSystem)
. domain(softwarePath, a_2, ComputerPath)
%{softwarePath
"(&%softwarePath ?SYSTEM ?PATH) means that 
?PATH is a computer path for the instance of &%SoftwareSystem ?SYSTEM."}%
. subclass(SoftwareAttribute, Attribute)
%{SoftwareAttribute
"The class of all attributes that are 
specific to &%SoftwareSystems."}%
. subclass(ComputerPathAttribute, SoftwareAttribute)
%{ComputerPathAttribute
"The class of all attributes that are 
specific to &%ComputerPaths."}%
. instance(vAttribute, ComputerPathAttribute) =>
      exists vPath: U
          . instance(vPath, ComputerPath) /\ property(vPath, vAttribute)
. instance(PathImportanceFunction, ComputerPathAttribute)
%{PathImportanceFunction
"The attribute which denotes that 
the path importance is defined by the dynamic library procedure 
&%pathImportanceFunction. This functions passes arguments for priority 
and current time and returns an integer that represents importance."}%
. subclass(Scalable, ComputerPathAttribute)
%{Scalable
"The attribute which denotes that the path is 
scalable, i.e. the applications in the path can be replicated to meet 
realtime QoS requirements."}%
. subclass(DynamicDataStream, ComputerPathAttribute)
%{DynamicDataStream
"The attribute which denotes that the 
path data stream type is dynamic, i.e. the time changes but the data 
stream follows a pattern."}%
. subclass(StochasticDataStream, ComputerPathAttribute)
%{StochasticDataStream
"The attribute which denotes that 
the time between data or groups of data changes according to no 
discernible pattern."}%
. subclass(DeterministicDataStream, ComputerPathAttribute)
%{DeterministicDataStream
"The attribute which denotes that 
the data stream is conceived as a stream of one datum after another, and 
each datum or identifiable group of data is separated by a constant of 
time."}%
. instance(vPath, ComputerPath)
  /\ property(vPath, DynamicDataStream) =>
      not property(vPath, StochasticDataStream)
. instance(vPath, ComputerPath)
  /\ property(vPath, DynamicDataStream) =>
      not property(vPath, DeterministicDataStream)
. subclass(ContinuousPath, ComputerPathAttribute)
%{ContinuousPath
"The attribute which denotes that the 
path type is continuous, as opposed to transient or quasiconstinuous 
paths. A continuous path handles a stream of data arriving at a comment 
of rate."}%
. subclass(TransientPath, ComputerPathAttribute)
%{TransientPath
"An attribute which applies to computer 
paths which handle random events."}%
. subclass(QuasicontinuousPath, ComputerPathAttribute)
%{QuasicontinuousPath
"An attribute which applies to 
computer paths which handle random events, which initiate a bounded 
stream of data arriving at a comment of rate, which the path must 
process."}%
. instance(vPath, ComputerPath)
  /\ property(vPath, ContinuousPath) =>
      not property(vPath, TransientPath)
. instance(vPath, ComputerPath)
  /\ property(vPath, ContinuousPath) =>
      not property(vPath, QuasicontinuousPath)
. instance(simpleDeadline, BinaryPredicate)
. domain(simpleDeadline, a_1, ComputerPath)
. domain(simpleDeadline, a_2, TimeDuration)
%{simpleDeadline
"(&%simpleDeadline ?PATH ?TIME)holds if 
?TIME is the maximum end-to-end path latency during a cycle of a 
continuous or quasicontinuous path or during the activation of a transient 
path."}%
. instance(batchLatency, BinaryPredicate)
. domain(batchLatency, a_1, ComputerPath)
. domain(batchLatency, a_2, TimeDuration)
%{batchLatency
"(&%batchLatency ?PATH ?TIME)holds if ?TIME 
is the maximum allowed latency for all cycles of a quasicontinuous path."}%
. instance(batchInterArrival, BinaryPredicate)
. domain(batchInterArrival, a_1, ComputerPath)
. domain(batchInterArrival, a_2, TimeDuration)
%{batchInterArrival
"(&%batchInterArrival ?PATH ?TIME) 
holds if ?TIME is the maximum allowable time between processing of a 
particular element of a continuous or quasicontinuous path's data 
stream in successive cycles."}%
. instance(qoSSlack, TernaryRelation)
. domain(qoSSlack, a_1, ComputerPath)
. domain(qoSSlack, a_2, ConstantQuantity)
. domain(qoSSlack, a_3, ConstantQuantity)
%{qoSSlack
"(&%qoSSlack ?PATH ?MIN ?MAX) holds if ?PATH 
has a realtime QoS maximum slack percentage of ?MAX and minimum of 
?MIN."}%
. instance(slidingWindowSize, BinaryPredicate)
. domain(slidingWindowSize, a_1, ComputerPath)
. domain(slidingWindowSize, a_2, PositiveInteger)
%{slidingWindowSize
"(&%slidingWindowSize ?PATH ?N) holds 
if PATH has a realtime QoS sliding window size of ?N measured samples."}%
. instance(dataStreamSlack, BinaryPredicate)
. domain(dataStreamSlack, a_1, ComputerPath)
. domain(dataStreamSlack, a_2, PositiveInteger)
%{dataStreamSlack
"(&%dataStreamSlack ?PATH ?N) means that 
a continuous or quasicontinuous path ?PATH should be able to process ?N 
additional data items at any time."}%
. dataStreamSlack(vPath, vNumber) =>
      property(vPath, ContinuousPath)
      \/ property(vPath, QuasicontinuousPath)
. instance(dependencyType, BinaryPredicate)
. domain(dependencyType, a_1, ComputerProgram)
. domainSubclass(dependencyType, a_2, ComputerProgram)
%{dependencyType
"(&%dependencyType ?PROGRAM ?TYPE) means 
that ?PROGRAM has a dependency type ?TYPE, where ?TYPE can be either 
&%StartupBlock or &%ShutdownBlock."}%
. dependencyType(vProgram, vType) =>
      vType = StartupBlock \/ vType = ShutdownBlock
. instance(Restartable, SoftwareAttribute)
%{Restartable
"The attribute which denotes that a program 
can be restarted."}%
. instance(hasDependency, BinaryPredicate)
. domain(hasDependency, a_1, ComputerProgram)
. domain(hasDependency, a_2, ComputerProgram)
%{hasDependency
"(&%hasDependency ?PROGRAM1 ?PROGRAM2) 
holds if ?PROGRAM1 is dependent on the application ?PROGRAM2."}%
. instance(dependencyDelay, BinaryPredicate)
. domain(dependencyDelay, a_1, ComputerProgram)
. domain(dependencyDelay, a_2, TimeDuration)
%{dependencyDelay
"if the dependency type is &%StartupBlock, 
then (&%dependencyDelay ?PROGRAM ?TIME) means that the application 
?PROGRAM can only be started after a dependency delay of ?TIME after the 
startup of the application. If the dependency type is &%ShutdownBlock, then 
(&%dependencyDelay ?PROGRAM ?TIME) means that the application ?PROGRAM can 
only be stopped after a dependency delay of ?TIME after the application 
is stopped."}%
. (exists vTime1: U; vTime2: U
       . dependencyDelay(vProgram1, vDelay)
         /\ dependencyType(vProgram1, StartupBlock)
         /\ hasDependency(vProgram1, vProgram2)
         /\ instance(vProcess1, ComputerProcess)
         /\ programRunning(vProcess1, vProgram1)
         /\ instance(vProcess2, ComputerProcess)
         /\ programRunning(vProcess2, vProgram2)
         /\ WhenFn(vProcess2) = vTime2
         /\ starts(vTime2, vTime)
         /\ WhenFn(vProcess1) = vTime1
         /\ EndFn(vTime) = BeginFn(vTime1)) =>
      duration(vTime, vDelay)
. (exists vTime1: U; vTime2: U
       . dependencyDelay(vProgram1, vDelay)
         /\ dependencyType(vProgram1, ShutdownBlock)
         /\ hasDependency(vProgram1, vProgram2)
         /\ instance(vProcess1, ComputerProcess)
         /\ programRunning(vProcess1, vProgram1)
         /\ instance(vProcess2, ComputerProcess)
         /\ programRunning(vProcess2, vProgram2)
         /\ WhenFn(vProcess2) = vTime2
         /\ finishes(vTime, vTime1)
         /\ WhenFn(vProcess2) = vTime2
         /\ BeginFn(vTime) = EndFn(vTime2)) =>
      duration(vTime, vDelay)
. instance(ReplicationsOnSameHostOK, SoftwareAttribute)
%{ReplicationsOnSameHostOK
"The attribute which denotes that 
a program can be restarted on the same host."}%
. property(vProgram, ReplicationsOnSameHostOK) =>
      property(vProgram, Restartable)
. instance(commandLineArguments, BinaryPredicate)
. domain(commandLineArguments, a_1, ComputerProgram)
. domain(commandLineArguments, a_2, List)
%{commandLineArguments
"(&%commandLineArguments ?PROGRAM 
?LIST) means that the application ?PROGRAM requires command line 
arguments, as specified in ?LIST."}%
. instance(ScalabilityCombining, SoftwareAttribute)
%{ScalabilityCombining
"The attribute which denotes that 
an application can combine its input stream from different preceding 
applications or devices for greater scalability."}%
. instance(ScalabilitySplitting, SoftwareAttribute)
%{ScalabilitySplitting
"The attribute which denotes that 
a program can split its output stream to different succeeding 
applications or devices for greater scalability."}%
. instance(InitialProfileFn, UnaryFunction)
. domain(InitialProfileFn, a_1, ComputerProgram)
. range(InitialProfileFn, ProcessState)
%{InitialProfileFn
"The function which returns as its value 
the initial profile of the program, i.e. a report of its execution 
characteristics."}%
. subrelation(CPUUtilizationFn, UnaryFunction)
. domain(CPUUtilizationFn, a_1, ComputerProgram)
. range(CPUUtilizationFn, ConstantQuantity)
%{CPUUtilizationFn
"(&%CPUUtilizationFn ?PROGRAM) refers to 
the percentage of time the CPU is used by an application ?PROGRAM."}%
. subclass(RealtimeSystem, ComputationalSystem)
%{RealtimeSystem
"An  computer-controlled system, the 
correct operation of which depends on meeting specified timing 
constraints."}%
. subclass(SoftwareSystem, RealtimeSystem)
. subclass(HardwareSystem, RealtimeSystem)
. subclass(ComputerNetwork, RealtimeSystem)
. subclass(RealtimeSystemAttribute, Attribute)
%{RealtimeSystemAttribute
"The class of &%Attributes which 
describe instances of the class &%RealtimeSystem."}%
. subclass(SystemBehaviorAttribute, RealtimeSystemAttribute)
%{SystemBehaviorAttribute
"A subclass of 
&%RealtimeSystemAttribute, which includes the following &%Attributes: 
&%Periodic-SystemBehavior, &%Transient-SystemBehavior, and 
&%Hybrid-SystemBehavior."}%
. subrelation(systemBehavior, property)
. domain(systemBehavior, a_1, RealtimeSystem)
. domain(systemBehavior, a_2, SystemBehaviorAttribute)
%{systemBehavior
"(&%systemBehavior ?System ?Attribute) 
holds if ?Attribute is a SystemBehaviorAttribute which describes the 
&%RealtimeSystem ?System."}%
. subclass(a_P_e_r_i_o_d_i_c_Minus_S_y_s_t_e_m_B_e_h_a_v_i_o_r,
           SystemBehaviorAttribute)
%{Periodic-SystemBehavior
"An instance of the class 
&%RealtimeSystem is described as a system with &%Periodic-SystemBehavior 
when it is activated at regular intervals."}%
. subclass(a_T_r_a_n_s_i_e_n_t_Minus_S_y_s_t_e_m_B_e_h_a_v_i_o_r,
           SystemBehaviorAttribute)
%{Transient-SystemBehavior
"An instance of the class 
&%RealtimeSystem shows &%Transient-SystemBehavior when it is 
activated by sporadic events."}%
. subclass(a_H_y_b_r_i_d_Minus_S_y_s_t_e_m_B_e_h_a_v_i_o_r,
           SystemBehaviorAttribute)
. subAttribute(a_H_y_b_r_i_d_Minus_S_y_s_t_e_m_B_e_h_a_v_i_o_r,
               a_T_r_a_n_s_i_e_n_t_Minus_S_y_s_t_e_m_B_e_h_a_v_i_o_r)
. subAttribute(a_H_y_b_r_i_d_Minus_S_y_s_t_e_m_B_e_h_a_v_i_o_r,
               a_P_e_r_i_o_d_i_c_Minus_S_y_s_t_e_m_B_e_h_a_v_i_o_r)
%{Hybrid-SystemBehavior
"An instance of the class 
&%RealtimeSystem shows &%Hybrid-SystemBehavior if it is 
activated by transient events, i.e. it is executed at regular 
intervals when activated, and is deactivated by action completion."}%
. subclass(DesignPatternAttribute, RealtimeSystemAttribute)
%{DesignPatternAttribute
"This is a subclass of 
&%RealtimeSystemAttribute, which includes &%Guidance-DesignPattern, 
&%Initiation-DesignPattern, and &%Assessment-DesignPattern."}%
. subrelation(designPattern, property)
. domain(designPattern, a_1, RealtimeSystem)
. domain(designPattern, a_2, DesignPatternAttribute)
%{designPattern
"(&%designPattern ?System ?Attribute) holds 
if ?Attribute is a &%DesignPatternAttribute which describes the 
&%RealtimeSystem ?System."}%
. subclass(a_G_u_i_d_a_n_c_e_Minus_D_e_s_i_g_n_P_a_t_t_e_r_n,
           DesignPatternAttribute)
%{Guidance-DesignPattern
"Instances of &%RealtimeSystems 
are described as systems with &%Guidance-DesignPattern if they consist 
of sensors connected to a software module that filters data from the 
sensors and sends the filtered data to a software module that evaluates 
the filtered data and sends instructions to a software module that 
commands actuators.  The design pattern is an event source that produces 
events and a data source that produces data, both executing in parallel 
and handled by a single event-driven periodic data handler.  The two 
separate input streams have fundamentally different characteristics.  
The event stream is necessarily asychronous, or transient.  Once an 
event is sensed, the handler accepts data from the data stream, which 
has an invariant cycle time.  There are two deadlines for a real-time 
guidance system.  The period deadline is the time to process all elements 
in the data stream once and generate an actuator command.  The action 
completion deadline is the time to guide the actuator to completion of 
the action."}%
. designPattern(vSystem,
                a_G_u_i_d_a_n_c_e_Minus_D_e_s_i_g_n_P_a_t_t_e_r_n) =>
      systemBehavior(vSystem,
                     a_T_r_a_n_s_i_e_n_t_Minus_S_y_s_t_e_m_B_e_h_a_v_i_o_r)
. subclass(a_I_n_i_t_i_a_t_i_o_n_Minus_D_e_s_i_g_n_P_a_t_t_e_r_n,
           DesignPatternAttribute)
%{Initiation-DesignPattern
"An instance of the class 
&%RealtimeSystem has &%Initiation-DesignPattern if it consists of 
one software module and the actuators it commands.  The design pattern 
is an event source which produces events for an event handler.  The 
event source is typically an evaluate-and-decide software module.  
The event stream is necessarily asychronous, or transient.  The arrival 
rate of events may vary and is unbounded.  Events may be either 
homogeneous or heterogeneous.  The workload per event for homogeneous 
events is constant.  The workload per event for heterogeneous events 
is a function of each event type.  There is one deadline for real-time 
action initiation systems.  It is the upper bound on the time to 
generate a command for the actuator."}%
. designPattern(vSystem,
                a_I_n_i_t_i_a_t_i_o_n_Minus_D_e_s_i_g_n_P_a_t_t_e_r_n) =>
      systemBehavior(vSystem,
                     a_T_r_a_n_s_i_e_n_t_Minus_S_y_s_t_e_m_B_e_h_a_v_i_o_r)
. subclass(a_A_s_s_e_s_s_m_e_n_t_Minus_D_e_s_i_g_n_P_a_t_t_e_r_n,
           DesignPatternAttribute)
%{Assessment-DesignPattern
"An instance of the class 
&%RealtimeSystem has &%Initiation-DesignPattern if it consists of 
sensors connected to a software module that filters data from the 
sensors and sends the filtered data to another software module that 
evaluates the filtered data and sends decisions to a subsystem.  
The design pattern is a data source that produces a data stream for 
a data handler.  The data source is typically a periodically sampled 
collection of sensors.  The data stream's size may vary and is 
unbounded.  Data may be either homogeneous or heterogeneous.  The 
workload per data element for homogeneous data is constant.  The 
workload per data element for heterogeneous data is a function of 
each element type.  There is one deadline for real-time situation 
assessment systems.  It is the upper bound on the time to process 
all elements in the data stream once."}%
. subclass(TaskRelationAttribute, Attribute)
%{TaskRelationAttribute
"This is a subclass of 
&%RealtimeSystemAttribute, which includes &%Independent-TaskRelation 
and &%Dependent-TaskRelation."}%
. subrelation(taskRelation, property)
. domain(taskRelation, a_1, RealtimeSystem)
. domain(taskRelation, a_2, TaskRelationAttribute)
%{taskRelation
"(&%taskRelation ?System ?Attribute) holds 
if ?Attribute is a &%TaskRelationAttribute which describes the 
&%RealtimeSystem ?System."}%
. subclass(a_I_n_d_e_p_e_n_d_e_n_t_Minus_T_a_s_k_R_e_l_a_t_i_o_n,
           TaskRelationAttribute)
%{Independent-TaskRelation
"An instance of &%RealtimeSystem 
is described as &%Independent-TaskRelation if its correct execution 
does not depend on the inputs from any other function, the execution state 
of any other function, or the acceptance of its outputs by any other 
function."}%
. instance(a_D_e_p_e_n_d_e_n_t_Minus_T_a_s_k_R_e_l_a_t_i_o_n,
           TaskRelationAttribute)
%{Dependent-TaskRelation
"An instance of &%RealtimeSystem 
is described as &%Dependent-TaskRelation if it depends on at least one 
other function in the system; that is, its correct execution depends on 
the input from another function, the execution state of another function, 
or the acceptance of its outputs by another function."}%
. subclass(FormOfAdaptationAttribute, Attribute)
%{FormOfAdaptationAttribute
"A subclass of 
&%RealtimeSystemAttribute, which includes &%Precision-FormOfAdaptation, 
&%Slack-FormOfAdaptation, &%Concurrency-FormOfAdaptation, and 
&%ResourceAllocation-FormOfAdaptation."}%
. subrelation(formOfAdaptation, property)
. domain(formOfAdaptation, a_1, RealtimeSystem)
. domain(formOfAdaptation, a_2, FormOfAdaptationAttribute)
%{formOfAdaptation
"(&%formOfAdaptation ?System ?Attribute) 
holds if ?Attribute is a &%FormOfAdaptationAttribute which describes the 
&%RealtimeSystem ?System."}%
. subclass(a_P_r_e_c_i_s_i_o_n_Minus_F_o_r_m_O_f_A_d_a_p_t_a_t_i_o_n,
           FormOfAdaptationAttribute)
. subclass(a_S_l_a_c_k_Minus_F_o_r_m_O_f_A_d_a_p_t_a_t_i_o_n,
           FormOfAdaptationAttribute)
%{Slack-FormOfAdaptation
"The attribute &%Slack-FormOfAdaptation 
applies to real-time systems that are designed and implemented with enough 
resource overhead that the system can always adapt by utilizing the overhead 
without complicated decision making."}%
. subclass(a_C_o_n_c_u_r_r_e_n_c_y_Minus_F_o_r_m_O_f_A_d_a_p_t_a_t_i_o_n,
           FormOfAdaptationAttribute)
%{Concurrency-FormOfAdaptation
"This attribute applies to 
real-time systems that are designed and implemented so that the system 
can adapt by replicating the system components and executing them 
concurrently."}%
. subclass(a_R_e_s_o_u_r_c_e_A_l_l_o_c_a_t_i_o_n_Minus_F_o_r_m_O_f_A_d_a_p_t_a_t_i_o_n,
           FormOfAdaptationAttribute)
%{ResourceAllocation-FormOfAdaptation
"This attribute applies 
to real-time systems that are designed and implemented so that the system 
can adapt under the control of a resource allocation manager like Desiderata."}%
. subclass(TimingRequirementAttribute, RealtimeSystemAttribute)
%{TimingRequirementAttribute
"A subclass of 
&%RealtimeSystemAttribute which includes &%ComplexityAttribute, 
&%StrictnessAttribute, and &%AbstractionLevelAttribute."}%
. instance(granularity, BinaryPredicate)
. domain(granularity, a_1, RealtimeSystem)
. domain(granularity, a_2, TimeDuration)
%{granularity
"Granularity is a sub-property of the 
timing requirements property of real-time systems.  Granularity is 
defined by how a timing requirement is specified in units of time."}%
. subclass(ComplexityAttribute, TimingRequirementAttribute)
%{ComplexityAttribute
"A subclass of 
&%TimingRequirementAttribute, which includes
&%MultipleRequirement-Complexity and &%SingleRequirement-Complexity."}%
. subrelation(complexity, property)
. domain(complexity, a_1, RealtimeSystem)
. domain(complexity, a_2, TimingRequirementAttribute)
%{complexity
"(&%complexity ?System ?Attribute) holds if 
?Attribute is a &%TimingRequirementAttribute which describes the 
&%RealtimeSystem ?System."}%
. subclass(a_S_i_n_g_l_e_R_e_q_u_i_r_e_m_e_n_t_Minus_C_o_m_p_l_e_x_i_t_y,
           ComplexityAttribute)
%{SingleRequirement-Complexity
"An attribute that  describes 
instances of &%RealtimeSystems which require a single timing requirement,
either a bound for completion time for systems with 
&%Transient-SystemBehavior or cycle deadline for systems with 
&%Periodic-SystemBehavior."}%
. systemBehavior(vSystem,
                 a_T_r_a_n_s_i_e_n_t_Minus_S_y_s_t_e_m_B_e_h_a_v_i_o_r) =>
      complexity(vSystem,
                 a_S_i_n_g_l_e_R_e_q_u_i_r_e_m_e_n_t_Minus_C_o_m_p_l_e_x_i_t_y)
. systemBehavior(vSystem,
                 a_P_e_r_i_o_d_i_c_Minus_S_y_s_t_e_m_B_e_h_a_v_i_o_r) =>
      complexity(vSystem,
                 a_S_i_n_g_l_e_R_e_q_u_i_r_e_m_e_n_t_Minus_C_o_m_p_l_e_x_i_t_y)
. subclass(a_M_u_l_t_i_p_l_e_R_e_q_u_i_r_e_m_e_n_t_Minus_C_o_m_p_l_e_x_i_t_y,
           ComplexityAttribute)
%{MultipleRequirement-Complexity
"An attribute that describes 
instances of &%RealtimeSystems which require multiple timing requirements, 
both a bound for completion time for its transient behavior and a cycle 
deadline for its periodic behavior."}%
. systemBehavior(vSystem,
                 a_H_y_b_r_i_d_Minus_S_y_s_t_e_m_B_e_h_a_v_i_o_r) =>
      complexity(vSystem,
                 a_M_u_l_t_i_p_l_e_R_e_q_u_i_r_e_m_e_n_t_Minus_C_o_m_p_l_e_x_i_t_y)
. subclass(StrictnessAttribute, TimingRequirementAttribute)
%{StrictnessAttribute
"This is a subclass of 
&%TimingRequirementAttribute, which includes &%Hard-Strictness, 
&%Firm-Strictness, &%Soft-Strictness, &%Importance-Strictness,
&%Utility-Strictness, and &%Hybrid-Strictness"}%
. subrelation(strictness, property)
. domain(strictness, a_1, RealtimeSystem)
. domain(strictness, a_2, StrictnessAttribute)
%{strictness
"(&%strictness ?System ?Attribute) holds if 
the &%StrictnessAttribute ?Attribute describes the &%RealtimeSystem 
?System."}%
. subclass(a_H_a_r_d_Minus_S_t_r_i_c_t_n_e_s_s,
           StrictnessAttribute)
%{Hard-Strictness
"An attribute that applies to a 
&%RealtimeSystem just in case all deadlines are met."}%
. subclass(a_F_i_r_m_Minus_S_t_r_i_c_t_n_e_s_s,
           StrictnessAttribute)
%{Firm-Strictness
"An attribute that applies to a 
&%RealtimeSystem just in case a fixed percentage of requirements 
is met."}%
. subclass(a_S_o_f_t_Minus_S_t_r_i_c_t_n_e_s_s,
           StrictnessAttribute)
%{Soft-Strictness
"An attribute that applies to a 
&%RealtimeSystem just in case it  maximizes the number of timing 
requirements like deadlines that are met but does not guarantee that 
all such requirements will be met or any fixed percentage of 
requirements will be met."}%
. subclass(a_I_m_p_o_r_t_a_n_c_e_Minus_S_t_r_i_c_t_n_e_s_s,
           StrictnessAttribute)
%{Importance-Strictness
"An attribute that applies to a 
&%RealtimeSystem just in case it is designed and implemented to meet 
the more important requirements first."}%
. subclass(a_U_t_i_l_i_t_y_Minus_S_t_r_i_c_t_n_e_s_s,
           StrictnessAttribute)
%{Utility-Strictness
"An attribute that applies to a 
&%RealtimeSystem just in case it is designed and implemented to use 
a utility-computing function, which is applied to competing timing 
requirements to determine which should be met because meeting the 
requirement produces higher utility as defined by the function."}%
. subclass(a_H_y_b_r_i_d_Minus_S_t_r_i_c_t_n_e_s_s,
           StrictnessAttribute)
%{Hybrid-Strictness
"An attribute that applies to a 
&%RealtimeSystem just in case the strictness of the system is a 
combination of &%Hard/Firm/Soft-Strictness with &%Importance-Strictness 
or a combination of &%Utility-Strictness with &%Importance-Strictness."}%
. strictness(vSystem, a_H_y_b_r_i_d_Minus_S_t_r_i_c_t_n_e_s_s) =>
      (strictness(vSystem,
                  a_I_m_p_o_r_t_a_n_c_e_Minus_S_t_r_i_c_t_n_e_s_s)
       /\ strictness(vSystem, a_U_t_i_l_i_t_y_Minus_S_t_r_i_c_t_n_e_s_s))
      \/ (strictness(vSystem,
                     a_I_m_p_o_r_t_a_n_c_e_Minus_S_t_r_i_c_t_n_e_s_s)
          /\ strictness(vSystem, a_H_a_r_d_Minus_S_t_r_i_c_t_n_e_s_s))
      \/ (strictness(vSystem,
                     a_I_m_p_o_r_t_a_n_c_e_Minus_S_t_r_i_c_t_n_e_s_s)
          /\ strictness(vSystem, a_F_i_r_m_Minus_S_t_r_i_c_t_n_e_s_s))
      \/ (strictness(vSystem,
                     a_I_m_p_o_r_t_a_n_c_e_Minus_S_t_r_i_c_t_n_e_s_s)
          /\ strictness(vSystem, a_S_o_f_t_Minus_S_t_r_i_c_t_n_e_s_s))
. subclass(AbstractionLevelAttribute, TimingRequirementAttribute)
%{AbstractionLevelAttribute
"This is a subclass of 
&%TimingRequirementAttribute, which includes &%Instrument-AbstractionLevel, 
&%Method-AbstractionLevel, &%Object-AbstractionLevel, &%Task-AbstractionLevel,
and &%TaskGroup-AbstractionLevel."}%
. subrelation(abstractionLevel, property)
. domain(abstractionLevel, a_1, RealtimeSystem)
. domain(abstractionLevel, a_2, AbstractionLevelAttribute)
. subclass(a_I_n_s_t_r_u_m_e_n_t_Minus_A_b_s_t_r_a_c_t_i_o_n_L_e_v_e_l,
           AbstractionLevelAttribute)
%{Instrument-AbstractionLevel
"The attribute 
&%Instrument-AbstractionLevel is the lowest level of abstraction, 
which can be used to describe a real-time system or subsystem."}%
. subclass(a_M_e_t_h_o_d_Minus_A_b_s_t_r_a_c_t_i_o_n_L_e_v_e_l,
           AbstractionLevelAttribute)
%{Method-AbstractionLevel
"The attribute 
&%Method-AbstractionLevel is the next to the lowest level of 
abstraction that can be used to describe a real-time system or 
subsystem.  This is at the level of describing every callable 
function (or method in an object-oriented language) implemented 
in software."}%
. subclass(a_O_b_j_e_c_t_Minus_A_b_s_t_r_a_c_t_i_o_n_L_e_v_e_l,
           AbstractionLevelAttribute)
%{Object-AbstractionLevel
"The attribute 
&%Object-AbstractionLevel is immediately above the attribute 
&%Method-AbstractionLevel and can be used to describe a real-time 
system or subsystem.  This is at the level of describing every software 
object that can be created from a class together with its data structures 
and methods (which define the interface for manipulating the object)."}%
. subclass(a_T_a_s_k_Minus_A_b_s_t_r_a_c_t_i_o_n_L_e_v_e_l,
           AbstractionLevelAttribute)
%{Task-AbstractionLevel
"The attribute 
&%Task-AbstractionLevel is immediately above the attribute 
&%Object-AbstractionLevel and can be used to describe a real-time 
system or subsystem.  This is at the level of describing the major 
tasks that are carried out by the real-time systems and are typically 
executable as individual processes.  The description of a task would 
consist of listing all the software objects used to perform the task."}%
. subclass(a_T_a_s_k_G_r_o_u_p_Minus_A_b_s_t_r_a_c_t_i_o_n_L_e_v_e_l,
           AbstractionLevelAttribute)
%{TaskGroup-AbstractionLevel
"The attribute 
&%TaskGroup-AbstractionLevel is immediately above the attribute 
&%Task-AbstractionLevel and can be used to describe a real-time 
system or subsystem This is at the level of describing groups of 
tasks which are related or connected by the real-time systems and 
are typically part of a concurrently executing path."}%
. subrelation(memorySize, measure)
. domain(memorySize, a_1, ComputationalSystem)
. domain(memorySize, a_2, ConstantQuantity)
%{memorySize
"(&%memorySize ?System ?Size) holds if 
?Size is the required memory size for the &%ComputationalSystem 
?System."}%
. subclass(Sensor, ComputerHardware)
%{Sensor
"&%Sensors include software that measures any 
attribute of executing computer programs or collections of executing 
programs, such as CPU utilization, aka load, memory utilization, I/O, 
overall task performance, network load and latency, etc."}%
. subclass(UniformResourceIdentifier, ContentBearingObject)
. exhaustiveDecomposition(UniformResourceIdentifier,
                          UniformResourceLocator, UniformResourceName)
%{UniformResourceIdentifier
"A &%UniformResourceIdentifier 
(URI) is a compact string of characters for identifying an abstract or 
physical resource. A URI can be further classified as a locator, a name, 
or both (source: http://www.ietf.org/rfc/rfc2396.txt)."}%
. instance(vURI, UniformResourceIdentifier) =>
      exists vResource: U
          . instance(vResource, ComputerData) /\ refers(vURI, vResource)
. subclass(UniformResourceLocator, UniformResourceIdentifier)
%{UniformResourceLocator
"The term &%UniformResourceLocator 
(URL) refers to the subset of URI that identify resources via a 
representation of their primary access mechanism (e.g., their network 
location), rather than identifying the resource by name or by some other 
attribute(s) of that resource (source: http://www.ietf.org/rfc/rfc2396.txt)."}%
. instance(vURL, UniformResourceLocator) =>
      exists vAddress: U
          . instance(vAddress, IPAddress) /\ represents(vURL, vAddress)
. subclass(UniformResourceName, UniformResourceIdentifier)
%{UniformResourceName
"The term UniformResourceName (URN) 
refers to the subset of URI that are required to remain globally unique 
and persistent even when the resource ceases to exist or becomes 
unavailable (source: http://www.ietf.org/rfc/rfc2396.txt)."}%
. subclass(DataSink, ComputerInputDevice)
%{DataSink
"A device or part of the computer that 
receives data."}%
. instance(vSink, DataSink) =>
      exists vTransfer: U
          . instance(vTransfer, DataTransfer)
            /\ destination(vTransfer, vSink)
. subclass(ComputerUser, CognitiveAgent)
%{ComputerUser
"Any individual who interacts with a 
computer."}%
. instance(vUser, ComputerUser) =>
      exists vComputer: U
          . instance(vComputer, Computer) /\ uses(vUser, vComputer)
. subclass(UserRequest, ComputerProcess)
%{UserRequest
"A request made by a &%ComputerUser, such as 
looking up a customer record."}%
. instance(vRequest, UserRequest) =>
      exists vUser: U
          . instance(vUser, ComputerUser) /\ agent(vRequest, vUser)
. subclass(ComputerResponse, ComputerProcess)
%{ComputerResponse
"A &%ComputerProcess which attempts to 
comply with a user's request."}%
. instance(computerResponseTo, BinaryPredicate)
. domain(computerResponseTo, a_1, ComputerResponse)
. domain(computerResponseTo, a_2, UserRequest)
%{computerResponseTo
"(&%computerResponseTo ?Response ?Request) means that 
?Response is a &%ComputerResponse to the &%UserRequest ?Request."}%
. instance(responseTime, BinaryPredicate)
. domain(responseTime, a_1, UserRequest)
. domain(responseTime, a_2, TimeDuration)
%{responseTime
"The time it takes for the computer to comply 
with a user's request, such as looking up a customer record."}%
. responseTime(vRequest, vTime)
  /\ computerResponseTo(vResponse, vRequest) =>
      duration(WhenFn(vResponse), vTime)
. subrelation(responseRate, frequency)
. domain(responseRate, a_1, ComputerResponse)
. domain(responseRate, a_2, TimeDuration)
%{responseRate
"(&%responseRate ?Response ?Period) means 
that ?Period is the period at which the computer sends its ?Response."}%
. subrelation(requestRate, frequency)
. domain(requestRate, a_1, UserRequest)
. domain(requestRate, a_2, TimeDuration)
%{requestRate
"(&%requestRate ?Request ?Period) means that 
?Period is the period at which the user sends its ?Request."}%
. subclass(Multitasking, ComputerProcess)
%{Multitasking
"The running of two or more programs in one 
computer at the same time. The number of programs that can be effectively 
multitasked depends on the type of multitasking performed (preemptive vs 
cooperative), CPU speed and memory and disk capacity."}%
. instance(vProcess, Multitasking) =>
      exists vProgram1: U; vProgram2: U
          . programRunning(vProcess, vProgram1)
            /\ programRunning(vProcess, vProgram2)
            /\ not vProgram1 = vProgram2
. subclass(ComputerTask, ComputerProcess)
%{ComputerTask
"In a multitasking environment, an 
independently running program or subprogram. Each task is assigned 
a task number."}%
. instance(vTask, ComputerTask) =>
      exists vProgram: U; vProcess: U
          . part(vTask, vProcess)
            /\ instance(vProcess, Multitasking)
            /\ programRunning(vTask, vProgram)
. subclass(ComputerResource, ComputationalSystem)
%{ComputerResource
"One element of hardware, software or data 
that is part of a larger system.  For example, network resources are the 
available servers and printers in the network. Software resources can be 
programs, utilities or even smaller elements within a program. Data 
resources are the files and databases that can be accessed."}%
. instance(vResource, ComputerResource) =>
      exists vSystem: U
          . instance(vSystem, ComputationalSystem)
            /\ part(vResource, vSystem)
. subclass(NetworkResource, ComputerResource)
%{NetworkResource
"Network resources are the available 
servers and printers in the network."}%
. instance(vResource, NetworkResource) =>
      instance(vResource, Server) \/ instance(vResource, Printer)
. subclass(Printer, ComputerOutputDevice)
%{Printer
"A device that converts computer output into 
printed images."}%
. subclass(Server, ComputationalSystem)
%{Server
"A computer in a network shared by multiple users. 
The term may refer to both the hardware and software or just the software 
that performs the service."}%
. subrelation(load, measure)
. domain(load, a_1, ComputerComponent)
. domain(load, a_2, ConstantQuantity)
%{load
"In performance measurement, the current use of a 
system as a percentage of total capacity."}%
. load(vSystem, vLoad) =>
      exists vEvent: U . performanceResult(vEvent, vSystem, vLoad)
. subclass(ComputerData, ContentBearingObject)
%{ComputerData
"The term &%ComputerData refers to files 
and databases, text documents, and images."}%
. instance(vData, ComputerData) =>
      exists vHardware: U
          . instance(vHardware, ComputerHardware)
            /\ located(vData, vHardware)
. subclass(ImageFile, ComputerData)
%{ImageFile
"A picture (graphic) stored in a particular 
coding scheme and stored as a file.  Note that this can include vector as 
well as raster images.  Raster images will entail a particular number of 
horizontal and vertical pixels.  Vector images will not entail a 
particular size or resolution."}%
. subclass(Database, ComputerData)
%{Database
"A set of related files that is created and 
managed by a database management system (DBMS)."}%
. subrelation(dataProcessed, patient)
. domain(dataProcessed, a_1, ComputerProcess)
. domain(dataProcessed, a_2, ComputerData)
%{dataProcessed
"The data being processed during a 
&%ComputerProcess."}%
. subclass(Abort, ComputerProcess)
%{Abort
"To exit a function or application without saving 
any data that has been changed."}%
. instance(processAborted, BinaryPredicate)
. instance(processAborted, AsymmetricRelation)
. domain(processAborted, a_1, Abort)
. domain(processAborted, a_2, ComputerProcess)
%{processAborted
"(&%processAborted ?Abort ?Process) means 
that the &%ComputerProcess ?Process is aborted as the result of ?Abort."}%
. processAborted(vAbort, vProcess)
  /\ dataProcessed(vProcess, vData) =>
      not (exists vSave: U
               . instance(vSave, DataSaving) /\ dataProcessed(vSave, vData))
. subclass(DataSaving, ComputerProcess)
%{DataSaving
"A process of copying the document, record or 
image being worked on onto a storage medium. Saving updates the file by 
writing the data that currently resides in memory (RAM) onto disk or tape. 
Most applications prompt the user to save data upon exiting."}%
. instance(vSave, DataSaving) =>
      exists vData: U . dataProcessed(vSave, vData)
. subclass(DataCompression, ComputerProcess)
%{DataCompression
"Encoding data to take up less storage 
space."}%
. instance(vCompression, DataCompression)
  /\ dataProcessed(vCompression, vData)
  /\ holdsDuring(ImmediatePastFn(WhenFn(vCompression)),
                 memorySize(vData, MeasureFn(vMemory, vMeasure)))
  /\ holdsDuring(ImmediateFutureFn(WhenFn(vCompression)),
                 memorySize(vData, MeasureFn(vNewMemory, vMeasure))) =>
      lessThan(vNewMemory, vMemory)
. subclass(ProcessTask, Abstract)
%{ProcessTask
"A function to be performed."}%
. instance(vTask, ProcessTask) =>
      exists vProcess: U . task(vProcess, vTask)
. instance(task, BinaryPredicate)
. instance(task, AsymmetricRelation)
. domain(task, a_1, ComputerProcess)
. domain(task, a_2, ProcessTask)
%{task
"(&%task ?Process ?Task) means that ?Task is a function to 
be performed by the &%ComputerProcess ?Process."}%
. subclass(UsingAResource, ComputerProcess)
%{UsingAResource
"A &%ComputerProcess which requires access to a 
&%ComputerResource."}%
. instance(vUsing, UsingAResource) =>
      exists vResource: U . resourceUsed(vUsing, vResource)
. instance(vUsing, UsingAResource)
  /\ resourceUsed(vUsing, vResource)
  /\ agent(vUsing, vAgent) =>
      uses(vAgent, vResource)
. subclass(ReusingAResource, ComputerProcess)
%{ReusingAResource
"To use the same resource again."}%
. instance(vUsing, ReusingAResource) =>
      exists vResource: U . resourceUsed(vUsing, vResource)
. instance(vReusing, ReusingAResource)
  /\ resourceUsed(vReusing, vResource) =>
      exists vUsing: U
          . instance(vUsing, UsingAResource)
            /\ resourceUsed(vUsing, vResource)
            /\ earlier(WhenFn(vUsing), WhenFn(vReusing))
. subrelation(resourceUsed, patient)
. domain(resourceUsed, a_1, ComputerProcess)
. domain(resourceUsed, a_2, ComputerResource)
%{resourceUsed
"(&%resourceUsed ?Process ?Resource) means that the 
&%ComputerProcess ?Process has access to the &%ComputerResource ?Resource."}%
. instance(imageResolution, BinaryPredicate)
. domain(imageResolution, a_1, ImageFile)
. domain(imageResolution, a_2, PhysicalQuantity)
%{imageResolution
"The degree of sharpness of a displayed or printed 
image."}%
. subclass(Optimization, ProcessTask)
. disjoint(Optimization, SatisfyingRequirements)
%{Optimization
"Optimization means finding the best solution according 
to a set of criteria. For a computer program, an optimal solution would be the 
fastest program (according to some benchmark) or the smallest program."}%
. subclass(SatisfyingRequirements, ProcessTask)
%{SatisfyingRequirements
"&%SatisfyingRequirements covers cases of 
finding a solution that satisfies necessary conditions."}%
. subclass(Utility, ComputerProgram)
%{Utility
"A program that performs a specific task related to the 
management of computer functions, resources, or files. Utility programs range 
from the simple to the sophisticated, and many programmers specialize in producing 
and distributing them as shareware.  There are utilities that perform file and 
directory management, data compression, disk defragmentation and repair, system 
diagnostics, graphics viewing, and system security, for example. Many utilities 
are written as memory-resident programs meant to serve as adjuncts to operating 
systems. Many operating systems incorporate such popular utility functions as 
undeleting, password protection, memory management, virus protection, and file 
compression."}%
. subclass(UserAccount, ContentBearingObject)
%{UserAccount
"An established relationship between a user and a 
computer, network or information service. User accounts require a username and 
password, and new user accounts are given a default set of permissions."}%
. instance(vAccount, UserAccount) =>
      exists vUser: U . hasAccount(vUser, vAccount)
. subclass(UserName, SymbolicString)
%{UserName
"The name a person uses to identify himself or herself 
when logging onto a computer system or online service."}%
. hasAccount(vUser, vAccount) =>
      exists vName: U . userName(vUser, vName)
. subrelation(userName, names)
. instance(userName, AsymmetricRelation)
. domain(userName, a_1, ComputerUser)
. domain(userName, a_2, UserName)
%{userName
"(&%userName ?Name ?User) means that ?Name is the name 
the &%ComputerUser uses to identify himself or herself when logging onto a 
computer system."}%
. subrelation(hasAccount, possesses)
. instance(hasAccount, AsymmetricRelation)
. domain(hasAccount, a_1, ComputerUser)
. domain(hasAccount, a_2, UserAccount)
%{hasAccount
"(&%hasAccount ?User ?Account) holds if ?User is 
assigned the &%UserAccount ?Account."}%
. subclass(ComputerPassword, SymbolicString)
%{ComputerPassword
"A word or code used to serve as a security 
measure against unauthorized access to data. It is normally managed by the 
operating system or DBMS."}%
. hasAccount(vUser, vAccount) =>
      exists vPassword: U . password(vPassword, vUser)
. subrelation(password, names)
. instance(password, AsymmetricRelation)
. domain(password, a_2, ComputerUser)
. domain(password, a_1, ComputerPassword)
%{password
"(&%password ?Password ?User) means that ?Password is 
the password the &%ComputerUser uses while logging onto a computer system."}%
. subclass(Report, ComputerData)
%{Report
"A collection of data, presented in a preformatted 
manner."}%
. subrelation(hostStatus, attribute)
. domain(hostStatus, a_1, Computer)
. domain(hostStatus, a_2, ComputerStatus)
%{hostStatus
"(&%hostStatus ?Computer ?Status) means that ?Status 
describes the status of the Computer, such as &%HostDown, &%HostReady."}%
. subclass(ComputerStatus, Attribute)
%{ComputerStatus
"An attribute which describes status of the 
&%Computer, such as &%HostDown, &%HostReady."}%
. instance(HostDown, ComputerStatus)
%{HostDown
"An attribute which applies to a computer that ceases to 
operate due to hardware or software failure."}%
. instance(HostReady, ComputerStatus)
%{HostReady
"An attribute which applies to a computer that is 
functional, operating properly, and ready to receive work requests."}%
. instance(hostJitter, BinaryPredicate)
. domain(hostJitter, a_1, Computer)
. domain(hostJitter, a_2, ConstantQuantity)
%{hostJitter
"Interference on an analog line caused by a variation 
of a signal from its reference timing slots. Jitter can cause problems in the receipt 
of data and any subsequent processing of that data."}%
. subclass(Epoch, TimePoint)
%{Epoch
"An instant in time that is arbitrarily selected as a point 
of reference."}%
. instance(UnixEpoch, Epoch)
%{UnixEpoch
"The Unix epoch or point of reference is 00:00:00 UTC, 
January 1, 1970."}%
. UnixEpoch =
      SecondFn(a_0,
               MinuteFn(a_0,
                        HourFn(a_0,
                               DayFn(a_1, MonthFn(a_1, YearFn(a_1_9_7_0))))))
. subrelation(collectRate, frequency)
. domain(collectRate, a_1, ComputationalSystem)
. domain(collectRate, a_2, TimeDuration)
%{collectRate
"(&%collectRate ?System ?Period) holds if ?Period is 
the period at which &%ComputationalSystem ?System collects data."}%
. subrelation(sendRate, frequency)
. domain(sendRate, a_1, ComputationalSystem)
. domain(sendRate, a_2, TimeDuration)
%{sendRate
"(&%sendRate ?Program ?Period) holds if ?Period is the 
period at which the &%ComputationalSystem ?System sends data reports."}%
. subclass(BerkeleySoftwareDistribution, OperatingSystem)
%{BerkeleySoftwareDistribution
"Berkeley Software Distribution (UNIX), 
a version of Unix distributed by the University of California at Berkeley. Widely 
used as a standard for early versions of Unix and Unix software libraries."}%

sort U
ops Adjacent, Agent, AgentPoweredVehicle, AirRoute, AirTransitway,
    Aircraft, AircraftCarrier, Airplane, Airport,
    AirportByRunwaySurface, AirportClassification,
    AirportWithPavedRunway, AirportWithUnpavedRunway, Airway,
    Ambulance, Anchorage, ArcticOcean, Artifact, Asphalt,
    AsymmetricRelation, Attribute, Automobile, Barge, BargeCarrierShip,
    Bicycle, BinaryFunction, BinaryPredicate, Boxcar, Bridge,
    BroadGauge, BroadGaugeRail, BroadGaugeRailway, Building,
    BulkCargoShip, BusinessRailcar, CIAAirportLengthClassification,
    CabCar, CableShip, CanalLock, CanalLockGate, CanalSystem, Canoe,
    CarDistributionSystem, CargoShip, CargoVehicle, CaseRole,
    Catamaran, CementCarrierShip, Channel, ChemicalProduct,
    ChemicalTankerShip, ChiefSteward, City, Class, ClassIIIRailroad,
    ClassIIRailroad, ClassIRailroad, Collection,
    CombinationBulkCarrierShip, CommonCarrier, CommunicationRadio,
    Concrete, ContainerPort, ContainerShip, ContentBearingObject,
    ContractCarrier, CraneShip, CrewDormCar, CrudeOilPipeline,
    CruiseShip, CubicFoot, Cycle, Dam, DeckCargoShip, DeepDraftHarbor,
    DeepDraftPort, DeepwaterPort, Device, DisplacementHullWatercraft,
    Door, Drawbridge, Dredger, DrillingShip, DryBulkCarrierShip,
    DualGauge, DualGaugeRail, DualGaugeRailway, EarthsAtmosphere,
    EasternHemisphere, ElectricDevice, ElectrifiedRailway,
    ElectrifiedRailwayCar, EmergencyRoadVehicle, EmergencyVehicle,
    Expressway, False, FerryBoat, FireBoat, FireEngine, FirstMate,
    FishCarrierShip, FishFactoryShip, FishingShip, FishingVessel,
    FiveWellStackCar, FixedBridge, FlagOfConvenienceRegister, Flatcar,
    Fluid, Foot, FreightCar, FunctionQuantity, GalleryCar,
    GeneralCargoShip, GeographicArea, GeopoliticalArea, GliderPlane,
    Group, Harbor, HeadEndCar, Helicopter, Heliport, HomeGarage,
    HopperDredger, Human, HydraCushionFreightCar, IceBreakerShip,
    IntermodalTrip, InternalAttribute, InternalShipRegister,
    IrreflexiveRelation, JetAirplane, Kayak, LandTransitway,
    LandVehicle, Lane, LengthMeasure, LightTruck,
    LiquefiedGasTankerShip, Liquid, Livestock, LivestockCarrierShip,
    Locomotive, LocomotiveCoalCar, LongRunwayAirport, LongTon,
    ManufacturedProduct, MassMeasure, MediumLengthRunwayAirport,
    MerchantMarine, MerchantMarineFn, MerchantMarineShip, Meter,
    MilitaryShip, Mineral, Motion, MotorHopper, MotorRailcar,
    MotorScooter, Motorcycle, MovableBridge, MultiModalTransitSystem,
    MultifunctionalLargeLoadCarrierShip, MultihullWatercraft,
    MultipleTrackRailway, NarrowGauge, NarrowGaugeRail,
    NarrowGaugeRailway, Nation, NationalShipRegister, NaturalGas,
    NaturalGasPipeline, Near, NonnegativeInteger, NorthernSeaRoute,
    NorthwestPassage, Number, Object, Ocean, OceanLiner,
    OffshoreAnchorage, OffshoreShipRegister, OffshoreSupplyShip,
    OffshoreSupportShip, OffshoreWellProductionShip, OpenTopRailcar,
    OperatingFn, OreCarrierShip, Organization, OutfitCar, OverseasArea,
    PCCCar, PalletizedCargoShip, ParkingGarage, PassengerAndCargoShip,
    PassengerRailcar, PassengerShip, PassengerVehicle, Paved,
    PavedRunway, PersonalWatercraft, Petroleum, PetroleumProduct,
    PetroleumProductPipeline, PetroleumTankerShip, Physical,
    PhysicalQuantity, PhysicalSystem, Pipeline, PlaningHullWatercraft,
    PontoonBridge, PortCity, PortFacility, PortFacilityFn, Position,
    PoundMass, PoweredRoadVehicle, PoweredVehicle, PrivateRailcar,
    Process, Product, PropellerJet, PropellerPlane, PusherTug,
    Quantity, QuaternaryPredicate, RadioOperator, RailCarrierControl,
    RailGauge, RailJunction, RailTransportationSystem, RailVehicle,
    Railcar, RailcarCarrierShip, RailroadCompany, RailroadTrack,
    Railway, RailwayTerminal, RefrigeratedCargoShip, RefrigeratorCar,
    Region, RegistryTon, ResearchShip, River, RiverPort, Road,
    RoadJunction, RoadVehicle, Roadway, Rocket, RollOnRollOffCargoShip,
    RollingStock, RotaryDumpCar, Runabout, Runway, Sailboat,
    ScaleTestCar, Scooter, Sea, SeaLane, SeaPort, SecondaryHighway,
    SelfConnectedObject, SelfDischargingBulkCarrierShip, SetOrClass,
    Ship, ShipBerth, ShipBerthing, ShipBerthingFn, ShipCabin,
    ShipCaptain, ShipCompartment, ShipContainer, ShipCrew, ShipCrewFn,
    ShipDeck, ShipRegister, ShipRegisterFn, ShipRegistration,
    ShippingChannel, ShippingLane, ShortRunwayAirport,
    ShortSeaPassengerShip, SludgeDisposalVessel, SpecializedTankerShip,
    SpineCar, StandardGauge, StandardGaugeRail, StandardGaugeRailway,
    StationaryArtifact, Street, Streetcar, SurfacedRoadway, SystemArc,
    SystemArcFn, SystemElement, SystemNode, TankCar, TerminalBuilding,
    TernaryPredicate, TollBooth, TrackGauge, TrafficLight, Trail,
    Trailer, Train, TrainStation, TransitFn, TransitRoute,
    TransitShelter, TransitStop, TransitSystem, TransitTerminal,
    Transitway, TransitwayJunction, TransitwayObstacle, Translocation,
    Transportation, TransportationAuthority, TransportationCompany,
    TransportationDevice, TransportationEquipment, TransportationFn,
    TransportationSystem, Trawler, Trip, TripFn, Truck, True, TugBoat,
    Tunnel, UnaryFunction, UniModalTransitSystem, UnitOfMeasure,
    Unpaved, UnpavedRunway, UnpoweredVehicle, UnsurfacedRoadway,
    UreaCarrierShip, Vehicle, VehicleCarrierShip, VehicleRegistration,
    VeryLongRunwayAirport, VeryShortRunwayAirport, VolumeMeasure,
    WaterArea, WaterJunction, WaterTransportationSystem, Watercraft,
    Waterway, WesternHemisphere, WoodChipsCarrierShip, a_0, a_1,
    a_1_0_0, a_1_0_0_0, a_1_3_Period_7, a_1_5_2_3, a_1_5_2_4,
    a_1_Period_4_3_5, a_1_Period_4_4, a_2, a_2_2_4_0, a_2_4_3_7,
    a_2_4_3_8, a_3, a_3_0_4_7, a_4, a_4_5, a_9_1_4,
    a_C_h_e_m_i_c_a_l_Minus_O_i_l_T_a_n_k_e_r_S_h_i_p,
    a_C_o_m_b_i_n_a_t_i_o_n_B_u_l_k_Minus_O_i_l_C_a_r_r_i_e_r_S_h_i_p,
    a_C_o_m_b_i_n_a_t_i_o_n_O_r_e_Minus_O_i_l_C_a_r_r_i_e_r_S_h_i_p,
    a_C_o_n_t_a_i_n_e_r_Minus_R_o_R_o_C_a_r_g_o_S_h_i_p,
    a_L_i_q_u_e_f_i_e_d_G_a_s_Minus_C_h_e_m_i_c_a_l_T_a_n_k_e_r_S_h_i_p,
    a_P_a_s_s_e_n_g_e_r_Minus_L_a_n_d_i_n_g_C_r_a_f_t,
    a_Quot_G_r_o_s_s_Space_T_o_n_Quot, a_Quot_J_e_t_Space_S_k_i_Quot,
    a_Quot_L_i_q_u_e_f_i_e_d_Space_g_a_s_Space_c_a_r_r_i_e_r_Quot,
    a_Quot_N_o_r_t_h_e_r_n_Space_S_e_a_Space_R_o_u_t_e_Quot,
    a_Quot_N_o_r_t_h_w_e_s_t_Space_P_a_s_s_a_g_e_Quot,
    a_Quot_R_e_g_i_s_t_r_y_Space_T_o_n_Quot, a_Quot_R_o_Minus_R_o_Quot,
    a_Quot_c_a_p_t_i_v_e_Space_r_e_g_i_s_t_e_r_Quot,
    a_Quot_c_h_e_m_i_c_a_l_Space_c_a_r_r_i_e_r_Quot,
    a_Quot_c_o_m_b_i_n_a_t_i_o_n_Space_c_a_r_r_i_e_r_Quot,
    a_Quot_c_o_m_m_e_r_c_i_a_l_Space_v_e_s_s_e_l_Quot,
    a_Quot_f_l_a_g_Space_o_f_Space_c_o_n_v_e_n_i_e_n_c_e_Quot,
    a_Quot_f_l_a_g_Space_o_f_Space_r_e_g_i_s_t_r_y_Quot,
    a_Quot_f_l_a_g_Space_s_t_a_t_e_Quot, a_Quot_f_r_e_i_g_h_t_e_r_Quot,
    a_Quot_h_e_a_v_y_Space_c_a_r_g_o_Space_c_a_r_r_i_e_r_Quot,
    a_Quot_h_e_a_v_y_Space_l_i_f_t_Space_c_a_r_r_i_e_r_Quot,
    a_Quot_h_e_l_i_p_a_d_Quot, a_Quot_h_e_l_i_p_o_r_t_Quot,
    a_Quot_i_n_t_e_r_s_e_c_t_i_o_n_Quot, a_Quot_j_u_n_c_t_i_o_n_Quot,
    a_Quot_m_e_r_c_h_a_n_t_Space_s_h_i_p_Quot,
    a_Quot_o_f_f_s_h_o_r_e_Space_s_h_i_p_Space_r_e_g_i_s_t_e_r_Quot,
    a_Quot_o_i_l_Space_t_a_n_k_e_r_Quot,
    a_Quot_o_p_e_n_Space_r_e_g_i_s_t_e_r_Quot,
    a_Quot_p_e_t_r_o_l_e_u_m_Space_t_a_n_k_e_r_Quot,
    a_Quot_r_e_f_r_i_g_e_r_a_t_e_d_Space_c_a_r_r_i_e_r_Quot,
    a_Quot_r_o_l_l_Minus_o_n_Space_r_o_l_l_Minus_o_f_f_Quot,
    a_Quot_s_h_i_p_Space_r_e_g_i_s_t_r_a_t_i_o_n_Quot, agent,
    capableAtLocation, cargoType, component, equipmentCount,
    fOCShipsByOrigin, flagState, fleetDeadWeightTonnage,
    fleetGrossRegisteredTonnage, instrument, ladenDraft,
    lengthOfBroadGaugeRailway, lengthOfCrudeOilPipeline,
    lengthOfDualGaugeRailway, lengthOfElectrifiedRailway,
    lengthOfExpresswaySystem, lengthOfMultipleTrackRailway,
    lengthOfNarrowGaugeRailway, lengthOfNaturalGasPipeline,
    lengthOfPavedHighway, lengthOfPetroleumProductPipeline,
    lengthOfStandardGaugeRailway, lengthOfUnclassifiedGaugeRailway,
    lengthOfUnpavedHighway, marineInventory, measure, memberType,
    memberTypeCount, navigableForDraft, navigableForShippingTonnage,
    operator, partlyLocated, passengerCapacityMaxNumber, path, patient,
    powerComponent, routeBetween, subSystem, subordinateInOrganization,
    subordinatePosition, systemLink, systemPart,
    totalFacilityTypeInArea, totalLengthOfHighwaySystem,
    totalLengthOfRailwaySystem, totalLengthOfWaterways,
    totalPipelineInArea, trackWidth, trafficableForTrafficType,
    transitwayCapacityCount, transitwayCapacityRate,
    vesselDeadWeightTonnage, vesselDisplacement,
    vesselGrossRegisteredTonnage
        : U;
    ExtensionFn, MerchantMarineFn, OperatingFn, ShipRegisterFn,
    TransitFn, TransportationFn, TripFn, WhenFn, a_n_o_t
        : U -> U;
    AdditionFn, KappaFn, MeasureFn, MultiplicationFn, SystemArcFn,
    UnionFn, a_a_n_d, instance, located, meetsSpatially, partlyLocated
        : U * U -> U;
    KappaFn : U * U * U -> U
preds hasPurpose, length : U;
      attribute, cardinality, cargoType, connected, depth, disjoint,
      employs, flagState, fleetDeadWeightTonnage,
      fleetGrossRegisteredTonnage, geographicSubregion, greaterThan,
      greaterThanOrEqualTo, hasPurpose, hasSkill, holdsDuring, instance,
      instrument, ladenDraft, length, lengthOfBroadGaugeRailway,
      lengthOfCrudeOilPipeline, lengthOfDualGaugeRailway,
      lengthOfElectrifiedRailway, lengthOfExpresswaySystem,
      lengthOfMultipleTrackRailway, lengthOfNarrowGaugeRailway,
      lengthOfNaturalGasPipeline, lengthOfPavedHighway,
      lengthOfPetroleumProductPipeline, lengthOfStandardGaugeRailway,
      lengthOfUnclassifiedGaugeRailway, lengthOfUnpavedHighway, lessThan,
      lessThanOrEqualTo, located, marineInventory, measure,
      meetsSpatially, member, memberCount, memberType, names,
      navigableForDraft, navigableForShippingTonnage, part,
      partlyLocated, path, patient, possesses, powerComponent,
      properPart, property, range, rangeSubclass, relatedInternalConcept,
      subCollection, subSystem, subclass, subrelation,
      subsumesContentInstance, surface, systemPart,
      totalLengthOfHighwaySystem, totalLengthOfRailwaySystem,
      totalLengthOfWaterways, totalPipelineInArea, trackWidth,
      trafficableForTrafficType, vesselDisplacement : U * U;
      capability, connects, domain, domainSubclass, equipmentCount,
      fOCShipsByOrigin, holds, memberTypeCount, occupiesPosition,
      orientation, partition, range, subordinateInOrganization,
      subordinatePosition, systemLink, totalFacilityTypeInArea : U * U *
                                                                 U;
      capableAtLocation, contraryAttribute : U * U * U * U
vars vAIRPORT, vAMOUNT, vAMOUNT1, vAMOUNT2, vANCHOR, vARC, vAREA,
     vCAR, vCARRY, vCITY, vCOMPARTMENT, vCOUNT, vCRAFT, vDECK, vDEPTH,
     vDRAFT, vDWT, vEV, vEVENT, vFLEET, vGAS, vGOING, vGROUP, vGRT,
     vHARBOR, vHELO, vHIGHWAY, vHIGHWAYS, vHOME, vHUMAN, vINTERNAL,
     vITEM, vL, vLENGTH, vLENGTH1, vLENGTH2, vMEMBER, vMM, vMOTION,
     vMOVER, vNATIONAL, vNODE1, vNODE2, vNUM, vNUMBER, vNUMBER1,
     vNUMBER2, vO, vOB, vOBJECT, vOBJECT1, vOBJECT2, vOFFSHORE, vOIL,
     vORG, vP, vPART, vPAVED, vPERSON, vPERSON1, vPERSON2, vPIPE,
     vPIPELINE, vPLACE, vPORT, vRAIL, vRAILWAY, vRAILWAYS, vREGION,
     vREGISTER, vREGISTRATION, vRIVER, vROLE, vROLE1, vROLE2, vROUTE,
     vRR, vRUNWAY, vSEA, vSHIP, vSTUFF, vSUB, vSUBGROUP, vSURFACE,
     vSYSTEM, vT, vTONNAGE, vTOTAL, vTRACK1, vTRACK2, vTRAIN, vTRANS,
     vTRANSPORT, vTRIP, vTYPE, vUNIT, vUNPAVED, vUV, vVEHICLE, vVESSEL,
     vWATER, vWATERWAY, vWAY, vWIDTH, vX, vY, vmover, vplace, vtype: U
. instance(totalLengthOfRailwaySystem, BinaryPredicate)
. domain(totalLengthOfRailwaySystem, a_1, GeographicArea)
. domain(totalLengthOfRailwaySystem, a_2, LengthMeasure)
%{totalLengthOfRailwaySystem
"(&%totalLengthOfRailwaySystem ?AREA ?LENGTH) means that the sum  
length of all railway routes in the &%GeographicArea ?AREA 
is the &%LengthMeasure ?LENGTH."}%
. totalLengthOfRailwaySystem(vAREA, vLENGTH) <=>
      length(KappaFn(vRAILWAYS,
                     a_a_n_d(instance(vRAILWAYS, Railway),
                             located(vRAILWAYS, vAREA)),
                     vLENGTH))
. totalLengthOfRailwaySystem(vAREA, vLENGTH)
  /\ greaterThan(vLENGTH, a_0) =>
      exists vRAILWAY: U
          . instance(vRAILWAY, Railway) /\ located(vRAILWAY, vAREA)
. instance(lengthOfElectrifiedRailway, BinaryPredicate)
. domain(lengthOfElectrifiedRailway, a_1, GeographicArea)
. domain(lengthOfElectrifiedRailway, a_2, LengthMeasure)
%{lengthOfElectrifiedRailway
"(&%lengthOfElectrifiedRailway ?AREA ?LENGTH) means that the sum  
length of all &%ElectrifiedRailway routes in the &%GeographicArea 
?AREA is the &%LengthMeasure ?LENGTH."}%
. lengthOfElectrifiedRailway(vAREA, vLENGTH) <=>
      length(KappaFn(vRAILWAYS,
                     a_a_n_d(instance(vRAILWAYS, ElectrifiedRailway),
                             located(vRAILWAYS, vAREA)),
                     vLENGTH))
. lengthOfElectrifiedRailway(vAREA, vLENGTH)
  /\ greaterThan(vLENGTH, a_0) =>
      exists vRAILWAY: U
          . instance(vRAILWAY, ElectrifiedRailway)
            /\ located(vRAILWAY, vAREA)
. instance(lengthOfMultipleTrackRailway, BinaryPredicate)
. domain(lengthOfMultipleTrackRailway, a_1, GeographicArea)
. domain(lengthOfMultipleTrackRailway, a_2, LengthMeasure)
%{lengthOfMultipleTrackRailway
"(&%lengthOfMultipleTrackRailway ?AREA ?LENGTH) means that the sum  
length of all &%MultipleTrackRailway routes in the &%GeographicArea 
?AREA is the &%LengthMeasure ?LENGTH."}%
. lengthOfMultipleTrackRailway(vAREA, vLENGTH) <=>
      length(KappaFn(vRAILWAYS,
                     a_a_n_d(instance(vRAILWAYS, MultipleTrackRailway),
                             located(vRAILWAYS, vAREA))),
             vLENGTH)
. lengthOfMultipleTrackRailway(vAREA, vLENGTH)
  /\ greaterThan(vLENGTH, a_0) =>
      exists vRAILWAY: U
          . instance(vRAILWAY, MultipleTrackRailway)
            /\ located(vRAILWAY, vAREA)
. instance(lengthOfBroadGaugeRailway, BinaryPredicate)
. domain(lengthOfBroadGaugeRailway, a_1, GeographicArea)
. domain(lengthOfBroadGaugeRailway, a_2, LengthMeasure)
%{lengthOfBroadGaugeRailway
"(&%lengthOfBroadGaugeRailway ?AREA ?LENGTH) means that the sum length 
of broad gauge railway routes in the &%GeographicArea ?AREA is the 
&%LengthMeasure ?LENGTH."}%
. lengthOfBroadGaugeRailway(vAREA, vLENGTH) <=>
      length(KappaFn(vRAILWAYS,
                     a_a_n_d(instance(vRAILWAYS, BroadGaugeRailway),
                             located(vRAILWAYS, vAREA))),
             vLENGTH)
. lengthOfBroadGaugeRailway(vAREA, MeasureFn(vLENGTH, vUNIT))
  /\ instance(vUNIT, UnitOfMeasure)
  /\ greaterThan(vLENGTH, a_0) =>
      exists vRAILWAY: U
          . instance(vRAILWAY, BroadGaugeRailway) /\ located(vRAILWAY, vAREA)
. instance(lengthOfDualGaugeRailway, BinaryPredicate)
. domain(lengthOfDualGaugeRailway, a_1, GeographicArea)
. domain(lengthOfDualGaugeRailway, a_2, LengthMeasure)
%{lengthOfDualGaugeRailway
"(&%lengthOfDualGaugeRailway ?AREA ?LENGTH) means that the sum length 
of dual gauge railway routes in the &%GeographicArea ?AREA is the 
&%LengthMeasure ?LENGTH."}%
. lengthOfDualGaugeRailway(vAREA, vLENGTH) <=>
      length(KappaFn(vRAILWAYS,
                     a_a_n_d(instance(vRAILWAYS, DualGaugeRailway),
                             located(vRAILWAYS, vAREA)),
                     vLENGTH))
. lengthOfDualGaugeRailway(vAREA, MeasureFn(vLENGTH, vUNIT))
  /\ instance(vUNIT, UnitOfMeasure)
  /\ greaterThan(vLENGTH, a_0) =>
      exists vRAILWAY: U
          . instance(vRAILWAY, DualGaugeRailway) /\ located(vRAILWAY, vAREA)
. instance(lengthOfNarrowGaugeRailway, BinaryPredicate)
. domain(lengthOfNarrowGaugeRailway, a_1, GeographicArea)
. domain(lengthOfNarrowGaugeRailway, a_2, LengthMeasure)
%{lengthOfNarrowGaugeRailway
"(&%lengthOfNarrowGaugeRailway ?AREA ?LENGTH) means that the sum length 
of narrow gauge railway routes in the &%GeographicArea ?AREA is the 
&%LengthMeasure ?LENGTH."}%
. lengthOfNarrowGaugeRailway(vAREA, vLENGTH) <=>
      length(KappaFn(vRAILWAYS,
                     a_a_n_d(instance(vRAILWAYS, NarrowGaugeRailway),
                             located(vRAILWAYS, vAREA)),
                     vLENGTH))
. lengthOfNarrowGaugeRailway(vAREA, MeasureFn(vLENGTH, vUNIT))
  /\ instance(vUNIT, UnitOfMeasure)
  /\ greaterThan(vLENGTH, a_0) =>
      exists vRAILWAY: U
          . instance(vRAILWAY, NarrowGaugeRailway)
            /\ located(vRAILWAY, vAREA)
. instance(lengthOfStandardGaugeRailway, BinaryPredicate)
. domain(lengthOfStandardGaugeRailway, a_1, GeographicArea)
. domain(lengthOfStandardGaugeRailway, a_2, LengthMeasure)
%{lengthOfStandardGaugeRailway
"(&%lengthOfStandardGaugeRailway ?AREA ?LENGTH) means that the sum length 
of standard gauge railway routes in the &%GeographicArea ?AREA is the 
&%LengthMeasure ?LENGTH."}%
. lengthOfStandardGaugeRailway(vAREA, vLENGTH) <=>
      length(KappaFn(vRAILWAYS,
                     a_a_n_d(instance(vRAILWAYS, StandardGaugeRailway),
                             located(vRAILWAYS, vAREA))),
             vLENGTH)
. lengthOfStandardGaugeRailway(vAREA, MeasureFn(vLENGTH, vUNIT))
  /\ instance(vUNIT, UnitOfMeasure)
  /\ greaterThan(vLENGTH, a_0) =>
      exists vRAILWAY: U
          . instance(vRAILWAY, StandardGaugeRailway)
            /\ located(vRAILWAY, vAREA)
. instance(lengthOfUnclassifiedGaugeRailway, BinaryPredicate)
. domain(lengthOfUnclassifiedGaugeRailway, a_1, GeographicArea)
. domain(lengthOfUnclassifiedGaugeRailway, a_2, LengthMeasure)
%{lengthOfUnclassifiedGaugeRailway
"(&%lengthOfUnclassifiedGaugeRailway ?AREA ?LENGTH) means that the sum length 
of railway routes in the &%GeographicArea ?AREA classified as something 
other than broad, dual, narrow, or standard gauge is the &%LengthMeasure 
?LENGTH."}%
. lengthOfUnclassifiedGaugeRailway(vAREA, vLENGTH) <=>
      length(KappaFn(vRAILWAYS,
                     a_a_n_d(located(vRAILWAYS, vAREA),
                             a_n_o_t(instance(vRAILWAYS,
                                              UnionFn(StandardGaugeRailway,
                                                      UnionFn(BroadGaugeRailway,
                                                              UnionFn(DualGaugeRailway,
                                                                      NarrowGaugeRailway))))))),
             vLENGTH)
. lengthOfUnclassifiedGaugeRailway(vAREA,
                                   MeasureFn(vLENGTH, vUNIT))
  /\ instance(vUNIT, UnitOfMeasure)
  /\ greaterThan(vLENGTH, a_0) =>
      exists vRAILWAY: U
          . instance(vRAILWAY, Railway) /\ located(vRAILWAY, vAREA)
. subclass(Railway, LandTransitway)
. subclass(Railway, StationaryArtifact)
%{Railway
"&%Railway is the subclass of 
&%LandTransitways that have rails along which &%Trains may travel.  
A railway consists of the rail bed, sleepers, tracks, electric 
rails, switches, sensors, lights, crossing grades, and any other 
integral machinery or parts of a section of railway."}%
. subclass(BroadGaugeRailway, Railway)
. subclass(DualGaugeRailway, Railway)
. subclass(NarrowGaugeRailway, Railway)
. subclass(StandardGaugeRailway, Railway)
. subclass(ElectrifiedRailway, Railway)
%{ElectrifiedRailway
"&%ElectrifiedRailway is the subclass 
of &%Railway representing electrified railways."}%
. subclass(MultipleTrackRailway, Railway)
%{MultipleTrackRailway
"&%MultipleTrackRailway is the 
subclass of &%Railway whose instances consists of two or more sets of 
tracks running in parallel, allowing motion in both directions along 
a route without the need for sidings and delays."}%
. instance(vRAIL, MultipleTrackRailway) =>
      exists vTRACK1: U; vTRACK2: U
          . instance(vTRACK1, RailroadTrack)
            /\ instance(vTRACK2, RailroadTrack)
            /\ not vTRACK1 = vTRACK2
            /\ part(vTRACK1, vRAIL)
            /\ part(vTRACK2, vRAIL)
. subclass(RailroadTrack, StationaryArtifact)
%{RailroadTrack
"&%RailroadTrack is the class of 
&%StationaryArtifacts consisting of rails laid on supports to form 
a track for railway vehicles."}%
. subclass(TrackGauge, InternalAttribute)
%{TrackGauge
"&%TrackGauge is the collection of 
attributes that characterize sections of railways, according 
to the set distances between the two tracks of the &%Railway.  
Precisely, the measurement of track gauge is the distance 
between the inner vertical surfaces of the heads of the rails.  
Track gauges include broad, dual, standard, and narrow gauges."}%
. instance(trackWidth, BinaryPredicate)
. subrelation(trackWidth, measure)
%{trackWidth
"The distance between the two rails
of a &%Railway."}%
. domain(trackWidth, a_1, Railway)
. domain(trackWidth, a_2, LengthMeasure)
. instance(BroadGauge, TrackGauge)
%{BroadGauge
"&%BroadGauge is the attribute of 
any &%Railway that has a &%TrackGauge wider than &%StandardGauge."}%
. instance(vRR, Railway)
  /\ property(vRR, BroadGauge)
  /\ trackWidth(vRR, vWIDTH) =>
      greaterThan(vWIDTH, MeasureFn(a_1_Period_4_4, Meter))
. instance(StandardGauge, TrackGauge)
%{StandardGauge
"&%StandardGauge is the attribute  
of &%Railways having the standardized track width that is 
used in North America and most Western European countries.  
The standard is typically a distance of 4 ft., 8-1/2 inches 
(1.44 meters). There is some variation within which usage is 
compatible, e.g., 1.35 meters. Standard gauge originated in 
England and was mandated by the U.S. Federal government for the 
U.S. Transcontinental Railroad.  It is also used in Canada, 
Great Britain, and most of Western Europe (but not in Ireland, 
or Spain and Portugal."}%
. instance(vRR, Railway)
  /\ property(vRR, StandardGauge)
  /\ trackWidth(vRR, vWIDTH) =>
      greaterThanOrEqualTo(vWIDTH, MeasureFn(a_1_Period_4_3_5, Meter))
. instance(vRR, Railway)
  /\ property(vRR, StandardGauge)
  /\ trackWidth(vRR, vWIDTH) =>
      lessThanOrEqualTo(vWIDTH, MeasureFn(a_1_Period_4_4, Meter))
. instance(NarrowGauge, TrackGauge)
%{NarrowGauge
"&%NarrowGauge is the attribute  
of any &%Railway that has a &%TrackGauge narrower than 
&%StandardGauge.  There are several common track widths 
among &%NarrowGauge railways."}%
. instance(vRR, Railway)
  /\ property(vRR, NarrowGauge)
  /\ trackWidth(vRR, vWIDTH) =>
      lessThanOrEqualTo(vWIDTH, MeasureFn(a_1_Period_4_3_5, Meter))
. instance(DualGauge, TrackGauge)
%{DualGauge
"&%DualGauge is the attribute of  
any &%Railway that has three parallel rails, thus allowing 
two different gauges of rolling stock to travel over it."}%
. instance(totalLengthOfHighwaySystem, BinaryPredicate)
. domain(totalLengthOfHighwaySystem, a_1, GeographicArea)
. domain(totalLengthOfHighwaySystem, a_2, LengthMeasure)
%{totalLengthOfHighwaySystem
"(&%totalLengthOfHighwaySystem ?AREA ?LENGTH) means that the total 
length of the highway system in the &%GeographicArea ?AREA is ?LENGTH.  
The figure includes both paved and unpaved roads."}%
. totalLengthOfHighwaySystem(vAREA, vLENGTH) <=>
      length(KappaFn(vHIGHWAYS,
                     a_a_n_d(instance(vHIGHWAYS, Roadway),
                             located(vHIGHWAYS, vAREA))),
             vLENGTH)
. totalLengthOfHighwaySystem(vAREA, MeasureFn(vLENGTH, vUNIT))
  /\ instance(vUNIT, UnitOfMeasure)
  /\ greaterThan(vLENGTH, a_0) =>
      exists vHIGHWAY: U
          . instance(vHIGHWAY, Roadway) /\ located(vHIGHWAY, vAREA)
. totalLengthOfHighwaySystem(vAREA, vLENGTH)
  /\ lengthOfPavedHighway(vAREA, vLENGTH1)
  /\ lengthOfUnpavedHighway(vAREA, vLENGTH2) =>
      vLENGTH = AdditionFn(vLENGTH1, vLENGTH2)
. totalLengthOfHighwaySystem(vAREA, MeasureFn(vLENGTH, vUNIT))
  /\ lengthOfPavedHighway(vAREA, MeasureFn(vLENGTH1, vUNIT))
  /\ lengthOfUnpavedHighway(vAREA, MeasureFn(vLENGTH2, vUNIT))
  /\ instance(vUNIT, UnitOfMeasure)
  /\ subclass(vUNIT, LengthMeasure) =>
      totalLengthOfHighwaySystem(vAREA,
                                 MeasureFn(AdditionFn(vLENGTH1, vLENGTH2),
                                           vUNIT))
. totalLengthOfHighwaySystem(vAREA, vTOTAL)
  /\ lengthOfPavedHighway(vAREA, vPAVED) =>
      greaterThanOrEqualTo(vTOTAL, vPAVED)
. totalLengthOfHighwaySystem(vAREA, vTOTAL)
  /\ lengthOfUnpavedHighway(vAREA, vUNPAVED) =>
      greaterThanOrEqualTo(vTOTAL, vUNPAVED)
. instance(lengthOfPavedHighway, BinaryPredicate)
. domain(lengthOfPavedHighway, a_1, GeographicArea)
. domain(lengthOfPavedHighway, a_2, LengthMeasure)
%{lengthOfPavedHighway
"(&%lengthOfPavedHighway ?AREA ?LENGTH) means that the total length 
of &%SurfacedRoadway in the &%GeographicArea ?AREA is ?LENGTH."}%
. lengthOfPavedHighway(vAREA, vLENGTH) <=>
      length(KappaFn(vHIGHWAYS,
                     a_a_n_d(instance(vHIGHWAYS, SurfacedRoadway),
                             located(vHIGHWAYS, vAREA))),
             vLENGTH)
. lengthOfPavedHighway(vAREA, MeasureFn(vLENGTH, vUNIT))
  /\ instance(vUNIT, UnitOfMeasure)
  /\ greaterThan(vLENGTH, a_0) =>
      exists vHIGHWAY: U
          . instance(vHIGHWAY, SurfacedRoadway) /\ located(vHIGHWAY, vAREA)
. instance(lengthOfExpresswaySystem, BinaryPredicate)
. domain(lengthOfExpresswaySystem, a_1, GeographicArea)
. domain(lengthOfExpresswaySystem, a_2, LengthMeasure)
%{lengthOfExpresswaySystem
"(&%lengthOfExpresswaySystem ?AREA ?LENGTH) means that the total length 
of &%Expressway in the &%GeographicArea ?AREA is ?LENGTH."}%
. lengthOfExpresswaySystem(vAREA, vLENGTH) <=>
      length(KappaFn(vHIGHWAYS,
                     a_a_n_d(instance(vHIGHWAYS, Expressway),
                             located(vHIGHWAYS, vAREA))),
             vLENGTH)
. lengthOfExpresswaySystem(vAREA, MeasureFn(vLENGTH, vUNIT))
  /\ instance(vUNIT, UnitOfMeasure)
  /\ greaterThan(vLENGTH, a_0) =>
      exists vHIGHWAY: U
          . instance(vHIGHWAY, Expressway) /\ located(vHIGHWAY, vAREA)
. lengthOfExpresswaySystem(vAREA, vLENGTH1)
  /\ lengthOfPavedHighway(vAREA, vLENGTH2) =>
      greaterThanOrEqualTo(vLENGTH2, vLENGTH1)
. instance(lengthOfUnpavedHighway, BinaryPredicate)
. domain(lengthOfUnpavedHighway, a_1, GeographicArea)
. domain(lengthOfUnpavedHighway, a_2, LengthMeasure)
%{lengthOfUnpavedHighway
"(&%lengthOfUnpavedHighway ?AREA ?LENGTH) means that the total length 
of &%UnsurfacedRoadway in the &%GeographicArea ?AREA is ?LENGTH."}%
. lengthOfUnpavedHighway(vAREA, vLENGTH) <=>
      length(KappaFn(vHIGHWAYS,
                     a_a_n_d(instance(vHIGHWAYS, UnsurfacedRoadway),
                             located(vHIGHWAYS, vAREA))),
             vLENGTH)
. lengthOfUnpavedHighway(vAREA, MeasureFn(vLENGTH, vUNIT))
  /\ instance(vUNIT, UnitOfMeasure)
  /\ greaterThan(vLENGTH, a_0) =>
      exists vHIGHWAY: U
          . instance(vHIGHWAY, UnsurfacedRoadway) /\ located(vHIGHWAY, vAREA)
. subclass(Expressway, SurfacedRoadway)
%{Expressway
"&%Expressway is the subclass of 
&%SurfacedRoadways that are multiple-lane, limited-access highways 
designed for rapid travel by &%MotorVehicles."}%
. subclass(SurfacedRoadway, Roadway)
%{SurfacedRoadway
"&%SurfacedRoadway is the subclass of 
&%Roadways that have been improved by covering them with a substance 
to increase the hardness and smoothness of the surface.  Covering 
materials include pavement, concrete, asphalt, macadam, and gravel."}%
. subclass(UnsurfacedRoadway, Roadway)
%{UnsurfacedRoadway
"&%UnsurfacedRoadway is the subclass 
of &%Roadways that have natural, unimproved surfaces of dirt or sand."}%
. disjoint(SurfacedRoadway, UnsurfacedRoadway)
. instance(totalLengthOfWaterways, BinaryPredicate)
. domain(totalLengthOfWaterways, a_1, GeographicArea)
. domain(totalLengthOfWaterways, a_2, LengthMeasure)
%{totalLengthOfWaterways
"(&%totalLengthOfWaterways ?AREA ?LENGTH) means that the 
total length of navigable &%Waterways in the &%GeographicArea ?AREA 
is the &%LengthMeasure ?LENGTH."}%
. totalLengthOfWaterways(vAREA, vLENGTH) <=>
      length(KappaFn(vWATERWAY,
                     a_a_n_d(instance(vWATERWAY, Waterway),
                             partlyLocated(vWATERWAY, vAREA)),
                     vLENGTH))
. totalLengthOfWaterways(vAREA, MeasureFn(vLENGTH, vUNIT))
  /\ instance(vUNIT, UnitOfMeasure)
  /\ greaterThan(vLENGTH, a_0) =>
      exists vWATERWAY: U
          . instance(vWATERWAY, Waterway) /\ located(vWATERWAY, vAREA)
. subclass(Waterway, Transitway)
. subclass(Waterway, WaterArea)
%{Waterway
"&%Waterway is the class of navigable waters, 
including &%Oceans, &%SeaLanes, &%Rivers, &%Canals, &%Lakes, and inland 
bodies of water."}%
. instance(totalPipelineInArea, BinaryPredicate)
. domain(totalPipelineInArea, a_1, GeographicArea)
. domain(totalPipelineInArea, a_2, LengthMeasure)
%{totalPipelineInArea
"(&%totalPipelineInArea ?AREA ?LENGTH) means that the &%GeopoliticalArea 
?AREA has ?LENGTH of &%Pipelines."}%
. totalPipelineInArea(vAREA, vLENGTH) <=>
      length(KappaFn(vPIPE,
                     a_a_n_d(instance(vPIPE, Pipeline), located(vPIPE, vAREA))),
             vLENGTH)
. totalPipelineInArea(vAREA, MeasureFn(vLENGTH, vUNIT))
  /\ instance(vUNIT, UnitOfMeasure)
  /\ greaterThan(vLENGTH, a_0) =>
      exists vPIPE: U
          . instance(vPIPE, Pipeline) /\ located(vPIPE, vAREA)
. instance(lengthOfCrudeOilPipeline, BinaryPredicate)
. domain(lengthOfCrudeOilPipeline, a_1, GeographicArea)
. domain(lengthOfCrudeOilPipeline, a_2, LengthMeasure)
%{lengthOfCrudeOilPipeline
"(&%lengthOfCrudeOilPipeline ?AREA ?AMOUNT) means that in the 
&%GeograpicArea ?AREA there is the &%LengthMeasure ?AMOUNT of 
&%CrudeOilPipeline."}%
. lengthOfCrudeOilPipeline(vAREA, vLENGTH) <=>
      length(KappaFn(vPIPELINE,
                     a_a_n_d(instance(vPIPELINE, CrudeOilPipeline),
                             located(vPIPELINE, vAREA))),
             vLENGTH)
. lengthOfCrudeOilPipeline(vAREA, vAMOUNT1)
  /\ totalPipelineInArea(vAREA, vAMOUNT2) =>
      lessThanOrEqualTo(vAMOUNT1, vAMOUNT2)
. instance(lengthOfNaturalGasPipeline, BinaryPredicate)
. domain(lengthOfNaturalGasPipeline, a_1, GeographicArea)
. domain(lengthOfNaturalGasPipeline, a_2, LengthMeasure)
%{lengthOfNaturalGasPipeline
"(&%lengthOfNaturalGasPipeline ?AREA ?AMOUNT) means that in the 
&%GeograpicArea ?AREA there is the &%LengthMeasure ?AMOUNT of 
&%NaturalGasPipeline."}%
. lengthOfNaturalGasPipeline(vAREA, vLENGTH) <=>
      length(KappaFn(vPIPELINE,
                     a_a_n_d(instance(vPIPELINE, NaturalGasPipeline),
                             located(vPIPELINE, vAREA))),
             vLENGTH)
. lengthOfNaturalGasPipeline(vAREA, vAMOUNT1)
  /\ totalPipelineInArea(vAREA, vAMOUNT2) =>
      lessThanOrEqualTo(vAMOUNT1, vAMOUNT2)
. instance(lengthOfPetroleumProductPipeline, BinaryPredicate)
. domain(lengthOfPetroleumProductPipeline, a_1, GeographicArea)
. domain(lengthOfPetroleumProductPipeline, a_2, LengthMeasure)
%{lengthOfPetroleumProductPipeline
"(&%lengthOfPetroleumProductPipeline ?AREA ?AMOUNT) means that in the 
&%GeograpicArea ?AREA there is the &%LengthMeasure ?AMOUNT of 
&%PetroleumProductPipeline."}%
. lengthOfPetroleumProductPipeline(vAREA, vLENGTH) <=>
      length(KappaFn(vPIPELINE,
                     a_a_n_d(instance(vPIPELINE, PetroleumProductPipeline),
                             located(vPIPELINE, vAREA))),
             vLENGTH)
. lengthOfPetroleumProductPipeline(vAREA, vAMOUNT1)
  /\ totalPipelineInArea(vAREA, vAMOUNT2) =>
      lessThanOrEqualTo(vAMOUNT1, vAMOUNT2)
. subclass(Pipeline, Transitway)
%{Pipeline
"&%Pipeline is the class of pipelines used 
to transport various kinds of fluids."}%
. instance(vPIPE, Pipeline)
  /\ instance(vMOTION, Motion)
  /\ instrument(vMOTION, vPIPE)
  /\ patient(vMOTION, vSTUFF) =>
      instance(vSTUFF, ExtensionFn(Fluid))
. subclass(CrudeOilPipeline, Pipeline)
%{CrudeOilPipeline
"&%CrudeOilPipeline is the subclass of 
&%Pipelines that are used to carry &%CrudeOil."}%
. instance(vPIPE, CrudeOilPipeline)
  /\ instance(vMOTION, Motion)
  /\ instrument(vMOTION, vPIPE)
  /\ patient(vMOTION, vOIL) =>
      instance(vOIL, Petroleum)
. subclass(NaturalGasPipeline, Pipeline)
%{NaturalGasPipeline
"&%NaturalGasPipeline is the subclass 
of &%Pipelines that are used to carry &%NaturalGas."}%
. instance(vPIPE, NaturalGasPipeline)
  /\ instance(vMOTION, Motion)
  /\ instrument(vMOTION, vPIPE)
  /\ patient(vMOTION, vGAS) =>
      instance(vGAS, NaturalGas)
. subclass(PetroleumProductPipeline, Pipeline)
%{PetroleumProductPipeline
"&%PetroleumProductPipeline is the subclass of &%Pipelines that are 
used to carry &%PetroleumProducts."}%
. instance(vPIPE, PetroleumProductPipeline)
  /\ instance(vMOTION, Motion)
  /\ instrument(vMOTION, vPIPE)
  /\ patient(vMOTION, vSTUFF) =>
      instance(vSTUFF, PetroleumProduct)
. subclass(PortCity, City)
%{PortCity
"&%PortCity is the subclass of &%City whose 
instances are cities or towns located adjacent to a &%Harbor, which is 
included in the administrative area of the city."}%
. instance(vCITY, PortCity) =>
      exists vHARBOR: U
          . instance(vHARBOR, Harbor) /\ geographicSubregion(vHARBOR, vCITY)
. subclass(RiverPort, PortCity)
%{RiverPort
"&%RiverPort is the subclass of &%PortCity 
whose instances are port cities &%Adjacent to a navigable &%River."}%
. instance(vPORT, RiverPort) =>
      exists vRIVER: U
          . instance(vRIVER, River)
            /\ instance(vRIVER, Waterway)
            /\ meetsSpatially(vPORT, vRIVER)
. meetsSpatially(vOBJECT1, vOBJECT2) =>
      orientation(vOBJECT1, vOBJECT2, Adjacent)
. subclass(SeaPort, PortCity)
%{SeaPort
"&%SeaPort is the subclass of &%PortCity 
whose instances are port cities on or closely linked to a &%Sea or 
&%Ocean."}%
. instance(vPORT, SeaPort) =>
      exists vSEA: U
          . (instance(vSEA, Sea) \/ instance(vSEA, Ocean))
            /\ (orientation(vPORT, vSEA, Adjacent)
                \/ orientation(vPORT, vSEA, Near))
. subclass(ContainerPort, PortCity)
. relatedInternalConcept(ContainerPort, ContainerShip)
. subclass(DeepDraftPort, PortCity)
. instance(vPORT, DeepDraftPort) =>
      exists vHARBOR: U
          . instance(vHARBOR, DeepDraftHarbor)
            /\ geographicSubregion(vHARBOR, vPORT)
. subclass(DeepDraftHarbor, Harbor)
%{DeepDraftHarbor
"&%DeepDraftHarbor is the subclass 
of &%Harbors that have a &%waterDepth sufficient to accommodate 
vessels of a &%ladenDraft of 45 feet (13.7 meters) or greater."}%
. instance(vHARBOR, DeepDraftHarbor) =>
      navigableForDraft(vHARBOR, MeasureFn(a_1_3_Period_7, Meter))
. instance(vHARBOR, DeepDraftHarbor) =>
      navigableForDraft(vHARBOR, MeasureFn(a_4_5, Foot))
. subclass(DeepwaterPort, PortFacility)
%{DeepwaterPort
"&%DeepwaterPort is the subclass of 
&%PortFacility whose instances meet the criteria defined under 33 U.S.C.  section 1502(1) as 'any fixed or floating man-made structures other than 
a vessel, or any group of such structures, located beyond the territorial 
sea and off the coast of the United States and which are used or intended 
for use as a port or terminal for the loading or unloading and further 
handling of oil for transportation to any State.... The term includes all associated components and equipment including pipelines, pumping stations, service platforms, mooring buoys, and similar appurtenances to the extent 
they are located seaward of the high water mark.'"}%
. subclass(Harbor, WaterArea)
%{Harbor
"&%Harbor is the subclass of &%WaterAreas that 
provide shelter and anchorage for &%Watercraft."}%
. subclass(Anchorage, WaterArea)
%{Anchorage
"&%Anchorage is the subclass of &%WaterAreas 
where &%Watercraft may anchor with some shelter or safety.  Anchorages 
may be inside a &%Harbor or offshore."}%
. subclass(OffshoreAnchorage, Anchorage)
%{OffshoreAnchorage
"&%OffshoreAnchorage is the subclass 
of &%Anchorages that are located offshore and not within a &%Harbor."}%
. instance(vANCHOR, OffshoreAnchorage) =>
      not (exists vHARBOR: U
               . instance(vHARBOR, Harbor) /\ located(vANCHOR, vHARBOR))
. subclass(PortFacility, GeopoliticalArea)
%{PortFacility
"&%PortFacility is the class of port 
complexes, including piers and docking space, moorings, cargo-handling 
and other support facilities for marine traffic.  Ships are loaded and 
unloaded at a &%PortFacility."}%
. instance(PortFacilityFn, UnaryFunction)
. domain(PortFacilityFn, a_1, PortCity)
. range(PortFacilityFn, PortFacility)
%{PortFacilityFn
"(&%PortFacilityFn ?CITY) denotes the 
&%PortFacility, including mooring areas, docking space, and on-land 
support facilities for marine traffic, of the &%Port ?CITY, considered 
as a whole."}%
. subclass(MerchantMarine, Collection)
%{MerchantMarine
"&%MerchantMarine is a class of 
&%Collections of &%Ships, each collection belonging to a particular 
&%Nation or &%GeopoliticalArea, in whose &%ShipRegister the member 
ships are enrolled.  For example, the merchant marine of &%France."}%
. instance(MerchantMarineFn, UnaryFunction)
. domain(MerchantMarineFn, a_1, GeopoliticalArea)
. range(MerchantMarineFn, MerchantMarine)
%{MerchantMarineFn
"(&%MerchantMarineFn ?AREA) denotes 
the &%Collection of all commercial ships registered in the 
&%ShipRegister of the &%GeopoliticalArea ?AREA."}%
. instance(vAREA, GeopoliticalArea)
  /\ member(vSHIP, MerchantMarineFn(vAREA)) =>
      instance(vSHIP, MerchantMarineShip)
. instance(vAREA, GeopoliticalArea)
  /\ instance(MerchantMarineFn(vAREA), MerchantMarine) =>
      possesses(vAREA, MerchantMarineFn(vAREA))
. instance(fleetGrossRegisteredTonnage, BinaryPredicate)
. domain(fleetGrossRegisteredTonnage, a_1, Collection)
. domain(fleetGrossRegisteredTonnage, a_2, PhysicalQuantity)
. subrelation(fleetGrossRegisteredTonnage, measure)
%{fleetGrossRegisteredTonnage
"(&%fleetGrossRegisteredTonnage ?FLEET ?AMOUNT) means that the 
&%Collection of &%Ships ?FLEET has a total carrying capacity of ?AMOUNT 
in &%RegistryTons.  This is the total &%vesselGrossRegisteredTonnage of 
all the vessels combined.  Gross Registered Tonnage, or GRT, is the 
capacity of a vessel calculated on an equivalence of 100 cubic feet of 
sheltered area per ton."}%
. instance(vUNIT, UnitOfMeasure)
  /\ fleetGrossRegisteredTonnage(vFLEET,
                                 MeasureFn(vNUMBER, vUNIT)) =>
      vUNIT = RegistryTon
. instance(fleetDeadWeightTonnage, BinaryPredicate)
. domain(fleetDeadWeightTonnage, a_1, Collection)
. domain(fleetDeadWeightTonnage, a_2, MassMeasure)
. subrelation(fleetDeadWeightTonnage, measure)
%{fleetDeadWeightTonnage
"(&%fleetDeadWeightTonnage ?FLEET ?AMOUNT) means that the &%Collection 
of &%Ships ?FLEET has a total carrying capacity of ?AMOUNT in &%LongTons.  
This is the total &%vesselDeadWeightTonnage of all the vessels combined.  
Dead Weight Tonnage, or DWT, is the weight of cargo plus stores that a  
vessel can carry when immersed to the proper load line."}%
. instance(vUNIT, UnitOfMeasure)
  /\ fleetDeadWeightTonnage(vFLEET, MeasureFn(vNUMBER, vUNIT)) =>
      vUNIT = LongTon
. subclass(MerchantMarineShip, Ship)
. names(a_Quot_m_e_r_c_h_a_n_t_Space_s_h_i_p_Quot,
        MerchantMarineShip)
. names(a_Quot_c_o_m_m_e_r_c_i_a_l_Space_v_e_s_s_e_l_Quot,
        MerchantMarineShip)
%{MerchantMarineShip
"&%MerchantMarineShip is the class 
of &%Ships that carry goods or passengers in exchange for payment.  
This excludes military ships, as well as working ships such as tugboats 
and fishing vessels.  Merchant Marine ships belong to the 
&%MerchantMarine of some country and are registered in the related 
&%ShipRegister."}%
. instance(vSHIP, MerchantMarineShip)
  /\ measure(vSHIP, MeasureFn(vGRT, RegistryTon)) =>
      greaterThanOrEqualTo(vGRT, a_1_0_0_0)
. instance(memberType, BinaryPredicate)
. domain(memberType, a_1, Collection)
. domain(memberType, a_2, SetOrClass)
%{memberType
"(&%memberType ?GROUP ?TYPE) means that all 
the members of the &%Collection ?GROUP belong to the &%SetOrClass 
?TYPE."}%
. memberType(vGROUP, vTYPE) /\ member(vMEMBER, vGROUP) =>
      instance(vMEMBER, vTYPE)
. instance(memberTypeCount, TernaryPredicate)
. domain(memberTypeCount, a_1, Collection)
. domain(memberTypeCount, a_2, SetOrClass)
. domain(memberTypeCount, a_3, NonnegativeInteger)
%{memberTypeCount
"(&%memberTypeCount ?GROUP ?TYPE ?NUMBER) means that the 
&%Collection ?GROUP has ?NUMBER members of the kind ?TYPE."}%
. memberTypeCount(vGROUP, vTYPE, vNUMBER) =>
      exists vSUBGROUP: U
          . subCollection(vSUBGROUP, vGROUP)
            /\ memberCount(vSUBGROUP, vNUMBER)
            /\ memberType(vSUBGROUP, vTYPE)
. memberCount(vGROUP, vNUMBER1)
  /\ memberTypeCount(vGROUP, vTYPE, vNUMBER2) =>
      greaterThanOrEqualTo(vNUMBER1, vNUMBER2)
. memberTypeCount(vGROUP, vTYPE, vNUMBER) /\ vNUMBER = a_0 =>
      not (exists vITEM: U
               . instance(vITEM, vTYPE) /\ member(vITEM, vGROUP))
. instance(cargoType, BinaryPredicate)
. domain(cargoType, a_1, TransportationDevice)
. domainSubclass(cargoType, a_2, Object)
%{cargoType
"(&%cargoType ?DEVICE ?TYPE) means that the 
&%TransportationDevice ?DEVICE typically carries cargo of the kind 
?TYPE."}%
. subclass(CargoShip, Ship)
%{CargoShip
"CargoShip is the subclass of Ships that 
transport goods in exchange for payment.  CargoShip includes ships 
that carry all kinds of cargo, including oil and bulk products as well 
as packaged, palletized, or containerized goods."}%
. subclass(PetroleumTankerShip, CargoShip)
. names(a_Quot_p_e_t_r_o_l_e_u_m_Space_t_a_n_k_e_r_Quot,
        PetroleumTankerShip)
. names(a_Quot_o_i_l_Space_t_a_n_k_e_r_Quot, PetroleumTankerShip)
. instance(vSHIP, PetroleumTankerShip) =>
      cargoType(vSHIP, PetroleumProduct)
. subclass(ChemicalTankerShip, CargoShip)
. names(a_Quot_c_h_e_m_i_c_a_l_Space_c_a_r_r_i_e_r_Quot,
        ChemicalTankerShip)
. instance(vSHIP, ChemicalTankerShip) =>
      cargoType(vSHIP, ChemicalProduct)
%{ChemicalTankerShip
"&%ChemicalTankerShip is the 
subclass of ships that carry &%ChemicalProducts."}%
. subclass(a_C_h_e_m_i_c_a_l_Minus_O_i_l_T_a_n_k_e_r_S_h_i_p,
           ChemicalTankerShip)
. subclass(LiquefiedGasTankerShip, CargoShip)
. names(a_Quot_L_i_q_u_e_f_i_e_d_Space_g_a_s_Space_c_a_r_r_i_e_r_Quot,
        LiquefiedGasTankerShip)
. instance(vSHIP, LiquefiedGasTankerShip) =>
      cargoType(vSHIP, ChemicalProduct)
. instance(vSHIP, LiquefiedGasTankerShip) =>
      cargoType(vSHIP, ExtensionFn(Liquid))
. subclass(a_L_i_q_u_e_f_i_e_d_G_a_s_Minus_C_h_e_m_i_c_a_l_T_a_n_k_e_r_S_h_i_p,
           LiquefiedGasTankerShip)
. subclass(CombinationBulkCarrierShip, CargoShip)
. names(a_Quot_c_o_m_b_i_n_a_t_i_o_n_Space_c_a_r_r_i_e_r_Quot,
        CombinationBulkCarrierShip)
. subclass(a_C_o_m_b_i_n_a_t_i_o_n_B_u_l_k_Minus_O_i_l_C_a_r_r_i_e_r_S_h_i_p,
           CombinationBulkCarrierShip)
. instance(vSHIP,
           a_C_o_m_b_i_n_a_t_i_o_n_B_u_l_k_Minus_O_i_l_C_a_r_r_i_e_r_S_h_i_p) =>
      cargoType(vSHIP, Object)
. instance(vSHIP,
           a_C_o_m_b_i_n_a_t_i_o_n_B_u_l_k_Minus_O_i_l_C_a_r_r_i_e_r_S_h_i_p) =>
      cargoType(vSHIP, Petroleum)
. subclass(a_C_o_m_b_i_n_a_t_i_o_n_O_r_e_Minus_O_i_l_C_a_r_r_i_e_r_S_h_i_p,
           CombinationBulkCarrierShip)
. instance(vSHIP,
           a_C_o_m_b_i_n_a_t_i_o_n_O_r_e_Minus_O_i_l_C_a_r_r_i_e_r_S_h_i_p) =>
      cargoType(vSHIP, Mineral)
. instance(vSHIP,
           a_C_o_m_b_i_n_a_t_i_o_n_O_r_e_Minus_O_i_l_C_a_r_r_i_e_r_S_h_i_p) =>
      cargoType(vSHIP, Petroleum)
. subclass(DryBulkCarrierShip, CargoShip)
. subclass(BulkCargoShip, DryBulkCarrierShip)
. subclass(OreCarrierShip, DryBulkCarrierShip)
. subclass(SelfDischargingBulkCarrierShip, DryBulkCarrierShip)
. subclass(CementCarrierShip, DryBulkCarrierShip)
. subclass(WoodChipsCarrierShip, DryBulkCarrierShip)
. subclass(UreaCarrierShip, DryBulkCarrierShip)
. subclass(GeneralCargoShip, CargoShip)
. names(a_Quot_f_r_e_i_g_h_t_e_r_Quot, CargoShip)
. instance(vSHIP, GeneralCargoShip) => cargoType(vSHIP, Product)
. subclass(PalletizedCargoShip, GeneralCargoShip)
. subclass(DeckCargoShip, GeneralCargoShip)
. subclass(ContainerShip, CargoShip)
. instance(vSHIP, ContainerShip) => cargoType(vSHIP, ShipContainer)
. subclass(ShipContainer, SelfConnectedObject)
%{ShipContainer
"&%ShipContainer is the class of specialized 
large containers designed for shipping goods aboard &%ContainerShips."}%
. subclass(RefrigeratedCargoShip, CargoShip)
. names(a_Quot_r_e_f_r_i_g_e_r_a_t_e_d_Space_c_a_r_r_i_e_r_Quot,
        RefrigeratedCargoShip)
. subclass(RollOnRollOffCargoShip, CargoShip)
. names(a_Quot_r_o_l_l_Minus_o_n_Space_r_o_l_l_Minus_o_f_f_Quot,
        RollOnRollOffCargoShip)
. names(a_Quot_R_o_Minus_R_o_Quot, RollOnRollOffCargoShip)
. subclass(a_C_o_n_t_a_i_n_e_r_Minus_R_o_R_o_C_a_r_g_o_S_h_i_p,
           RollOnRollOffCargoShip)
. subclass(VehicleCarrierShip, RollOnRollOffCargoShip)
. instance(vSHIP, VehicleCarrierShip) => cargoType(vSHIP, Vehicle)
. subclass(a_P_a_s_s_e_n_g_e_r_Minus_L_a_n_d_i_n_g_C_r_a_f_t,
           RollOnRollOffCargoShip)
. subclass(a_P_a_s_s_e_n_g_e_r_Minus_L_a_n_d_i_n_g_C_r_a_f_t,
           PassengerAndCargoShip)
. subclass(RailcarCarrierShip, RollOnRollOffCargoShip)
. instance(vSHIP, RailcarCarrierShip) =>
      cargoType(vSHIP, RollingStock)
. subclass(LivestockCarrierShip, CargoShip)
. instance(vSHIP, LivestockCarrierShip) =>
      cargoType(vSHIP, Livestock)
. subclass(BargeCarrierShip, CargoShip)
. subclass(MultifunctionalLargeLoadCarrierShip, CargoShip)
. names(a_Quot_h_e_a_v_y_Space_l_i_f_t_Space_c_a_r_r_i_e_r_Quot,
        MultifunctionalLargeLoadCarrierShip)
. names(a_Quot_h_e_a_v_y_Space_c_a_r_g_o_Space_c_a_r_r_i_e_r_Quot,
        MultifunctionalLargeLoadCarrierShip)
%{PassengerShip
"&%PassengerShip is the subclass of 
&%Watercraft designed for the purpose of carrying passengers."}%
. subclass(PassengerShip, Ship)
. instance(vSHIP, PassengerShip) => cargoType(vSHIP, Human)
. subclass(PassengerAndCargoShip, PassengerShip)
. subclass(PassengerAndCargoShip, CargoShip)
. subclass(ShortSeaPassengerShip, PassengerShip)
. subclass(SpecializedTankerShip, CargoShip)
. instance(vSHIP, SpecializedTankerShip) =>
      cargoType(vSHIP, ExtensionFn(Fluid))
. subclass(FishingShip, Watercraft)
. subclass(Trawler, FishingShip)
. subclass(FishFactoryShip, FishingShip)
. subclass(FishCarrierShip, FishingShip)
. subclass(FishingVessel, FishingShip)
. subclass(OffshoreSupplyShip, Ship)
. subclass(OffshoreSupportShip, Ship)
. subclass(OffshoreWellProductionShip, Ship)
. subclass(DrillingShip, Ship)
. subclass(ResearchShip, Ship)
. subclass(PusherTug, TugBoat)
. subclass(Dredger, Ship)
. subclass(HopperDredger, Dredger)
. subclass(MotorHopper, Ship)
. subclass(SludgeDisposalVessel, Ship)
. subclass(CraneShip, Ship)
. subclass(CableShip, Ship)
. subclass(IceBreakerShip, Ship)
. subclass(ShipRegistration, ContentBearingObject)
. names(a_Quot_s_h_i_p_Space_r_e_g_i_s_t_r_a_t_i_o_n_Quot,
        ShipRegistration)
%{ShipRegistration
"&%ShipRegistration is the official 
document containing information about the ownership, size, and 
flag state (flag of registry) of an individual &%Ship, as registered 
in the &%ShipRegister maintained by the maritime authorities of a 
particular &%Nation or &%OverseasArea of a nation.  A ship flies the 
flag of its registered nation or area, and the ship is subject to the 
maritime regulations and rules of taxation of its &%flagState."}%
. instance(vREGISTRATION, ShipRegistration)
  /\ instance(vSHIP, Ship)
  /\ possesses(vSHIP, vREGISTRATION)
  /\ instance(vAREA, GeopoliticalArea)
  /\ flagState(vSHIP, vAREA) =>
      subsumesContentInstance(ShipRegisterFn(vAREA), vREGISTRATION)
. instance(marineInventory, BinaryPredicate)
. domain(marineInventory, a_1, MerchantMarine)
. domain(marineInventory, a_2, ShipRegister)
%{marineInventory
"A relation between a &%MerchantMarine
and a &%ShipRegister which is a member of that &%MerchantMarine"}%
. subclass(ShipRegister, ContentBearingObject)
%{ShipRegister
"A &%ShipRegister is a record of each &%Ship 
and owner registered with the maritime authorities of a country or 
possession, colony, or territory of a country.  Ships on the 
&%ShipRegister of a given region fly the flag of that region and are 
subject to its maritime regulations and rules of taxation."}%
. instance(vMM, MerchantMarineFn(vAREA)) =>
      exists vREGISTER: U
          . instance(vREGISTER, ShipRegister)
            /\ possesses(vAREA, vREGISTER)
            /\ marineInventory(vMM, vREGISTER)
. subclass(NationalShipRegister, ShipRegister)
%{NationalShipRegister
"A &%NationalShipRegister 
is a record of the &%Ships that are officially registered with 
a particular &%Nation, including their tonnage and ownership."}%
. instance(vNATIONAL, NationalShipRegister)
  /\ possesses(vAREA, vNATIONAL) =>
      instance(vAREA, Nation)
. instance(ShipRegisterFn, UnaryFunction)
. domain(ShipRegisterFn, a_1, GeopoliticalArea)
. range(ShipRegisterFn, ShipRegister)
%{ShipRegisterFn
"(&%ShipRegisterFn ?AREA) 
denotes the &%ShipRegister of the &%Ships that fly the flag of 
the &%GeopoliticalArea ?AREA."}%
. instance(vAREA, GeopoliticalArea)
  /\ instance(ShipRegisterFn(vAREA), ShipRegister) =>
      possesses(vAREA, ShipRegisterFn(vAREA))
. instance(ShipRegisterFn(vAREA), ShipRegister)
  /\ instance(vAREA, Nation) =>
      instance(ShipRegisterFn(vAREA), NationalShipRegister)
. instance(ShipRegisterFn(vAREA), ShipRegister)
  /\ instance(vAREA, OverseasArea) =>
      instance(ShipRegisterFn(vAREA), OffshoreShipRegister)
. instance(vSHIP, Ship)
  /\ instance(vAREA, GeopoliticalArea)
  /\ member(vSHIP, MerchantMarineFn(vAREA)) =>
      exists vREGISTRATION: U
          . instance(vREGISTRATION, ShipRegistration)
            /\ possesses(vSHIP, vREGISTRATION)
            /\ subsumesContentInstance(ShipRegisterFn(vAREA), vREGISTRATION)
. subclass(InternalShipRegister, ShipRegister)
%{InternalShipRegister
"&%InternalShipRegister is 
a subset of a &%NationalShipRegister.  Ships on an internal 
register fly the same flag as on the national register but are 
subject to different taxation and crewing rules, which are 
typically more lenient.  An internal register may function 
primarily as a &%FlagOfConvenienceRegister."}%
. instance(vINTERNAL, InternalShipRegister)
  /\ possesses(vAREA, vINTERNAL) =>
      instance(vAREA, Nation)
. subclass(OffshoreShipRegister, ShipRegister)
. names(a_Quot_c_a_p_t_i_v_e_Space_r_e_g_i_s_t_e_r_Quot,
        OffshoreShipRegister)
. names(a_Quot_o_f_f_s_h_o_r_e_Space_s_h_i_p_Space_r_e_g_i_s_t_e_r_Quot,
        OffshoreShipRegister)
%{OffshoreShipRegister
"&%OffshoreShipRegister is 
the class of &%ShipRegisters maintained by a colony, territory, or 
possession (&%OffshoreArea) of a nation.  Typically such a register has more lenient maritime 
regulations with respect to taxation and crewing of ships than does 
the national register associated with the country of which the 
offshore area is a dependency."}%
. instance(vOFFSHORE, OffshoreShipRegister)
  /\ possesses(vAREA, vOFFSHORE) =>
      instance(vAREA, Nation)
. subclass(FlagOfConvenienceRegister, ShipRegister)
. names(a_Quot_f_l_a_g_Space_o_f_Space_c_o_n_v_e_n_i_e_n_c_e_Quot,
        FlagOfConvenienceRegister)
. names(a_Quot_o_p_e_n_Space_r_e_g_i_s_t_e_r_Quot,
        FlagOfConvenienceRegister)
%{FlagOfConvenienceRegister
"&%FlagOfConvenienceRegister is the subclass of &%ShipRegisters 
in which most of the registered ships are owned outside of the 
&%GeopoliticalArea to which the registry belongs.  
&%InternalShipRegisters and &%OffshoreShipRegisters both may act as 
&%FlagOfConvenienceRegisters, if permitted by the maritime 
regulations of the registry owner."}%
. instance(fOCShipsByOrigin, TernaryPredicate)
. domain(fOCShipsByOrigin, a_1, MerchantMarine)
. domain(fOCShipsByOrigin, a_2, GeopoliticalArea)
. domain(fOCShipsByOrigin, a_3, NonnegativeInteger)
%{fOCShipsByOrigin
"(&%fOCShipsByOrigin ?MM ?AREA ?COUNT) means that the 
&%MerchantMarine ?MM has ?COUNT number of ships from the 
&%GeopoliticalArea ?AREA in its &%ShipRegister, using it as 
a &%FlagOfConvenience, although the owner of the ships is in 
?AREA."}%
. fOCShipsByOrigin(vMM, vHOME, vCOUNT)
  /\ vMM = MerchantMarineFn(vAREA) =>
      not vHOME = vAREA
. fOCShipsByOrigin(vMM, vHOME, vCOUNT)
  /\ greaterThan(vCOUNT, a_0)
  /\ marineInventory(vMM, vREGISTER) =>
      instance(vREGISTER, FlagOfConvenienceRegister)
. instance(flagState, BinaryPredicate)
. names(a_Quot_f_l_a_g_Space_s_t_a_t_e_Quot, flagState)
. names(a_Quot_f_l_a_g_Space_o_f_Space_r_e_g_i_s_t_r_y_Quot,
        flagState)
. domain(flagState, a_1, Watercraft)
. domain(flagState, a_2, GeopoliticalArea)
%{flagState
"(&%flagState ?SHIP ?AREA) means that 
the &%Ship ?SHIP is enrolled in the &%ShipRegister of the 
&%GeopoliticalArea ?AREA and is subject to its maritime laws, 
regulations for operation of the ship, and rules of taxation."}%
. instance(totalFacilityTypeInArea, TernaryPredicate)
. domain(totalFacilityTypeInArea, a_1, GeographicArea)
. domain(totalFacilityTypeInArea, a_2, Class)
. domain(totalFacilityTypeInArea, a_3, NonnegativeInteger)
%{totalFacilityTypeInArea
"(&%totalFacilityTypeInArea ?AREA ?TYPE ?COUNT) means that in the 
&%GeographicArea ?AREA there a total of ?COUNT number of facilities 
of type ?TYPE."}%
. totalFacilityTypeInArea(vAREA, vTYPE, vCOUNT) <=>
      cardinality(KappaFn(vITEM,
                          a_a_n_d(instance(vITEM, vTYPE),
                                  located(vITEM, vAREA))),
                  vCOUNT)
. totalFacilityTypeInArea(vAREA, vTYPE, vCOUNT) =>
      exists vITEM: U . instance(vITEM, vTYPE) /\ located(vITEM, vAREA)
. totalFacilityTypeInArea(vAREA, vTYPE, vCOUNT) /\ vCOUNT = a_0 =>
      not (exists vITEM: U
               . instance(vITEM, vTYPE) /\ located(vITEM, vAREA))
. subclass(AirTransitway, Transitway)
%{AirTransitway
"The subclass of &%Transitways that are through
the &%EarthsAtmosphere."}%
. instance(vWAY, AirTransitway) =>
      hasPurpose(True
                     when exists vTRANSPORT: U
                              . instance(vTRANSPORT, Transportation)
                                /\ path(vTRANSPORT, vWAY)
                                /\ partlyLocated(vWAY, EarthsAtmosphere)
                     else False)
. subclass(Airport, TransitTerminal)
. subclass(Airport, AirTransitway)
. subclass(Airport, LandTransitway)
%{Airport
"&%Airport is the subclass of &%TransitTerminals 
for &%Airplanes (fixed-wing &%Aircraft)."}%
. subclass(AircraftCarrier, MilitaryShip)
%{AircraftCarrier
"A MilitaryShip on which MilitaryAircraft can land 
and take off."}%
. subclass(Airway, Transitway)
%{Airway
"The class of Transitways used to transport Air 
to a location where it is absent or insufficient."}%
. totalFacilityTypeInArea(vAREA,
                          ExtensionFn(AirportWithPavedRunway), vCOUNT) <=>
      cardinality(KappaFn(vAIRPORT,
                          True
                              when exists vRUNWAY: U
                                       . instance(vAIRPORT, Airport)
                                         /\ instance(vRUNWAY, PavedRunway)
                                         /\ part(vRUNWAY, vAIRPORT)
                                         /\ located(vAIRPORT, vAREA)
                              else False),
                  vCOUNT)
. totalFacilityTypeInArea(vAREA,
                          ExtensionFn(AirportWithPavedRunway), vCOUNT) =>
      exists vAIRPORT: U; vRUNWAY: U
          . instance(vAIRPORT, Airport)
            /\ instance(vRUNWAY, PavedRunway)
            /\ part(vRUNWAY, vAIRPORT)
            /\ located(vAIRPORT, vAREA)
. subclass(Runway, LandTransitway)
%{Runway
"&%Runway is the class of &%Transitways that are 
used for the takeoff and landing of &%Airplanes.  &%Runways are 
&%Transitways for an intermodal transit, which begins with a land transit 
and ends with air transit, or vice versa.  The &%Airspace immediately 
above (and adjacent to) a &%Runway is an &%AirTransitway."}%
. instance(vRUNWAY, Runway) =>
      exists vLENGTH: U
          . instance(vLENGTH, LengthMeasure) /\ length(vRUNWAY, vLENGTH)
. subclass(PavedRunway, Runway)
%{PavedRunway
"&%PavedRunway is the subclass of &%Runways 
that are surfaced with concrete or asphalt."}%
. instance(vRUNWAY, PavedRunway) /\ surface(vSURFACE, vRUNWAY) =>
      instance(vSURFACE, Asphalt) \/ instance(vSURFACE, Concrete)
. instance(vRUNWAY, Runway)
  /\ surface(vSURFACE, vRUNWAY)
  /\ instance(vSURFACE, Asphalt) =>
      instance(vRUNWAY, PavedRunway)
. instance(vRUNWAY, Runway)
  /\ surface(vSURFACE, vRUNWAY)
  /\ instance(vSURFACE, Concrete) =>
      instance(vRUNWAY, PavedRunway)
. subclass(AirportClassification, Attribute)
%{AirportClassification
"&%AirportClassification 
is a class of &%Attributes for representing systems that categorize 
&%Airports according to some criteria.  There are several such systems, 
including the International Civil Aviation Organization categories A to 
E, based on runway lengths; the Federal Aviation Administration system 
associated with airport functions, and the airport categorization by 
runway length used in the CIA World Fact Book."}%
. subclass(AirportByRunwaySurface, AirportClassification)
%{AirportByRunwaySurface
"&%AirportByRunwaySurface is a 
subclass of &%AirportClassification attributes used to describe an 
airport according to the surface type of its longest runway."}%
. instance(AirportWithPavedRunway, AirportByRunwaySurface)
%{AirportWithPavedRunway
"&%AirportWithPavedRunway is an 
&%AirportClassification attribute used to describe an airport whose 
longest runway is a &%PavedRunway."}%
. instance(vAIRPORT, Airport)
  /\ attribute(vAIRPORT, AirportWithPavedRunway) =>
      exists vRUNWAY: U
          . instance(vRUNWAY, PavedRunway) /\ part(vRUNWAY, vAIRPORT)
. instance(AirportWithUnpavedRunway, AirportByRunwaySurface)
%{AirportWithUnpavedRunway
"&%AirportWithUnpavedRunway is 
an &%AirportClassification attribute used to describe an airport whose 
longest runway is an &%UnpavedRunway."}%
. instance(vAIRPORT, Airport)
  /\ attribute(vAIRPORT, AirportWithUnpavedRunway) =>
      exists vRUNWAY: U
          . instance(vRUNWAY, UnpavedRunway) /\ part(vRUNWAY, vAIRPORT)
. subclass(CIAAirportLengthClassification, AirportClassification)
%{CIAAirportLengthClassification
"&%CIAAirportLengthClassification is a class of &%Attributes used to 
characterize &%Airports according to the length of their longest  
usable runway."}%
. instance(VeryShortRunwayAirport, CIAAirportLengthClassification)
%{VeryShortRunwayAirport
"&%VeryShortRunwayAirport is a CIA 
category for &%Airports whose longest runway is less than 914 meters 
long."}%
. instance(vAIRPORT, Airport)
  /\ attribute(vAIRPORT, VeryShortRunwayAirport) =>
      exists vRUNWAY: U; vLENGTH: U
          . instance(vRUNWAY, Runway)
            /\ part(vRUNWAY, vAIRPORT)
            /\ length(vRUNWAY, vLENGTH)
            /\ lessThan(vLENGTH, MeasureFn(a_9_1_4, Meter))
. instance(ShortRunwayAirport, CIAAirportLengthClassification)
%{ShortRunwayAirport
"&%ShortRunwayAirport is a CIA 
category for &%Airports whose longest runway has a length between 914 
meters and 1523 meters, inclusive."}%
. instance(vAIRPORT, Airport)
  /\ attribute(vAIRPORT, ShortRunwayAirport) =>
      exists vRUNWAY: U; vLENGTH: U
          . instance(vRUNWAY, Runway)
            /\ part(vRUNWAY, vAIRPORT)
            /\ length(vRUNWAY, vLENGTH)
            /\ (greaterThanOrEqualTo(vLENGTH, MeasureFn(a_9_1_4, Meter))
                \/ lessThanOrEqualTo(vLENGTH, MeasureFn(a_1_5_2_3, Meter)))
. instance(MediumLengthRunwayAirport,
           CIAAirportLengthClassification)
%{MediumLengthRunwayAirport
"&%MediumLengthRunwayAirport is a CIA 
category for &%Airports whose longest runway has a length between  
1,524 meters and 2,437 meters, inclusive."}%
. instance(vAIRPORT, Airport)
  /\ attribute(vAIRPORT, ShortRunwayAirport) =>
      exists vRUNWAY: U; vLENGTH: U
          . instance(vRUNWAY, Runway)
            /\ part(vRUNWAY, vAIRPORT)
            /\ length(vRUNWAY, vLENGTH)
            /\ (greaterThanOrEqualTo(vLENGTH, MeasureFn(a_1_5_2_4, Meter))
                \/ lessThanOrEqualTo(vLENGTH, MeasureFn(a_2_4_3_7, Meter)))
. instance(LongRunwayAirport, CIAAirportLengthClassification)
%{LongRunwayAirport
"&%LongRunwayAirport is a CIA 
category for &%Airports whose longest runway has a length between  
2,438 meters and 3,047 meters, inclusive."}%
. instance(vAIRPORT, Airport)
  /\ attribute(vAIRPORT, LongRunwayAirport) =>
      exists vRUNWAY: U; vLENGTH: U
          . instance(vRUNWAY, Runway)
            /\ part(vRUNWAY, vAIRPORT)
            /\ length(vRUNWAY, vLENGTH)
            /\ (greaterThanOrEqualTo(vLENGTH, MeasureFn(a_2_4_3_8, Meter))
                \/ lessThanOrEqualTo(vLENGTH, MeasureFn(a_3_0_4_7, Meter)))
. instance(VeryLongRunwayAirport, CIAAirportLengthClassification)
%{VeryLongRunwayAirport
"&%VeryLongRunwayAirport is a CIA 
category for &%Airports whose longest runway has a length greater 
than 3,047 meters."}%
. instance(vAIRPORT, Airport)
  /\ attribute(vAIRPORT, VeryLongRunwayAirport) =>
      exists vRUNWAY: U; vLENGTH: U
          . instance(vRUNWAY, Runway)
            /\ part(vRUNWAY, vAIRPORT)
            /\ length(vRUNWAY, vLENGTH)
            /\ greaterThan(vLENGTH, MeasureFn(a_3_0_4_7, Meter))
. totalFacilityTypeInArea(vAREA,
                          ExtensionFn(AirportWithUnpavedRunway), vCOUNT)
  /\ greaterThan(vCOUNT, a_0) =>
      exists vAIRPORT: U; vRUNWAY: U
          . instance(vAIRPORT, Airport)
            /\ instance(vRUNWAY, UnpavedRunway)
            /\ part(vRUNWAY, vAIRPORT)
            /\ located(vAIRPORT, vAREA)
. subclass(UnpavedRunway, Runway)
%{UnpavedRunway
"&%UnpavedRunways include &%Runways with 
grass, dirt, sand, or gravel surfaces.  Contrast with &%PavedRunway."}%
. disjoint(PavedRunway, UnpavedRunway)
. subclass(Heliport, TransitTerminal)
. names(a_Quot_h_e_l_i_p_o_r_t_Quot, Heliport)
. names(a_Quot_h_e_l_i_p_a_d_Quot, Heliport)
%{Heliport
"&%Heliport is a &%TransitTerminal designed 
for the takeoff and landing of &%Helicopters."}%
. instance(vHELO, Heliport) =>
      trafficableForTrafficType(vHELO, Helicopter)
. instance(TransportationFn, UnaryFunction)
. domainSubclass(TransportationFn, a_1, TransportationDevice)
. rangeSubclass(TransportationFn, Transportation)
%{TransportationFn
"(&%TransportationFn ?TYPE) denotes the subclass of &%Transportation 
events in which a &%TransportationDevice of ?TYPE is the vehicle."}%
. subclass(vTYPE, TransportationDevice)
  /\ subclass(TransportationFn(vTYPE), Transportation)
  /\ instance(vTRIP, TransportationFn(vTYPE)) =>
      exists vVEHICLE: U
          . instance(vVEHICLE, vTYPE) /\ instrument(vTRIP, vVEHICLE)
. instance(TripFn, UnaryFunction)
. domain(TripFn, a_1, Vehicle)
. rangeSubclass(TripFn, Transportation)
%{TripFn
"(&%TripFn ?VEHICLE) denotes the subclass of &%Transportation 
events in which a particular &%TransportationDevice ?VEHICLE is the 
vehicle. Contrast this function with &%TransportationFn, which is 
used to denote transportation events by a specific kind of vehicle."}%
. instance(vVEHICLE, TransportationDevice)
  /\ instance(vTRIP, TripFn(vVEHICLE)) =>
      instrument(vTRIP, vVEHICLE)
. instance(TransitFn, UnaryFunction)
. domain(TransitFn, a_1, Transitway)
. rangeSubclass(TransitFn, Translocation)
%{TransitFn
"(&%TransitFn ?WAY) denotes the class of 
&%Translocations that consist of travelling along the &%Transitway 
?WAY."}%
. instance(vGOING, TransitFn(vWAY))
  /\ instance(vWAY, Transitway) =>
      path(vGOING, vWAY)
. subrelation(path, partlyLocated)
. instance(Paved, Attribute)
. instance(Unpaved, Attribute)
. subclass(Bridge, LandTransitway)
. subclass(Bridge, StationaryArtifact)
%{Bridge
"&%Bridge is the subclass of &%LandTransitways 
that are artifacts used for crossing water or air-filled gaps that 
could not be transited over a natural surface."}%
. subclass(FixedBridge, Bridge)
. subclass(FixedBridge, StationaryArtifact)
. subclass(MovableBridge, Bridge)
. subclass(Drawbridge, MovableBridge)
. subclass(PontoonBridge, MovableBridge)
%{Tunnel
"&%Tunnel is a subclass of &%Transitways that 
consist of a lengthwise enclosed &%Hole that allows for transit 
underground, as through mountains, below a body of water, or beneath a 
city."}%
. subclass(Tunnel, LandTransitway)
. subclass(Tunnel, StationaryArtifact)
. subclass(SecondaryHighway, Roadway)
. subclass(Street, Roadway)
. subclass(Road, Roadway)
. subclass(Lane, Roadway)
. subclass(Trail, LandTransitway)
. subclass(RailGauge, Attribute)
. instance(BroadGaugeRail, RailGauge)
. instance(StandardGaugeRail, RailGauge)
. instance(NarrowGaugeRail, RailGauge)
. instance(DualGaugeRail, RailGauge)
. contraryAttribute(BroadGaugeRail, StandardGaugeRail,
                    NarrowGaugeRail, DualGaugeRail)
. instance(NorthwestPassage, Waterway)
. names(a_Quot_N_o_r_t_h_w_e_s_t_Space_P_a_s_s_a_g_e_Quot,
        NorthwestPassage)
%{NorthwestPassage
"&%NorthwestPassage represents the 
seasonal waterway in the &%ArcticOcean adjacent to &%Canada and the 
&%UnitedStates."}%
. geographicSubregion(NorthwestPassage, ArcticOcean)
. geographicSubregion(NorthwestPassage, WesternHemisphere)
. instance(NorthernSeaRoute, Waterway)
. names(a_Quot_N_o_r_t_h_e_r_n_Space_S_e_a_Space_R_o_u_t_e_Quot,
        NorthernSeaRoute)
%{NorthernSeaRoute
"&%NorthernSeaRoute represents the 
seasonal waterway in the &%ArcticOcean adjacent to &%Russia and 
&%Norway."}%
. geographicSubregion(NorthernSeaRoute, ArcticOcean)
. geographicSubregion(NorthernSeaRoute, EasternHemisphere)
. subclass(ShippingLane, Waterway)
. subclass(ShippingChannel, Waterway)
. subclass(SeaLane, Waterway)
. instance(vWATER, River)
  /\ trafficableForTrafficType(vWATER, vTYPE)
  /\ subclass(vTYPE, Watercraft) =>
      instance(vRIVER, Waterway)
. subclass(Channel, Waterway)
. subclass(CanalLock, Waterway)
. subclass(CanalLock, StationaryArtifact)
. subclass(Harbor, Waterway)
. instance(equipmentCount, TernaryPredicate)
. domain(equipmentCount, a_1, Object)
. domainSubclass(equipmentCount, a_2, Device)
. domain(equipmentCount, a_3, Quantity)
%{equipmentCount
"(&%equipmentCount ?OBJECT ?TYPE ?QUANTITY) means that ?OBJECT 
is equipped with devices of the type ?TYPE, in the number ?QUANTITY.  
Equipment associated with an ?OBJECT may be a &%component of ?OBJECT 
(such as the emergency oxygen system built into passenger jets) or it may 
be a device simply located on or with ?OBJECT (such as a first aid kit)."}%
. instance(powerComponent, BinaryPredicate)
. instance(powerComponent, AsymmetricRelation)
. instance(powerComponent, IrreflexiveRelation)
. domain(powerComponent, a_1, Device)
. domainSubclass(powerComponent, a_2, Artifact)
. subrelation(powerComponent, component)
%{powerComponent
"(&%powerComponent ?GENERATOR ?THING) 
means that the &%Device ?THING is the power source for the &%Artifact 
?THING."}%
. subclass(TransportationEquipment, ManufacturedProduct)
. subclass(TransportationDevice, TransportationEquipment)
. subclass(PassengerVehicle, Vehicle)
%{PassengerVehicle
"A &%Vehicle that is designed to
carry &%Humans.  Note that &%Vehicles that are not designed to
carry people may still do so.  For example, a boxcar might still
transport homeless people, but was not built to do so."}%
. instance(vVEHICLE, PassengerVehicle)
  /\ instance(vHUMAN, Human) =>
      capability(Transportation, patient, vHUMAN)
. subclass(CargoVehicle, Vehicle)
%{CargoVehicle
"A &%Vehicle that is designed to
carry &%Objects.  Note that &%Vehicles that are primarily designed to carry
people rather than cargo may still carry cargo.  For example, a passenger sedan
might be capable of carrying lumber strapped to the roof.  For this
reason, &%PassengerVehicle and &%CargoVehicle are not disjoint."}%
. instance(vVEHICLE, CargoVehicle)
  /\ instance(vOB, KappaFn(vO, a_n_o_t(instance(vO, Human)))) =>
      capability(Transportation, patient, vOB)
. subclass(UnpoweredVehicle, Vehicle)
%{UnpoweredVehicle
"A &%Vehicle that lacks a &%powerComponent.
It coasts like a glider or skateboard, thus deriving its power from the
potential energy of gravity, or by the power of its agent, as in a bicycle."}%
. instance(vUV, UnpoweredVehicle) =>
      not (exists vP: U . powerComponent(vP, vUV))
. subclass(PoweredVehicle, Vehicle)
%{PoweredVehicle
"A &%Vehicle that has a &%powerComponent.
Note that &%PoweredVehicles include those vehicles that have a &%powerComponent
where the user can and does often choose not to use it, such as a moped with pedals."}%
. disjoint(PoweredVehicle, UnpoweredVehicle)
. instance(vUV, PoweredVehicle) =>
      exists vP: U . powerComponent(vP, vUV)
. subclass(AgentPoweredVehicle, Vehicle)
%{AgentPoweredVehicle
"A &%Vehicle which is powered by
one or more of its passengers or driver, for example, a &%Bicycle."}%
. subclass(RoadVehicle, LandVehicle)
%{RoadVehicle
"The class of LandVehicles that are not 
RollingStock."}%
. subclass(Automobile, RoadVehicle)
. subclass(Automobile, PoweredVehicle)
. subclass(Automobile, PassengerVehicle)
%{Automobile
"A &%Vehicle designed primarily for carrying
passengers."}%
. subclass(Truck, RoadVehicle)
. subclass(Truck, CargoVehicle)
. subclass(Truck, PoweredVehicle)
%{Truck
"Any &%Vehicle that is intended to carry substantial
amounts of cargo, in addition to passengers.  This includes 18-wheelers,
pickup trucks, tanker trucks etc.  Consumer vehicles with trunks or enclosed
rear areas that can carry cargo are not defined as trucks."}%
. subclass(Trailer, RoadVehicle)
. subclass(Trailer, UnpoweredVehicle)
. disjoint(Trailer, PoweredVehicle)
. disjoint(Trailer, AgentPoweredVehicle)
%{Trailer
"Any &%RoadVehicle that is also an &%UnpoweredVehicle,
and intended to be towed by a &%PoweredVehicle."}%
. subclass(LightTruck, Truck)
. subclass(Motorcycle, RoadVehicle)
. subclass(MotorScooter, RoadVehicle)
. subclass(EmergencyVehicle, PoweredVehicle)
%{EmergencyVehicle
"EmergencyVehicle is the subclass of 
Vehicles that are used for special-purpose emergency response."}%
. subclass(EmergencyRoadVehicle, EmergencyVehicle)
. subclass(EmergencyRoadVehicle, PoweredRoadVehicle)
%{EmergencyRoadVehicle
"EmergencyRoadVehicle is the 
subclass of EmergencyVehicle that includes RoadVehicles designed 
for special use in emergencies, e.g., Ambulances, FireEngines."}%
. subclass(FireEngine, EmergencyRoadVehicle)
%{FireEngine
"FireEngine is the subclass of 
EmergencyRoadVehicles that represents the various vehicles
used by a fire department in fighting fires."}%
. subclass(Ambulance, EmergencyRoadVehicle)
. subclass(Cycle, LandVehicle)
. subclass(Cycle, AgentPoweredVehicle)
%{Cycle
"Cycle is a class of wheeled, pedal-driven 
UserPoweredVehicles that are designed to be ridden on roads or trails."}%
. subclass(Bicycle, Cycle)
. subclass(Scooter, LandVehicle)
. subclass(Scooter, AgentPoweredVehicle)
. subclass(RailVehicle, LandVehicle)
%{RailVehicle
"A Vehicle designed to move on &%Railways."}%
. instance(vX, RailVehicle) =>
      hasPurpose(vX,
                 True
                     when exists vEV: U; vSURF: U
                              . instance(vRAIL, Railway)
                                /\ instance(vEV, Transportation)
                                /\ holdsDuring(WhenFn(vEV),
                                               meetsSpatially(vX, vRAIL))
                     else False)
. subclass(Train, RailVehicle)
. subclass(Train, PoweredVehicle)
. subclass(Train, Collection)
%{Train
"&%Train is the subclass of 
&%TransportationDevice whose instances are linked sequences 
of &%RollingStock."}%
. instance(vTRAIN, Train) =>
      exists vX: U; vY: U
          . instance(vX, RollingStock)
            /\ instance(vY, RollingStock)
            /\ not vX = vY
. subclass(TrainStation, TerminalBuilding)
%{TrainStation
"TrainStation is the subclass of 
&%Buildings that are located at a &%RailwayTerminal and used in support  
of its functions, especially for the handling of passengers and freight."}%
. subclass(RailTransportationSystem, TransportationSystem)
%{RailTransportationSystem
"RailTransportationSystem 
is the subclass of &%TransportationSystems whose routes are &%Railways."}%
. subclass(Railcar, RollingStock)
. disjoint(Railcar, PoweredVehicle)
%{Railcar
"Railcar is the subclass of &%RollingStock that 
includes all non-locomotive, non-self-powered &%RailVehicles."}%
. subclass(RailwayTerminal, TransitTerminal)
%{RailwayTerminal
"RailwayTerminal is the subclass of 
&%TransitTerminals designed for &%Trains.  A RailwayTerminal includes 
all the &%RailroadTrack and any outbuildings or other related structure 
in the terminal, as well as the &%TrainStation (if there is one)."}%
. subclass(RollingStock, RailVehicle)
%{RollingStock
"A single rail car.  Any &%RailVehicle that is 
not composed of other &%RailVehicles."}%
. instance(vTRAIN, Train) =>
      not (exists vX: U; vY: U
               . instance(vX, RollingStock)
                 /\ instance(vY, RollingStock)
                 /\ not vX = vY)
. subclass(Locomotive, RollingStock)
. subclass(Locomotive, PoweredVehicle)
%{Locomotive
"An individual rail vehicle, i.e. a
&%RollingStock which is also a &%PoweredVehicle.  Modern
locomotives are typically diesel or electric powered, while
older locomotives ran on &%Coal."}%
. subclass(PassengerRailcar, RollingStock)
. subclass(PassengerRailcar, PassengerVehicle)
%{PassengerRailcar
"A train car that is designed to
carry &%Humans."}%
. instance(vCAR, PassengerRailcar) =>
      capability(KappaFn(vCARRY,
                         a_a_n_d(instance(vCARRY, Transportation),
                                 True
                                     when exists vHUMAN: U
                                              . instance(vHUMAN, Human)
                                                /\ patient(vCARRY, vHUMAN)
                                     else False)),
                 instrument, vCAR)
. subclass(FreightCar, RollingStock)
. partition(RollingStock, PassengerRailcar, FreightCar)
%{FreightCar
"A train car that is designed to
carry freight, and not &%Humans."}%
. subclass(Boxcar, FreightCar)
%{Boxcar
"Boxcar is the subclass of Railcars that are 
general-purpose closed cars for hauling freight."}%
. subclass(BusinessRailcar, PassengerRailcar)
. subclass(CabCar, RollingStock)
%{CabCar
"&%CabCar is the class of passenger railcars 
that have an operating cab in one end of the from which train motion 
can be controlled in 'push' mode.  A &%CabCar is placed on the 
opposite end of the train from the locomotive."}%
. subclass(OutfitCar, RollingStock)
%{OutfitCar
"&%OutfitCars are &%Railcars used for housing 
railway construction or maintenance workers in the field.  Also called 
'Camp Cars'."}%
. subclass(CrewDormCar, PassengerRailcar)
%{CrewDormCar
"&%CrewDormCars are &%Railcars used for 
housing the employee staff on long-distance trains."}%
. subclass(ElectrifiedRailwayCar, RollingStock)
. subclass(ElectrifiedRailwayCar, PoweredVehicle)
. subclass(ElectrifiedRailwayCar, ElectricDevice)
%{ElectrifiedRailwayCar
"ElectrifiedRailwayCar is the 
subclass of railway cars that are powered by electricity, which is 
provided to the car through an overhead link or electrified third rail."}%
. subclass(FiveWellStackCar, FreightCar)
%{FiveWellStackCar
"&%FiveWellStackCars are five-unit 
that carry double-stacked containers."}%
. subclass(Flatcar, FreightCar)
. subclass(Flatcar, OpenTopRailcar)
%{Flatcar
"&%Flatcars are &%Freightcars without sides 
or roofs."}%
. subclass(GalleryCar, PassengerRailcar)
%{GalleryCar
"&%GalleryCars are double-decked passenger 
cars that have a viewing area on the second floor."}%
. subclass(HeadEndCar, RollingStock)
%{HeadEndCar
"&%HeadEndCars are &%Railcars that were 
typically placed at the front of the train, including mail and 
baggage cars."}%
. subclass(HydraCushionFreightCar, FreightCar)
%{HydraCushionFreightCar
"&%HydraCushionFreightCars 
are &%FreightCars with hydraulic underframes to cushion their loads."}%
. subclass(LocomotiveCoalCar, RollingStock)
%{LocomotiveCoalCar
"&%LocomotiveCoalCars are 
&%Railcars put directly behind the &%Locomotive and used for 
carrying fuel coal for the engine."}%
. subclass(OpenTopRailcar, FreightCar)
%{OpenTopRailcar
"&%OpenTopRailcars are &%FreightCars 
that have no roof.  They may have sides or not."}%
. subclass(MotorRailcar, PassengerRailcar)
. subclass(MotorRailcar, PoweredVehicle)
%{MotorRailcar
"&%MotorRailcars are &%PassengerRailcars 
that carry their own power source."}%
. subclass(Streetcar, RollingStock)
. subclass(PCCCar, Streetcar)
. subclass(PrivateRailcar, RollingStock)
. subclass(RefrigeratorCar, Boxcar)
. subclass(RotaryDumpCar, OpenTopRailcar)
%{RotaryDumpCar
"&%RotaryDumpCars are open-top 
cargo carriers that have a rotating coupler allowing them 
to be emptied by dumping while still coupled."}%
. subclass(ScaleTestCar, RollingStock)
%{ScaleTestCar
"&%ScaleTestCars are &%Railcars of 
known weight used to test or calibrate track scales used for 
weighing freight."}%
. subclass(SpineCar, Flatcar)
%{SpineCar
"&%SpineCars are articulated &%Flatcars 
used to carry trailers or containers."}%
. subclass(TankCar, FreightCar)
%{TankCar
"&%TankCars are enclosed &%FreightCars used 
to carry fluids."}%
. instance(vT, TankCar) =>
      capability(KappaFn(vTRANS,
                         True
                             when exists vL: U
                                      . instance(vL, Liquid)
                                        /\ instance(vTRANS, Transportation)
                                        /\ patient(vTRANS, vL)
                             else False),
                 instrument, vT)
. subclass(CarDistributionSystem, Process)
%{CarDistributionSystem
"&%CarDistributionSystem is the 
process of composing trains according to instructions or data."}%
. subclass(RailCarrierControl, Process)
%{RailCarrierControl
"&%RailCarrierControl is the process of 
controlling the speed or direction of a train by sending high or 
low frequency currents on the rails."}%
. subclass(Watercraft, Vehicle)
%{Watercraft
"&%Watercraft is the class of all 
&%TransportationDevices used to travel on or in water."}%
. instance(vCRAFT, Watercraft)
  /\ instance(vEVENT, Transportation)
  /\ instrument(vEVENT, vCRAFT) =>
      exists vWATER: U
          . instance(vWATER, WaterArea) /\ located(vEVENT, vWATER)
. subclass(vTYPE, Watercraft)
  /\ instance(vEVENT, TransportationFn(vTYPE))
  /\ located(vEVENT, vPLACE) =>
      instance(vPLACE, WaterArea)
. subclass(Ship, DisplacementHullWatercraft)
%{Ship
"&%Ship is the class of large &%Watercraft used 
for travel on oceans, seas, or large lakes."}%
. subclass(MultihullWatercraft, Watercraft)
. subclass(Catamaran, MultihullWatercraft)
. subclass(DisplacementHullWatercraft, Watercraft)
. disjoint(DisplacementHullWatercraft, PlaningHullWatercraft)
%{DisplacementHullWatercraft
"DisplacementHullWatercraft is 
a subclass of Watercraft with hulls designed to move water aside as they 
move through the water.  Contrast with PlaningHullWatercraft."}%
. subclass(PlaningHullWatercraft, Watercraft)
%{PlaningHullWatercraft
"PlaningHullWatercraft is a subclass 
of Watercraft with hulls designed for a position partially on or above 
the water surface when they are in motion, in order to reduce drag.  See 
also DisplacementHullWatercraft."}%
. subclass(CruiseShip, PassengerShip)
%{CruiseShip
"&%CruiseShip is the subclass of 
&%PassengerShips designed for the purpose of carrying passengers 
on extended trips."}%
. subclass(OceanLiner, PassengerShip)
. subclass(OceanLiner, CargoShip)
%{OceanLiner
"&%OceanLiner is the subclass of &%Ships 
that make regularly scheduled voyages to transport people and goods 
from one place to another."}%
. subclass(Barge, Watercraft)
. subclass(TugBoat, Watercraft)
. subclass(FireBoat, Watercraft)
. subclass(FerryBoat, Watercraft)
. subclass(Runabout, Watercraft)
. subclass(Sailboat, Watercraft)
. subclass(Canoe, Watercraft)
. subclass(Canoe, AgentPoweredVehicle)
. subclass(Kayak, Watercraft)
. subclass(Kayak, AgentPoweredVehicle)
. subclass(PersonalWatercraft, Watercraft)
. names(a_Quot_J_e_t_Space_S_k_i_Quot, PersonalWatercraft)
%{PersonalWatercraft
"&%PersonalWatercraft is the class 
of motor-driven watercraft ridden by one or more passengers, e.g., 
a JetSki."}%
. instance(vesselDisplacement, BinaryPredicate)
. domain(vesselDisplacement, a_1, Watercraft)
. domain(vesselDisplacement, a_2, PhysicalQuantity)
. subrelation(vesselDisplacement, measure)
%{vesselDisplacement
"(&%vesselDisplacement ?VESSEL ?AMOUNT) means that the displacement 
of &%Watercraft ?VESSEL is the &%PhysicalQuantity ?AMOUNT.  The 
displacement of a vessel may be measured in &%LongTons (Dead Weight 
Tonnage, or DWT) or by volume (Gross Registered Tonnage, or GRT)."}%
. instance(vesselDeadWeightTonnage, BinaryPredicate)
. domain(vesselDeadWeightTonnage, a_1, Watercraft)
. domain(vesselDeadWeightTonnage, a_2, MassMeasure)
. subrelation(vesselDeadWeightTonnage, vesselDisplacement)
%{vesselDeadWeightTonnage
"(&%vesselDeadWeightTonnage ?VESSEL ?AMOUNT) means that the 
&%Watercraft ?VESSEL has a carrying capacity when fully loaded of 
?AMOUNT in &%LongTons.  This is the Dead Weight Tonnage, or DWT, 
of the vessel, which is the total weight of cargo plus stores 
that the vessel can carry when immersed to the proper load line."}%
. instance(vesselGrossRegisteredTonnage, BinaryPredicate)
. domain(vesselGrossRegisteredTonnage, a_1, Watercraft)
. domain(vesselGrossRegisteredTonnage, a_2, PhysicalQuantity)
. subrelation(vesselGrossRegisteredTonnage, vesselDisplacement)
%{vesselGrossRegisteredTonnage
"(&%vesselGrossRegisteredTonnage ?VESSEL ?AMOUNT) means that the 
&%Watercraft ?VESSEL has a carrying capacity when fully loaded of 
?AMOUNT, where ?AMOUNT is the Gross Registered Tonnage (GRT) of the 
vessel, which is based on the total sheltered volume of the vessel 
measured in hundreds of cubic feet, and converted to gross tons 
at an equivalence of 100 cubic feet per ton."}%
. instance(LongTon, UnitOfMeasure)
. subclass(LongTon, MassMeasure)
. MeasureFn(a_1, LongTon) = MeasureFn(a_2_2_4_0, PoundMass)
%{LongTon
"&%LongTon is the &%UnitOfMeasure, 
equal to 2,240 &%PoundMass, which is used to measure Dead Weight 
Tonnage capacity of &%Ships."}%
. instance(CubicFoot, UnitOfMeasure)
. subclass(CubicFoot, VolumeMeasure)
. MeasureFn(a_1, CubicFoot) =
      MultiplicationFn(MeasureFn(a_1, Foot),
                       MultiplicationFn(MeasureFn(a_1, Foot),
                                        MeasureFn(a_1, Foot)))
%{CubicFoot
"&%CubicFoot is a unit for measuring volume, 
equal to a volume of one foot length in each dimension of length, width, 
and height."}%
. instance(RegistryTon, UnitOfMeasure)
. names(a_Quot_R_e_g_i_s_t_r_y_Space_T_o_n_Quot, RegistryTon)
. names(a_Quot_G_r_o_s_s_Space_T_o_n_Quot, RegistryTon)
. subclass(RegistryTon, MassMeasure)
. MeasureFn(a_1, RegistryTon) = MeasureFn(a_1_0_0, CubicFoot)
%{RegistryTon
"&%RegistryTon is a unit of measure used to 
represent the Gross Registered Tonnage (GRT) capacity of &%Ships.  
GRT is based on a volume measure, with one &%RegistryTon equal to a 
volume of 100 cubic feet."}%
. subclass(ShipDeck, Artifact)
%{ShipDeck
"&%ShipDeck is the class of decks on a ship, 
considered as spaces or &%Regions in which passengers and crew work, 
live, or ride, and/or in which machinery and cargo are stored on a 
&%Ship."}%
. instance(vDECK, ShipDeck) =>
      exists vSHIP: U . instance(vSHIP, Ship) /\ properPart(vDECK, vSHIP)
. subclass(ShipCompartment, Artifact)
%{ShipCompartment
"A &%ShipCompartment is any fully or 
partly bounded section of a &%Ship."}%
. instance(vCOMPARTMENT, ShipCabin) =>
      exists vSHIP: U
          . instance(vCOMPARTMENT, ShipCabin)
            /\ properPart(vCOMPARTMENT, vSHIP)
. subclass(ShipCabin, ShipCompartment)
%{ShipCabin
"&%ShipCabin is the subclass of all 
&%ShipCompartments for accommodating &%Humans aboard a ship."}%
. subclass(Aircraft, Vehicle)
%{Aircraft
"Any Vehicle which is capable of 
AirTransportation.  Note that this class covers both fixed-wing aircraft
and helicopters."}%
. subclass(Airplane, Aircraft)
. subclass(Airplane, PoweredVehicle)
%{Airplane
"&%Airplane is the subclass of &%Aircraft that 
are fixed-wing aircraft which carry their own power sources.  &%Airplane 
includes jet airplanes and propeller planes, but not gliders."}%
. subclass(PropellerPlane, Airplane)
. subclass(JetAirplane, Airplane)
. subclass(PropellerJet, Airplane)
. subclass(Rocket, Aircraft)
. subclass(GliderPlane, Aircraft)
. subclass(GliderPlane, UnpoweredVehicle)
. instance(trafficableForTrafficType, BinaryPredicate)
. domain(trafficableForTrafficType, a_1, Object)
. domainSubclass(trafficableForTrafficType, a_2,
                 SelfConnectedObject)
%{trafficableForTrafficType
"(&%trafficableForTrafficType ?WAY ?TYPE) means that &%Objects of ?TYPE 
can move along the &%Transitway ?WAY."}%
. trafficableForTrafficType(vPLACE, vTYPE)
  /\ subclass(vTYPE, TransportationDevice)
  /\ instance(vMOVER, vTYPE) =>
      capableAtLocation(Transportation, instrument, vMOVER, vPLACE)
. trafficableForTrafficType(vplace, vtype)
  /\ subclass(vtype, Agent)
  /\ instance(vmover, vtype) =>
      capableAtLocation(Translocation, agent, vmover, vplace)
. instance(vAIRPORT, Airport) =>
      trafficableForTrafficType(vAIRPORT, Airplane)
. instance(navigableForShippingTonnage, BinaryPredicate)
. domain(navigableForShippingTonnage, a_1, WaterArea)
. domain(navigableForShippingTonnage, a_2, PhysicalQuantity)
%{navigableForShippingTonnage
"(&%navigableForShippingTonnage ?WATERWAY ?TONNAGE) means that the 
&%Waterway ?WATERWAY can be transited by vessels up to the tonnage 
?TONNAGE (in Dead Weight Tonnage)."}%
. navigableForShippingTonnage(vWATERWAY,
                              MeasureFn(vTONNAGE, LongTon))
  /\ instance(vVESSEL, Watercraft)
  /\ vesselDisplacement(vVESSEL, MeasureFn(vDWT, LongTon))
  /\ lessThanOrEqualTo(vDWT, vTONNAGE) =>
      capability(TripFn(vVESSEL), path, vWATERWAY)
. instance(navigableForDraft, BinaryPredicate)
. domain(navigableForDraft, a_1, WaterArea)
. domain(navigableForDraft, a_2, LengthMeasure)
%{navigableForDraft
"(&%navigableForDraft ?WATERWAY ?DRAFT) means that the &%Waterway 
?WATERWAY can be transited by vessels up to the draft ?DRAFT."}%
. navigableForDraft(vWATERWAY, vAMOUNT)
  /\ ladenDraft(vSHIP, vDRAFT)
  /\ greaterThan(vAMOUNT, vDRAFT) =>
      capability(TripFn(vSHIP), path, vWATERWAY)
. navigableForDraft(vWATERWAY, vAMOUNT)
  /\ ladenDraft(vSHIP, vDRAFT)
  /\ lessThanOrEqualTo(vAMOUNT, vDRAFT) =>
      not capability(TripFn(vSHIP), path, vWATERWAY)
. instance(vWATERWAY, Waterway)
  /\ depth(vWATERWAY, MeasureFn(vDEPTH, vUNIT))
  /\ instance(vUNIT, UnitOfMeasure)
  /\ lessThan(vDRAFT, vDEPTH) =>
      navigableForDraft(vWATERWAY, MeasureFn(vDRAFT, vUNIT))
. instance(ladenDraft, BinaryPredicate)
. domain(ladenDraft, a_1, Watercraft)
. domain(ladenDraft, a_2, LengthMeasure)
%{ladenDraft
"(&%ladenDraft ?SHIP ?AMOUNT) means that 
the &%Watercraft ?SHIP requires a &%waterDepth of at least ?AMOUNT 
to sail without running aground, when she is loaded at capacity."}%
. instance(capableAtLocation, QuaternaryPredicate)
%{capableAtLocation
"(&%capableAtLocation ?TYPE ?ROLE ?OBJECT ?PLACE) means that ?OBJECT 
has the ability to play the &%CaseRole ?ROLE in &%Processes of 
?EVENTTYPE that occur at ?PLACE."}%
. domainSubclass(capableAtLocation, a_1, Process)
. domain(capableAtLocation, a_2, CaseRole)
. domain(capableAtLocation, a_3, Object)
. domain(capableAtLocation, a_4, Region)
. instance(vTYPE, Process)
  /\ instance(vEVENT, vTYPE)
  /\ located(vEVENT, vREGION)
  /\ instance(vROLE, CaseRole)
  /\ instance(vOBJECT, Object)
  /\ instance(vREGION, GeographicArea)
  /\ holds(vROLE, vEVENT, vOBJECT) =>
      capableAtLocation(vTYPE, vROLE, vOBJECT, vPLACE)
. subclass(PhysicalSystem, Physical)
%{PhysicalSystem
"&%PhysicalSystem is the class of complex 
&%Physical things.  A &%PhysicalSystem may have one or more 
corresponding abstract &%Graph representations."}%
. instance(subSystem, BinaryPredicate)
. domain(subSystem, a_1, PhysicalSystem)
. domain(subSystem, a_2, PhysicalSystem)
%{subSystem
"(&%subSystem ?SUB ?SYSTEM) means that the 
&%PhysicalSystem ?SUB is a part of the &%PhysicalSystem ?SYSTEM."}%
. instance(systemPart, BinaryPredicate)
. domain(systemPart, a_1, Physical)
. domain(systemPart, a_2, PhysicalSystem)
%{systemPart
"(&%systemPart ?PART ?SYSTEM) means that 
the &%Physical thing ?PART is a &%SystemElement in the &%PhysicalSystem 
?SYSTEM."}%
. subSystem(vSUB, vSYSTEM) /\ systemPart(vPART, vSUB) =>
      systemPart(vPART, vSYSTEM)
. subclass(SystemElement, Physical)
. subclass(SystemArc, SystemElement)
. subclass(SystemNode, SystemElement)
. instance(systemLink, TernaryPredicate)
. domain(systemLink, a_1, SystemNode)
. domain(systemLink, a_2, SystemNode)
. domain(systemLink, a_3, SystemArc)
%{systemLink
"(&%systemLink ?NODE1 ?NODE2 ?ARC) means 
that the &%SystemNodes ?NODE1 and ?NODE2 are linked by the &%SystemArc 
?ARC."}%
. systemLink(vNODE1, vNODE2, vARC) =>
      systemLink(vNODE2, vNODE1, vARC)
. systemLink(vNODE1, vNODE2, vARC) =>
      connects(vARC, vNODE1, vNODE2)
. connects(vARC, vNODE1, vNODE2) => connects(vARC, vNODE2, vNODE1)
. instance(SystemArcFn, BinaryFunction)
. domain(SystemArcFn, a_1, SystemNode)
. domain(SystemArcFn, a_2, SystemNode)
. range(SystemArcFn, SystemArc)
%{SystemArcFn
"(&%SystemArcFn ?NODE1 ?NODE2) denotes the 
&%SystemArc that links &%SystemNodes ?NODE1 and ?NODE2."}%
. instance(vNODE1, Physical)
  /\ instance(vNODE2, Physical)
  /\ instance(SystemArcFn(vNODE1, vNODE2), SystemArc) =>
      systemLink(vNODE1, vNODE2, SystemArcFn(vNODE1, vNODE2))
. subclass(TransportationSystem, PhysicalSystem)
%{TransportationSystem
"&%TransportationSystem is the 
subclass of &%PhysicalSystems in which the &%SystemArcs correspond to 
&%Transitways, and &%SystemNodes correspond to &%GeographicRegions or, 
more specifically, &%TransitTerminals."}%
. subclass(WaterTransportationSystem, TransportationSystem)
. instance(vSYSTEM, TransitSystem) /\ systemPart(vPART, vSYSTEM) =>
      instance(vPART, Transitway)
. subclass(CanalSystem, WaterTransportationSystem)
. subclass(TransitSystem, Region)
%{TransitSystem
"A &%TransitSystem is a system of 
interconnected &%Transitways over which some type(s) of vehicles or 
travellers may pass.  In addition to &%Transitways, &%TransitSystems 
may also include &%TransitJunctions and &%TransitTerminals.  Transit 
systems may be demarcated by where they are located (e.g., the rail 
system of &%Afghanistan), who owns or manages them (e.g., American 
Airlines &%TransitSystem of &%AirRoutes, or state highways managed by 
TexDOT), or the type of vehicles or travellers accommodated (e.g., 
the system of Santa Clara county bike trails."}%
. instance(vSYSTEM, TransitSystem) =>
      exists vROUTE: U
          . instance(vROUTE, Transitway) /\ part(vROUTE, vSYSTEM)
. subclass(UniModalTransitSystem, TransitSystem)
%{UniModalTransitSystem
"&%UniModalTransitSystem is 
the class of &%TransitSystems that accommodate a single type of 
transportation device or method."}%
. subclass(MultiModalTransitSystem, TransitSystem)
%{MultiModalTransitSystem
"&%MultiModalTransitSystem is 
the class of &%TransitSystems that accommodate more than one type of 
transportation device or method."}%
. instance(routeBetween, TernaryPredicate)
. domain(routeBetween, a_1, Transitway)
. domain(routeBetween, a_2, Region)
. domain(routeBetween, a_3, Region)
%{routeBetween
"(&%routeBetween ?ROUTE ?FROM ?TO) means 
that the &%Transitway ?ROUTE is a route between the place ?FROM and 
the place ?TO."}%
. subclass(TransitTerminal, StationaryArtifact)
%{TransitTerminal
"A &%TransitTerminal is a place where 
travellers or transportation devices begin or end their journeys, or 
where passengers and/or goods may be transferred.  At a terminal, 
&%TransportationDevices may be received, assigned, sent out, or 
stored."}%
. subclass(TrainStation, TransitTerminal)
. subclass(TerminalBuilding, Building)
%{TerminalBuilding
"A &%TerminalBuilding is a &%Building 
located at a &%TransitTerminal and used in connection with its 
functions."}%
. subclass(TransitStop, Region)
%{TransitStop
"&%TransitStop is the subclass of places 
where a vehicle of a scheduled or common carrier makes a stop to 
discharge or take on passengers or goods."}%
. subclass(TransitShelter, Artifact)
%{TransitShelter
"&%TransitShelter is the class of 
structures that provide shelter for passengers waiting at a 
&%TransitStop."}%
. subclass(HomeGarage, Building)
. subclass(ParkingGarage, Building)
. subclass(ShipBerth, WaterArea)
%{ShipBerth
"&%ShipBerth is the class of areas where 
a &%Ship may be moored, whether at an &%Anchorage or dock."}%
. instance(vHARBOR, Harbor)
  /\ equipmentCount(vHARBOR, ShipBerth, vNUM)
  /\ greaterThan(vNUM, a_0) =>
      capability(ShipBerthing, path, vHARBOR)
. instance(vPORT, PortFacility)
  /\ capability(ShipBerthing, patient, vPORT) =>
      exists vHARBOR: U
          . instance(vHARBOR, Harbor)
            /\ connected(vHARBOR, vPORT)
            /\ capability(ShipBerthing, path, vHARBOR)
. subclass(TransitwayJunction, Transitway)
. names(a_Quot_i_n_t_e_r_s_e_c_t_i_o_n_Quot, TransitwayJunction)
. names(a_Quot_j_u_n_c_t_i_o_n_Quot, TransitwayJunction)
%{TransitwayJunction
"&%TransitwayJunction is the class of 
regions where two or more &%Transitways meet and traffic may transfer 
from one transitway to another."}%
. subclass(RoadJunction, TransitwayJunction)
. subclass(RoadJunction, Roadway)
%{RoadJunction
"&%RoadJunction is the subclass of 
&%TransitwayJunctions where two or more &%Roadways come together."}%
. subclass(RailJunction, TransitwayJunction)
. subclass(RailJunction, Railway)
%{RailJunction
"&%RailJunction is the subclass of 
&%TransitwayJunctions where two or more &%Railway lines come together."}%
. subclass(WaterJunction, TransitwayJunction)
. subclass(WaterJunction, Waterway)
%{WaterJunction
"&%WaterJunction is the subclass of 
&%TransitwayJunctions where two or more &%Waterways come together."}%
. subclass(TransitRoute, Region)
%{TransitRoute
"&%TransitRoute is the class of 
&%Regions that are paths for &%Motion from one place to another."}%
. subclass(AirRoute, TransitRoute)
%{AirRoute
"An &%AirRoute is a region of air space that 
can be travelled between points by an air &%TransportationDevice."}%
. subclass(Trip, Motion)
%{Trip
"&%Trip is the subclass of &%Motions along a 
&%TransitRoute or &%Transitway."}%
. subclass(IntermodalTrip, Trip)
%{IntermodalTrip
"&%IntermodalTrip is the class of 
trips in which more than one mode (road, rail, sea, or air) of 
&%Transportation is used.  That is, there are at least two 
&%subProcesses of the trip that use different modes of 
&%TransportationDevice. "}%
. subclass(ShipBerthing, Translocation)
%{ShipBerthing
"&%ShipBerthing is the class of 
&%Translocation processes in which a vessel is brought to a 
mooring, at dockside or anchorage."}%
. instance(ShipBerthingFn, UnaryFunction)
. domain(ShipBerthingFn, a_1, Ship)
. rangeSubclass(ShipBerthingFn, ShipBerthing)
%{ShipBerthingFn
"(ShipBerthingFn ?SHIP) denotes the 
class of &%ShipBerthings of an individual &%Watercraft ?SHIP."}%
. instance(transitwayCapacityCount, TernaryPredicate)
. domain(transitwayCapacityCount, a_1, Transitway)
. domainSubclass(transitwayCapacityCount, a_2, SelfConnectedObject)
. domain(transitwayCapacityCount, a_3, NonnegativeInteger)
%{transitwayCapacityCount
"(&%transitwayCapacityCount ?WAY ?TYPE ?NUMBER) means that the 
&%Transitway ?WAY can accommodate a maximum of ?NUMBER items of ?TYPE 
at any one time."}%
. instance(transitwayCapacityRate, TernaryPredicate)
. domain(transitwayCapacityRate, a_1, Transitway)
. domainSubclass(transitwayCapacityRate, a_2, SelfConnectedObject)
. domain(transitwayCapacityRate, a_3, FunctionQuantity)
%{transitwayCapacityRate
"(&%transitwayCapacityRate ?WAY ?TYPE ?RATE) means that the 
&%Transitway WAY can transit items of ?TYPE at the maximum 
&%FunctionQuantity ?RATE.  For example, 
(&%transitwayCapacityRate &%SFBayBridgeWestbound &%Automobile 500)."}%
. subclass(TransitwayObstacle, Object)
%{TransitwayObstacle
"&%TransitwayObstacle is the general 
class of &%Objects that can act as obstacles to &%Motion along a 
&%Transitway."}%
. subclass(Dam, TransitwayObstacle)
. subclass(Door, TransitwayObstacle)
. subclass(Door, Device)
. subclass(CanalLockGate, TransitwayObstacle)
. subclass(CanalLockGate, Device)
. subclass(TrafficLight, Device)
. subclass(TollBooth, Building)
. subclass(TransportationAuthority, Organization)
%{TransportationAuthority
"&%TransportationAuthority is the class of &%Organizations that are 
responsible for one or more systems of transportation, usually within 
a particular &%GeopoliticalArea."}%
. subclass(VehicleRegistration, ContentBearingObject)
%{VehicleRegistration
"&%VehicleRegistration is the class 
of official documents containing information about a vehicle's ownership 
and identifying characteristics, as required by the appropriate authority 
for the type and location of individual vehicles."}%
. subclass(CommonCarrier, TransportationCompany)
%{CommonCarrier
"&%CommonCarrier is the subclass of 
&%TransportationCompany whose instances must offer services to all 
customers.  Contrast with &%ContractCarrier."}%
. subclass(ContractCarrier, TransportationCompany)
%{ContractCarrier
"&%ContractCarrier is the subclass of 
&%TransportationCompany whose instances offer services to only one  
customer, under contract.  Contrast with &%CommonCarrier."}%
. disjoint(CommonCarrier, ContractCarrier)
. subclass(ClassIRailroad, RailroadCompany)
%{ClassIRailroad
"&%ClassIRailroad is the 
subclass of &%RailroadCompany whose instances have an 
average annual gross revenue above $256.4 million 
&%UnitedStatesDollars."}%
. subclass(ClassIIRailroad, RailroadCompany)
%{ClassIIRailroad
"&%ClassIIRailroad is the 
subclass of &%RailroadCompany whose instances have an 
average annual gross revenue between $20.5 and $256.4 million 
&%UnitedStatesDollars."}%
. subclass(ClassIIIRailroad, RailroadCompany)
%{ClassIIIRailroad
"&%ClassIIIRailroad is the 
subclass of &%RailroadCompany whose instances have an 
average annual gross revenue below $20.5 million 
&%UnitedStatesDollars."}%
. instance(subordinateInOrganization, TernaryPredicate)
. domain(subordinateInOrganization, a_1, Organization)
. domain(subordinateInOrganization, a_2, Human)
. domain(subordinateInOrganization, a_3, Human)
%{subordinateInOrganization
"(&%subordinateInOrganization ?ORG ?PERSON1 ?PERSON2) means that 
in the &%Organization ?ORG, ?PERSON1 is subordinate to ?PERSON2."}%
. subordinateInOrganization(vORG, vPERSON1, vPERSON2) =>
      employs(vORG, vPERSON1)
. subordinateInOrganization(vORG, vPERSON1, vPERSON2) =>
      employs(vORG, vPERSON2)
. instance(subordinatePosition, TernaryPredicate)
. domain(subordinatePosition, a_1, Organization)
. domain(subordinatePosition, a_2, Position)
. domain(subordinatePosition, a_3, Position)
%{subordinatePosition
"(&%subordinatePosition ?agent1 ?agent2 ?organization) means that in 
the &%Organization ?ORG, the holder of role ?SUB is subordinate to 
the holder of role ?SUPER."}%
. subordinatePosition(vORG, vROLE1, vROLE2)
  /\ occupiesPosition(vPERSON1, vROLE1, vORG) =>
      exists vROLE2: U; vPERSON2: U
          . instance(vPERSON2, Human)
            /\ occupiesPosition(vPERSON2, vROLE2, vORG)
            /\ subordinateInOrganization(vORG, vPERSON1, vPERSON2)
. instance(operator, BinaryPredicate)
. instance(operator, AsymmetricRelation)
. instance(operator, IrreflexiveRelation)
. domain(operator, a_1, Object)
. domain(operator, a_2, Agent)
%{operator
"(&%operator ?OBJECT ?AGENT) means that ?AGENT 
determines how ?OBJECT is used, either by directly or indirectly operating 
it."}%
. instance(passengerCapacityMaxNumber, BinaryPredicate)
. domain(passengerCapacityMaxNumber, a_1, TransportationDevice)
. domain(passengerCapacityMaxNumber, a_2, Number)
%{passengerCapacityMaxNumber
"(&%passengerCapacityMaxNumber ?TRANSPORT ?NUMBER) means that the 
&%TransportationDevice ?TRANSPORT has a safe carrying capacity for ?NUMBER 
of passengers."}%
. subclass(ShipCrew, Organization)
%{ShipCrew
"A &%ShipCrew is an &%Organization of people 
who operate a &%Ship, &%Plane, &%Train, or other transportation vehicle."}%
. instance(ShipCrewFn, UnaryFunction)
%{ShipCrewFn
"(&%ShipCrewFn ?BOAT) denotes the 
&%Organization consisting of the people charged with operating 
the &%Watercraft ?BOAT."}%
. domain(ShipCrewFn, a_1, Watercraft)
. range(ShipCrewFn, a_2, Group)
. instance(ShipCaptain, Position)
. instance(FirstMate, Position)
. instance(ChiefSteward, Position)
. instance(RadioOperator, Position)
. attribute(vPERSON, RadioOperator) =>
      hasSkill(vPERSON, OperatingFn(CommunicationRadio))
. instance(OperatingFn, UnaryFunction)
%{OperatingFn
"(&%OperatingFn ?DEVICE) denotes the class 
of events in which a &%Device of type ?device is operated."}%
. domain(OperatingFn, a_1, Device)
. rangeSubclass(OperatingFn, Process)

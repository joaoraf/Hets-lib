library Refinement/RefinementExamples

spec Monoid =sort Elem

ops 0 : Elem;__+__ : Elem * Elem -> Elem

, assoc, unit 0

spec NatWithSuc =

free type Nat ::= 0 | suc(Nat)
op __+__ : Nat * Nat -> Nat

, unit 0 forall x , y : Nat . x + suc(y) = suc(x + y)
op 1:Nat = suc(0)

spec Nat =

NatWithSuc hide suc
end

%[refinement R1 =

Monoid refined via Elem |-> Nat to Nat]%

spec NatBin =generated type Bin ::= 0 | 1 | __0(Bin) | __1(Bin)

ops __+__ , __++__ : Bin * Bin -> Bin forall x

, y : Bin .  0 0 = 0  .  0 1 = 1

 .  not  (0 = 1)  .  x 0 = y 0 => x = y .  not  (x 0 = y 1)  .  x 1 = y 1 => x = y

 .  0 + 0 = 0  .  0 ++ 0 = 1 .  x 0 + y 0 = (x + y) 0  .  x 0 ++ y 0 = (x + y) 1

 .  x 0 + y 1 = (x + y) 1  .  x 0 ++ y 1 = (x ++ y) 0 .  x 1 + y 0 = (x + y) 1  .  x 1 ++ y 0 = (x ++ y) 0

 .  x 1 + y 1 = (x ++ y) 0  .  x 1 ++ y 1 = (x ++ y) 1 


refinement R2 =

Nat refined via Nat |-> Bin to NatBin

%[refinement R3 =

Monoid refined via Elem |-> Nat to

Nat refined via Nat |-> Bin to NatBin

refinement R3' =

Monoid refined via Elem |-> Nat to R2

refinement R3'' =

Monoid refined via Elem |-> Nat to Nat then R2

refinement R3''' = R1 then R2 ]%

arch spec Addition_First = units N :

Nat;M : {

op suc(n : Nat) : Nat = n + 1 } given N result  M



%[arch spec Addition_First_Generic = 
units N :Nat;
F : Nat -> { op suc(n : Nat) : Nat = n + 1 };M = F [N ]
result lambda X : Nat . F[X]
]%

refinement R4' = NatWithSuc then arch spec Addition_First

%%refinement R4 =

%%NatWithSuc refined to arch spec Addition_First

%[arch spec Addition_First_With_Bin = units N :

Nat refined via Nat |-> Bin to NatBin  ;F : Nat -> { op suc(n : Nat) : Nat = n + 1 };M = F [N ]

result M

arch spec Addition_First_With_Bin' =

units N : R2;F :

Nat -> { op suc(n : Nat) : Nat = n + 1 };M = F [N ]

result M]%

refinement RI = {N to R2}

refinement R = R4' then RI

%[refinement R5' =SP]%

%[refined to arch spec { units K : SP' -> SP;]%

%[A' : SP' result K [A']} then  {K to USP ,A' to arch spec { units K' : SP'' -> SP';]%

%[A'' : SP'' result K'[A'']} then  {K' to USP'}}]%


%[refinement R5'' =SP]%


%[refined to arch spec {units K : SP' -> SP; A' : SP' result K [A']} ]%
%[    then  {K to USP ,A' to arch spec ]%
%[    {units K' : SP'' -> SP'; A'' : SP'' result K'[A'']}}]%
%[    then  {A' to {K' to USP'}}]%



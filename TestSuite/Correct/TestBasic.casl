library TestBasic

%% provided by Till Mossakowski

%% This really tries to test everything that is there
%% in the syntax of basic specs
%% Some pieces not going through cats yet are commented out
%% Note that baffle cannot handle all characters,
%% hence the -output=nobin option should be used

%% Global annotations

%display __+__ %LATEX __+__
%[ This Annotation contains a malformed Id,
   because "to" is a keyword...
%display( sum__to__
          %HTML sum<sub>__<sup>__
          %LATEX \sum_{__}^{__}
          %RTF sum
        )%
]%
%display( sum__To__
          %HTML sum<sub>__<sup>__
          %LATEX \sum_{__}^{__}
        )%

%prec {__+__,__-__} < {__*__}
%prec( {__+__,__-__}
          <
       {__/__, __quot__}
     )%
%prec {__a__} <> {__b__}

%prec {__exp__,__frac__} < {__@@__}
%prec {__exp__} < {__frac__}

%left_assoc __@@__

%left_assoc __+__, __-__
%left_assoc( __*__,
             __/__
           )%
%right_assoc __apply__, __blah__
%right_assoc( __c__,
              __d__)%

%number __@@__
%floating __frac__, __exp__
%string nil, consS
%list [__], null, cons

%% Label anotations

spec sp =
  . true %(The true formula)%
  . true %(and this
           also goes
           along several lines!
           and with special stuff: -*/\&=<>ÓÔÕÖØÙÚÛÜÝßàáâBCDEFGHIJKLM!% )%
end

%% Comments

%{ This
   is a
   multiline comment } %
   ending here
}%

%[ This
   is a
   comment out ] %
   ending here
]%

%% Lexical syntax

spec Lex =
  sorts s,
        abcdefghijlklmnopqrstuvwxyz,
        ABCDEFGHIJKLMONOPQRSTUVWXYZ,
        x0123456789,
        ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïñòóôõöøùúûüýÿ,
        abc, a_b_c, ab2, ab_2_3_a, a', a'b''2        %[WORDS]%
        %[.abc, .a_b_c, .ab2, .ab_2_3_a, .a', .a'b''2,  DOT-WORDS]%
  op    __+-*/\&=<>!?:.$@#^~¡¿×÷£©±¶§¹²³·¢¬°|__ : s*s->s          %% NO-BRACKET-SIGNs
  ops 'a','"','\\','\n','\000','\255',
      '\x00','\xFF','\o000','\o377',
      '^','1','2','3','4','5','6','7','8','9','0',
      'ß','!','§','$','&','/','(',')','=','?','\\' : s;    %%characters
  %[. def "^1234567890ß!§$&/()=?"; ]%
        %[ strings ´°%\\\" does not work yet!]%
  ops 1,2,3,4 : s;
      -__ : s->s;
      __@@__,__exp__,__frac__ : s*s->s;
  . def 12 . def 12E34 . def 12E-34 . def 12.34  %%numbers
  . def 12.34E34 . def 12.34E-34 %%fractions
end

spec Keyword' =
     sort s;
%%     op __and'__:s
end

%% Signatures

spec Sorts =
     sort a;
     sorts a,b,c;
     sort a<b;
     sorts a,b,c,d < e;
     sorts a=b=c=d=e;
     sort a = {x:b . true}
end

spec Ops =
     sorts s,t;
     op a:s;
     op b:s->s;
     ops c:s*s->s, assoc, comm, idem, unit a;
         c:s*s*s->s;
     op a: ?s;    %[ Should be:  op a:?s ]%
     op a:?s;    %[ Should be:  op a:?s ]%
     op b:s->?s;
     op c:s*s->?s, assoc, comm, idem, unit a;
     op c:s*s*s->?s;
     op a:s=a;
     op c(x,y:s;z:t):s = a;
     op a:?s=a;
     op c(x,y:s;z:t):?s = a;
     op a: ?s=a;
     op c(x,y:s;z:t): ?s = a;
end

spec Preds =
     sorts s,t;
     pred a:();
     pred b:s;
     preds c:s*s;
           c:s*s*s;
     %[pred a:()<=> true;
     pred c(x,y:s;z:t)<=>false;
     pred a: () <=> true; ]%
     pred c(x,y:s;z:t) <=> false;
end

spec Datatypes =
     type Data1 ::= a | b | c;
     type Data2 ::= Cons21 (Data1; Data2) | Cons22(Data2; Data1) | sort Data1
     type Data3 ::= Cons31 (sel1:?Data1; sel2:?Data2) | Cons32(sel2:?Data2; sel1:?Data1)
     type Data4 ::= Cons41 (sel1:?Data1; sel2:?Data2)? | Cons42(sel2:?Data2; sel1:?Data1)?
                    sorts Data1, Data2, Data3
     types Tree ::= Leaf (Data1) | Forest;
           Forest ::= Nil | Cons (Tree;Forest)
     free type List ::= Nil | Cons(Data1; List)
     generated type Set ::= Mt | Add(Data1; Set)
     generated {type Set ::= Mt | Add(Data1; Set)}
     generated {sort nat; ops 0:nat; succ:nat->nat; }
end


%% Formulas and terms

spec Formulas =
  sorts s<t
  ops f,g:s->?s;
      g:s->t;
      __+__,__-__,__*__,__/__ : s*s->s;
      {}:s;
      {__} : s->s
  preds p:(); q:s
  vars x,y,z:s; r1,r2:t
  . false
  forall x:s . true
  . not p /\ not q(x) /\ q(x)
  . not p \/ not q(x) \/ q(x)
  . not p /\ not q(x) /\ q(x) => not p \/ not q(x) \/ q(x) =>  not p /\ not q(x) /\ q(x)
  . not p /\ not q(x) /\ q(x) if not p \/ not q(x) \/ q(x) if  not p /\ not q(x) /\ q(x)
  %[. not p /\ not q(x) /\ q(x) <=> not p \/ not q(x) \/ q(x) <=>  not p /\ not q(x) /\ q(x)]%
  forall x:s . not p /\ not q(x) /\ q(x)
    <=> exists x:s . not p \/ not q(x) \/ q(x) <=> exists! x:s . not p /\ not q(x) /\ q(x)
  . def f(x)
  . f(x) =e= g(x)
  . f(x) = g(x)
  . r1 in s
  . def g(x):t
  . def g(x) as s
  . def (op f:s->?s)(x)  %[ (var x:s)  ]%
  . def (op g:s->t)(x)
  . (pred p:())
  . (pred q:s)(x)
  . def x*y*z+z*y*x
  . def {}
  . def {x}
end
